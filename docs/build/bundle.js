
(function(l, r) { if (!l || l.getElementById('livereloadscript')) return; r = l.createElement('script'); r.async = 1; r.src = '//' + (self.location.host || 'localhost').split(':')[0] + ':35729/livereload.js?snipver=1'; r.id = 'livereloadscript'; l.getElementsByTagName('head')[0].appendChild(r) })(self.document);
var app = (function () {
    'use strict';

    function noop() { }
    function assign(tar, src) {
        // @ts-ignore
        for (const k in src)
            tar[k] = src[k];
        return tar;
    }
    function add_location(element, file, line, column, char) {
        element.__svelte_meta = {
            loc: { file, line, column, char }
        };
    }
    function run(fn) {
        return fn();
    }
    function blank_object() {
        return Object.create(null);
    }
    function run_all(fns) {
        fns.forEach(run);
    }
    function is_function(thing) {
        return typeof thing === 'function';
    }
    function safe_not_equal(a, b) {
        return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');
    }
    let src_url_equal_anchor;
    function src_url_equal(element_src, url) {
        if (!src_url_equal_anchor) {
            src_url_equal_anchor = document.createElement('a');
        }
        src_url_equal_anchor.href = url;
        return element_src === src_url_equal_anchor.href;
    }
    function is_empty(obj) {
        return Object.keys(obj).length === 0;
    }
    function validate_store(store, name) {
        if (store != null && typeof store.subscribe !== 'function') {
            throw new Error(`'${name}' is not a store with a 'subscribe' method`);
        }
    }
    function subscribe(store, ...callbacks) {
        if (store == null) {
            return noop;
        }
        const unsub = store.subscribe(...callbacks);
        return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;
    }
    function component_subscribe(component, store, callback) {
        component.$$.on_destroy.push(subscribe(store, callback));
    }
    function create_slot(definition, ctx, $$scope, fn) {
        if (definition) {
            const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);
            return definition[0](slot_ctx);
        }
    }
    function get_slot_context(definition, ctx, $$scope, fn) {
        return definition[1] && fn
            ? assign($$scope.ctx.slice(), definition[1](fn(ctx)))
            : $$scope.ctx;
    }
    function get_slot_changes(definition, $$scope, dirty, fn) {
        if (definition[2] && fn) {
            const lets = definition[2](fn(dirty));
            if ($$scope.dirty === undefined) {
                return lets;
            }
            if (typeof lets === 'object') {
                const merged = [];
                const len = Math.max($$scope.dirty.length, lets.length);
                for (let i = 0; i < len; i += 1) {
                    merged[i] = $$scope.dirty[i] | lets[i];
                }
                return merged;
            }
            return $$scope.dirty | lets;
        }
        return $$scope.dirty;
    }
    function update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn) {
        if (slot_changes) {
            const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);
            slot.p(slot_context, slot_changes);
        }
    }
    function get_all_dirty_from_scope($$scope) {
        if ($$scope.ctx.length > 32) {
            const dirty = [];
            const length = $$scope.ctx.length / 32;
            for (let i = 0; i < length; i++) {
                dirty[i] = -1;
            }
            return dirty;
        }
        return -1;
    }
    function exclude_internal_props(props) {
        const result = {};
        for (const k in props)
            if (k[0] !== '$')
                result[k] = props[k];
        return result;
    }
    function compute_slots(slots) {
        const result = {};
        for (const key in slots) {
            result[key] = true;
        }
        return result;
    }
    function set_store_value(store, ret, value) {
        store.set(value);
        return ret;
    }
    function action_destroyer(action_result) {
        return action_result && is_function(action_result.destroy) ? action_result.destroy : noop;
    }
    function append(target, node) {
        target.appendChild(node);
    }
    function insert(target, node, anchor) {
        target.insertBefore(node, anchor || null);
    }
    function detach(node) {
        node.parentNode.removeChild(node);
    }
    function destroy_each(iterations, detaching) {
        for (let i = 0; i < iterations.length; i += 1) {
            if (iterations[i])
                iterations[i].d(detaching);
        }
    }
    function element(name) {
        return document.createElement(name);
    }
    function svg_element(name) {
        return document.createElementNS('http://www.w3.org/2000/svg', name);
    }
    function text(data) {
        return document.createTextNode(data);
    }
    function space() {
        return text(' ');
    }
    function empty() {
        return text('');
    }
    function listen(node, event, handler, options) {
        node.addEventListener(event, handler, options);
        return () => node.removeEventListener(event, handler, options);
    }
    function attr(node, attribute, value) {
        if (value == null)
            node.removeAttribute(attribute);
        else if (node.getAttribute(attribute) !== value)
            node.setAttribute(attribute, value);
    }
    function set_attributes(node, attributes) {
        // @ts-ignore
        const descriptors = Object.getOwnPropertyDescriptors(node.__proto__);
        for (const key in attributes) {
            if (attributes[key] == null) {
                node.removeAttribute(key);
            }
            else if (key === 'style') {
                node.style.cssText = attributes[key];
            }
            else if (key === '__value') {
                node.value = node[key] = attributes[key];
            }
            else if (descriptors[key] && descriptors[key].set) {
                node[key] = attributes[key];
            }
            else {
                attr(node, key, attributes[key]);
            }
        }
    }
    function set_svg_attributes(node, attributes) {
        for (const key in attributes) {
            attr(node, key, attributes[key]);
        }
    }
    function children(element) {
        return Array.from(element.childNodes);
    }
    function set_style(node, key, value, important) {
        node.style.setProperty(key, value, important ? 'important' : '');
    }
    function toggle_class(element, name, toggle) {
        element.classList[toggle ? 'add' : 'remove'](name);
    }
    function custom_event(type, detail, bubbles = false) {
        const e = document.createEvent('CustomEvent');
        e.initCustomEvent(type, bubbles, false, detail);
        return e;
    }
    class HtmlTag {
        constructor() {
            this.e = this.n = null;
        }
        c(html) {
            this.h(html);
        }
        m(html, target, anchor = null) {
            if (!this.e) {
                this.e = element(target.nodeName);
                this.t = target;
                this.c(html);
            }
            this.i(anchor);
        }
        h(html) {
            this.e.innerHTML = html;
            this.n = Array.from(this.e.childNodes);
        }
        i(anchor) {
            for (let i = 0; i < this.n.length; i += 1) {
                insert(this.t, this.n[i], anchor);
            }
        }
        p(html) {
            this.d();
            this.h(html);
            this.i(this.a);
        }
        d() {
            this.n.forEach(detach);
        }
    }

    let current_component;
    function set_current_component(component) {
        current_component = component;
    }
    function get_current_component() {
        if (!current_component)
            throw new Error('Function called outside component initialization');
        return current_component;
    }
    function onMount(fn) {
        get_current_component().$$.on_mount.push(fn);
    }
    function afterUpdate(fn) {
        get_current_component().$$.after_update.push(fn);
    }
    function onDestroy(fn) {
        get_current_component().$$.on_destroy.push(fn);
    }
    function createEventDispatcher() {
        const component = get_current_component();
        return (type, detail) => {
            const callbacks = component.$$.callbacks[type];
            if (callbacks) {
                // TODO are there situations where events could be dispatched
                // in a server (non-DOM) environment?
                const event = custom_event(type, detail);
                callbacks.slice().forEach(fn => {
                    fn.call(component, event);
                });
            }
        };
    }
    function setContext(key, context) {
        get_current_component().$$.context.set(key, context);
    }
    function getContext(key) {
        return get_current_component().$$.context.get(key);
    }
    // TODO figure out if we still want to support
    // shorthand events, or if we want to implement
    // a real bubbling mechanism
    function bubble(component, event) {
        const callbacks = component.$$.callbacks[event.type];
        if (callbacks) {
            // @ts-ignore
            callbacks.slice().forEach(fn => fn.call(this, event));
        }
    }

    const dirty_components = [];
    const binding_callbacks = [];
    const render_callbacks = [];
    const flush_callbacks = [];
    const resolved_promise = Promise.resolve();
    let update_scheduled = false;
    function schedule_update() {
        if (!update_scheduled) {
            update_scheduled = true;
            resolved_promise.then(flush);
        }
    }
    function tick() {
        schedule_update();
        return resolved_promise;
    }
    function add_render_callback(fn) {
        render_callbacks.push(fn);
    }
    function add_flush_callback(fn) {
        flush_callbacks.push(fn);
    }
    let flushing = false;
    const seen_callbacks = new Set();
    function flush() {
        if (flushing)
            return;
        flushing = true;
        do {
            // first, call beforeUpdate functions
            // and update components
            for (let i = 0; i < dirty_components.length; i += 1) {
                const component = dirty_components[i];
                set_current_component(component);
                update(component.$$);
            }
            set_current_component(null);
            dirty_components.length = 0;
            while (binding_callbacks.length)
                binding_callbacks.pop()();
            // then, once components are updated, call
            // afterUpdate functions. This may cause
            // subsequent updates...
            for (let i = 0; i < render_callbacks.length; i += 1) {
                const callback = render_callbacks[i];
                if (!seen_callbacks.has(callback)) {
                    // ...so guard against infinite loops
                    seen_callbacks.add(callback);
                    callback();
                }
            }
            render_callbacks.length = 0;
        } while (dirty_components.length);
        while (flush_callbacks.length) {
            flush_callbacks.pop()();
        }
        update_scheduled = false;
        flushing = false;
        seen_callbacks.clear();
    }
    function update($$) {
        if ($$.fragment !== null) {
            $$.update();
            run_all($$.before_update);
            const dirty = $$.dirty;
            $$.dirty = [-1];
            $$.fragment && $$.fragment.p($$.ctx, dirty);
            $$.after_update.forEach(add_render_callback);
        }
    }
    const outroing = new Set();
    let outros;
    function group_outros() {
        outros = {
            r: 0,
            c: [],
            p: outros // parent group
        };
    }
    function check_outros() {
        if (!outros.r) {
            run_all(outros.c);
        }
        outros = outros.p;
    }
    function transition_in(block, local) {
        if (block && block.i) {
            outroing.delete(block);
            block.i(local);
        }
    }
    function transition_out(block, local, detach, callback) {
        if (block && block.o) {
            if (outroing.has(block))
                return;
            outroing.add(block);
            outros.c.push(() => {
                outroing.delete(block);
                if (callback) {
                    if (detach)
                        block.d(1);
                    callback();
                }
            });
            block.o(local);
        }
    }

    const globals = (typeof window !== 'undefined'
        ? window
        : typeof globalThis !== 'undefined'
            ? globalThis
            : global);

    function get_spread_update(levels, updates) {
        const update = {};
        const to_null_out = {};
        const accounted_for = { $$scope: 1 };
        let i = levels.length;
        while (i--) {
            const o = levels[i];
            const n = updates[i];
            if (n) {
                for (const key in o) {
                    if (!(key in n))
                        to_null_out[key] = 1;
                }
                for (const key in n) {
                    if (!accounted_for[key]) {
                        update[key] = n[key];
                        accounted_for[key] = 1;
                    }
                }
                levels[i] = n;
            }
            else {
                for (const key in o) {
                    accounted_for[key] = 1;
                }
            }
        }
        for (const key in to_null_out) {
            if (!(key in update))
                update[key] = undefined;
        }
        return update;
    }
    function get_spread_object(spread_props) {
        return typeof spread_props === 'object' && spread_props !== null ? spread_props : {};
    }

    function bind(component, name, callback) {
        const index = component.$$.props[name];
        if (index !== undefined) {
            component.$$.bound[index] = callback;
            callback(component.$$.ctx[index]);
        }
    }
    function create_component(block) {
        block && block.c();
    }
    function mount_component(component, target, anchor, customElement) {
        const { fragment, on_mount, on_destroy, after_update } = component.$$;
        fragment && fragment.m(target, anchor);
        if (!customElement) {
            // onMount happens before the initial afterUpdate
            add_render_callback(() => {
                const new_on_destroy = on_mount.map(run).filter(is_function);
                if (on_destroy) {
                    on_destroy.push(...new_on_destroy);
                }
                else {
                    // Edge case - component was destroyed immediately,
                    // most likely as a result of a binding initialising
                    run_all(new_on_destroy);
                }
                component.$$.on_mount = [];
            });
        }
        after_update.forEach(add_render_callback);
    }
    function destroy_component(component, detaching) {
        const $$ = component.$$;
        if ($$.fragment !== null) {
            run_all($$.on_destroy);
            $$.fragment && $$.fragment.d(detaching);
            // TODO null out other refs, including component.$$ (but need to
            // preserve final state?)
            $$.on_destroy = $$.fragment = null;
            $$.ctx = [];
        }
    }
    function make_dirty(component, i) {
        if (component.$$.dirty[0] === -1) {
            dirty_components.push(component);
            schedule_update();
            component.$$.dirty.fill(0);
        }
        component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));
    }
    function init(component, options, instance, create_fragment, not_equal, props, append_styles, dirty = [-1]) {
        const parent_component = current_component;
        set_current_component(component);
        const $$ = component.$$ = {
            fragment: null,
            ctx: null,
            // state
            props,
            update: noop,
            not_equal,
            bound: blank_object(),
            // lifecycle
            on_mount: [],
            on_destroy: [],
            on_disconnect: [],
            before_update: [],
            after_update: [],
            context: new Map(parent_component ? parent_component.$$.context : options.context || []),
            // everything else
            callbacks: blank_object(),
            dirty,
            skip_bound: false,
            root: options.target || parent_component.$$.root
        };
        append_styles && append_styles($$.root);
        let ready = false;
        $$.ctx = instance
            ? instance(component, options.props || {}, (i, ret, ...rest) => {
                const value = rest.length ? rest[0] : ret;
                if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {
                    if (!$$.skip_bound && $$.bound[i])
                        $$.bound[i](value);
                    if (ready)
                        make_dirty(component, i);
                }
                return ret;
            })
            : [];
        $$.update();
        ready = true;
        run_all($$.before_update);
        // `false` as a special case of no DOM component
        $$.fragment = create_fragment ? create_fragment($$.ctx) : false;
        if (options.target) {
            if (options.hydrate) {
                const nodes = children(options.target);
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                $$.fragment && $$.fragment.l(nodes);
                nodes.forEach(detach);
            }
            else {
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                $$.fragment && $$.fragment.c();
            }
            if (options.intro)
                transition_in(component.$$.fragment);
            mount_component(component, options.target, options.anchor, options.customElement);
            flush();
        }
        set_current_component(parent_component);
    }
    /**
     * Base class for Svelte components. Used when dev=false.
     */
    class SvelteComponent {
        $destroy() {
            destroy_component(this, 1);
            this.$destroy = noop;
        }
        $on(type, callback) {
            const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));
            callbacks.push(callback);
            return () => {
                const index = callbacks.indexOf(callback);
                if (index !== -1)
                    callbacks.splice(index, 1);
            };
        }
        $set($$props) {
            if (this.$$set && !is_empty($$props)) {
                this.$$.skip_bound = true;
                this.$$set($$props);
                this.$$.skip_bound = false;
            }
        }
    }

    function dispatch_dev(type, detail) {
        document.dispatchEvent(custom_event(type, Object.assign({ version: '3.42.1' }, detail), true));
    }
    function append_dev(target, node) {
        dispatch_dev('SvelteDOMInsert', { target, node });
        append(target, node);
    }
    function insert_dev(target, node, anchor) {
        dispatch_dev('SvelteDOMInsert', { target, node, anchor });
        insert(target, node, anchor);
    }
    function detach_dev(node) {
        dispatch_dev('SvelteDOMRemove', { node });
        detach(node);
    }
    function listen_dev(node, event, handler, options, has_prevent_default, has_stop_propagation) {
        const modifiers = options === true ? ['capture'] : options ? Array.from(Object.keys(options)) : [];
        if (has_prevent_default)
            modifiers.push('preventDefault');
        if (has_stop_propagation)
            modifiers.push('stopPropagation');
        dispatch_dev('SvelteDOMAddEventListener', { node, event, handler, modifiers });
        const dispose = listen(node, event, handler, options);
        return () => {
            dispatch_dev('SvelteDOMRemoveEventListener', { node, event, handler, modifiers });
            dispose();
        };
    }
    function attr_dev(node, attribute, value) {
        attr(node, attribute, value);
        if (value == null)
            dispatch_dev('SvelteDOMRemoveAttribute', { node, attribute });
        else
            dispatch_dev('SvelteDOMSetAttribute', { node, attribute, value });
    }
    function prop_dev(node, property, value) {
        node[property] = value;
        dispatch_dev('SvelteDOMSetProperty', { node, property, value });
    }
    function set_data_dev(text, data) {
        data = '' + data;
        if (text.wholeText === data)
            return;
        dispatch_dev('SvelteDOMSetData', { node: text, data });
        text.data = data;
    }
    function validate_each_argument(arg) {
        if (typeof arg !== 'string' && !(arg && typeof arg === 'object' && 'length' in arg)) {
            let msg = '{#each} only iterates over array-like objects.';
            if (typeof Symbol === 'function' && arg && Symbol.iterator in arg) {
                msg += ' You can use a spread to convert this iterable into an array.';
            }
            throw new Error(msg);
        }
    }
    function validate_slots(name, slot, keys) {
        for (const slot_key of Object.keys(slot)) {
            if (!~keys.indexOf(slot_key)) {
                console.warn(`<${name}> received an unexpected slot "${slot_key}".`);
            }
        }
    }
    /**
     * Base class for Svelte components with some minor dev-enhancements. Used when dev=true.
     */
    class SvelteComponentDev extends SvelteComponent {
        constructor(options) {
            if (!options || (!options.target && !options.$$inline)) {
                throw new Error("'target' is a required option");
            }
            super();
        }
        $destroy() {
            super.$destroy();
            this.$destroy = () => {
                console.warn('Component was already destroyed'); // eslint-disable-line no-console
            };
        }
        $capture_state() { }
        $inject_state() { }
    }

    /**
     * @typedef {Object} WrappedComponent Object returned by the `wrap` method
     * @property {SvelteComponent} component - Component to load (this is always asynchronous)
     * @property {RoutePrecondition[]} [conditions] - Route pre-conditions to validate
     * @property {Object} [props] - Optional dictionary of static props
     * @property {Object} [userData] - Optional user data dictionary
     * @property {bool} _sveltesparouter - Internal flag; always set to true
     */

    /**
     * @callback AsyncSvelteComponent
     * @returns {Promise<SvelteComponent>} Returns a Promise that resolves with a Svelte component
     */

    /**
     * @callback RoutePrecondition
     * @param {RouteDetail} detail - Route detail object
     * @returns {boolean|Promise<boolean>} If the callback returns a false-y value, it's interpreted as the precondition failed, so it aborts loading the component (and won't process other pre-condition callbacks)
     */

    /**
     * @typedef {Object} WrapOptions Options object for the call to `wrap`
     * @property {SvelteComponent} [component] - Svelte component to load (this is incompatible with `asyncComponent`)
     * @property {AsyncSvelteComponent} [asyncComponent] - Function that returns a Promise that fulfills with a Svelte component (e.g. `{asyncComponent: () => import('Foo.svelte')}`)
     * @property {SvelteComponent} [loadingComponent] - Svelte component to be displayed while the async route is loading (as a placeholder); when unset or false-y, no component is shown while component
     * @property {object} [loadingParams] - Optional dictionary passed to the `loadingComponent` component as params (for an exported prop called `params`)
     * @property {object} [userData] - Optional object that will be passed to events such as `routeLoading`, `routeLoaded`, `conditionsFailed`
     * @property {object} [props] - Optional key-value dictionary of static props that will be passed to the component. The props are expanded with {...props}, so the key in the dictionary becomes the name of the prop.
     * @property {RoutePrecondition[]|RoutePrecondition} [conditions] - Route pre-conditions to add, which will be executed in order
     */

    /**
     * Wraps a component to enable multiple capabilities:
     * 1. Using dynamically-imported component, with (e.g. `{asyncComponent: () => import('Foo.svelte')}`), which also allows bundlers to do code-splitting.
     * 2. Adding route pre-conditions (e.g. `{conditions: [...]}`)
     * 3. Adding static props that are passed to the component
     * 4. Adding custom userData, which is passed to route events (e.g. route loaded events) or to route pre-conditions (e.g. `{userData: {foo: 'bar}}`)
     * 
     * @param {WrapOptions} args - Arguments object
     * @returns {WrappedComponent} Wrapped component
     */
    function wrap$1(args) {
        if (!args) {
            throw Error('Parameter args is required')
        }

        // We need to have one and only one of component and asyncComponent
        // This does a "XNOR"
        if (!args.component == !args.asyncComponent) {
            throw Error('One and only one of component and asyncComponent is required')
        }

        // If the component is not async, wrap it into a function returning a Promise
        if (args.component) {
            args.asyncComponent = () => Promise.resolve(args.component);
        }

        // Parameter asyncComponent and each item of conditions must be functions
        if (typeof args.asyncComponent != 'function') {
            throw Error('Parameter asyncComponent must be a function')
        }
        if (args.conditions) {
            // Ensure it's an array
            if (!Array.isArray(args.conditions)) {
                args.conditions = [args.conditions];
            }
            for (let i = 0; i < args.conditions.length; i++) {
                if (!args.conditions[i] || typeof args.conditions[i] != 'function') {
                    throw Error('Invalid parameter conditions[' + i + ']')
                }
            }
        }

        // Check if we have a placeholder component
        if (args.loadingComponent) {
            args.asyncComponent.loading = args.loadingComponent;
            args.asyncComponent.loadingParams = args.loadingParams || undefined;
        }

        // Returns an object that contains all the functions to execute too
        // The _sveltesparouter flag is to confirm the object was created by this router
        const obj = {
            component: args.asyncComponent,
            userData: args.userData,
            conditions: (args.conditions && args.conditions.length) ? args.conditions : undefined,
            props: (args.props && Object.keys(args.props).length) ? args.props : {},
            _sveltesparouter: true
        };

        return obj
    }

    const subscriber_queue = [];
    /**
     * Creates a `Readable` store that allows reading by subscription.
     * @param value initial value
     * @param {StartStopNotifier}start start and stop notifications for subscriptions
     */
    function readable(value, start) {
        return {
            subscribe: writable(value, start).subscribe
        };
    }
    /**
     * Create a `Writable` store that allows both updating and reading by subscription.
     * @param {*=}value initial value
     * @param {StartStopNotifier=}start start and stop notifications for subscriptions
     */
    function writable(value, start = noop) {
        let stop;
        const subscribers = new Set();
        function set(new_value) {
            if (safe_not_equal(value, new_value)) {
                value = new_value;
                if (stop) { // store is ready
                    const run_queue = !subscriber_queue.length;
                    for (const subscriber of subscribers) {
                        subscriber[1]();
                        subscriber_queue.push(subscriber, value);
                    }
                    if (run_queue) {
                        for (let i = 0; i < subscriber_queue.length; i += 2) {
                            subscriber_queue[i][0](subscriber_queue[i + 1]);
                        }
                        subscriber_queue.length = 0;
                    }
                }
            }
        }
        function update(fn) {
            set(fn(value));
        }
        function subscribe(run, invalidate = noop) {
            const subscriber = [run, invalidate];
            subscribers.add(subscriber);
            if (subscribers.size === 1) {
                stop = start(set) || noop;
            }
            run(value);
            return () => {
                subscribers.delete(subscriber);
                if (subscribers.size === 0) {
                    stop();
                    stop = null;
                }
            };
        }
        return { set, update, subscribe };
    }
    function derived(stores, fn, initial_value) {
        const single = !Array.isArray(stores);
        const stores_array = single
            ? [stores]
            : stores;
        const auto = fn.length < 2;
        return readable(initial_value, (set) => {
            let inited = false;
            const values = [];
            let pending = 0;
            let cleanup = noop;
            const sync = () => {
                if (pending) {
                    return;
                }
                cleanup();
                const result = fn(single ? values[0] : values, set);
                if (auto) {
                    set(result);
                }
                else {
                    cleanup = is_function(result) ? result : noop;
                }
            };
            const unsubscribers = stores_array.map((store, i) => subscribe(store, (value) => {
                values[i] = value;
                pending &= ~(1 << i);
                if (inited) {
                    sync();
                }
            }, () => {
                pending |= (1 << i);
            }));
            inited = true;
            sync();
            return function stop() {
                run_all(unsubscribers);
                cleanup();
            };
        });
    }

    function parse(str, loose) {
    	if (str instanceof RegExp) return { keys:false, pattern:str };
    	var c, o, tmp, ext, keys=[], pattern='', arr = str.split('/');
    	arr[0] || arr.shift();

    	while (tmp = arr.shift()) {
    		c = tmp[0];
    		if (c === '*') {
    			keys.push('wild');
    			pattern += '/(.*)';
    		} else if (c === ':') {
    			o = tmp.indexOf('?', 1);
    			ext = tmp.indexOf('.', 1);
    			keys.push( tmp.substring(1, !!~o ? o : !!~ext ? ext : tmp.length) );
    			pattern += !!~o && !~ext ? '(?:/([^/]+?))?' : '/([^/]+?)';
    			if (!!~ext) pattern += (!!~o ? '?' : '') + '\\' + tmp.substring(ext);
    		} else {
    			pattern += '/' + tmp;
    		}
    	}

    	return {
    		keys: keys,
    		pattern: new RegExp('^' + pattern + (loose ? '(?=$|\/)' : '\/?$'), 'i')
    	};
    }

    /* node_modules/svelte-spa-router/Router.svelte generated by Svelte v3.42.1 */

    const { Error: Error_1, Object: Object_1$1, console: console_1 } = globals;

    // (251:0) {:else}
    function create_else_block$k(ctx) {
    	let switch_instance;
    	let switch_instance_anchor;
    	let current;
    	const switch_instance_spread_levels = [/*props*/ ctx[2]];
    	var switch_value = /*component*/ ctx[0];

    	function switch_props(ctx) {
    		let switch_instance_props = {};

    		for (let i = 0; i < switch_instance_spread_levels.length; i += 1) {
    			switch_instance_props = assign(switch_instance_props, switch_instance_spread_levels[i]);
    		}

    		return {
    			props: switch_instance_props,
    			$$inline: true
    		};
    	}

    	if (switch_value) {
    		switch_instance = new switch_value(switch_props());
    		switch_instance.$on("routeEvent", /*routeEvent_handler_1*/ ctx[7]);
    	}

    	const block = {
    		c: function create() {
    			if (switch_instance) create_component(switch_instance.$$.fragment);
    			switch_instance_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			if (switch_instance) {
    				mount_component(switch_instance, target, anchor);
    			}

    			insert_dev(target, switch_instance_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const switch_instance_changes = (dirty & /*props*/ 4)
    			? get_spread_update(switch_instance_spread_levels, [get_spread_object(/*props*/ ctx[2])])
    			: {};

    			if (switch_value !== (switch_value = /*component*/ ctx[0])) {
    				if (switch_instance) {
    					group_outros();
    					const old_component = switch_instance;

    					transition_out(old_component.$$.fragment, 1, 0, () => {
    						destroy_component(old_component, 1);
    					});

    					check_outros();
    				}

    				if (switch_value) {
    					switch_instance = new switch_value(switch_props());
    					switch_instance.$on("routeEvent", /*routeEvent_handler_1*/ ctx[7]);
    					create_component(switch_instance.$$.fragment);
    					transition_in(switch_instance.$$.fragment, 1);
    					mount_component(switch_instance, switch_instance_anchor.parentNode, switch_instance_anchor);
    				} else {
    					switch_instance = null;
    				}
    			} else if (switch_value) {
    				switch_instance.$set(switch_instance_changes);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			if (switch_instance) transition_in(switch_instance.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			if (switch_instance) transition_out(switch_instance.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(switch_instance_anchor);
    			if (switch_instance) destroy_component(switch_instance, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$k.name,
    		type: "else",
    		source: "(251:0) {:else}",
    		ctx
    	});

    	return block;
    }

    // (244:0) {#if componentParams}
    function create_if_block$q(ctx) {
    	let switch_instance;
    	let switch_instance_anchor;
    	let current;
    	const switch_instance_spread_levels = [{ params: /*componentParams*/ ctx[1] }, /*props*/ ctx[2]];
    	var switch_value = /*component*/ ctx[0];

    	function switch_props(ctx) {
    		let switch_instance_props = {};

    		for (let i = 0; i < switch_instance_spread_levels.length; i += 1) {
    			switch_instance_props = assign(switch_instance_props, switch_instance_spread_levels[i]);
    		}

    		return {
    			props: switch_instance_props,
    			$$inline: true
    		};
    	}

    	if (switch_value) {
    		switch_instance = new switch_value(switch_props());
    		switch_instance.$on("routeEvent", /*routeEvent_handler*/ ctx[6]);
    	}

    	const block = {
    		c: function create() {
    			if (switch_instance) create_component(switch_instance.$$.fragment);
    			switch_instance_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			if (switch_instance) {
    				mount_component(switch_instance, target, anchor);
    			}

    			insert_dev(target, switch_instance_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const switch_instance_changes = (dirty & /*componentParams, props*/ 6)
    			? get_spread_update(switch_instance_spread_levels, [
    					dirty & /*componentParams*/ 2 && { params: /*componentParams*/ ctx[1] },
    					dirty & /*props*/ 4 && get_spread_object(/*props*/ ctx[2])
    				])
    			: {};

    			if (switch_value !== (switch_value = /*component*/ ctx[0])) {
    				if (switch_instance) {
    					group_outros();
    					const old_component = switch_instance;

    					transition_out(old_component.$$.fragment, 1, 0, () => {
    						destroy_component(old_component, 1);
    					});

    					check_outros();
    				}

    				if (switch_value) {
    					switch_instance = new switch_value(switch_props());
    					switch_instance.$on("routeEvent", /*routeEvent_handler*/ ctx[6]);
    					create_component(switch_instance.$$.fragment);
    					transition_in(switch_instance.$$.fragment, 1);
    					mount_component(switch_instance, switch_instance_anchor.parentNode, switch_instance_anchor);
    				} else {
    					switch_instance = null;
    				}
    			} else if (switch_value) {
    				switch_instance.$set(switch_instance_changes);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			if (switch_instance) transition_in(switch_instance.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			if (switch_instance) transition_out(switch_instance.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(switch_instance_anchor);
    			if (switch_instance) destroy_component(switch_instance, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$q.name,
    		type: "if",
    		source: "(244:0) {#if componentParams}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$1Z(ctx) {
    	let current_block_type_index;
    	let if_block;
    	let if_block_anchor;
    	let current;
    	const if_block_creators = [create_if_block$q, create_else_block$k];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (/*componentParams*/ ctx[1]) return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type(ctx);
    	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

    	const block = {
    		c: function create() {
    			if_block.c();
    			if_block_anchor = empty();
    		},
    		l: function claim(nodes) {
    			throw new Error_1("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if_blocks[current_block_type_index].m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if_blocks[current_block_type_index].p(ctx, dirty);
    			} else {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block = if_blocks[current_block_type_index];

    				if (!if_block) {
    					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block.c();
    				} else {
    					if_block.p(ctx, dirty);
    				}

    				transition_in(if_block, 1);
    				if_block.m(if_block_anchor.parentNode, if_block_anchor);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if_blocks[current_block_type_index].d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$1Z.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function wrap(component, userData, ...conditions) {
    	// Use the new wrap method and show a deprecation warning
    	// eslint-disable-next-line no-console
    	console.warn('Method `wrap` from `svelte-spa-router` is deprecated and will be removed in a future version. Please use `svelte-spa-router/wrap` instead. See http://bit.ly/svelte-spa-router-upgrading');

    	return wrap$1({ component, userData, conditions });
    }

    /**
     * @typedef {Object} Location
     * @property {string} location - Location (page/view), for example `/book`
     * @property {string} [querystring] - Querystring from the hash, as a string not parsed
     */
    /**
     * Returns the current location from the hash.
     *
     * @returns {Location} Location object
     * @private
     */
    function getLocation() {
    	const hashPosition = window.location.href.indexOf('#/');

    	let location = hashPosition > -1
    	? window.location.href.substr(hashPosition + 1)
    	: '/';

    	// Check if there's a querystring
    	const qsPosition = location.indexOf('?');

    	let querystring = '';

    	if (qsPosition > -1) {
    		querystring = location.substr(qsPosition + 1);
    		location = location.substr(0, qsPosition);
    	}

    	return { location, querystring };
    }

    const loc = readable(null, // eslint-disable-next-line prefer-arrow-callback
    function start(set) {
    	set(getLocation());

    	const update = () => {
    		set(getLocation());
    	};

    	window.addEventListener('hashchange', update, false);

    	return function stop() {
    		window.removeEventListener('hashchange', update, false);
    	};
    });

    const location = derived(loc, $loc => $loc.location);
    const querystring = derived(loc, $loc => $loc.querystring);
    const params = writable(undefined);

    async function push(location) {
    	if (!location || location.length < 1 || location.charAt(0) != '/' && location.indexOf('#/') !== 0) {
    		throw Error('Invalid parameter location');
    	}

    	// Execute this code when the current call stack is complete
    	await tick();

    	// Note: this will include scroll state in history even when restoreScrollState is false
    	history.replaceState(
    		{
    			...history.state,
    			__svelte_spa_router_scrollX: window.scrollX,
    			__svelte_spa_router_scrollY: window.scrollY
    		},
    		undefined,
    		undefined
    	);

    	window.location.hash = (location.charAt(0) == '#' ? '' : '#') + location;
    }

    async function pop() {
    	// Execute this code when the current call stack is complete
    	await tick();

    	window.history.back();
    }

    async function replace(location) {
    	if (!location || location.length < 1 || location.charAt(0) != '/' && location.indexOf('#/') !== 0) {
    		throw Error('Invalid parameter location');
    	}

    	// Execute this code when the current call stack is complete
    	await tick();

    	const dest = (location.charAt(0) == '#' ? '' : '#') + location;

    	try {
    		const newState = { ...history.state };
    		delete newState['__svelte_spa_router_scrollX'];
    		delete newState['__svelte_spa_router_scrollY'];
    		window.history.replaceState(newState, undefined, dest);
    	} catch(e) {
    		// eslint-disable-next-line no-console
    		console.warn('Caught exception while replacing the current page. If you\'re running this in the Svelte REPL, please note that the `replace` method might not work in this environment.');
    	}

    	// The method above doesn't trigger the hashchange event, so let's do that manually
    	window.dispatchEvent(new Event('hashchange'));
    }

    function link(node, opts) {
    	opts = linkOpts(opts);

    	// Only apply to <a> tags
    	if (!node || !node.tagName || node.tagName.toLowerCase() != 'a') {
    		throw Error('Action "link" can only be used with <a> tags');
    	}

    	updateLink(node, opts);

    	return {
    		update(updated) {
    			updated = linkOpts(updated);
    			updateLink(node, updated);
    		}
    	};
    }

    // Internal function used by the link function
    function updateLink(node, opts) {
    	let href = opts.href || node.getAttribute('href');

    	// Destination must start with '/' or '#/'
    	if (href && href.charAt(0) == '/') {
    		// Add # to the href attribute
    		href = '#' + href;
    	} else if (!href || href.length < 2 || href.slice(0, 2) != '#/') {
    		throw Error('Invalid value for "href" attribute: ' + href);
    	}

    	node.setAttribute('href', href);

    	node.addEventListener('click', event => {
    		// Prevent default anchor onclick behaviour
    		event.preventDefault();

    		if (!opts.disabled) {
    			scrollstateHistoryHandler(event.currentTarget.getAttribute('href'));
    		}
    	});
    }

    // Internal function that ensures the argument of the link action is always an object
    function linkOpts(val) {
    	if (val && typeof val == 'string') {
    		return { href: val };
    	} else {
    		return val || {};
    	}
    }

    /**
     * The handler attached to an anchor tag responsible for updating the
     * current history state with the current scroll state
     *
     * @param {string} href - Destination
     */
    function scrollstateHistoryHandler(href) {
    	// Setting the url (3rd arg) to href will break clicking for reasons, so don't try to do that
    	history.replaceState(
    		{
    			...history.state,
    			__svelte_spa_router_scrollX: window.scrollX,
    			__svelte_spa_router_scrollY: window.scrollY
    		},
    		undefined,
    		undefined
    	);

    	// This will force an update as desired, but this time our scroll state will be attached
    	window.location.hash = href;
    }

    function instance$1Z($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Router', slots, []);
    	let { routes = {} } = $$props;
    	let { prefix = '' } = $$props;
    	let { restoreScrollState = false } = $$props;

    	/**
     * Container for a route: path, component
     */
    	class RouteItem {
    		/**
     * Initializes the object and creates a regular expression from the path, using regexparam.
     *
     * @param {string} path - Path to the route (must start with '/' or '*')
     * @param {SvelteComponent|WrappedComponent} component - Svelte component for the route, optionally wrapped
     */
    		constructor(path, component) {
    			if (!component || typeof component != 'function' && (typeof component != 'object' || component._sveltesparouter !== true)) {
    				throw Error('Invalid component object');
    			}

    			// Path must be a regular or expression, or a string starting with '/' or '*'
    			if (!path || typeof path == 'string' && (path.length < 1 || path.charAt(0) != '/' && path.charAt(0) != '*') || typeof path == 'object' && !(path instanceof RegExp)) {
    				throw Error('Invalid value for "path" argument - strings must start with / or *');
    			}

    			const { pattern, keys } = parse(path);
    			this.path = path;

    			// Check if the component is wrapped and we have conditions
    			if (typeof component == 'object' && component._sveltesparouter === true) {
    				this.component = component.component;
    				this.conditions = component.conditions || [];
    				this.userData = component.userData;
    				this.props = component.props || {};
    			} else {
    				// Convert the component to a function that returns a Promise, to normalize it
    				this.component = () => Promise.resolve(component);

    				this.conditions = [];
    				this.props = {};
    			}

    			this._pattern = pattern;
    			this._keys = keys;
    		}

    		/**
     * Checks if `path` matches the current route.
     * If there's a match, will return the list of parameters from the URL (if any).
     * In case of no match, the method will return `null`.
     *
     * @param {string} path - Path to test
     * @returns {null|Object.<string, string>} List of paramters from the URL if there's a match, or `null` otherwise.
     */
    		match(path) {
    			// If there's a prefix, check if it matches the start of the path.
    			// If not, bail early, else remove it before we run the matching.
    			if (prefix) {
    				if (typeof prefix == 'string') {
    					if (path.startsWith(prefix)) {
    						path = path.substr(prefix.length) || '/';
    					} else {
    						return null;
    					}
    				} else if (prefix instanceof RegExp) {
    					const match = path.match(prefix);

    					if (match && match[0]) {
    						path = path.substr(match[0].length) || '/';
    					} else {
    						return null;
    					}
    				}
    			}

    			// Check if the pattern matches
    			const matches = this._pattern.exec(path);

    			if (matches === null) {
    				return null;
    			}

    			// If the input was a regular expression, this._keys would be false, so return matches as is
    			if (this._keys === false) {
    				return matches;
    			}

    			const out = {};
    			let i = 0;

    			while (i < this._keys.length) {
    				// In the match parameters, URL-decode all values
    				try {
    					out[this._keys[i]] = decodeURIComponent(matches[i + 1] || '') || null;
    				} catch(e) {
    					out[this._keys[i]] = null;
    				}

    				i++;
    			}

    			return out;
    		}

    		/**
     * Dictionary with route details passed to the pre-conditions functions, as well as the `routeLoading`, `routeLoaded` and `conditionsFailed` events
     * @typedef {Object} RouteDetail
     * @property {string|RegExp} route - Route matched as defined in the route definition (could be a string or a reguar expression object)
     * @property {string} location - Location path
     * @property {string} querystring - Querystring from the hash
     * @property {object} [userData] - Custom data passed by the user
     * @property {SvelteComponent} [component] - Svelte component (only in `routeLoaded` events)
     * @property {string} [name] - Name of the Svelte component (only in `routeLoaded` events)
     */
    		/**
     * Executes all conditions (if any) to control whether the route can be shown. Conditions are executed in the order they are defined, and if a condition fails, the following ones aren't executed.
     * 
     * @param {RouteDetail} detail - Route detail
     * @returns {boolean} Returns true if all the conditions succeeded
     */
    		async checkConditions(detail) {
    			for (let i = 0; i < this.conditions.length; i++) {
    				if (!await this.conditions[i](detail)) {
    					return false;
    				}
    			}

    			return true;
    		}
    	}

    	// Set up all routes
    	const routesList = [];

    	if (routes instanceof Map) {
    		// If it's a map, iterate on it right away
    		routes.forEach((route, path) => {
    			routesList.push(new RouteItem(path, route));
    		});
    	} else {
    		// We have an object, so iterate on its own properties
    		Object.keys(routes).forEach(path => {
    			routesList.push(new RouteItem(path, routes[path]));
    		});
    	}

    	// Props for the component to render
    	let component = null;

    	let componentParams = null;
    	let props = {};

    	// Event dispatcher from Svelte
    	const dispatch = createEventDispatcher();

    	// Just like dispatch, but executes on the next iteration of the event loop
    	async function dispatchNextTick(name, detail) {
    		// Execute this code when the current call stack is complete
    		await tick();

    		dispatch(name, detail);
    	}

    	// If this is set, then that means we have popped into this var the state of our last scroll position
    	let previousScrollState = null;

    	let popStateChanged = null;

    	if (restoreScrollState) {
    		popStateChanged = event => {
    			// If this event was from our history.replaceState, event.state will contain
    			// our scroll history. Otherwise, event.state will be null (like on forward
    			// navigation)
    			if (event.state && event.state.__svelte_spa_router_scrollY) {
    				previousScrollState = event.state;
    			} else {
    				previousScrollState = null;
    			}
    		};

    		// This is removed in the destroy() invocation below
    		window.addEventListener('popstate', popStateChanged);

    		afterUpdate(() => {
    			// If this exists, then this is a back navigation: restore the scroll position
    			if (previousScrollState) {
    				window.scrollTo(previousScrollState.__svelte_spa_router_scrollX, previousScrollState.__svelte_spa_router_scrollY);
    			} else {
    				// Otherwise this is a forward navigation: scroll to top
    				window.scrollTo(0, 0);
    			}
    		});
    	}

    	// Always have the latest value of loc
    	let lastLoc = null;

    	// Current object of the component loaded
    	let componentObj = null;

    	// Handle hash change events
    	// Listen to changes in the $loc store and update the page
    	// Do not use the $: syntax because it gets triggered by too many things
    	const unsubscribeLoc = loc.subscribe(async newLoc => {
    		lastLoc = newLoc;

    		// Find a route matching the location
    		let i = 0;

    		while (i < routesList.length) {
    			const match = routesList[i].match(newLoc.location);

    			if (!match) {
    				i++;
    				continue;
    			}

    			const detail = {
    				route: routesList[i].path,
    				location: newLoc.location,
    				querystring: newLoc.querystring,
    				userData: routesList[i].userData,
    				params: match && typeof match == 'object' && Object.keys(match).length
    				? match
    				: null
    			};

    			// Check if the route can be loaded - if all conditions succeed
    			if (!await routesList[i].checkConditions(detail)) {
    				// Don't display anything
    				$$invalidate(0, component = null);

    				componentObj = null;

    				// Trigger an event to notify the user, then exit
    				dispatchNextTick('conditionsFailed', detail);

    				return;
    			}

    			// Trigger an event to alert that we're loading the route
    			// We need to clone the object on every event invocation so we don't risk the object to be modified in the next tick
    			dispatchNextTick('routeLoading', Object.assign({}, detail));

    			// If there's a component to show while we're loading the route, display it
    			const obj = routesList[i].component;

    			// Do not replace the component if we're loading the same one as before, to avoid the route being unmounted and re-mounted
    			if (componentObj != obj) {
    				if (obj.loading) {
    					$$invalidate(0, component = obj.loading);
    					componentObj = obj;
    					$$invalidate(1, componentParams = obj.loadingParams);
    					$$invalidate(2, props = {});

    					// Trigger the routeLoaded event for the loading component
    					// Create a copy of detail so we don't modify the object for the dynamic route (and the dynamic route doesn't modify our object too)
    					dispatchNextTick('routeLoaded', Object.assign({}, detail, {
    						component,
    						name: component.name,
    						params: componentParams
    					}));
    				} else {
    					$$invalidate(0, component = null);
    					componentObj = null;
    				}

    				// Invoke the Promise
    				const loaded = await obj();

    				// Now that we're here, after the promise resolved, check if we still want this component, as the user might have navigated to another page in the meanwhile
    				if (newLoc != lastLoc) {
    					// Don't update the component, just exit
    					return;
    				}

    				// If there is a "default" property, which is used by async routes, then pick that
    				$$invalidate(0, component = loaded && loaded.default || loaded);

    				componentObj = obj;
    			}

    			// Set componentParams only if we have a match, to avoid a warning similar to `<Component> was created with unknown prop 'params'`
    			// Of course, this assumes that developers always add a "params" prop when they are expecting parameters
    			if (match && typeof match == 'object' && Object.keys(match).length) {
    				$$invalidate(1, componentParams = match);
    			} else {
    				$$invalidate(1, componentParams = null);
    			}

    			// Set static props, if any
    			$$invalidate(2, props = routesList[i].props);

    			// Dispatch the routeLoaded event then exit
    			// We need to clone the object on every event invocation so we don't risk the object to be modified in the next tick
    			dispatchNextTick('routeLoaded', Object.assign({}, detail, {
    				component,
    				name: component.name,
    				params: componentParams
    			})).then(() => {
    				params.set(componentParams);
    			});

    			return;
    		}

    		// If we're still here, there was no match, so show the empty component
    		$$invalidate(0, component = null);

    		componentObj = null;
    		params.set(undefined);
    	});

    	onDestroy(() => {
    		unsubscribeLoc();
    		popStateChanged && window.removeEventListener('popstate', popStateChanged);
    	});

    	const writable_props = ['routes', 'prefix', 'restoreScrollState'];

    	Object_1$1.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console_1.warn(`<Router> was created with unknown prop '${key}'`);
    	});

    	function routeEvent_handler(event) {
    		bubble.call(this, $$self, event);
    	}

    	function routeEvent_handler_1(event) {
    		bubble.call(this, $$self, event);
    	}

    	$$self.$$set = $$props => {
    		if ('routes' in $$props) $$invalidate(3, routes = $$props.routes);
    		if ('prefix' in $$props) $$invalidate(4, prefix = $$props.prefix);
    		if ('restoreScrollState' in $$props) $$invalidate(5, restoreScrollState = $$props.restoreScrollState);
    	};

    	$$self.$capture_state = () => ({
    		readable,
    		writable,
    		derived,
    		tick,
    		_wrap: wrap$1,
    		wrap,
    		getLocation,
    		loc,
    		location,
    		querystring,
    		params,
    		push,
    		pop,
    		replace,
    		link,
    		updateLink,
    		linkOpts,
    		scrollstateHistoryHandler,
    		onDestroy,
    		createEventDispatcher,
    		afterUpdate,
    		parse,
    		routes,
    		prefix,
    		restoreScrollState,
    		RouteItem,
    		routesList,
    		component,
    		componentParams,
    		props,
    		dispatch,
    		dispatchNextTick,
    		previousScrollState,
    		popStateChanged,
    		lastLoc,
    		componentObj,
    		unsubscribeLoc
    	});

    	$$self.$inject_state = $$props => {
    		if ('routes' in $$props) $$invalidate(3, routes = $$props.routes);
    		if ('prefix' in $$props) $$invalidate(4, prefix = $$props.prefix);
    		if ('restoreScrollState' in $$props) $$invalidate(5, restoreScrollState = $$props.restoreScrollState);
    		if ('component' in $$props) $$invalidate(0, component = $$props.component);
    		if ('componentParams' in $$props) $$invalidate(1, componentParams = $$props.componentParams);
    		if ('props' in $$props) $$invalidate(2, props = $$props.props);
    		if ('previousScrollState' in $$props) previousScrollState = $$props.previousScrollState;
    		if ('popStateChanged' in $$props) popStateChanged = $$props.popStateChanged;
    		if ('lastLoc' in $$props) lastLoc = $$props.lastLoc;
    		if ('componentObj' in $$props) componentObj = $$props.componentObj;
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*restoreScrollState*/ 32) {
    			// Update history.scrollRestoration depending on restoreScrollState
    			history.scrollRestoration = restoreScrollState ? 'manual' : 'auto';
    		}
    	};

    	return [
    		component,
    		componentParams,
    		props,
    		routes,
    		prefix,
    		restoreScrollState,
    		routeEvent_handler,
    		routeEvent_handler_1
    	];
    }

    class Router extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$1Z, create_fragment$1Z, safe_not_equal, {
    			routes: 3,
    			prefix: 4,
    			restoreScrollState: 5
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Router",
    			options,
    			id: create_fragment$1Z.name
    		});
    	}

    	get routes() {
    		throw new Error_1("<Router>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set routes(value) {
    		throw new Error_1("<Router>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get prefix() {
    		throw new Error_1("<Router>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set prefix(value) {
    		throw new Error_1("<Router>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get restoreScrollState() {
    		throw new Error_1("<Router>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set restoreScrollState(value) {
    		throw new Error_1("<Router>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

    function getDefaultExportFromCjs (x) {
    	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
    }

    function getAugmentedNamespace(n) {
    	if (n.__esModule) return n;
    	var a = Object.defineProperty({}, '__esModule', {value: true});
    	Object.keys(n).forEach(function (k) {
    		var d = Object.getOwnPropertyDescriptor(n, k);
    		Object.defineProperty(a, k, d.get ? d : {
    			enumerable: true,
    			get: function () {
    				return n[k];
    			}
    		});
    	});
    	return a;
    }

    var dist$1 = {};

    /* dist/components/accordion/Accordion.svelte generated by Svelte v3.42.1 */
    const file$1X = "dist/components/accordion/Accordion.svelte";

    function get_each_context$3(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[5] = list[i];
    	child_ctx[7] = i;
    	return child_ctx;
    }

    // (9:2) {#each tabs as tab, i}
    function create_each_block$3(ctx) {
    	let div2;
    	let div0;
    	let span;
    	let t0_value = /*tab*/ ctx[5].title + "";
    	let t0;
    	let t1;
    	let i_1;
    	let t2;
    	let div1;
    	let raw_value = /*tab*/ ctx[5].content + "";
    	let t3;
    	let mounted;
    	let dispose;

    	function click_handler() {
    		return /*click_handler*/ ctx[4](/*i*/ ctx[7]);
    	}

    	const block = {
    		c: function create() {
    			div2 = element("div");
    			div0 = element("div");
    			span = element("span");
    			t0 = text(t0_value);
    			t1 = space();
    			i_1 = element("i");
    			t2 = space();
    			div1 = element("div");
    			t3 = space();
    			attr_dev(span, "class", "fontweight-bold fontsize-medium");
    			add_location(span, file$1X, 16, 8, 583);
    			attr_dev(i_1, "class", "fas fa-chevron-down");
    			add_location(i_1, file$1X, 17, 8, 656);
    			attr_dev(div0, "class", "accordion-header flex flex-justify--between flex-align--center padding-m");
    			add_location(div0, file$1X, 10, 6, 379);
    			attr_dev(div1, "class", "accordion-body padding-m padding-l--rl fontsize-small");
    			add_location(div1, file$1X, 19, 6, 709);
    			attr_dev(div2, "class", "accordion-tab margin-m--b");
    			toggle_class(div2, "accordion-expanded", /*$activeTab*/ ctx[3] === /*i*/ ctx[7]);
    			add_location(div2, file$1X, 9, 4, 289);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div2, anchor);
    			append_dev(div2, div0);
    			append_dev(div0, span);
    			append_dev(span, t0);
    			append_dev(div0, t1);
    			append_dev(div0, i_1);
    			append_dev(div2, t2);
    			append_dev(div2, div1);
    			div1.innerHTML = raw_value;
    			append_dev(div2, t3);

    			if (!mounted) {
    				dispose = listen_dev(div0, "click", click_handler, false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			if (dirty & /*tabs*/ 4 && t0_value !== (t0_value = /*tab*/ ctx[5].title + "")) set_data_dev(t0, t0_value);
    			if (dirty & /*tabs*/ 4 && raw_value !== (raw_value = /*tab*/ ctx[5].content + "")) div1.innerHTML = raw_value;
    			if (dirty & /*$activeTab*/ 8) {
    				toggle_class(div2, "accordion-expanded", /*$activeTab*/ ctx[3] === /*i*/ ctx[7]);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div2);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$3.name,
    		type: "each",
    		source: "(9:2) {#each tabs as tab, i}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$1Y(ctx) {
    	let div;
    	let each_value = /*tabs*/ ctx[2];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$3(get_each_context$3(ctx, each_value, i));
    	}

    	const block = {
    		c: function create() {
    			div = element("div");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			attr_dev(div, "data-theme", /*dataTheme*/ ctx[1]);
    			attr_dev(div, "class", "accordion card-mode padding-l ff-secondary width-1of1");
    			add_location(div, file$1X, 7, 0, 169);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div, null);
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*$activeTab, tabs, undefined*/ 12) {
    				each_value = /*tabs*/ ctx[2];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$3(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block$3(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(div, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}

    			if (dirty & /*dataTheme*/ 2) {
    				attr_dev(div, "data-theme", /*dataTheme*/ ctx[1]);
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_each(each_blocks, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$1Y.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$1Y($$self, $$props, $$invalidate) {
    	let $activeTab,
    		$$unsubscribe_activeTab = noop,
    		$$subscribe_activeTab = () => ($$unsubscribe_activeTab(), $$unsubscribe_activeTab = subscribe(activeTab, $$value => $$invalidate(3, $activeTab = $$value)), activeTab);

    	$$self.$$.on_destroy.push(() => $$unsubscribe_activeTab());
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Accordion', slots, []);
    	
    	const activeTab = writable(undefined);
    	validate_store(activeTab, 'activeTab');
    	$$subscribe_activeTab();
    	let { dataTheme = undefined } = $$props;
    	let { tabs } = $$props;
    	const writable_props = ['dataTheme', 'tabs'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Accordion> was created with unknown prop '${key}'`);
    	});

    	const click_handler = i => {
    		set_store_value(activeTab, $activeTab = $activeTab !== i ? i : undefined, $activeTab);
    	};

    	$$self.$$set = $$props => {
    		if ('dataTheme' in $$props) $$invalidate(1, dataTheme = $$props.dataTheme);
    		if ('tabs' in $$props) $$invalidate(2, tabs = $$props.tabs);
    	};

    	$$self.$capture_state = () => ({
    		writable,
    		activeTab,
    		dataTheme,
    		tabs,
    		$activeTab
    	});

    	$$self.$inject_state = $$props => {
    		if ('dataTheme' in $$props) $$invalidate(1, dataTheme = $$props.dataTheme);
    		if ('tabs' in $$props) $$invalidate(2, tabs = $$props.tabs);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [activeTab, dataTheme, tabs, $activeTab, click_handler];
    }

    class Accordion extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$1Y, create_fragment$1Y, safe_not_equal, { activeTab: 0, dataTheme: 1, tabs: 2 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Accordion",
    			options,
    			id: create_fragment$1Y.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*tabs*/ ctx[2] === undefined && !('tabs' in props)) {
    			console.warn("<Accordion> was created without expected prop 'tabs'");
    		}
    	}

    	get activeTab() {
    		return this.$$.ctx[0];
    	}

    	set activeTab(value) {
    		throw new Error("<Accordion>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get dataTheme() {
    		throw new Error("<Accordion>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set dataTheme(value) {
    		throw new Error("<Accordion>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get tabs() {
    		throw new Error("<Accordion>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set tabs(value) {
    		throw new Error("<Accordion>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    var Accordion$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        'default': Accordion
    });

    var require$$0$1 = /*@__PURE__*/getAugmentedNamespace(Accordion$1);

    var parsedate = {};

    Object.defineProperty(parsedate, "__esModule", { value: true });
    parsedate.populateDates = parseDate_1 = parsedate.parseDate = void 0;
    function parseDate(datetime) {
        const monthNames = ['jan', 'feb', 'mar', 'apr', 'maj', 'jun', 'jul', 'aug', 'sep', 'okt', 'nov', 'dec'];
        const inputdate = new Date(datetime); // UTC-time from server (Z)
        const now = new Date();
        const inputDateLocalTz = new Date(inputdate.getTime() + now.getTimezoneOffset() * 60);
        const secondsSince = Math.round((now.getTime() - inputDateLocalTz.getTime()) / 1000);
        const days = Math.floor(secondsSince / 86400);
        let output = '';
        if (days) {
            // More than 24 hours old
            const yesterday = new Date(now.getFullYear(), now.getMonth(), now.getDate() - 1);
            if (inputDateLocalTz.getTime() > yesterday.getTime()) {
                output = 'I går';
            }
            else {
                output = `${inputDateLocalTz.getDate()}. ${monthNames[inputDateLocalTz.getMonth()]}.${now.getFullYear() !== inputDateLocalTz.getFullYear() ? ` ${inputDateLocalTz.getFullYear()}` : ''}`;
            }
        }
        else {
            // Less than 24 hours old
            const hours = Math.floor((secondsSince % 86400) / 3600);
            const minutes = Math.floor(((secondsSince % 86400) % 3600) / 60);
            const seconds = secondsSince % 60;
            if (hours) {
                output = hours === 1 ? `${hours} time` : `${hours} timer`;
            }
            else if (minutes) {
                output = `${minutes} min`;
            }
            else if (seconds) {
                output = `${seconds} sek`;
            }
        }
        return output;
    }
    var parseDate_1 = parsedate.parseDate = parseDate;
    function populateDates() {
        const dateElems = document.querySelectorAll('span[data-timestamp]');
        dateElems.forEach((dateElem) => {
            const formattedDate = parseDate(dateElem.dataset.timestamp);
            if (formattedDate) {
                dateElem.innerText = parseDate(dateElem.dataset.timestamp);
            }
        });
    }
    parsedate.populateDates = populateDates;

    /* dist/components/badge/Badge.svelte generated by Svelte v3.42.1 */

    const file$1W = "dist/components/badge/Badge.svelte";

    // (22:0) {:else}
    function create_else_block$j(ctx) {
    	let span;
    	let current;
    	let mounted;
    	let dispose;
    	const default_slot_template = /*#slots*/ ctx[8].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[7], null);

    	const block = {
    		c: function create() {
    			span = element("span");
    			if (default_slot) default_slot.c();
    			attr_dev(span, "class", /*cssClass*/ ctx[3]);
    			attr_dev(span, "style", /*style*/ ctx[1]);
    			attr_dev(span, "data-type", /*type*/ ctx[2]);
    			add_location(span, file$1W, 22, 2, 593);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);

    			if (default_slot) {
    				default_slot.m(span, null);
    			}

    			current = true;

    			if (!mounted) {
    				dispose = listen_dev(span, "click", /*click_handler_1*/ ctx[10], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 128)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[7],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[7])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[7], dirty, null),
    						null
    					);
    				}
    			}

    			if (!current || dirty & /*cssClass*/ 8) {
    				attr_dev(span, "class", /*cssClass*/ ctx[3]);
    			}

    			if (!current || dirty & /*style*/ 2) {
    				attr_dev(span, "style", /*style*/ ctx[1]);
    			}

    			if (!current || dirty & /*type*/ 4) {
    				attr_dev(span, "data-type", /*type*/ ctx[2]);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    			if (default_slot) default_slot.d(detaching);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$j.name,
    		type: "else",
    		source: "(22:0) {:else}",
    		ctx
    	});

    	return block;
    }

    // (18:0) {#if href}
    function create_if_block$p(ctx) {
    	let a;
    	let current;
    	let mounted;
    	let dispose;
    	const default_slot_template = /*#slots*/ ctx[8].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[7], null);

    	const block = {
    		c: function create() {
    			a = element("a");
    			if (default_slot) default_slot.c();
    			attr_dev(a, "href", /*href*/ ctx[0]);
    			attr_dev(a, "class", /*cssClass*/ ctx[3]);
    			attr_dev(a, "style", /*style*/ ctx[1]);
    			attr_dev(a, "data-type", /*type*/ ctx[2]);
    			add_location(a, file$1W, 18, 2, 501);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, a, anchor);

    			if (default_slot) {
    				default_slot.m(a, null);
    			}

    			current = true;

    			if (!mounted) {
    				dispose = listen_dev(a, "click", /*click_handler*/ ctx[9], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 128)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[7],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[7])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[7], dirty, null),
    						null
    					);
    				}
    			}

    			if (!current || dirty & /*href*/ 1) {
    				attr_dev(a, "href", /*href*/ ctx[0]);
    			}

    			if (!current || dirty & /*cssClass*/ 8) {
    				attr_dev(a, "class", /*cssClass*/ ctx[3]);
    			}

    			if (!current || dirty & /*style*/ 2) {
    				attr_dev(a, "style", /*style*/ ctx[1]);
    			}

    			if (!current || dirty & /*type*/ 4) {
    				attr_dev(a, "data-type", /*type*/ ctx[2]);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(a);
    			if (default_slot) default_slot.d(detaching);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$p.name,
    		type: "if",
    		source: "(18:0) {#if href}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$1X(ctx) {
    	let current_block_type_index;
    	let if_block;
    	let if_block_anchor;
    	let current;
    	const if_block_creators = [create_if_block$p, create_else_block$j];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (/*href*/ ctx[0]) return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type(ctx);
    	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

    	const block = {
    		c: function create() {
    			if_block.c();
    			if_block_anchor = empty();
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if_blocks[current_block_type_index].m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if_blocks[current_block_type_index].p(ctx, dirty);
    			} else {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block = if_blocks[current_block_type_index];

    				if (!if_block) {
    					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block.c();
    				} else {
    					if_block.p(ctx, dirty);
    				}

    				transition_in(if_block, 1);
    				if_block.m(if_block_anchor.parentNode, if_block_anchor);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if_blocks[current_block_type_index].d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$1X.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$1X($$self, $$props, $$invalidate) {
    	let cssClass;
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Badge', slots, ['default']);
    	let { className = '' } = $$props;
    	let { extension = undefined } = $$props;
    	let { href = undefined } = $$props;
    	let { style = undefined } = $$props;
    	let { type = undefined } = $$props;
    	let baseClass = 'badge';

    	if (extension) {
    		if (typeof extension === 'string') {
    			baseClass = `${baseClass} badge--${extension}`;
    		} else if (Array.isArray(extension)) {
    			baseClass = `${baseClass} badge--${extension.join(' badge--')}`;
    		}
    	}

    	const writable_props = ['className', 'extension', 'href', 'style', 'type'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Badge> was created with unknown prop '${key}'`);
    	});

    	function click_handler(event) {
    		bubble.call(this, $$self, event);
    	}

    	function click_handler_1(event) {
    		bubble.call(this, $$self, event);
    	}

    	$$self.$$set = $$props => {
    		if ('className' in $$props) $$invalidate(4, className = $$props.className);
    		if ('extension' in $$props) $$invalidate(5, extension = $$props.extension);
    		if ('href' in $$props) $$invalidate(0, href = $$props.href);
    		if ('style' in $$props) $$invalidate(1, style = $$props.style);
    		if ('type' in $$props) $$invalidate(2, type = $$props.type);
    		if ('$$scope' in $$props) $$invalidate(7, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		className,
    		extension,
    		href,
    		style,
    		type,
    		baseClass,
    		cssClass
    	});

    	$$self.$inject_state = $$props => {
    		if ('className' in $$props) $$invalidate(4, className = $$props.className);
    		if ('extension' in $$props) $$invalidate(5, extension = $$props.extension);
    		if ('href' in $$props) $$invalidate(0, href = $$props.href);
    		if ('style' in $$props) $$invalidate(1, style = $$props.style);
    		if ('type' in $$props) $$invalidate(2, type = $$props.type);
    		if ('baseClass' in $$props) $$invalidate(6, baseClass = $$props.baseClass);
    		if ('cssClass' in $$props) $$invalidate(3, cssClass = $$props.cssClass);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*baseClass, className*/ 80) {
    			$$invalidate(3, cssClass = `${baseClass} ${className}`);
    		}
    	};

    	return [
    		href,
    		style,
    		type,
    		cssClass,
    		className,
    		extension,
    		baseClass,
    		$$scope,
    		slots,
    		click_handler,
    		click_handler_1
    	];
    }

    class Badge extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$1X, create_fragment$1X, safe_not_equal, {
    			className: 4,
    			extension: 5,
    			href: 0,
    			style: 1,
    			type: 2
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Badge",
    			options,
    			id: create_fragment$1X.name
    		});
    	}

    	get className() {
    		throw new Error("<Badge>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set className(value) {
    		throw new Error("<Badge>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get extension() {
    		throw new Error("<Badge>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set extension(value) {
    		throw new Error("<Badge>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get href() {
    		throw new Error("<Badge>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set href(value) {
    		throw new Error("<Badge>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get style() {
    		throw new Error("<Badge>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set style(value) {
    		throw new Error("<Badge>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get type() {
    		throw new Error("<Badge>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set type(value) {
    		throw new Error("<Badge>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    var Badge$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        'default': Badge
    });

    /* dist/components/card/Card.svelte generated by Svelte v3.42.1 */

    const file$1V = "dist/components/card/Card.svelte";
    const get_footer_slot_changes_1 = dirty => ({});
    const get_footer_slot_context_1 = ctx => ({});
    const get_content_slot_changes_1 = dirty => ({});
    const get_content_slot_context_1 = ctx => ({});
    const get_media_slot_changes_1 = dirty => ({});
    const get_media_slot_context_1 = ctx => ({});
    const get_header_slot_changes_1 = dirty => ({});
    const get_header_slot_context_1 = ctx => ({});
    const get_footer_slot_changes = dirty => ({});
    const get_footer_slot_context = ctx => ({});
    const get_content_slot_changes = dirty => ({});
    const get_content_slot_context = ctx => ({});
    const get_media_slot_changes = dirty => ({});
    const get_media_slot_context = ctx => ({ class: "card-media" });
    const get_header_slot_changes = dirty => ({});
    const get_header_slot_context = ctx => ({ class: "card-header" });

    // (36:0) {:else}
    function create_else_block$i(ctx) {
    	let div;
    	let t0;
    	let t1;
    	let t2;
    	let t3;
    	let current;
    	let mounted;
    	let dispose;
    	let if_block0 = /*$$slots*/ ctx[5].header && create_if_block_8(ctx);
    	let if_block1 = /*$$slots*/ ctx[5].media && create_if_block_7$1(ctx);
    	const default_slot_template = /*#slots*/ ctx[8].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[7], null);
    	let if_block2 = /*$$slots*/ ctx[5].content && create_if_block_6$1(ctx);
    	let if_block3 = /*$$slots*/ ctx[5].footer && create_if_block_5$3(ctx);

    	const block = {
    		c: function create() {
    			div = element("div");
    			if (if_block0) if_block0.c();
    			t0 = space();
    			if (if_block1) if_block1.c();
    			t1 = space();
    			if (default_slot) default_slot.c();
    			t2 = space();
    			if (if_block2) if_block2.c();
    			t3 = space();
    			if (if_block3) if_block3.c();
    			attr_dev(div, "class", /*cssClass*/ ctx[4]);
    			attr_dev(div, "style", /*style*/ ctx[1]);
    			attr_dev(div, "data-theme", /*theme*/ ctx[2]);
    			add_location(div, file$1V, 36, 2, 875);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			if (if_block0) if_block0.m(div, null);
    			append_dev(div, t0);
    			if (if_block1) if_block1.m(div, null);
    			append_dev(div, t1);

    			if (default_slot) {
    				default_slot.m(div, null);
    			}

    			append_dev(div, t2);
    			if (if_block2) if_block2.m(div, null);
    			append_dev(div, t3);
    			if (if_block3) if_block3.m(div, null);
    			current = true;

    			if (!mounted) {
    				dispose = listen_dev(div, "click", /*click_handler_1*/ ctx[10], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (/*$$slots*/ ctx[5].header) {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);

    					if (dirty & /*$$slots*/ 32) {
    						transition_in(if_block0, 1);
    					}
    				} else {
    					if_block0 = create_if_block_8(ctx);
    					if_block0.c();
    					transition_in(if_block0, 1);
    					if_block0.m(div, t0);
    				}
    			} else if (if_block0) {
    				group_outros();

    				transition_out(if_block0, 1, 1, () => {
    					if_block0 = null;
    				});

    				check_outros();
    			}

    			if (/*$$slots*/ ctx[5].media) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);

    					if (dirty & /*$$slots*/ 32) {
    						transition_in(if_block1, 1);
    					}
    				} else {
    					if_block1 = create_if_block_7$1(ctx);
    					if_block1.c();
    					transition_in(if_block1, 1);
    					if_block1.m(div, t1);
    				}
    			} else if (if_block1) {
    				group_outros();

    				transition_out(if_block1, 1, 1, () => {
    					if_block1 = null;
    				});

    				check_outros();
    			}

    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 128)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[7],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[7])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[7], dirty, null),
    						null
    					);
    				}
    			}

    			if (/*$$slots*/ ctx[5].content) {
    				if (if_block2) {
    					if_block2.p(ctx, dirty);

    					if (dirty & /*$$slots*/ 32) {
    						transition_in(if_block2, 1);
    					}
    				} else {
    					if_block2 = create_if_block_6$1(ctx);
    					if_block2.c();
    					transition_in(if_block2, 1);
    					if_block2.m(div, t3);
    				}
    			} else if (if_block2) {
    				group_outros();

    				transition_out(if_block2, 1, 1, () => {
    					if_block2 = null;
    				});

    				check_outros();
    			}

    			if (/*$$slots*/ ctx[5].footer) {
    				if (if_block3) {
    					if_block3.p(ctx, dirty);

    					if (dirty & /*$$slots*/ 32) {
    						transition_in(if_block3, 1);
    					}
    				} else {
    					if_block3 = create_if_block_5$3(ctx);
    					if_block3.c();
    					transition_in(if_block3, 1);
    					if_block3.m(div, null);
    				}
    			} else if (if_block3) {
    				group_outros();

    				transition_out(if_block3, 1, 1, () => {
    					if_block3 = null;
    				});

    				check_outros();
    			}

    			if (!current || dirty & /*cssClass*/ 16) {
    				attr_dev(div, "class", /*cssClass*/ ctx[4]);
    			}

    			if (!current || dirty & /*style*/ 2) {
    				attr_dev(div, "style", /*style*/ ctx[1]);
    			}

    			if (!current || dirty & /*theme*/ 4) {
    				attr_dev(div, "data-theme", /*theme*/ ctx[2]);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block0);
    			transition_in(if_block1);
    			transition_in(default_slot, local);
    			transition_in(if_block2);
    			transition_in(if_block3);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block0);
    			transition_out(if_block1);
    			transition_out(default_slot, local);
    			transition_out(if_block2);
    			transition_out(if_block3);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (if_block0) if_block0.d();
    			if (if_block1) if_block1.d();
    			if (default_slot) default_slot.d(detaching);
    			if (if_block2) if_block2.d();
    			if (if_block3) if_block3.d();
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$i.name,
    		type: "else",
    		source: "(36:0) {:else}",
    		ctx
    	});

    	return block;
    }

    // (16:0) {#if url}
    function create_if_block$o(ctx) {
    	let a;
    	let t0;
    	let t1;
    	let t2;
    	let t3;
    	let current;
    	let mounted;
    	let dispose;
    	let if_block0 = /*$$slots*/ ctx[5].header && create_if_block_4$6(ctx);
    	let if_block1 = /*$$slots*/ ctx[5].media && create_if_block_3$7(ctx);
    	const default_slot_template = /*#slots*/ ctx[8].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[7], null);
    	let if_block2 = /*$$slots*/ ctx[5].content && create_if_block_2$9(ctx);
    	let if_block3 = /*$$slots*/ ctx[5].footer && create_if_block_1$d(ctx);

    	let a_levels = [
    		{ href: /*url*/ ctx[0] },
    		{ class: /*cssClass*/ ctx[4] },
    		{ style: /*style*/ ctx[1] },
    		{ "data-theme": /*theme*/ ctx[2] },
    		/*dataProps*/ ctx[3]
    	];

    	let a_data = {};

    	for (let i = 0; i < a_levels.length; i += 1) {
    		a_data = assign(a_data, a_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			a = element("a");
    			if (if_block0) if_block0.c();
    			t0 = space();
    			if (if_block1) if_block1.c();
    			t1 = space();
    			if (default_slot) default_slot.c();
    			t2 = space();
    			if (if_block2) if_block2.c();
    			t3 = space();
    			if (if_block3) if_block3.c();
    			set_attributes(a, a_data);
    			add_location(a, file$1V, 16, 2, 372);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, a, anchor);
    			if (if_block0) if_block0.m(a, null);
    			append_dev(a, t0);
    			if (if_block1) if_block1.m(a, null);
    			append_dev(a, t1);

    			if (default_slot) {
    				default_slot.m(a, null);
    			}

    			append_dev(a, t2);
    			if (if_block2) if_block2.m(a, null);
    			append_dev(a, t3);
    			if (if_block3) if_block3.m(a, null);
    			current = true;

    			if (!mounted) {
    				dispose = listen_dev(a, "click", /*click_handler*/ ctx[9], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (/*$$slots*/ ctx[5].header) {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);

    					if (dirty & /*$$slots*/ 32) {
    						transition_in(if_block0, 1);
    					}
    				} else {
    					if_block0 = create_if_block_4$6(ctx);
    					if_block0.c();
    					transition_in(if_block0, 1);
    					if_block0.m(a, t0);
    				}
    			} else if (if_block0) {
    				group_outros();

    				transition_out(if_block0, 1, 1, () => {
    					if_block0 = null;
    				});

    				check_outros();
    			}

    			if (/*$$slots*/ ctx[5].media) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);

    					if (dirty & /*$$slots*/ 32) {
    						transition_in(if_block1, 1);
    					}
    				} else {
    					if_block1 = create_if_block_3$7(ctx);
    					if_block1.c();
    					transition_in(if_block1, 1);
    					if_block1.m(a, t1);
    				}
    			} else if (if_block1) {
    				group_outros();

    				transition_out(if_block1, 1, 1, () => {
    					if_block1 = null;
    				});

    				check_outros();
    			}

    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 128)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[7],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[7])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[7], dirty, null),
    						null
    					);
    				}
    			}

    			if (/*$$slots*/ ctx[5].content) {
    				if (if_block2) {
    					if_block2.p(ctx, dirty);

    					if (dirty & /*$$slots*/ 32) {
    						transition_in(if_block2, 1);
    					}
    				} else {
    					if_block2 = create_if_block_2$9(ctx);
    					if_block2.c();
    					transition_in(if_block2, 1);
    					if_block2.m(a, t3);
    				}
    			} else if (if_block2) {
    				group_outros();

    				transition_out(if_block2, 1, 1, () => {
    					if_block2 = null;
    				});

    				check_outros();
    			}

    			if (/*$$slots*/ ctx[5].footer) {
    				if (if_block3) {
    					if_block3.p(ctx, dirty);

    					if (dirty & /*$$slots*/ 32) {
    						transition_in(if_block3, 1);
    					}
    				} else {
    					if_block3 = create_if_block_1$d(ctx);
    					if_block3.c();
    					transition_in(if_block3, 1);
    					if_block3.m(a, null);
    				}
    			} else if (if_block3) {
    				group_outros();

    				transition_out(if_block3, 1, 1, () => {
    					if_block3 = null;
    				});

    				check_outros();
    			}

    			set_attributes(a, a_data = get_spread_update(a_levels, [
    				(!current || dirty & /*url*/ 1) && { href: /*url*/ ctx[0] },
    				(!current || dirty & /*cssClass*/ 16) && { class: /*cssClass*/ ctx[4] },
    				(!current || dirty & /*style*/ 2) && { style: /*style*/ ctx[1] },
    				(!current || dirty & /*theme*/ 4) && { "data-theme": /*theme*/ ctx[2] },
    				dirty & /*dataProps*/ 8 && /*dataProps*/ ctx[3]
    			]));
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block0);
    			transition_in(if_block1);
    			transition_in(default_slot, local);
    			transition_in(if_block2);
    			transition_in(if_block3);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block0);
    			transition_out(if_block1);
    			transition_out(default_slot, local);
    			transition_out(if_block2);
    			transition_out(if_block3);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(a);
    			if (if_block0) if_block0.d();
    			if (if_block1) if_block1.d();
    			if (default_slot) default_slot.d(detaching);
    			if (if_block2) if_block2.d();
    			if (if_block3) if_block3.d();
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$o.name,
    		type: "if",
    		source: "(16:0) {#if url}",
    		ctx
    	});

    	return block;
    }

    // (38:4) {#if $$slots.header}
    function create_if_block_8(ctx) {
    	let div;
    	let current;
    	const header_slot_template = /*#slots*/ ctx[8].header;
    	const header_slot = create_slot(header_slot_template, ctx, /*$$scope*/ ctx[7], get_header_slot_context_1);

    	const block = {
    		c: function create() {
    			div = element("div");
    			if (header_slot) header_slot.c();
    			attr_dev(div, "class", "card-header");
    			add_location(div, file$1V, 38, 6, 965);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			if (header_slot) {
    				header_slot.m(div, null);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (header_slot) {
    				if (header_slot.p && (!current || dirty & /*$$scope*/ 128)) {
    					update_slot_base(
    						header_slot,
    						header_slot_template,
    						ctx,
    						/*$$scope*/ ctx[7],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[7])
    						: get_slot_changes(header_slot_template, /*$$scope*/ ctx[7], dirty, get_header_slot_changes_1),
    						get_header_slot_context_1
    					);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(header_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(header_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (header_slot) header_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_8.name,
    		type: "if",
    		source: "(38:4) {#if $$slots.header}",
    		ctx
    	});

    	return block;
    }

    // (43:4) {#if $$slots.media}
    function create_if_block_7$1(ctx) {
    	let div;
    	let current;
    	const media_slot_template = /*#slots*/ ctx[8].media;
    	const media_slot = create_slot(media_slot_template, ctx, /*$$scope*/ ctx[7], get_media_slot_context_1);

    	const block = {
    		c: function create() {
    			div = element("div");
    			if (media_slot) media_slot.c();
    			attr_dev(div, "class", "card-media");
    			add_location(div, file$1V, 43, 6, 1075);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			if (media_slot) {
    				media_slot.m(div, null);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (media_slot) {
    				if (media_slot.p && (!current || dirty & /*$$scope*/ 128)) {
    					update_slot_base(
    						media_slot,
    						media_slot_template,
    						ctx,
    						/*$$scope*/ ctx[7],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[7])
    						: get_slot_changes(media_slot_template, /*$$scope*/ ctx[7], dirty, get_media_slot_changes_1),
    						get_media_slot_context_1
    					);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(media_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(media_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (media_slot) media_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_7$1.name,
    		type: "if",
    		source: "(43:4) {#if $$slots.media}",
    		ctx
    	});

    	return block;
    }

    // (49:4) {#if $$slots.content}
    function create_if_block_6$1(ctx) {
    	let div;
    	let current;
    	const content_slot_template = /*#slots*/ ctx[8].content;
    	const content_slot = create_slot(content_slot_template, ctx, /*$$scope*/ ctx[7], get_content_slot_context_1);

    	const block = {
    		c: function create() {
    			div = element("div");
    			if (content_slot) content_slot.c();
    			attr_dev(div, "class", "card-content");
    			add_location(div, file$1V, 49, 6, 1198);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			if (content_slot) {
    				content_slot.m(div, null);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (content_slot) {
    				if (content_slot.p && (!current || dirty & /*$$scope*/ 128)) {
    					update_slot_base(
    						content_slot,
    						content_slot_template,
    						ctx,
    						/*$$scope*/ ctx[7],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[7])
    						: get_slot_changes(content_slot_template, /*$$scope*/ ctx[7], dirty, get_content_slot_changes_1),
    						get_content_slot_context_1
    					);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(content_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(content_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (content_slot) content_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_6$1.name,
    		type: "if",
    		source: "(49:4) {#if $$slots.content}",
    		ctx
    	});

    	return block;
    }

    // (54:4) {#if $$slots.footer}
    function create_if_block_5$3(ctx) {
    	let div;
    	let current;
    	const footer_slot_template = /*#slots*/ ctx[8].footer;
    	const footer_slot = create_slot(footer_slot_template, ctx, /*$$scope*/ ctx[7], get_footer_slot_context_1);

    	const block = {
    		c: function create() {
    			div = element("div");
    			if (footer_slot) footer_slot.c();
    			attr_dev(div, "class", "card-footer");
    			add_location(div, file$1V, 54, 6, 1311);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			if (footer_slot) {
    				footer_slot.m(div, null);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (footer_slot) {
    				if (footer_slot.p && (!current || dirty & /*$$scope*/ 128)) {
    					update_slot_base(
    						footer_slot,
    						footer_slot_template,
    						ctx,
    						/*$$scope*/ ctx[7],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[7])
    						: get_slot_changes(footer_slot_template, /*$$scope*/ ctx[7], dirty, get_footer_slot_changes_1),
    						get_footer_slot_context_1
    					);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(footer_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(footer_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (footer_slot) footer_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_5$3.name,
    		type: "if",
    		source: "(54:4) {#if $$slots.footer}",
    		ctx
    	});

    	return block;
    }

    // (18:4) {#if $$slots.header}
    function create_if_block_4$6(ctx) {
    	let current;
    	const header_slot_template = /*#slots*/ ctx[8].header;
    	const header_slot = create_slot(header_slot_template, ctx, /*$$scope*/ ctx[7], get_header_slot_context);

    	const block = {
    		c: function create() {
    			if (header_slot) header_slot.c();
    		},
    		m: function mount(target, anchor) {
    			if (header_slot) {
    				header_slot.m(target, anchor);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (header_slot) {
    				if (header_slot.p && (!current || dirty & /*$$scope*/ 128)) {
    					update_slot_base(
    						header_slot,
    						header_slot_template,
    						ctx,
    						/*$$scope*/ ctx[7],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[7])
    						: get_slot_changes(header_slot_template, /*$$scope*/ ctx[7], dirty, get_header_slot_changes),
    						get_header_slot_context
    					);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(header_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(header_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (header_slot) header_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_4$6.name,
    		type: "if",
    		source: "(18:4) {#if $$slots.header}",
    		ctx
    	});

    	return block;
    }

    // (21:4) {#if $$slots.media}
    function create_if_block_3$7(ctx) {
    	let current;
    	const media_slot_template = /*#slots*/ ctx[8].media;
    	const media_slot = create_slot(media_slot_template, ctx, /*$$scope*/ ctx[7], get_media_slot_context);

    	const block = {
    		c: function create() {
    			if (media_slot) media_slot.c();
    		},
    		m: function mount(target, anchor) {
    			if (media_slot) {
    				media_slot.m(target, anchor);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (media_slot) {
    				if (media_slot.p && (!current || dirty & /*$$scope*/ 128)) {
    					update_slot_base(
    						media_slot,
    						media_slot_template,
    						ctx,
    						/*$$scope*/ ctx[7],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[7])
    						: get_slot_changes(media_slot_template, /*$$scope*/ ctx[7], dirty, get_media_slot_changes),
    						get_media_slot_context
    					);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(media_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(media_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (media_slot) media_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_3$7.name,
    		type: "if",
    		source: "(21:4) {#if $$slots.media}",
    		ctx
    	});

    	return block;
    }

    // (25:4) {#if $$slots.content}
    function create_if_block_2$9(ctx) {
    	let div;
    	let current;
    	const content_slot_template = /*#slots*/ ctx[8].content;
    	const content_slot = create_slot(content_slot_template, ctx, /*$$scope*/ ctx[7], get_content_slot_context);

    	const block = {
    		c: function create() {
    			div = element("div");
    			if (content_slot) content_slot.c();
    			attr_dev(div, "class", "card-content");
    			add_location(div, file$1V, 25, 6, 665);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			if (content_slot) {
    				content_slot.m(div, null);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (content_slot) {
    				if (content_slot.p && (!current || dirty & /*$$scope*/ 128)) {
    					update_slot_base(
    						content_slot,
    						content_slot_template,
    						ctx,
    						/*$$scope*/ ctx[7],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[7])
    						: get_slot_changes(content_slot_template, /*$$scope*/ ctx[7], dirty, get_content_slot_changes),
    						get_content_slot_context
    					);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(content_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(content_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (content_slot) content_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2$9.name,
    		type: "if",
    		source: "(25:4) {#if $$slots.content}",
    		ctx
    	});

    	return block;
    }

    // (30:4) {#if $$slots.footer}
    function create_if_block_1$d(ctx) {
    	let div;
    	let current;
    	const footer_slot_template = /*#slots*/ ctx[8].footer;
    	const footer_slot = create_slot(footer_slot_template, ctx, /*$$scope*/ ctx[7], get_footer_slot_context);

    	const block = {
    		c: function create() {
    			div = element("div");
    			if (footer_slot) footer_slot.c();
    			attr_dev(div, "class", "card-footer");
    			add_location(div, file$1V, 30, 6, 778);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			if (footer_slot) {
    				footer_slot.m(div, null);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (footer_slot) {
    				if (footer_slot.p && (!current || dirty & /*$$scope*/ 128)) {
    					update_slot_base(
    						footer_slot,
    						footer_slot_template,
    						ctx,
    						/*$$scope*/ ctx[7],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[7])
    						: get_slot_changes(footer_slot_template, /*$$scope*/ ctx[7], dirty, get_footer_slot_changes),
    						get_footer_slot_context
    					);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(footer_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(footer_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (footer_slot) footer_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$d.name,
    		type: "if",
    		source: "(30:4) {#if $$slots.footer}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$1W(ctx) {
    	let current_block_type_index;
    	let if_block;
    	let if_block_anchor;
    	let current;
    	const if_block_creators = [create_if_block$o, create_else_block$i];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (/*url*/ ctx[0]) return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type(ctx);
    	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

    	const block = {
    		c: function create() {
    			if_block.c();
    			if_block_anchor = empty();
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if_blocks[current_block_type_index].m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if_blocks[current_block_type_index].p(ctx, dirty);
    			} else {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block = if_blocks[current_block_type_index];

    				if (!if_block) {
    					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block.c();
    				} else {
    					if_block.p(ctx, dirty);
    				}

    				transition_in(if_block, 1);
    				if_block.m(if_block_anchor.parentNode, if_block_anchor);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if_blocks[current_block_type_index].d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$1W.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$1W($$self, $$props, $$invalidate) {
    	let cssClass;
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Card', slots, ['header','media','default','content','footer']);
    	const $$slots = compute_slots(slots);
    	
    	let { className = undefined } = $$props;
    	let { url = undefined } = $$props;
    	let { style = undefined } = $$props;
    	let { theme = undefined } = $$props;
    	let baseClass = 'card';
    	const dataProps = {};

    	for (const prop in $$props) {
    		if (prop.indexOf('data-') === 0) {
    			dataProps[prop] = $$props[prop];
    		}
    	}

    	function click_handler(event) {
    		bubble.call(this, $$self, event);
    	}

    	function click_handler_1(event) {
    		bubble.call(this, $$self, event);
    	}

    	$$self.$$set = $$new_props => {
    		$$invalidate(12, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    		if ('className' in $$new_props) $$invalidate(6, className = $$new_props.className);
    		if ('url' in $$new_props) $$invalidate(0, url = $$new_props.url);
    		if ('style' in $$new_props) $$invalidate(1, style = $$new_props.style);
    		if ('theme' in $$new_props) $$invalidate(2, theme = $$new_props.theme);
    		if ('$$scope' in $$new_props) $$invalidate(7, $$scope = $$new_props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		className,
    		url,
    		style,
    		theme,
    		baseClass,
    		dataProps,
    		cssClass
    	});

    	$$self.$inject_state = $$new_props => {
    		$$invalidate(12, $$props = assign(assign({}, $$props), $$new_props));
    		if ('className' in $$props) $$invalidate(6, className = $$new_props.className);
    		if ('url' in $$props) $$invalidate(0, url = $$new_props.url);
    		if ('style' in $$props) $$invalidate(1, style = $$new_props.style);
    		if ('theme' in $$props) $$invalidate(2, theme = $$new_props.theme);
    		if ('baseClass' in $$props) $$invalidate(11, baseClass = $$new_props.baseClass);
    		if ('cssClass' in $$props) $$invalidate(4, cssClass = $$new_props.cssClass);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*className*/ 64) {
    			$$invalidate(4, cssClass = `${className} ${baseClass}`);
    		}
    	};

    	$$props = exclude_internal_props($$props);

    	return [
    		url,
    		style,
    		theme,
    		dataProps,
    		cssClass,
    		$$slots,
    		className,
    		$$scope,
    		slots,
    		click_handler,
    		click_handler_1
    	];
    }

    class Card extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$1W, create_fragment$1W, safe_not_equal, { className: 6, url: 0, style: 1, theme: 2 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Card",
    			options,
    			id: create_fragment$1W.name
    		});
    	}

    	get className() {
    		throw new Error("<Card>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set className(value) {
    		throw new Error("<Card>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get url() {
    		throw new Error("<Card>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set url(value) {
    		throw new Error("<Card>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get style() {
    		throw new Error("<Card>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set style(value) {
    		throw new Error("<Card>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get theme() {
    		throw new Error("<Card>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set theme(value) {
    		throw new Error("<Card>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    var Card$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        'default': Card
    });

    var IconComponents$1 = {};

    /* dist/components/icon/svgs/angle-down.svg.svelte generated by Svelte v3.42.1 */

    const file$1U = "dist/components/icon/svgs/angle-down.svg.svelte";

    function create_fragment$1V(ctx) {
    	let svg;
    	let path;

    	let svg_levels = [
    		{ width: "28" },
    		{ height: "28" },
    		{ viewBox: "0 0 28 28" },
    		{ xmlns: "http://www.w3.org/2000/svg" },
    		/*$$props*/ ctx[0]
    	];

    	let svg_data = {};

    	for (let i = 0; i < svg_levels.length; i += 1) {
    		svg_data = assign(svg_data, svg_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");
    			path = svg_element("path");
    			attr_dev(path, "fill-rule", "evenodd");
    			attr_dev(path, "clip-rule", "evenodd");
    			attr_dev(path, "d", "M20.3536 11.5214C20.1583 11.3262 19.8417 11.3262 19.6464 11.5214L13.875 17.2929L8.10355 11.5214C7.90829 11.3262 7.59171 11.3262 7.39645 11.5214C7.20118 11.7167 7.20118 12.0333 7.39645 12.2286L13.5214 18.3536C13.7167 18.5488 14.0333 18.5488 14.2286 18.3536L20.3536 12.2286C20.5488 12.0333 20.5488 11.7167 20.3536 11.5214Z");
    			add_location(path, file$1U, 1, 0, 98);
    			set_svg_attributes(svg, svg_data);
    			add_location(svg, file$1U, 0, 0, 0);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);
    			append_dev(svg, path);
    		},
    		p: function update(ctx, [dirty]) {
    			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
    				{ width: "28" },
    				{ height: "28" },
    				{ viewBox: "0 0 28 28" },
    				{ xmlns: "http://www.w3.org/2000/svg" },
    				dirty & /*$$props*/ 1 && /*$$props*/ ctx[0]
    			]));
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$1V.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$1V($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Angle_down_svg', slots, []);

    	$$self.$$set = $$new_props => {
    		$$invalidate(0, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    	};

    	$$self.$inject_state = $$new_props => {
    		$$invalidate(0, $$props = assign(assign({}, $$props), $$new_props));
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$props = exclude_internal_props($$props);
    	return [$$props];
    }

    class Angle_down_svg extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$1V, create_fragment$1V, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Angle_down_svg",
    			options,
    			id: create_fragment$1V.name
    		});
    	}
    }

    var angleDown_svg = /*#__PURE__*/Object.freeze({
        __proto__: null,
        'default': Angle_down_svg
    });

    var require$$0 = /*@__PURE__*/getAugmentedNamespace(angleDown_svg);

    /* dist/components/icon/svgs/angle-left.svg.svelte generated by Svelte v3.42.1 */

    const file$1T = "dist/components/icon/svgs/angle-left.svg.svelte";

    function create_fragment$1U(ctx) {
    	let svg;
    	let path;

    	let svg_levels = [
    		{ width: "28" },
    		{ height: "28" },
    		{ viewBox: "0 0 28 28" },
    		{ xmlns: "http://www.w3.org/2000/svg" },
    		/*$$props*/ ctx[0]
    	];

    	let svg_data = {};

    	for (let i = 0; i < svg_levels.length; i += 1) {
    		svg_data = assign(svg_data, svg_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");
    			path = svg_element("path");
    			attr_dev(path, "fill-rule", "evenodd");
    			attr_dev(path, "clip-rule", "evenodd");
    			attr_dev(path, "d", "M16.4786 7.64645C16.6738 7.84171 16.6738 8.15829 16.4786 8.35355L10.7071 14.125L16.4786 19.8964C16.6738 20.0917 16.6738 20.4083 16.4786 20.6036C16.2833 20.7988 15.9667 20.7988 15.7714 20.6036L9.64645 14.4786C9.45118 14.2833 9.45118 13.9667 9.64645 13.7714L15.7714 7.64645C15.9667 7.45118 16.2833 7.45118 16.4786 7.64645Z");
    			add_location(path, file$1T, 1, 0, 98);
    			set_svg_attributes(svg, svg_data);
    			add_location(svg, file$1T, 0, 0, 0);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);
    			append_dev(svg, path);
    		},
    		p: function update(ctx, [dirty]) {
    			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
    				{ width: "28" },
    				{ height: "28" },
    				{ viewBox: "0 0 28 28" },
    				{ xmlns: "http://www.w3.org/2000/svg" },
    				dirty & /*$$props*/ 1 && /*$$props*/ ctx[0]
    			]));
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$1U.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$1U($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Angle_left_svg', slots, []);

    	$$self.$$set = $$new_props => {
    		$$invalidate(0, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    	};

    	$$self.$inject_state = $$new_props => {
    		$$invalidate(0, $$props = assign(assign({}, $$props), $$new_props));
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$props = exclude_internal_props($$props);
    	return [$$props];
    }

    class Angle_left_svg extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$1U, create_fragment$1U, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Angle_left_svg",
    			options,
    			id: create_fragment$1U.name
    		});
    	}
    }

    var angleLeft_svg = /*#__PURE__*/Object.freeze({
        __proto__: null,
        'default': Angle_left_svg
    });

    var require$$1$1 = /*@__PURE__*/getAugmentedNamespace(angleLeft_svg);

    /* dist/components/icon/svgs/angle-right.svg.svelte generated by Svelte v3.42.1 */

    const file$1S = "dist/components/icon/svgs/angle-right.svg.svelte";

    function create_fragment$1T(ctx) {
    	let svg;
    	let path;

    	let svg_levels = [
    		{ width: "28" },
    		{ height: "28" },
    		{ viewBox: "0 0 28 28" },
    		{ xmlns: "http://www.w3.org/2000/svg" },
    		/*$$props*/ ctx[0]
    	];

    	let svg_data = {};

    	for (let i = 0; i < svg_levels.length; i += 1) {
    		svg_data = assign(svg_data, svg_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");
    			path = svg_element("path");
    			attr_dev(path, "fill-rule", "evenodd");
    			attr_dev(path, "clip-rule", "evenodd");
    			attr_dev(path, "d", "M11.5214 7.64645C11.3262 7.84171 11.3262 8.15829 11.5214 8.35355L17.2929 14.125L11.5214 19.8964C11.3262 20.0917 11.3262 20.4083 11.5214 20.6036C11.7167 20.7988 12.0333 20.7988 12.2286 20.6036L18.3536 14.4786C18.5488 14.2833 18.5488 13.9667 18.3536 13.7714L12.2286 7.64645C12.0333 7.45118 11.7167 7.45118 11.5214 7.64645Z");
    			add_location(path, file$1S, 1, 0, 98);
    			set_svg_attributes(svg, svg_data);
    			add_location(svg, file$1S, 0, 0, 0);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);
    			append_dev(svg, path);
    		},
    		p: function update(ctx, [dirty]) {
    			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
    				{ width: "28" },
    				{ height: "28" },
    				{ viewBox: "0 0 28 28" },
    				{ xmlns: "http://www.w3.org/2000/svg" },
    				dirty & /*$$props*/ 1 && /*$$props*/ ctx[0]
    			]));
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$1T.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$1T($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Angle_right_svg', slots, []);

    	$$self.$$set = $$new_props => {
    		$$invalidate(0, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    	};

    	$$self.$inject_state = $$new_props => {
    		$$invalidate(0, $$props = assign(assign({}, $$props), $$new_props));
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$props = exclude_internal_props($$props);
    	return [$$props];
    }

    class Angle_right_svg extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$1T, create_fragment$1T, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Angle_right_svg",
    			options,
    			id: create_fragment$1T.name
    		});
    	}
    }

    var angleRight_svg = /*#__PURE__*/Object.freeze({
        __proto__: null,
        'default': Angle_right_svg
    });

    var require$$2$1 = /*@__PURE__*/getAugmentedNamespace(angleRight_svg);

    /* dist/components/icon/svgs/angle-up.svg.svelte generated by Svelte v3.42.1 */

    const file$1R = "dist/components/icon/svgs/angle-up.svg.svelte";

    function create_fragment$1S(ctx) {
    	let svg;
    	let path;

    	let svg_levels = [
    		{ width: "28" },
    		{ height: "28" },
    		{ viewBox: "0 0 28 28" },
    		{ xmlns: "http://www.w3.org/2000/svg" },
    		/*$$props*/ ctx[0]
    	];

    	let svg_data = {};

    	for (let i = 0; i < svg_levels.length; i += 1) {
    		svg_data = assign(svg_data, svg_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");
    			path = svg_element("path");
    			attr_dev(path, "fill-rule", "evenodd");
    			attr_dev(path, "clip-rule", "evenodd");
    			attr_dev(path, "d", "M20.3536 16.4786C20.1583 16.6738 19.8417 16.6738 19.6464 16.4786L13.875 10.7071L8.10355 16.4786C7.90829 16.6738 7.59171 16.6738 7.39645 16.4786C7.20118 16.2833 7.20118 15.9667 7.39645 15.7714L13.5214 9.64645C13.7167 9.45118 14.0333 9.45118 14.2286 9.64645L20.3536 15.7714C20.5488 15.9667 20.5488 16.2833 20.3536 16.4786Z");
    			add_location(path, file$1R, 1, 0, 98);
    			set_svg_attributes(svg, svg_data);
    			add_location(svg, file$1R, 0, 0, 0);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);
    			append_dev(svg, path);
    		},
    		p: function update(ctx, [dirty]) {
    			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
    				{ width: "28" },
    				{ height: "28" },
    				{ viewBox: "0 0 28 28" },
    				{ xmlns: "http://www.w3.org/2000/svg" },
    				dirty & /*$$props*/ 1 && /*$$props*/ ctx[0]
    			]));
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$1S.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$1S($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Angle_up_svg', slots, []);

    	$$self.$$set = $$new_props => {
    		$$invalidate(0, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    	};

    	$$self.$inject_state = $$new_props => {
    		$$invalidate(0, $$props = assign(assign({}, $$props), $$new_props));
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$props = exclude_internal_props($$props);
    	return [$$props];
    }

    class Angle_up_svg extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$1S, create_fragment$1S, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Angle_up_svg",
    			options,
    			id: create_fragment$1S.name
    		});
    	}
    }

    var angleUp_svg = /*#__PURE__*/Object.freeze({
        __proto__: null,
        'default': Angle_up_svg
    });

    var require$$3$1 = /*@__PURE__*/getAugmentedNamespace(angleUp_svg);

    /* dist/components/icon/svgs/arrow.svg.svelte generated by Svelte v3.42.1 */

    const file$1Q = "dist/components/icon/svgs/arrow.svg.svelte";

    function create_fragment$1R(ctx) {
    	let svg;
    	let path;

    	let svg_levels = [
    		{ width: "28" },
    		{ height: "28" },
    		{ viewBox: "0 0 28 28" },
    		{ xmlns: "http://www.w3.org/2000/svg" },
    		/*$$props*/ ctx[0]
    	];

    	let svg_data = {};

    	for (let i = 0; i < svg_levels.length; i += 1) {
    		svg_data = assign(svg_data, svg_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");
    			path = svg_element("path");
    			attr_dev(path, "fill-rule", "evenodd");
    			attr_dev(path, "clip-rule", "evenodd");
    			attr_dev(path, "d", "M16.2715 7.52145C16.0762 7.71671 16.0762 8.03329 16.2715 8.22855L21.5429 13.5H3.4563C3.18016 13.5 2.9563 13.7239 2.9563 14C2.9563 14.2761 3.18016 14.5 3.4563 14.5H21.5429L16.2715 19.7714C16.0762 19.9667 16.0762 20.2833 16.2715 20.4786C16.4668 20.6738 16.7833 20.6738 16.9786 20.4786L23.1036 14.3536C23.2989 14.1583 23.2989 13.8417 23.1036 13.6464L16.9786 7.52145C16.7833 7.32618 16.4668 7.32618 16.2715 7.52145Z");
    			add_location(path, file$1Q, 1, 0, 98);
    			set_svg_attributes(svg, svg_data);
    			add_location(svg, file$1Q, 0, 0, 0);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);
    			append_dev(svg, path);
    		},
    		p: function update(ctx, [dirty]) {
    			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
    				{ width: "28" },
    				{ height: "28" },
    				{ viewBox: "0 0 28 28" },
    				{ xmlns: "http://www.w3.org/2000/svg" },
    				dirty & /*$$props*/ 1 && /*$$props*/ ctx[0]
    			]));
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$1R.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$1R($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Arrow_svg', slots, []);

    	$$self.$$set = $$new_props => {
    		$$invalidate(0, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    	};

    	$$self.$inject_state = $$new_props => {
    		$$invalidate(0, $$props = assign(assign({}, $$props), $$new_props));
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$props = exclude_internal_props($$props);
    	return [$$props];
    }

    class Arrow_svg extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$1R, create_fragment$1R, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Arrow_svg",
    			options,
    			id: create_fragment$1R.name
    		});
    	}
    }

    var arrow_svg = /*#__PURE__*/Object.freeze({
        __proto__: null,
        'default': Arrow_svg
    });

    var require$$4$1 = /*@__PURE__*/getAugmentedNamespace(arrow_svg);

    /* dist/components/icon/svgs/article.svg.svelte generated by Svelte v3.42.1 */

    const file$1P = "dist/components/icon/svgs/article.svg.svelte";

    function create_fragment$1Q(ctx) {
    	let svg;
    	let path;

    	let svg_levels = [
    		{ width: "56" },
    		{ height: "56" },
    		{ viewBox: "0 0 56 56" },
    		{ xmlns: "http://www.w3.org/2000/svg" },
    		/*$$props*/ ctx[0]
    	];

    	let svg_data = {};

    	for (let i = 0; i < svg_levels.length; i += 1) {
    		svg_data = assign(svg_data, svg_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");
    			path = svg_element("path");
    			attr_dev(path, "fill-rule", "evenodd");
    			attr_dev(path, "clip-rule", "evenodd");
    			attr_dev(path, "d", "M6.05683 9.05218C6.04799 9.06114 6 9.11343 6 9.27148V25.7909C6 25.949 6.04799 26.0013 6.05683 26.0102C6.06453 26.018 6.10977 26.0624 6.25515 26.0624H25.6826C25.828 26.0624 25.8732 26.018 25.8809 26.0102C25.8898 26.0013 25.9378 25.949 25.9378 25.7909V9.27148C25.9378 9.11343 25.8898 9.06113 25.8809 9.05218C25.8732 9.04437 25.828 9 25.6826 9H6.25515C6.10977 9 6.06453 9.04437 6.05683 9.05218ZM4.6335 7.64714C5.0651 7.20992 5.64744 7 6.25515 7H25.6826C26.2903 7 26.8727 7.20992 27.3043 7.64714C27.7347 8.0832 27.9378 8.66664 27.9378 9.27148V25.7909C27.9378 26.3958 27.7347 26.9792 27.3043 27.4153C26.8727 27.8525 26.2903 28.0624 25.6826 28.0624H6.25515C5.64744 28.0624 5.0651 27.8525 4.6335 27.4153C4.20304 26.9792 4 26.3958 4 25.7909V9.27148C4 8.66664 4.20304 8.0832 4.6335 7.64714ZM35.5423 8C35.5423 7.44772 35.9901 7 36.5424 7H52C52.5523 7 53 7.44772 53 8C53 8.55228 52.5523 9 52 9H36.5424C35.9901 9 35.5423 8.55228 35.5423 8ZM35.5423 16.9507C35.5423 16.3985 35.9901 15.9507 36.5424 15.9507H52C52.5523 15.9507 53 16.3985 53 16.9507C53 17.503 52.5523 17.9507 52 17.9507H36.5424C35.9901 17.9507 35.5423 17.503 35.5423 16.9507ZM35.5423 27.0624C35.5423 26.5101 35.9901 26.0624 36.5424 26.0624H52C52.5523 26.0624 53 26.5101 53 27.0624C53 27.6147 52.5523 28.0624 52 28.0624H36.5424C35.9901 28.0624 35.5423 27.6147 35.5423 27.0624ZM4 37.1741C4 36.6218 4.44772 36.1741 5 36.1741H52C52.5523 36.1741 53 36.6218 53 37.1741C53 37.7263 52.5523 38.1741 52 38.1741H5C4.44772 38.1741 4 37.7263 4 37.1741ZM4 47.2857C4 46.7334 4.44772 46.2857 5 46.2857H18C18.5523 46.2857 19 46.7334 19 47.2857C19 47.838 18.5523 48.2857 18 48.2857H5C4.44772 48.2857 4 47.838 4 47.2857ZM24.5 47.2857C24.5 46.7334 24.9477 46.2857 25.5 46.2857H30C30.5523 46.2857 31 46.7334 31 47.2857C31 47.838 30.5523 48.2857 30 48.2857H25.5C24.9477 48.2857 24.5 47.838 24.5 47.2857Z");
    			add_location(path, file$1P, 1, 0, 98);
    			set_svg_attributes(svg, svg_data);
    			add_location(svg, file$1P, 0, 0, 0);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);
    			append_dev(svg, path);
    		},
    		p: function update(ctx, [dirty]) {
    			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
    				{ width: "56" },
    				{ height: "56" },
    				{ viewBox: "0 0 56 56" },
    				{ xmlns: "http://www.w3.org/2000/svg" },
    				dirty & /*$$props*/ 1 && /*$$props*/ ctx[0]
    			]));
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$1Q.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$1Q($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Article_svg', slots, []);

    	$$self.$$set = $$new_props => {
    		$$invalidate(0, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    	};

    	$$self.$inject_state = $$new_props => {
    		$$invalidate(0, $$props = assign(assign({}, $$props), $$new_props));
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$props = exclude_internal_props($$props);
    	return [$$props];
    }

    class Article_svg extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$1Q, create_fragment$1Q, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Article_svg",
    			options,
    			id: create_fragment$1Q.name
    		});
    	}
    }

    var article_svg = /*#__PURE__*/Object.freeze({
        __proto__: null,
        'default': Article_svg
    });

    var require$$5$1 = /*@__PURE__*/getAugmentedNamespace(article_svg);

    /* dist/components/icon/svgs/at.svg.svelte generated by Svelte v3.42.1 */

    const file$1O = "dist/components/icon/svgs/at.svg.svelte";

    function create_fragment$1P(ctx) {
    	let svg;
    	let path;

    	let svg_levels = [
    		{ width: "28" },
    		{ height: "28" },
    		{ viewBox: "0 0 28 28" },
    		{ xmlns: "http://www.w3.org/2000/svg" },
    		/*$$props*/ ctx[0]
    	];

    	let svg_data = {};

    	for (let i = 0; i < svg_levels.length; i += 1) {
    		svg_data = assign(svg_data, svg_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");
    			path = svg_element("path");
    			attr_dev(path, "fill-rule", "evenodd");
    			attr_dev(path, "clip-rule", "evenodd");
    			attr_dev(path, "d", "M14 4C8.47715 4 4 8.47715 4 14C4 19.5228 8.47715 24 14 24C14.5523 24 15 24.4477 15 25C15 25.5523 14.5523 26 14 26C7.37258 26 2 20.6274 2 14C2 7.37258 7.37258 2 14 2C20.6274 2 26 7.37258 26 14V16C26 18.2091 24.2091 20 22 20C20.5017 20 19.1958 19.1762 18.5105 17.9568C17.4108 19.2093 15.7978 20 14 20C10.6863 20 8 17.3137 8 14C8 10.6863 10.6863 8 14 8C15.5367 8 16.9385 8.57771 18 9.52779V9C18 8.44772 18.4477 8 19 8C19.5523 8 20 8.44772 20 9V16C20 17.1046 20.8954 18 22 18C23.1046 18 24 17.1046 24 16V14C24 8.47715 19.5228 4 14 4ZM18 14C18 11.7909 16.2091 10 14 10C11.7909 10 10 11.7909 10 14C10 16.2091 11.7909 18 14 18C16.2091 18 18 16.2091 18 14Z");
    			add_location(path, file$1O, 1, 0, 98);
    			set_svg_attributes(svg, svg_data);
    			add_location(svg, file$1O, 0, 0, 0);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);
    			append_dev(svg, path);
    		},
    		p: function update(ctx, [dirty]) {
    			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
    				{ width: "28" },
    				{ height: "28" },
    				{ viewBox: "0 0 28 28" },
    				{ xmlns: "http://www.w3.org/2000/svg" },
    				dirty & /*$$props*/ 1 && /*$$props*/ ctx[0]
    			]));
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$1P.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$1P($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('At_svg', slots, []);

    	$$self.$$set = $$new_props => {
    		$$invalidate(0, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    	};

    	$$self.$inject_state = $$new_props => {
    		$$invalidate(0, $$props = assign(assign({}, $$props), $$new_props));
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$props = exclude_internal_props($$props);
    	return [$$props];
    }

    class At_svg extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$1P, create_fragment$1P, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "At_svg",
    			options,
    			id: create_fragment$1P.name
    		});
    	}
    }

    var at_svg = /*#__PURE__*/Object.freeze({
        __proto__: null,
        'default': At_svg
    });

    var require$$6$1 = /*@__PURE__*/getAugmentedNamespace(at_svg);

    /* dist/components/icon/svgs/bookmark.svg.svelte generated by Svelte v3.42.1 */

    const file$1N = "dist/components/icon/svgs/bookmark.svg.svelte";

    function create_fragment$1O(ctx) {
    	let svg;
    	let path0;
    	let path1;
    	let path2;
    	let path3;

    	let svg_levels = [
    		{ width: "28" },
    		{ height: "28" },
    		{ viewBox: "0 0 28 28" },
    		{ xmlns: "http://www.w3.org/2000/svg" },
    		/*$$props*/ ctx[0]
    	];

    	let svg_data = {};

    	for (let i = 0; i < svg_levels.length; i += 1) {
    		svg_data = assign(svg_data, svg_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");
    			path0 = svg_element("path");
    			path1 = svg_element("path");
    			path2 = svg_element("path");
    			path3 = svg_element("path");
    			attr_dev(path0, "fill-rule", "evenodd");
    			attr_dev(path0, "clip-rule", "evenodd");
    			attr_dev(path0, "d", "M6.57424 5.5H5C4.58638 5.5 4.20284 5.64006 3.92145 5.92145C3.64006 6.20284 3.5 6.58638 3.5 7V22C3.5 22.4136 3.64006 22.7972 3.92145 23.0786C4.20284 23.3599 4.58638 23.5 5 23.5H23C23.4136 23.5 23.7972 23.3599 24.0786 23.0786C24.3599 22.7972 24.5 22.4136 24.5 22V7C24.5 6.58638 24.3599 6.20284 24.0786 5.92145C23.7972 5.64006 23.4136 5.5 23 5.5H14.4258C14.3574 5.28217 14.2417 5.08463 14.0786 4.92145C13.7972 4.64006 13.4136 4.5 13 4.5H8C7.58638 4.5 7.20284 4.64006 6.92145 4.92145C6.75826 5.08463 6.64261 5.28217 6.57424 5.5ZM7.5 6C7.5 5.81362 7.55994 5.69716 7.62855 5.62855C7.69716 5.55994 7.81362 5.5 8 5.5H13C13.1864 5.5 13.3028 5.55994 13.3714 5.62855C13.4401 5.69716 13.5 5.81362 13.5 6V14.6693L10.8763 11.6707C10.7813 11.5622 10.6442 11.5 10.5 11.5C10.3558 11.5 10.2187 11.5622 10.1237 11.6707L7.5 14.6693V6ZM14.5 6.5V15C14.5 15.1699 14.4752 15.347 14.4074 15.5073C14.3399 15.6668 14.2108 15.8492 13.9857 15.9392C13.7525 16.0325 13.5228 15.9845 13.348 15.8939C13.1827 15.8082 13.04 15.6737 12.9169 15.5215L10.5 12.7593L8.07629 15.5293C8.06898 15.5376 8.0614 15.5457 8.05355 15.5536C7.92754 15.6796 7.78652 15.79 7.63194 15.8615C7.47838 15.9326 7.27343 15.9815 7.05633 15.9164C6.82783 15.8479 6.68051 15.6818 6.60028 15.5104C6.52421 15.3479 6.5 15.1681 6.5 15V6.5H5C4.81362 6.5 4.69716 6.55994 4.62855 6.62855C4.55994 6.69716 4.5 6.81362 4.5 7V22C4.5 22.1864 4.55994 22.3028 4.62855 22.3714C4.69716 22.4401 4.81362 22.5 5 22.5H23C23.1864 22.5 23.3028 22.4401 23.3714 22.3714C23.4401 22.3028 23.5 22.1864 23.5 22V7C23.5 6.81362 23.4401 6.69716 23.3714 6.62855C23.3028 6.55994 23.1864 6.5 23 6.5H14.5Z");
    			add_location(path0, file$1N, 1, 0, 98);
    			attr_dev(path1, "fill-rule", "evenodd");
    			attr_dev(path1, "clip-rule", "evenodd");
    			attr_dev(path1, "d", "M16.5 11C16.5 10.7239 16.7239 10.5 17 10.5H21C21.2761 10.5 21.5 10.7239 21.5 11C21.5 11.2761 21.2761 11.5 21 11.5H17C16.7239 11.5 16.5 11.2761 16.5 11Z");
    			add_location(path1, file$1N, 2, 0, 1755);
    			attr_dev(path2, "fill-rule", "evenodd");
    			attr_dev(path2, "clip-rule", "evenodd");
    			attr_dev(path2, "d", "M16.5 14C16.5 13.7239 16.7239 13.5 17 13.5H21C21.2761 13.5 21.5 13.7239 21.5 14C21.5 14.2761 21.2761 14.5 21 14.5H17C16.7239 14.5 16.5 14.2761 16.5 14Z");
    			add_location(path2, file$1N, 3, 0, 1959);
    			attr_dev(path3, "fill-rule", "evenodd");
    			attr_dev(path3, "clip-rule", "evenodd");
    			attr_dev(path3, "d", "M6.5 19C6.5 18.7239 6.72386 18.5 7 18.5H21C21.2761 18.5 21.5 18.7239 21.5 19C21.5 19.2761 21.2761 19.5 21 19.5H7C6.72386 19.5 6.5 19.2761 6.5 19Z");
    			add_location(path3, file$1N, 4, 0, 2163);
    			set_svg_attributes(svg, svg_data);
    			add_location(svg, file$1N, 0, 0, 0);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);
    			append_dev(svg, path0);
    			append_dev(svg, path1);
    			append_dev(svg, path2);
    			append_dev(svg, path3);
    		},
    		p: function update(ctx, [dirty]) {
    			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
    				{ width: "28" },
    				{ height: "28" },
    				{ viewBox: "0 0 28 28" },
    				{ xmlns: "http://www.w3.org/2000/svg" },
    				dirty & /*$$props*/ 1 && /*$$props*/ ctx[0]
    			]));
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$1O.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$1O($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Bookmark_svg', slots, []);

    	$$self.$$set = $$new_props => {
    		$$invalidate(0, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    	};

    	$$self.$inject_state = $$new_props => {
    		$$invalidate(0, $$props = assign(assign({}, $$props), $$new_props));
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$props = exclude_internal_props($$props);
    	return [$$props];
    }

    class Bookmark_svg extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$1O, create_fragment$1O, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Bookmark_svg",
    			options,
    			id: create_fragment$1O.name
    		});
    	}
    }

    var bookmark_svg = /*#__PURE__*/Object.freeze({
        __proto__: null,
        'default': Bookmark_svg
    });

    var require$$7$1 = /*@__PURE__*/getAugmentedNamespace(bookmark_svg);

    /* dist/components/icon/svgs/calendar.svg.svelte generated by Svelte v3.42.1 */

    const file$1M = "dist/components/icon/svgs/calendar.svg.svelte";

    function create_fragment$1N(ctx) {
    	let svg;
    	let path;

    	let svg_levels = [
    		{ width: "28" },
    		{ height: "28" },
    		{ viewBox: "0 0 28 28" },
    		{ xmlns: "http://www.w3.org/2000/svg" },
    		/*$$props*/ ctx[0]
    	];

    	let svg_data = {};

    	for (let i = 0; i < svg_levels.length; i += 1) {
    		svg_data = assign(svg_data, svg_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");
    			path = svg_element("path");
    			attr_dev(path, "fill-rule", "evenodd");
    			attr_dev(path, "clip-rule", "evenodd");
    			attr_dev(path, "d", "M9.00022 2.5C9.27636 2.5 9.50022 2.72386 9.50022 3V4.5014H18.4998V3C18.4998 2.72386 18.7237 2.5 18.9998 2.5C19.2759 2.5 19.4998 2.72386 19.4998 3V4.5014H22.9972C23.8254 4.5014 24.4954 5.17164 24.4954 5.9998V9.93449C24.4984 9.95676 24.5 9.9795 24.5 10.0026C24.5 10.0257 24.4984 10.0484 24.4954 10.0707V23.0016C24.4954 23.8298 23.8254 24.5 22.9972 24.5H4.9982C4.16996 24.5 3.5 23.8298 3.5 23.0016V5.9998C3.5 5.17164 4.16996 4.5014 4.9982 4.5014H8.50022V3C8.50022 2.72386 8.72407 2.5 9.00022 2.5ZM8.50022 5.5014H4.9982C4.72244 5.5014 4.5 5.72374 4.5 5.9998V9.5026H23.4954V5.9998C23.4954 5.72374 23.273 5.5014 22.9972 5.5014H19.4998V7C19.4998 7.27614 19.2759 7.5 18.9998 7.5C18.7237 7.5 18.4998 7.27614 18.4998 7V5.5014H9.50022V7C9.50022 7.27614 9.27636 7.5 9.00022 7.5C8.72407 7.5 8.50022 7.27614 8.50022 7V5.5014ZM23.4954 10.5026H4.5V23.0016C4.5 23.2777 4.72244 23.5 4.9982 23.5H22.9972C23.273 23.5 23.4954 23.2777 23.4954 23.0016V10.5026Z");
    			add_location(path, file$1M, 1, 0, 98);
    			set_svg_attributes(svg, svg_data);
    			add_location(svg, file$1M, 0, 0, 0);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);
    			append_dev(svg, path);
    		},
    		p: function update(ctx, [dirty]) {
    			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
    				{ width: "28" },
    				{ height: "28" },
    				{ viewBox: "0 0 28 28" },
    				{ xmlns: "http://www.w3.org/2000/svg" },
    				dirty & /*$$props*/ 1 && /*$$props*/ ctx[0]
    			]));
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$1N.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$1N($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Calendar_svg', slots, []);

    	$$self.$$set = $$new_props => {
    		$$invalidate(0, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    	};

    	$$self.$inject_state = $$new_props => {
    		$$invalidate(0, $$props = assign(assign({}, $$props), $$new_props));
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$props = exclude_internal_props($$props);
    	return [$$props];
    }

    class Calendar_svg extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$1N, create_fragment$1N, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Calendar_svg",
    			options,
    			id: create_fragment$1N.name
    		});
    	}
    }

    var calendar_svg = /*#__PURE__*/Object.freeze({
        __proto__: null,
        'default': Calendar_svg
    });

    var require$$8$1 = /*@__PURE__*/getAugmentedNamespace(calendar_svg);

    /* dist/components/icon/svgs/check-circle.svg.svelte generated by Svelte v3.42.1 */

    const file$1L = "dist/components/icon/svgs/check-circle.svg.svelte";

    function create_fragment$1M(ctx) {
    	let svg;
    	let path;

    	let svg_levels = [
    		{ width: "28" },
    		{ height: "28" },
    		{ viewBox: "0 0 28 28" },
    		{ xmlns: "http://www.w3.org/2000/svg" },
    		/*$$props*/ ctx[0]
    	];

    	let svg_data = {};

    	for (let i = 0; i < svg_levels.length; i += 1) {
    		svg_data = assign(svg_data, svg_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");
    			path = svg_element("path");
    			attr_dev(path, "fill-rule", "evenodd");
    			attr_dev(path, "clip-rule", "evenodd");
    			attr_dev(path, "d", "M14 3C7.92487 3 3 7.92487 3 14C3 20.0751 7.92487 25 14 25C20.0751 25 25 20.0751 25 14C25 7.92487 20.0751 3 14 3ZM1 14C1 6.8203 6.8203 1 14 1C21.1797 1 27 6.8203 27 14C27 21.1797 21.1797 27 14 27C6.8203 27 1 21.1797 1 14ZM20.0035 9.25787C20.4134 9.62806 20.4455 10.2604 20.0754 10.6703L13.062 18.435C12.7 18.8358 12.0851 18.8767 11.6732 18.5274L8.01983 15.4293C7.5986 15.0721 7.5467 14.4411 7.9039 14.0199C8.2611 13.5987 8.89213 13.5467 9.31335 13.9039L12.2275 16.3751L18.5912 9.32968C18.9613 8.91983 19.5937 8.88768 20.0035 9.25787Z");
    			add_location(path, file$1L, 1, 0, 98);
    			set_svg_attributes(svg, svg_data);
    			add_location(svg, file$1L, 0, 0, 0);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);
    			append_dev(svg, path);
    		},
    		p: function update(ctx, [dirty]) {
    			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
    				{ width: "28" },
    				{ height: "28" },
    				{ viewBox: "0 0 28 28" },
    				{ xmlns: "http://www.w3.org/2000/svg" },
    				dirty & /*$$props*/ 1 && /*$$props*/ ctx[0]
    			]));
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$1M.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$1M($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Check_circle_svg', slots, []);

    	$$self.$$set = $$new_props => {
    		$$invalidate(0, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    	};

    	$$self.$inject_state = $$new_props => {
    		$$invalidate(0, $$props = assign(assign({}, $$props), $$new_props));
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$props = exclude_internal_props($$props);
    	return [$$props];
    }

    class Check_circle_svg extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$1M, create_fragment$1M, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Check_circle_svg",
    			options,
    			id: create_fragment$1M.name
    		});
    	}
    }

    var checkCircle_svg = /*#__PURE__*/Object.freeze({
        __proto__: null,
        'default': Check_circle_svg
    });

    var require$$9$1 = /*@__PURE__*/getAugmentedNamespace(checkCircle_svg);

    /* dist/components/icon/svgs/check.svg.svelte generated by Svelte v3.42.1 */

    const file$1K = "dist/components/icon/svgs/check.svg.svelte";

    function create_fragment$1L(ctx) {
    	let svg;
    	let path;

    	let svg_levels = [
    		{ width: "28" },
    		{ height: "28" },
    		{ viewBox: "0 0 28 28" },
    		{ xmlns: "http://www.w3.org/2000/svg" },
    		/*$$props*/ ctx[0]
    	];

    	let svg_data = {};

    	for (let i = 0; i < svg_levels.length; i += 1) {
    		svg_data = assign(svg_data, svg_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");
    			path = svg_element("path");
    			attr_dev(path, "fill-rule", "evenodd");
    			attr_dev(path, "clip-rule", "evenodd");
    			attr_dev(path, "d", "M24.6703 5.25785C25.0802 5.62804 25.1123 6.26039 24.7421 6.67024L10.9536 21.9359C10.5893 22.3393 9.96948 22.3778 9.55804 22.0226L3.34652 16.6599C2.92848 16.299 2.88217 15.6675 3.24308 15.2495C3.604 14.8315 4.23547 14.7851 4.65351 15.1461L10.1249 19.8697L23.2579 5.32966C23.6281 4.91981 24.2605 4.88766 24.6703 5.25785Z");
    			add_location(path, file$1K, 1, 0, 98);
    			set_svg_attributes(svg, svg_data);
    			add_location(svg, file$1K, 0, 0, 0);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);
    			append_dev(svg, path);
    		},
    		p: function update(ctx, [dirty]) {
    			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
    				{ width: "28" },
    				{ height: "28" },
    				{ viewBox: "0 0 28 28" },
    				{ xmlns: "http://www.w3.org/2000/svg" },
    				dirty & /*$$props*/ 1 && /*$$props*/ ctx[0]
    			]));
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$1L.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$1L($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Check_svg', slots, []);

    	$$self.$$set = $$new_props => {
    		$$invalidate(0, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    	};

    	$$self.$inject_state = $$new_props => {
    		$$invalidate(0, $$props = assign(assign({}, $$props), $$new_props));
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$props = exclude_internal_props($$props);
    	return [$$props];
    }

    class Check_svg extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$1L, create_fragment$1L, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Check_svg",
    			options,
    			id: create_fragment$1L.name
    		});
    	}
    }

    var check_svg = /*#__PURE__*/Object.freeze({
        __proto__: null,
        'default': Check_svg
    });

    var require$$10$1 = /*@__PURE__*/getAugmentedNamespace(check_svg);

    /* dist/components/icon/svgs/clock.svg.svelte generated by Svelte v3.42.1 */

    const file$1J = "dist/components/icon/svgs/clock.svg.svelte";

    function create_fragment$1K(ctx) {
    	let svg;
    	let path0;
    	let path1;

    	let svg_levels = [
    		{ width: "28" },
    		{ height: "28" },
    		{ viewBox: "0 0 28 28" },
    		{ xmlns: "http://www.w3.org/2000/svg" },
    		/*$$props*/ ctx[0]
    	];

    	let svg_data = {};

    	for (let i = 0; i < svg_levels.length; i += 1) {
    		svg_data = assign(svg_data, svg_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");
    			path0 = svg_element("path");
    			path1 = svg_element("path");
    			attr_dev(path0, "d", "M14 8.5C14 8.22386 13.7761 8 13.5 8C13.2239 8 13 8.22386 13 8.5V13.4511C13 13.9639 13.262 14.4412 13.6947 14.7165L18.7316 17.9218C18.9645 18.0701 19.2736 18.0014 19.4218 17.7684C19.5701 17.5355 19.5014 17.2264 19.2684 17.0782L14.2316 13.8729C14.0873 13.7811 14 13.622 14 13.4511V8.5Z");
    			add_location(path0, file$1J, 1, 0, 98);
    			attr_dev(path1, "fill-rule", "evenodd");
    			attr_dev(path1, "clip-rule", "evenodd");
    			attr_dev(path1, "d", "M14 2C7.32386 2 2 7.32386 2 14C2 20.6761 7.32386 26 14 26C20.6761 26 26 20.6761 26 14C26 7.32386 20.6761 2 14 2ZM3 14C3 7.87614 7.87614 3 14 3C20.1239 3 25 7.87614 25 14C25 20.1239 20.1239 25 14 25C7.87614 25 3 20.1239 3 14Z");
    			add_location(path1, file$1J, 2, 0, 394);
    			set_svg_attributes(svg, svg_data);
    			add_location(svg, file$1J, 0, 0, 0);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);
    			append_dev(svg, path0);
    			append_dev(svg, path1);
    		},
    		p: function update(ctx, [dirty]) {
    			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
    				{ width: "28" },
    				{ height: "28" },
    				{ viewBox: "0 0 28 28" },
    				{ xmlns: "http://www.w3.org/2000/svg" },
    				dirty & /*$$props*/ 1 && /*$$props*/ ctx[0]
    			]));
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$1K.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$1K($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Clock_svg', slots, []);

    	$$self.$$set = $$new_props => {
    		$$invalidate(0, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    	};

    	$$self.$inject_state = $$new_props => {
    		$$invalidate(0, $$props = assign(assign({}, $$props), $$new_props));
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$props = exclude_internal_props($$props);
    	return [$$props];
    }

    class Clock_svg extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$1K, create_fragment$1K, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Clock_svg",
    			options,
    			id: create_fragment$1K.name
    		});
    	}
    }

    var clock_svg = /*#__PURE__*/Object.freeze({
        __proto__: null,
        'default': Clock_svg
    });

    var require$$11$1 = /*@__PURE__*/getAugmentedNamespace(clock_svg);

    /* dist/components/icon/svgs/cog.svg.svelte generated by Svelte v3.42.1 */

    const file$1I = "dist/components/icon/svgs/cog.svg.svelte";

    function create_fragment$1J(ctx) {
    	let svg;
    	let path;

    	let svg_levels = [
    		{ width: "28" },
    		{ height: "28" },
    		{ viewBox: "0 0 28 28" },
    		{ xmlns: "http://www.w3.org/2000/svg" },
    		/*$$props*/ ctx[0]
    	];

    	let svg_data = {};

    	for (let i = 0; i < svg_levels.length; i += 1) {
    		svg_data = assign(svg_data, svg_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");
    			path = svg_element("path");
    			attr_dev(path, "fill-rule", "evenodd");
    			attr_dev(path, "clip-rule", "evenodd");
    			attr_dev(path, "d", "M13.0478 3.63568L12.56 4.90938C12.3463 5.79322 11.656 6.40891 10.9293 6.70084C10.1683 7.00656 9.37949 7.00656 8.61852 6.70084C8.59272 6.69048 8.56737 6.67905 8.54253 6.66657L7.32228 6.05378C7.02096 5.9352 6.59175 5.99362 6.18966 6.33017C5.98911 6.49802 5.86387 6.92327 6.04567 7.36096L6.66517 8.70908C6.67238 8.72476 6.67917 8.74061 6.68555 8.75664C6.98887 9.51825 6.98887 10.3071 6.68555 11.0687C6.67533 11.0944 6.66404 11.1196 6.65173 11.1443C6.33876 11.773 5.74059 12.3697 4.98148 12.6746C4.95603 12.6849 4.93016 12.694 4.90395 12.7021L3.60697 13.103C3.2462 13.2768 3 13.6489 3 14.0524C3 14.4656 3.25813 14.8459 3.63309 15.014L4.90037 15.5035C5.78428 15.7194 6.39629 16.4146 6.68555 17.1409C6.98887 17.9025 6.98887 18.6914 6.68555 19.453C6.67533 19.4786 6.66404 19.5039 6.65173 19.5286L6.04142 20.7546C5.92106 21.0625 5.98171 21.4983 6.31742 21.9029C6.48363 22.1033 6.90178 22.2274 7.33298 22.0468L8.67509 21.4246C8.69083 21.4173 8.70676 21.4104 8.72286 21.404C9.48384 21.0982 10.2727 21.0982 11.0337 21.404C11.0595 21.4143 11.0848 21.4258 11.1096 21.4382C11.7354 21.7525 12.3269 22.3508 12.6305 23.1074L13.1475 24.3538C13.3141 24.7398 13.696 25 14.1043 25C14.4997 25 14.8702 24.7562 15.0446 24.3904L15.4311 23.1286C15.634 22.2244 16.3337 21.5953 17.0707 21.2992C17.8317 20.9934 18.6205 20.9934 19.3815 21.2992C19.4073 21.3095 19.4326 21.321 19.4575 21.3334L20.6795 21.9471C21.0542 22.0996 21.4347 22.0413 21.7435 21.7311C21.7649 21.7097 21.7872 21.6892 21.8103 21.6698C22.009 21.5035 22.1338 21.0846 21.9593 20.6513L21.3483 19.4238C21.336 19.3991 21.3247 19.3738 21.3144 19.3482C21.0111 18.5866 21.0111 17.7977 21.3144 17.0361C21.3247 17.0104 21.336 16.9852 21.3483 16.9605C21.6612 16.3318 22.2594 15.7351 23.0185 15.4302L23.0309 15.4252L23.031 15.4253L24.3669 14.9092C24.7419 14.7411 25 14.3608 25 13.9476C25 13.5441 24.7538 13.172 24.393 12.9982L23.1379 12.6103C22.2334 12.4054 21.6079 11.7006 21.3144 10.9639C21.0111 10.2023 21.0111 9.41344 21.3144 8.65184C21.3247 8.62616 21.336 8.60092 21.3483 8.57618L21.9594 7.34853C22.1133 6.96727 22.0535 6.5802 21.7435 6.26888C21.7222 6.24747 21.7019 6.22511 21.6826 6.20186C21.5164 6.00153 21.0982 5.87745 20.667 6.05805L19.3249 6.68019C19.3092 6.68749 19.2932 6.69437 19.2771 6.70084C18.5162 7.00656 17.7273 7.00656 16.9663 6.70084C16.9405 6.69048 16.9152 6.67905 16.8904 6.66657C16.2626 6.35132 15.6693 5.75016 15.3666 4.99008C15.3565 4.96477 15.3475 4.93906 15.3395 4.913L14.9402 3.60962C14.7659 3.24385 14.3953 3 14 3C13.5953 3 13.2167 3.25547 13.0478 3.63568ZM11.202 2.86517C11.6624 1.78608 12.7402 1 14 1C15.2598 1 16.3376 1.78608 16.798 2.86517C16.8119 2.89769 16.824 2.93092 16.8344 2.96473L17.2378 4.28166C17.3503 4.53974 17.5625 4.7535 17.7536 4.86099C18.0127 4.95568 18.2502 4.95311 18.5105 4.85328L19.8403 4.23684C19.8486 4.23297 19.857 4.22922 19.8655 4.22558C20.8797 3.78902 22.3129 3.86727 23.1917 4.88916C24.1001 5.82614 24.2444 7.0901 23.7893 8.15666C23.7817 8.17463 23.7735 8.19236 23.7648 8.20985L23.1596 9.42553C23.0586 9.69871 23.0629 9.94874 23.1725 10.2239C23.2904 10.5199 23.4798 10.6397 23.5882 10.6615C23.6214 10.6682 23.6542 10.6765 23.6866 10.6865L25.0431 11.1057C25.0771 11.1162 25.1105 11.1285 25.1432 11.1426C26.2213 11.6067 27 12.6892 27 13.9476C27 15.206 26.2213 16.2885 25.1432 16.7526C25.1316 16.7576 25.1199 16.7623 25.1082 16.7669L23.7589 17.2881C23.4922 17.3969 23.2681 17.6176 23.1567 17.8175C23.0628 18.0765 23.0637 18.3151 23.1596 18.5745L23.7648 19.7901C23.7735 19.8076 23.7817 19.8254 23.7893 19.8433C24.2221 20.8574 24.1458 22.2916 23.1295 23.1733C22.1955 24.0867 20.9322 24.2336 19.8655 23.7744C19.8475 23.7666 19.8296 23.7584 19.8121 23.7495L18.6021 23.1419C18.333 23.0417 18.0875 23.046 17.8163 23.155C17.5249 23.272 17.4034 23.4614 17.3807 23.5752C17.3742 23.6081 17.366 23.6407 17.3561 23.6728L16.9387 25.0353C16.9284 25.0691 16.9162 25.1023 16.9024 25.1348C16.4419 26.2139 15.3642 27 14.1043 27C12.8445 27 11.7668 26.2139 11.3063 25.1348L11.3024 25.1256L11.3024 25.1255L10.7807 23.8679L10.7753 23.8547C10.6669 23.5825 10.4452 23.3557 10.2464 23.2438C9.98734 23.1491 9.74977 23.1517 9.48951 23.2515L8.1597 23.868C8.15135 23.8718 8.14295 23.8756 8.1345 23.8792C7.10863 24.3208 5.65411 24.2357 4.77824 23.18C4.07835 22.3365 3.71642 21.1064 4.21067 19.9481C4.21834 19.9302 4.22653 19.9124 4.23523 19.895L4.84043 18.6793C4.94138 18.4061 4.93707 18.1561 4.82749 17.8809C4.70959 17.5849 4.52025 17.4651 4.41176 17.4433C4.35603 17.4321 4.30137 17.4162 4.24835 17.3957L2.89183 16.8717C2.88007 16.8671 2.86839 16.8624 2.8568 16.8574C1.77869 16.3933 1 15.3108 1 14.0524C1 12.794 1.77869 11.7115 2.8568 11.2474C2.88949 11.2333 2.92291 11.221 2.95692 11.2105L4.26756 10.8055C4.52261 10.6932 4.73562 10.4806 4.84326 10.2873C4.93877 10.0241 4.93624 9.78197 4.83567 9.51764L4.22178 8.18175C4.21796 8.17344 4.21426 8.16507 4.21067 8.15666C3.77296 7.13087 3.85601 5.67528 4.906 4.79647C5.74642 4.09306 6.9758 3.72683 8.1345 4.22558C8.15254 4.23335 8.17035 4.24164 8.1879 4.25046L9.39789 4.85809C9.66703 4.95832 9.91254 4.95396 10.1837 4.84501C10.4751 4.72797 10.5966 4.53858 10.6193 4.42479C10.6303 4.36946 10.646 4.31516 10.6661 4.26247L11.1879 2.90002C11.1924 2.88832 11.1971 2.8767 11.202 2.86517ZM8.30435 14.0524C8.30435 10.8841 10.8349 8.33624 14 8.33624C17.1651 8.33624 19.6957 10.8841 19.6957 14.0524C19.6957 17.2207 17.1651 19.7686 14 19.7686C10.8349 19.7686 8.30435 17.2207 8.30435 14.0524ZM14 10.3362C11.9477 10.3362 10.3043 11.9805 10.3043 14.0524C10.3043 16.1243 11.9477 17.7686 14 17.7686C16.0523 17.7686 17.6957 16.1243 17.6957 14.0524C17.6957 11.9805 16.0523 10.3362 14 10.3362Z");
    			add_location(path, file$1I, 1, 0, 98);
    			set_svg_attributes(svg, svg_data);
    			add_location(svg, file$1I, 0, 0, 0);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);
    			append_dev(svg, path);
    		},
    		p: function update(ctx, [dirty]) {
    			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
    				{ width: "28" },
    				{ height: "28" },
    				{ viewBox: "0 0 28 28" },
    				{ xmlns: "http://www.w3.org/2000/svg" },
    				dirty & /*$$props*/ 1 && /*$$props*/ ctx[0]
    			]));
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$1J.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$1J($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Cog_svg', slots, []);

    	$$self.$$set = $$new_props => {
    		$$invalidate(0, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    	};

    	$$self.$inject_state = $$new_props => {
    		$$invalidate(0, $$props = assign(assign({}, $$props), $$new_props));
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$props = exclude_internal_props($$props);
    	return [$$props];
    }

    class Cog_svg extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$1J, create_fragment$1J, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Cog_svg",
    			options,
    			id: create_fragment$1J.name
    		});
    	}
    }

    var cog_svg = /*#__PURE__*/Object.freeze({
        __proto__: null,
        'default': Cog_svg
    });

    var require$$12$1 = /*@__PURE__*/getAugmentedNamespace(cog_svg);

    /* dist/components/icon/svgs/creditcard-solid.svg.svelte generated by Svelte v3.42.1 */

    const file$1H = "dist/components/icon/svgs/creditcard-solid.svg.svelte";

    function create_fragment$1I(ctx) {
    	let svg;
    	let path0;
    	let path1;

    	let svg_levels = [
    		{ width: "28" },
    		{ height: "28" },
    		{ viewBox: "0 0 28 28" },
    		{ xmlns: "http://www.w3.org/2000/svg" },
    		/*$$props*/ ctx[0]
    	];

    	let svg_data = {};

    	for (let i = 0; i < svg_levels.length; i += 1) {
    		svg_data = assign(svg_data, svg_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");
    			path0 = svg_element("path");
    			path1 = svg_element("path");
    			attr_dev(path0, "d", "M0 7.5C0 5.567 1.567 4 3.5 4H24.5C26.433 4 28 5.567 28 7.5V9H0V7.5Z");
    			add_location(path0, file$1H, 1, 0, 98);
    			attr_dev(path1, "fill-rule", "evenodd");
    			attr_dev(path1, "clip-rule", "evenodd");
    			attr_dev(path1, "d", "M0 13H28V20.5C28 22.433 26.433 24 24.5 24H3.5C1.567 24 0 22.433 0 20.5V13ZM4 19C4 18.4477 4.44772 18 5 18H8C8.55228 18 9 18.4477 9 19C9 19.5523 8.55228 20 8 20H5C4.44772 20 4 19.5523 4 19ZM11 19C11 18.4477 11.4477 18 12 18H14C14.5523 18 15 18.4477 15 19C15 19.5523 14.5523 20 14 20H12C11.4477 20 11 19.5523 11 19Z");
    			add_location(path1, file$1H, 2, 0, 178);
    			set_svg_attributes(svg, svg_data);
    			add_location(svg, file$1H, 0, 0, 0);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);
    			append_dev(svg, path0);
    			append_dev(svg, path1);
    		},
    		p: function update(ctx, [dirty]) {
    			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
    				{ width: "28" },
    				{ height: "28" },
    				{ viewBox: "0 0 28 28" },
    				{ xmlns: "http://www.w3.org/2000/svg" },
    				dirty & /*$$props*/ 1 && /*$$props*/ ctx[0]
    			]));
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$1I.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$1I($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Creditcard_solid_svg', slots, []);

    	$$self.$$set = $$new_props => {
    		$$invalidate(0, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    	};

    	$$self.$inject_state = $$new_props => {
    		$$invalidate(0, $$props = assign(assign({}, $$props), $$new_props));
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$props = exclude_internal_props($$props);
    	return [$$props];
    }

    class Creditcard_solid_svg extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$1I, create_fragment$1I, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Creditcard_solid_svg",
    			options,
    			id: create_fragment$1I.name
    		});
    	}
    }

    var creditcardSolid_svg = /*#__PURE__*/Object.freeze({
        __proto__: null,
        'default': Creditcard_solid_svg
    });

    var require$$13$1 = /*@__PURE__*/getAugmentedNamespace(creditcardSolid_svg);

    /* dist/components/icon/svgs/creditcard.svg.svelte generated by Svelte v3.42.1 */

    const file$1G = "dist/components/icon/svgs/creditcard.svg.svelte";

    function create_fragment$1H(ctx) {
    	let svg;
    	let path0;
    	let path1;
    	let path2;

    	let svg_levels = [
    		{ width: "28" },
    		{ height: "28" },
    		{ viewBox: "0 0 28 28" },
    		{ xmlns: "http://www.w3.org/2000/svg" },
    		/*$$props*/ ctx[0]
    	];

    	let svg_data = {};

    	for (let i = 0; i < svg_levels.length; i += 1) {
    		svg_data = assign(svg_data, svg_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");
    			path0 = svg_element("path");
    			path1 = svg_element("path");
    			path2 = svg_element("path");
    			attr_dev(path0, "d", "M4 19C4 18.4477 4.44772 18 5 18H8C8.55228 18 9 18.4477 9 19C9 19.5523 8.55228 20 8 20H5C4.44772 20 4 19.5523 4 19Z");
    			add_location(path0, file$1G, 1, 0, 98);
    			attr_dev(path1, "d", "M12 18C11.4477 18 11 18.4477 11 19C11 19.5523 11.4477 20 12 20H14C14.5523 20 15 19.5523 15 19C15 18.4477 14.5523 18 14 18H12Z");
    			add_location(path1, file$1G, 2, 0, 225);
    			attr_dev(path2, "fill-rule", "evenodd");
    			attr_dev(path2, "clip-rule", "evenodd");
    			attr_dev(path2, "d", "M3.5 4C1.567 4 0 5.567 0 7.5V20.5C0 22.433 1.567 24 3.5 24H24.5C26.433 24 28 22.433 28 20.5V7.5C28 5.567 26.433 4 24.5 4H3.5ZM2 7.5C2 6.67157 2.67157 6 3.5 6H24.5C25.3284 6 26 6.67157 26 7.5V9H2V7.5ZM2 13V20.5C2 21.3284 2.67157 22 3.5 22H24.5C25.3284 22 26 21.3284 26 20.5V13H2Z");
    			add_location(path2, file$1G, 3, 0, 363);
    			set_svg_attributes(svg, svg_data);
    			add_location(svg, file$1G, 0, 0, 0);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);
    			append_dev(svg, path0);
    			append_dev(svg, path1);
    			append_dev(svg, path2);
    		},
    		p: function update(ctx, [dirty]) {
    			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
    				{ width: "28" },
    				{ height: "28" },
    				{ viewBox: "0 0 28 28" },
    				{ xmlns: "http://www.w3.org/2000/svg" },
    				dirty & /*$$props*/ 1 && /*$$props*/ ctx[0]
    			]));
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$1H.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$1H($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Creditcard_svg', slots, []);

    	$$self.$$set = $$new_props => {
    		$$invalidate(0, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    	};

    	$$self.$inject_state = $$new_props => {
    		$$invalidate(0, $$props = assign(assign({}, $$props), $$new_props));
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$props = exclude_internal_props($$props);
    	return [$$props];
    }

    class Creditcard_svg extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$1H, create_fragment$1H, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Creditcard_svg",
    			options,
    			id: create_fragment$1H.name
    		});
    	}
    }

    var creditcard_svg = /*#__PURE__*/Object.freeze({
        __proto__: null,
        'default': Creditcard_svg
    });

    var require$$14$1 = /*@__PURE__*/getAugmentedNamespace(creditcard_svg);

    /* dist/components/icon/svgs/ebplus-circle-solid.svg.svelte generated by Svelte v3.42.1 */

    const file$1F = "dist/components/icon/svgs/ebplus-circle-solid.svg.svelte";

    function create_fragment$1G(ctx) {
    	let svg;
    	let path;

    	let svg_levels = [
    		{ version: "1.1" },
    		{ id: "Layer_1" },
    		{ xmlns: "http://www.w3.org/2000/svg" },
    		{
    			"xmlns:xlink": "http://www.w3.org/1999/xlink"
    		},
    		{ x: "0px" },
    		{ y: "0px" },
    		{ viewBox: "0 0 72.8 72.8" },
    		{
    			style: "enable-background:new 0 0 72.8 72.8;"
    		},
    		{ "xml:space": "preserve" },
    		/*$$props*/ ctx[0]
    	];

    	let svg_data = {};

    	for (let i = 0; i < svg_levels.length; i += 1) {
    		svg_data = assign(svg_data, svg_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");
    			path = svg_element("path");
    			attr_dev(path, "d", "M36.4,0C16.3,0,0,16.3,0,36.4s16.3,36.4,36.4,36.4s36.4-16.3,36.4-36.4S56.5,0,36.4,0z M56.5,41.9H42.2v14.2\n\tH30.6V41.9H16.3V31.4h14.2V17.2h11.7v14.1h14.2V41.9z");
    			add_location(path, file$1F, 11, 2, 252);
    			set_svg_attributes(svg, svg_data);
    			add_location(svg, file$1F, 0, 0, 0);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);
    			append_dev(svg, path);
    		},
    		p: function update(ctx, [dirty]) {
    			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
    				{ version: "1.1" },
    				{ id: "Layer_1" },
    				{ xmlns: "http://www.w3.org/2000/svg" },
    				{
    					"xmlns:xlink": "http://www.w3.org/1999/xlink"
    				},
    				{ x: "0px" },
    				{ y: "0px" },
    				{ viewBox: "0 0 72.8 72.8" },
    				{
    					style: "enable-background:new 0 0 72.8 72.8;"
    				},
    				{ "xml:space": "preserve" },
    				dirty & /*$$props*/ 1 && /*$$props*/ ctx[0]
    			]));
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$1G.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$1G($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Ebplus_circle_solid_svg', slots, []);

    	$$self.$$set = $$new_props => {
    		$$invalidate(0, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    	};

    	$$self.$inject_state = $$new_props => {
    		$$invalidate(0, $$props = assign(assign({}, $$props), $$new_props));
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$props = exclude_internal_props($$props);
    	return [$$props];
    }

    class Ebplus_circle_solid_svg extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$1G, create_fragment$1G, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Ebplus_circle_solid_svg",
    			options,
    			id: create_fragment$1G.name
    		});
    	}
    }

    var ebplusCircleSolid_svg = /*#__PURE__*/Object.freeze({
        __proto__: null,
        'default': Ebplus_circle_solid_svg
    });

    var require$$15$1 = /*@__PURE__*/getAugmentedNamespace(ebplusCircleSolid_svg);

    /* dist/components/icon/svgs/ebplus.svg.svelte generated by Svelte v3.42.1 */

    const file$1E = "dist/components/icon/svgs/ebplus.svg.svelte";

    function create_fragment$1F(ctx) {
    	let svg;
    	let g1;
    	let g0;
    	let path;

    	let svg_levels = [
    		{ version: "1.1" },
    		{ id: "Layer_1" },
    		{ xmlns: "http://www.w3.org/2000/svg" },
    		{
    			"xmlns:xlink": "http://www.w3.org/1999/xlink"
    		},
    		{ x: "0px" },
    		{ y: "0px" },
    		{ viewBox: "0 122.1 595.3 597.4" },
    		{
    			"enable-background": "new 0 122.1 595.3 597.4"
    		},
    		{ "xml:space": "preserve" },
    		/*$$props*/ ctx[0]
    	];

    	let svg_data = {};

    	for (let i = 0; i < svg_levels.length; i += 1) {
    		svg_data = assign(svg_data, svg_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");
    			g1 = svg_element("g");
    			g0 = svg_element("g");
    			path = svg_element("path");
    			attr_dev(path, "d", "M237.4,122.1h120.5v238.5h237.4V481H357.9v238.5H237.4V481H0V360.5h237.4V122.1z");
    			add_location(path, file$1E, 13, 6, 275);
    			add_location(g0, file$1E, 12, 4, 265);
    			add_location(g1, file$1E, 11, 2, 257);
    			set_svg_attributes(svg, svg_data);
    			add_location(svg, file$1E, 0, 0, 0);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);
    			append_dev(svg, g1);
    			append_dev(g1, g0);
    			append_dev(g0, path);
    		},
    		p: function update(ctx, [dirty]) {
    			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
    				{ version: "1.1" },
    				{ id: "Layer_1" },
    				{ xmlns: "http://www.w3.org/2000/svg" },
    				{
    					"xmlns:xlink": "http://www.w3.org/1999/xlink"
    				},
    				{ x: "0px" },
    				{ y: "0px" },
    				{ viewBox: "0 122.1 595.3 597.4" },
    				{
    					"enable-background": "new 0 122.1 595.3 597.4"
    				},
    				{ "xml:space": "preserve" },
    				dirty & /*$$props*/ 1 && /*$$props*/ ctx[0]
    			]));
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$1F.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$1F($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Ebplus_svg', slots, []);

    	$$self.$$set = $$new_props => {
    		$$invalidate(0, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    	};

    	$$self.$inject_state = $$new_props => {
    		$$invalidate(0, $$props = assign(assign({}, $$props), $$new_props));
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$props = exclude_internal_props($$props);
    	return [$$props];
    }

    class Ebplus_svg extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$1F, create_fragment$1F, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Ebplus_svg",
    			options,
    			id: create_fragment$1F.name
    		});
    	}
    }

    var ebplus_svg = /*#__PURE__*/Object.freeze({
        __proto__: null,
        'default': Ebplus_svg
    });

    var require$$16$1 = /*@__PURE__*/getAugmentedNamespace(ebplus_svg);

    /* dist/components/icon/svgs/edit.svg.svelte generated by Svelte v3.42.1 */

    const file$1D = "dist/components/icon/svgs/edit.svg.svelte";

    function create_fragment$1E(ctx) {
    	let svg;
    	let path;

    	let svg_levels = [
    		{ width: "28" },
    		{ height: "28" },
    		{ viewBox: "0 0 28 28" },
    		{ xmlns: "http://www.w3.org/2000/svg" },
    		/*$$props*/ ctx[0]
    	];

    	let svg_data = {};

    	for (let i = 0; i < svg_levels.length; i += 1) {
    		svg_data = assign(svg_data, svg_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");
    			path = svg_element("path");
    			attr_dev(path, "fill-rule", "evenodd");
    			attr_dev(path, "clip-rule", "evenodd");
    			attr_dev(path, "d", "M17.4314 4.82055C18.5254 3.72648 20.2993 3.72648 21.3934 4.82055L23.3494 6.77665C24.4435 7.87072 24.4435 9.64456 23.3494 10.7386L11.9181 22.17H19.4124C19.9646 22.17 20.4124 22.6177 20.4124 23.17C20.4124 23.7223 19.9646 24.17 19.4124 24.17H5.90077C4.851 24.17 4 23.319 4 22.2692V19.0392C4 18.5351 4.20026 18.0517 4.55672 17.6952L17.4314 4.82055ZM9.08965 22.17L18.8989 12.3607L15.8093 9.27108L6 19.0804V22.17H9.08965ZM17.2235 7.85687L20.3131 10.9465L21.9352 9.32442C22.2483 9.01139 22.2483 8.50389 21.9352 8.19086L19.9791 6.23477C19.6661 5.92175 19.1586 5.92174 18.8456 6.23477L17.2235 7.85687Z");
    			add_location(path, file$1D, 1, 0, 98);
    			set_svg_attributes(svg, svg_data);
    			add_location(svg, file$1D, 0, 0, 0);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);
    			append_dev(svg, path);
    		},
    		p: function update(ctx, [dirty]) {
    			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
    				{ width: "28" },
    				{ height: "28" },
    				{ viewBox: "0 0 28 28" },
    				{ xmlns: "http://www.w3.org/2000/svg" },
    				dirty & /*$$props*/ 1 && /*$$props*/ ctx[0]
    			]));
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$1E.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$1E($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Edit_svg', slots, []);

    	$$self.$$set = $$new_props => {
    		$$invalidate(0, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    	};

    	$$self.$inject_state = $$new_props => {
    		$$invalidate(0, $$props = assign(assign({}, $$props), $$new_props));
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$props = exclude_internal_props($$props);
    	return [$$props];
    }

    class Edit_svg extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$1E, create_fragment$1E, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Edit_svg",
    			options,
    			id: create_fragment$1E.name
    		});
    	}
    }

    var edit_svg = /*#__PURE__*/Object.freeze({
        __proto__: null,
        'default': Edit_svg
    });

    var require$$17$1 = /*@__PURE__*/getAugmentedNamespace(edit_svg);

    /* dist/components/icon/svgs/entertainment.svg.svelte generated by Svelte v3.42.1 */

    const file$1C = "dist/components/icon/svgs/entertainment.svg.svelte";

    function create_fragment$1D(ctx) {
    	let svg;
    	let path0;
    	let path1;
    	let path2;
    	let path3;
    	let path4;

    	let svg_levels = [
    		{ width: "28" },
    		{ height: "28" },
    		{ viewBox: "0 0 28 28" },
    		{ xmlns: "http://www.w3.org/2000/svg" },
    		/*$$props*/ ctx[0]
    	];

    	let svg_data = {};

    	for (let i = 0; i < svg_levels.length; i += 1) {
    		svg_data = assign(svg_data, svg_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");
    			path0 = svg_element("path");
    			path1 = svg_element("path");
    			path2 = svg_element("path");
    			path3 = svg_element("path");
    			path4 = svg_element("path");
    			attr_dev(path0, "fill-rule", "evenodd");
    			attr_dev(path0, "clip-rule", "evenodd");
    			attr_dev(path0, "d", "M4.82062 22.8271C3.48616 21.4503 2.65683 19.7115 2.52007 18.1143C2.50701 18.0697 2.5 18.0225 2.5 17.9736V3.9967C2.5 2.61766 3.61766 1.5 4.9967 1.5C6.37574 1.5 7.49341 2.61766 7.49341 3.9967V8.98538C7.91044 8.6726 8.42861 8.4873 8.9901 8.4873C9.80723 8.4873 10.5326 8.87971 10.988 9.48638C11.4435 8.87971 12.1688 8.4873 12.986 8.4873C13.5464 8.4873 14.0636 8.67188 14.4802 8.98356V5.99341C14.4802 4.61437 15.5979 3.4967 16.9769 3.4967C18.356 3.4967 19.4736 4.61437 19.4736 5.99341V14.4788C19.4736 14.755 19.2498 14.9788 18.9736 14.9788C18.6975 14.9788 18.4736 14.755 18.4736 14.4788V5.99341C18.4736 5.16665 17.8037 4.4967 16.9769 4.4967C16.1502 4.4967 15.4802 5.16665 15.4802 5.99341V10.8726C15.4818 10.9096 15.4827 10.9467 15.4827 10.984V14.4788C15.4827 15.2607 15.115 15.9988 14.4914 16.47C13.9978 16.8431 13.3874 17.0162 12.7811 16.9667C12.3979 17.8533 11.5156 18.4736 10.4882 18.4736H9.81998C10.8369 19.2974 11.4868 20.5562 11.4868 21.967C11.4868 22.2432 11.263 22.467 10.9868 22.467C10.7107 22.467 10.4868 22.2432 10.4868 21.967C10.4868 20.0374 8.92306 18.4736 6.99341 18.4736C6.71726 18.4736 6.49341 18.2498 6.49341 17.9736C6.49341 17.6975 6.71726 17.4736 6.99341 17.4736H10.4882C11.315 17.4736 11.9849 16.8037 11.9849 15.9769C11.9849 15.1502 11.315 14.4802 10.4882 14.4802H6.96583C6.22106 14.4802 5.49411 14.7158 4.88994 15.1528L4.87833 15.1609C4.04786 15.7264 3.53627 16.6553 3.50001 17.6604C3.50287 19.0687 4.22158 20.7722 5.5387 22.1312C6.84907 23.4832 8.72067 24.4609 10.9868 24.4609C11.2577 24.4609 11.5276 24.4459 11.799 24.4177C12.0737 24.3891 12.3195 24.5886 12.3481 24.8633C12.3766 25.1379 12.1771 25.3837 11.9025 25.4123C11.5994 25.4438 11.2949 25.4609 10.9868 25.4609C8.41629 25.4609 6.29449 24.3478 4.82062 22.8271ZM4.9967 2.5C4.16995 2.5 3.5 3.16995 3.5 3.9967V15.0642C3.73431 14.7908 4.00563 14.5461 4.3096 14.3384C4.95446 13.8735 5.70811 13.5872 6.49341 13.5049V10.9854L6.49341 10.984V3.9967C6.49341 3.16995 5.82346 2.5 4.9967 2.5ZM12.9849 15.975C13.3076 15.9749 13.6258 15.8708 13.8885 15.6723C14.2621 15.3899 14.4827 14.947 14.4827 14.4788V11.0337C14.4811 11.0174 14.4802 11.0008 14.4802 10.984V10.8978C14.4356 10.1112 13.7838 9.4873 12.986 9.4873C12.1592 9.4873 11.4893 10.1573 11.4893 10.984V13.689C12.3693 14.0745 12.9841 14.9528 12.9849 15.975ZM10.4893 13.4802V11.0339C10.4876 11.0175 10.4868 11.0008 10.4868 10.984C10.4868 10.1573 9.81685 9.4873 8.9901 9.4873C8.16336 9.4873 7.49341 10.1573 7.49341 10.984V13.4802H10.4893Z");
    			add_location(path0, file$1C, 1, 0, 98);
    			attr_dev(path1, "d", "M18.6339 20.0996C18.888 19.9915 19.0064 19.6979 18.8983 19.4438C18.7902 19.1897 18.4966 19.0713 18.2425 19.1794L16.5031 19.9192C16.249 20.0273 16.1307 20.3209 16.2388 20.575C16.3468 20.8292 16.6405 20.9475 16.8946 20.8394L18.6339 20.0996Z");
    			add_location(path1, file$1C, 2, 0, 2601);
    			attr_dev(path2, "d", "M19.6842 21.0315C19.7923 21.2856 19.6739 21.5792 19.4198 21.6873L17.6805 22.4271C17.4264 22.5352 17.1327 22.4169 17.0246 22.1628C16.9166 21.9086 17.0349 21.615 17.289 21.5069L19.0284 20.7671C19.2825 20.659 19.5761 20.7774 19.6842 21.0315Z");
    			add_location(path2, file$1C, 3, 0, 2852);
    			attr_dev(path3, "fill-rule", "evenodd");
    			attr_dev(path3, "clip-rule", "evenodd");
    			attr_dev(path3, "d", "M22.7687 14.9922C23.4651 14.6484 24.3135 14.9247 24.6741 15.6143C24.6805 15.6265 24.6863 15.639 24.6917 15.6517L24.8525 16.0331C25.031 16.4588 24.896 16.9596 24.5161 17.2329C24.5092 17.2379 24.5022 17.2427 24.495 17.2473C24.1734 17.4547 24.034 17.8489 24.1501 18.2073C24.3266 18.538 24.7058 18.7112 25.0744 18.6243C25.0831 18.6223 25.0918 18.6205 25.1006 18.6189C25.5609 18.536 26.0167 18.7843 26.1969 19.216L26.3571 19.5935C26.3625 19.6062 26.3673 19.619 26.3716 19.632C26.6163 20.3731 26.2259 21.17 25.4947 21.4337L16.3348 25.3322C15.6372 25.6766 14.7927 25.3983 14.4303 24.7118C14.4235 24.6991 14.4173 24.686 14.4117 24.6727L14.2498 24.2886C14.0727 23.8619 14.2072 23.3649 14.5873 23.0914C14.601 23.0816 14.6153 23.0724 14.6299 23.064C14.9576 22.8753 15.0926 22.4739 14.945 22.125C14.7975 21.7763 14.415 21.5932 14.0509 21.6966C14.0351 21.7011 14.0191 21.7049 14.0029 21.7078C13.5423 21.7907 13.0864 21.5422 12.9063 21.1101L12.7459 20.7298C12.7407 20.7175 12.736 20.705 12.7318 20.6923C12.4878 19.9532 12.8757 19.1522 13.6096 18.8903L22.7687 14.9922ZM23.7798 16.0629C23.6657 15.8637 23.4113 15.7868 23.2059 15.8915C23.1956 15.8968 23.1852 15.9017 23.1745 15.9062L20.3193 17.1214L22.3871 21.6695L25.1174 20.5075C25.128 20.5029 25.1388 20.4988 25.1497 20.495C25.3713 20.4184 25.4913 20.184 25.427 19.9616L25.2757 19.605C24.4537 19.7851 23.6121 19.3806 23.24 18.6239C23.2319 18.6074 23.2247 18.5903 23.2184 18.573C22.9305 17.7749 23.2286 16.8887 23.9307 16.4215L23.7798 16.0629ZM13.986 19.8169L19.3989 17.5132L21.4667 22.0612L15.9289 24.4181C15.9183 24.4227 15.9078 24.4276 15.8975 24.4328C15.6936 24.5368 15.44 24.4621 15.3232 24.2605L15.1734 23.9054L15.173 23.9043C15.9068 23.4531 16.2035 22.5334 15.866 21.7355C15.5285 20.9375 14.6616 20.5104 13.8276 20.7213L13.6766 20.3632C13.6115 20.1391 13.7334 19.9045 13.9517 19.83C13.9633 19.8261 13.9748 19.8217 13.986 19.8169Z");
    			add_location(path3, file$1C, 4, 0, 3103);
    			attr_dev(path4, "d", "M24.7288 4.55266C24.8913 4.46562 25.0885 4.47505 25.2419 4.57719L27.489 6.07297C27.7189 6.22598 27.7812 6.53637 27.6282 6.76624C27.4752 6.99612 27.1648 7.05842 26.9349 6.90541L25.4648 5.92687V9.4842C25.4648 9.50725 25.4633 9.52995 25.4603 9.55218C25.4261 10.6216 24.5479 11.4834 23.4655 11.4834C22.3615 11.4834 21.4697 10.5867 21.4697 9.4876C21.4697 8.3885 22.3615 7.49182 23.4655 7.49182C23.8292 7.49182 24.1707 7.58944 24.4648 7.76007V4.99341C24.4648 4.80907 24.5663 4.63969 24.7288 4.55266Z");
    			add_location(path4, file$1C, 5, 0, 5027);
    			set_svg_attributes(svg, svg_data);
    			add_location(svg, file$1C, 0, 0, 0);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);
    			append_dev(svg, path0);
    			append_dev(svg, path1);
    			append_dev(svg, path2);
    			append_dev(svg, path3);
    			append_dev(svg, path4);
    		},
    		p: function update(ctx, [dirty]) {
    			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
    				{ width: "28" },
    				{ height: "28" },
    				{ viewBox: "0 0 28 28" },
    				{ xmlns: "http://www.w3.org/2000/svg" },
    				dirty & /*$$props*/ 1 && /*$$props*/ ctx[0]
    			]));
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$1D.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$1D($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Entertainment_svg', slots, []);

    	$$self.$$set = $$new_props => {
    		$$invalidate(0, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    	};

    	$$self.$inject_state = $$new_props => {
    		$$invalidate(0, $$props = assign(assign({}, $$props), $$new_props));
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$props = exclude_internal_props($$props);
    	return [$$props];
    }

    class Entertainment_svg extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$1D, create_fragment$1D, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Entertainment_svg",
    			options,
    			id: create_fragment$1D.name
    		});
    	}
    }

    var entertainment_svg = /*#__PURE__*/Object.freeze({
        __proto__: null,
        'default': Entertainment_svg
    });

    var require$$18$1 = /*@__PURE__*/getAugmentedNamespace(entertainment_svg);

    /* dist/components/icon/svgs/envelope.svg.svelte generated by Svelte v3.42.1 */

    const file$1B = "dist/components/icon/svgs/envelope.svg.svelte";

    function create_fragment$1C(ctx) {
    	let svg;
    	let path;

    	let svg_levels = [
    		{ version: "1.1" },
    		{ id: "Layer_1" },
    		{ xmlns: "http://www.w3.org/2000/svg" },
    		{ x: "0px" },
    		{ y: "0px" },
    		{ viewBox: "0 0 512 384" },
    		{
    			style: "enable-background:new 0 0 512 384;"
    		},
    		{ "xml:space": "preserve" },
    		/*$$props*/ ctx[0]
    	];

    	let svg_data = {};

    	for (let i = 0; i < svg_levels.length; i += 1) {
    		svg_data = assign(svg_data, svg_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");
    			path = svg_element("path");
    			attr_dev(path, "d", "M464,0H48C21.5,0,0,21.5,0,48v288c0,26.5,21.5,48,48,48h416c26.5,0,48-21.5,48-48V48C512,21.5,490.5,0,464,0z M48,32h416\n\tc8.8,0,16,7.2,16,16v41.4c-21.9,18.5-53.2,44-150.6,121.3c-16.9,13.4-50.2,45.7-73.4,45.3c-23.2,0.4-56.6-31.9-73.4-45.3\n\tC85.2,133.4,53.9,107.9,32,89.4V48C32,39.2,39.2,32,48,32z M464,352H48c-8.8,0-16-7.2-16-16V131c22.8,18.7,58.8,47.6,130.7,104.7\n\tc20.5,16.4,56.7,52.5,93.3,52.3c36.4,0.3,72.3-35.5,93.3-52.3c71.9-57.1,107.9-86,130.7-104.7v205C480,344.8,472.8,352,464,352z");
    			add_location(path, file$1B, 10, 2, 203);
    			set_svg_attributes(svg, svg_data);
    			add_location(svg, file$1B, 0, 0, 0);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);
    			append_dev(svg, path);
    		},
    		p: function update(ctx, [dirty]) {
    			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
    				{ version: "1.1" },
    				{ id: "Layer_1" },
    				{ xmlns: "http://www.w3.org/2000/svg" },
    				{ x: "0px" },
    				{ y: "0px" },
    				{ viewBox: "0 0 512 384" },
    				{
    					style: "enable-background:new 0 0 512 384;"
    				},
    				{ "xml:space": "preserve" },
    				dirty & /*$$props*/ 1 && /*$$props*/ ctx[0]
    			]));
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$1C.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$1C($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Envelope_svg', slots, []);

    	$$self.$$set = $$new_props => {
    		$$invalidate(0, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    	};

    	$$self.$inject_state = $$new_props => {
    		$$invalidate(0, $$props = assign(assign({}, $$props), $$new_props));
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$props = exclude_internal_props($$props);
    	return [$$props];
    }

    class Envelope_svg extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$1C, create_fragment$1C, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Envelope_svg",
    			options,
    			id: create_fragment$1C.name
    		});
    	}
    }

    var envelope_svg = /*#__PURE__*/Object.freeze({
        __proto__: null,
        'default': Envelope_svg
    });

    var require$$19$1 = /*@__PURE__*/getAugmentedNamespace(envelope_svg);

    /* dist/components/icon/svgs/external-link.svg.svelte generated by Svelte v3.42.1 */

    const file$1A = "dist/components/icon/svgs/external-link.svg.svelte";

    function create_fragment$1B(ctx) {
    	let svg;
    	let path0;
    	let path1;

    	let svg_levels = [
    		{ width: "28" },
    		{ height: "28" },
    		{ viewBox: "0 0 28 28" },
    		{ xmlns: "http://www.w3.org/2000/svg" },
    		/*$$props*/ ctx[0]
    	];

    	let svg_data = {};

    	for (let i = 0; i < svg_levels.length; i += 1) {
    		svg_data = assign(svg_data, svg_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");
    			path0 = svg_element("path");
    			path1 = svg_element("path");
    			attr_dev(path0, "d", "M17.2 5.5C16.9239 5.5 16.7 5.72386 16.7 6C16.7 6.27614 16.9239 6.5 17.2 6.5H20.7929L13.6464 13.6464C13.4512 13.8417 13.4512 14.1583 13.6464 14.3536C13.8417 14.5488 14.1583 14.5488 14.3536 14.3536L21.5 7.20711V10.8C21.5 11.0761 21.7239 11.3 22 11.3C22.2761 11.3 22.5 11.0761 22.5 10.8V5.5H17.2Z");
    			add_location(path0, file$1A, 1, 0, 98);
    			attr_dev(path1, "d", "M6.5 9.59998C6.5 8.77155 7.17157 8.09998 8 8.09998H14.4C14.6761 8.09998 14.9 7.87612 14.9 7.59998C14.9 7.32383 14.6761 7.09998 14.4 7.09998H8C6.61929 7.09998 5.5 8.21927 5.5 9.59998V20C5.5 21.3807 6.61929 22.5 8 22.5H18.4C19.7807 22.5 20.9 21.3807 20.9 20V13.6C20.9 13.3238 20.6761 13.1 20.4 13.1C20.1239 13.1 19.9 13.3238 19.9 13.6V20C19.9 20.8284 19.2284 21.5 18.4 21.5H8C7.17157 21.5 6.5 20.8284 6.5 20V9.59998Z");
    			add_location(path1, file$1A, 2, 0, 404);
    			set_svg_attributes(svg, svg_data);
    			add_location(svg, file$1A, 0, 0, 0);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);
    			append_dev(svg, path0);
    			append_dev(svg, path1);
    		},
    		p: function update(ctx, [dirty]) {
    			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
    				{ width: "28" },
    				{ height: "28" },
    				{ viewBox: "0 0 28 28" },
    				{ xmlns: "http://www.w3.org/2000/svg" },
    				dirty & /*$$props*/ 1 && /*$$props*/ ctx[0]
    			]));
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$1B.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$1B($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('External_link_svg', slots, []);

    	$$self.$$set = $$new_props => {
    		$$invalidate(0, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    	};

    	$$self.$inject_state = $$new_props => {
    		$$invalidate(0, $$props = assign(assign({}, $$props), $$new_props));
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$props = exclude_internal_props($$props);
    	return [$$props];
    }

    class External_link_svg extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$1B, create_fragment$1B, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "External_link_svg",
    			options,
    			id: create_fragment$1B.name
    		});
    	}
    }

    var externalLink_svg = /*#__PURE__*/Object.freeze({
        __proto__: null,
        'default': External_link_svg
    });

    var require$$20 = /*@__PURE__*/getAugmentedNamespace(externalLink_svg);

    /* dist/components/icon/svgs/facebook.svg.svelte generated by Svelte v3.42.1 */

    const file$1z = "dist/components/icon/svgs/facebook.svg.svelte";

    function create_fragment$1A(ctx) {
    	let svg;
    	let path;

    	let svg_levels = [
    		{ width: "28" },
    		{ height: "28" },
    		{ viewBox: "0 0 28 28" },
    		{ xmlns: "http://www.w3.org/2000/svg" },
    		/*$$props*/ ctx[0]
    	];

    	let svg_data = {};

    	for (let i = 0; i < svg_levels.length; i += 1) {
    		svg_data = assign(svg_data, svg_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");
    			path = svg_element("path");
    			attr_dev(path, "fill-rule", "evenodd");
    			attr_dev(path, "clip-rule", "evenodd");
    			attr_dev(path, "d", "M19.2228 3.55554V7.73354H17.1338C16.4131 7.73354 16.0893 8.57959 16.0893 9.30029V11.9115H19.2228V16.0895H16.0893V24.4455H11.9113V16.0895H8.77783V11.9115H11.9113V7.73354C11.9113 5.4261 13.7819 3.55554 16.0893 3.55554H19.2228Z");
    			add_location(path, file$1z, 1, 0, 98);
    			set_svg_attributes(svg, svg_data);
    			add_location(svg, file$1z, 0, 0, 0);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);
    			append_dev(svg, path);
    		},
    		p: function update(ctx, [dirty]) {
    			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
    				{ width: "28" },
    				{ height: "28" },
    				{ viewBox: "0 0 28 28" },
    				{ xmlns: "http://www.w3.org/2000/svg" },
    				dirty & /*$$props*/ 1 && /*$$props*/ ctx[0]
    			]));
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$1A.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$1A($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Facebook_svg', slots, []);

    	$$self.$$set = $$new_props => {
    		$$invalidate(0, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    	};

    	$$self.$inject_state = $$new_props => {
    		$$invalidate(0, $$props = assign(assign({}, $$props), $$new_props));
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$props = exclude_internal_props($$props);
    	return [$$props];
    }

    class Facebook_svg extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$1A, create_fragment$1A, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Facebook_svg",
    			options,
    			id: create_fragment$1A.name
    		});
    	}
    }

    var facebook_svg = /*#__PURE__*/Object.freeze({
        __proto__: null,
        'default': Facebook_svg
    });

    var require$$21 = /*@__PURE__*/getAugmentedNamespace(facebook_svg);

    /* dist/components/icon/svgs/figcaption-pin.svg.svelte generated by Svelte v3.42.1 */

    const file$1y = "dist/components/icon/svgs/figcaption-pin.svg.svelte";

    function create_fragment$1z(ctx) {
    	let svg;
    	let path0;
    	let path1;

    	let svg_levels = [
    		{ xmlns: "http://www.w3.org/2000/svg" },
    		{ viewBox: "0 0 34 16.4" },
    		/*$$props*/ ctx[0]
    	];

    	let svg_data = {};

    	for (let i = 0; i < svg_levels.length; i += 1) {
    		svg_data = assign(svg_data, svg_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");
    			path0 = svg_element("path");
    			path1 = svg_element("path");
    			attr_dev(path0, "d", "M15.6.8c.8-.8 2-.8 2.8 0l6.7 6.7c1.9 1.9 4.4 2.9 7.1 2.9H34v6H0v-6h1.9c2.7 0 5.2-1.1 7.1-2.9L15.6.8z");
    			attr_dev(path0, "fill", "#fff");
    			add_location(path0, file$1y, 0, 76, 76);
    			attr_dev(path1, "d", "M9.7 12.9l6.6-6.6c.4-.4 1-.4 1.4 0l6.6 6.6c.6.6.2 1.7-.7 1.7H10.4c-.9 0-1.3-1-.7-1.7z");
    			add_location(path1, file$1y, 0, 201, 201);
    			set_svg_attributes(svg, svg_data);
    			add_location(svg, file$1y, 0, 0, 0);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);
    			append_dev(svg, path0);
    			append_dev(svg, path1);
    		},
    		p: function update(ctx, [dirty]) {
    			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
    				{ xmlns: "http://www.w3.org/2000/svg" },
    				{ viewBox: "0 0 34 16.4" },
    				dirty & /*$$props*/ 1 && /*$$props*/ ctx[0]
    			]));
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$1z.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$1z($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Figcaption_pin_svg', slots, []);

    	$$self.$$set = $$new_props => {
    		$$invalidate(0, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    	};

    	$$self.$inject_state = $$new_props => {
    		$$invalidate(0, $$props = assign(assign({}, $$props), $$new_props));
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$props = exclude_internal_props($$props);
    	return [$$props];
    }

    class Figcaption_pin_svg extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$1z, create_fragment$1z, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Figcaption_pin_svg",
    			options,
    			id: create_fragment$1z.name
    		});
    	}
    }

    var figcaptionPin_svg = /*#__PURE__*/Object.freeze({
        __proto__: null,
        'default': Figcaption_pin_svg
    });

    var require$$22 = /*@__PURE__*/getAugmentedNamespace(figcaptionPin_svg);

    /* dist/components/icon/svgs/gallery.svg.svelte generated by Svelte v3.42.1 */

    const file$1x = "dist/components/icon/svgs/gallery.svg.svelte";

    function create_fragment$1y(ctx) {
    	let svg;
    	let path;

    	let svg_levels = [
    		{ width: "56" },
    		{ height: "56" },
    		{ viewBox: "0 0 56 56" },
    		{ xmlns: "http://www.w3.org/2000/svg" },
    		/*$$props*/ ctx[0]
    	];

    	let svg_data = {};

    	for (let i = 0; i < svg_levels.length; i += 1) {
    		svg_data = assign(svg_data, svg_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");
    			path = svg_element("path");
    			attr_dev(path, "fill-rule", "evenodd");
    			attr_dev(path, "clip-rule", "evenodd");
    			attr_dev(path, "d", "M4.31579 4.31579C4.14123 4.49036 4 4.77663 4 5.2134V35.201H7.56811C7.6932 33.3941 8.15671 31.5985 8.94774 29.8187C8.95389 29.8049 8.96035 29.7912 8.96712 29.7776C9.57626 28.5594 10.9775 27.6636 12.5599 26.914C14.1955 26.1393 16.292 25.4043 18.6058 24.6329C18.6228 24.618 18.6723 24.5645 18.7326 24.4159C18.8285 24.1793 18.8935 23.8303 18.9053 23.4177C18.9168 23.0126 18.8754 22.6057 18.8017 22.2807C18.7449 22.0303 18.6866 21.9058 18.6666 21.8633C18.6563 21.8413 18.6563 21.8412 18.6721 21.857C18.6582 21.8432 18.6448 21.8289 18.6318 21.8143C16.7019 19.6432 15.7115 16.9579 15.9445 14.0255C15.9515 12.0911 16.4469 10.3131 17.7256 8.77868C19.0406 7.20072 20.8829 6.42681 22.9206 6.42681C25.0319 6.42681 26.8213 7.47853 28.0545 8.71176C28.0759 8.73313 28.0963 8.75546 28.1157 8.77868C29.384 10.3007 29.9043 12.0932 29.6801 14.087C29.8879 16.9118 28.9637 19.7637 27.0642 21.7384C27.043 21.8029 26.9971 21.9537 26.955 22.2171C26.8992 22.5665 26.8686 22.9952 26.8806 23.4177C26.893 23.8487 26.9483 24.2189 27.0338 24.4754C27.0698 24.5836 27.101 24.6432 27.1193 24.6726C27.8239 24.9405 28.5183 25.1968 29.1901 25.4448C30.6581 25.9867 32.0188 26.489 33.1459 26.9857C33.9866 27.3562 34.7509 27.7456 35.3762 28.1782C35.9961 28.607 36.5476 29.1245 36.8741 29.7776C36.8809 29.7912 36.8874 29.8049 36.8935 29.8187C37.6845 31.5985 38.148 33.3941 38.2731 35.201H41.8412V5.2134C41.8412 4.77663 41.7 4.49036 41.5255 4.31579C41.3509 4.14123 41.0646 4 40.6278 4H5.2134C4.77663 4 4.49036 4.14123 4.31579 4.31579ZM43.8412 5.2134C43.8412 4.32213 43.5398 3.5017 42.9397 2.90158C42.3395 2.30145 41.5191 2 40.6278 2H5.2134C4.32213 2 3.5017 2.30145 2.90158 2.90158C2.30145 3.5017 2 4.32213 2 5.2134V40.6278C2 41.5191 2.30145 42.3395 2.90158 42.9397C3.5017 43.5398 4.32213 43.8412 5.2134 43.8412H40.6278C41.5191 43.8412 42.3395 43.5398 42.9397 42.9397C43.5398 42.3395 43.8412 41.5191 43.8412 40.6278V5.2134ZM41.8412 37.201H4V40.6278C4 41.0646 4.14123 41.3509 4.31579 41.5255C4.49036 41.7 4.77663 41.8412 5.2134 41.8412H40.6278C41.0646 41.8412 41.3509 41.7 41.5255 41.5255C41.7 41.3509 41.8412 41.0646 41.8412 40.6278V37.201ZM36.2676 35.201C36.1468 33.6977 35.7531 32.1836 35.0765 30.6549C34.9567 30.4258 34.7065 30.1468 34.2383 29.8229C33.7639 29.4947 33.131 29.1647 32.3393 28.8159C31.2687 28.3441 30.005 27.8777 28.5759 27.3503C27.8661 27.0884 27.1155 26.8114 26.3274 26.5112L26.312 26.5052C25.6187 26.2279 25.2938 25.58 25.1364 25.1079C24.966 24.5966 24.8968 24.0123 24.8815 23.4749C24.8659 22.9291 24.9044 22.3756 24.98 21.9018C25.047 21.4822 25.1672 20.9574 25.4087 20.5952C25.4452 20.5404 25.4871 20.4894 25.5336 20.4428C27.0735 18.903 27.8787 16.5469 27.6789 14.1501C27.6732 14.0811 27.6746 14.0117 27.6832 13.943C27.8695 12.4527 27.5099 11.1933 26.608 10.0938C25.6314 9.13012 24.3351 8.42681 22.9206 8.42681C21.4169 8.42681 20.1605 8.98093 19.262 10.0591C18.3365 11.1698 17.9444 12.4761 17.9444 14.067C17.9444 14.0947 17.9433 14.1224 17.941 14.1501C17.7446 16.5066 18.5194 18.6698 20.1123 20.4694C20.4732 20.8476 20.6539 21.4054 20.7521 21.8382C20.8651 22.3364 20.9205 22.9117 20.9045 23.4749C20.8886 24.0307 20.8014 24.6362 20.5861 25.1673C20.3746 25.689 19.9746 26.2848 19.2527 26.5254C16.9241 27.3016 14.9312 28.0038 13.4161 28.7215C11.8611 29.4581 11.0496 30.1057 10.765 30.6543C10.0883 32.1833 9.69446 33.6975 9.57368 35.201H36.2676ZM46.2842 13.6668C46.383 13.1235 46.9035 12.7631 47.4469 12.8619L52.3098 13.746C54.2918 14.0811 55.1991 16.0319 54.8888 17.5833L47.821 52.4808C47.7885 52.9373 47.5804 53.3611 47.3807 53.6607C47.1557 53.9981 46.8152 54.3674 46.3872 54.5814C46.3449 54.6026 46.3011 54.6207 46.2562 54.6357C46.1919 54.6571 46.1232 54.6818 46.0505 54.708C45.5358 54.893 44.8128 55.153 43.9172 54.8776L11.2122 48.2482C10.671 48.1385 10.3211 47.6107 10.4308 47.0694C10.5406 46.5282 11.0683 46.1783 11.6096 46.288L44.3679 52.9282C44.4077 52.9363 44.447 52.9468 44.4855 52.9596C44.6338 53.0091 44.7322 53.0083 44.8585 52.9831C44.9369 52.9674 45.0298 52.9409 45.1603 52.8974C45.224 52.8762 45.2901 52.8531 45.3667 52.8264L45.3716 52.8248C45.418 52.8086 45.4678 52.7913 45.5199 52.7734C45.5326 52.7635 45.5496 52.7492 45.5701 52.7294C45.6185 52.6826 45.6701 52.621 45.7166 52.5513C45.7634 52.481 45.7957 52.4165 45.814 52.3682C45.8204 52.3513 45.8239 52.3395 45.8257 52.3327C45.8272 52.2749 45.8338 52.2172 45.8452 52.1604L52.9277 17.1911C52.9277 17.1908 52.9276 17.1913 52.9277 17.1911C53.0591 16.5313 52.6414 15.8289 51.9731 15.7175L51.9586 15.715L47.0891 14.8296C46.5458 14.7308 46.1854 14.2102 46.2842 13.6668Z");
    			add_location(path, file$1x, 1, 0, 98);
    			set_svg_attributes(svg, svg_data);
    			add_location(svg, file$1x, 0, 0, 0);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);
    			append_dev(svg, path);
    		},
    		p: function update(ctx, [dirty]) {
    			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
    				{ width: "56" },
    				{ height: "56" },
    				{ viewBox: "0 0 56 56" },
    				{ xmlns: "http://www.w3.org/2000/svg" },
    				dirty & /*$$props*/ 1 && /*$$props*/ ctx[0]
    			]));
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$1y.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$1y($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Gallery_svg', slots, []);

    	$$self.$$set = $$new_props => {
    		$$invalidate(0, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    	};

    	$$self.$inject_state = $$new_props => {
    		$$invalidate(0, $$props = assign(assign({}, $$props), $$new_props));
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$props = exclude_internal_props($$props);
    	return [$$props];
    }

    class Gallery_svg extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$1y, create_fragment$1y, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Gallery_svg",
    			options,
    			id: create_fragment$1y.name
    		});
    	}
    }

    var gallery_svg = /*#__PURE__*/Object.freeze({
        __proto__: null,
        'default': Gallery_svg
    });

    var require$$23 = /*@__PURE__*/getAugmentedNamespace(gallery_svg);

    /* dist/components/icon/svgs/globe.svg.svelte generated by Svelte v3.42.1 */

    const file$1w = "dist/components/icon/svgs/globe.svg.svelte";

    function create_fragment$1x(ctx) {
    	let svg;
    	let path;

    	let svg_levels = [
    		{ width: "28" },
    		{ height: "28" },
    		{ viewBox: "0 0 28 28" },
    		{ xmlns: "http://www.w3.org/2000/svg" },
    		/*$$props*/ ctx[0]
    	];

    	let svg_data = {};

    	for (let i = 0; i < svg_levels.length; i += 1) {
    		svg_data = assign(svg_data, svg_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");
    			path = svg_element("path");
    			attr_dev(path, "fill-rule", "evenodd");
    			attr_dev(path, "clip-rule", "evenodd");
    			attr_dev(path, "d", "M14 2C7.37126 2 2 7.37126 2 14C2 20.6287 7.37126 26 14 26C20.6287 26 26 20.6287 26 14C26 7.37126 20.6287 2 14 2ZM3 14C3 7.92354 7.92354 3 14 3C14.4568 3 14.9072 3.02783 15.3494 3.08189L13.6473 4.05693L13.6463 4.05748C13.3109 4.24831 13.1147 4.60935 13.1424 4.99659C13.1696 5.37769 13.4129 5.71724 13.7746 5.85833L14.0567 5.97209L14.058 5.97261C14.6264 6.19997 14.9995 6.75159 14.9995 7.36677V8.51193L14.9987 8.51281L14.9978 8.51357H11.5496L11.5472 8.51335L11.5369 8.51209L11.531 8.51127L10.2431 8.25188C9.35313 8.07387 8.43796 8.38977 7.85052 9.08074L6.12639 11.1037C5.91177 11.3545 5.82322 11.7102 5.92751 12.0452L6.59417 14.2337C6.91568 15.2843 7.88613 16.0088 8.99049 16.0088H10.6917L11.4654 17.5562C11.4658 17.5573 11.4664 17.5594 11.4667 17.5622C11.4669 17.5642 11.4669 17.5657 11.4668 17.5667C11.4668 17.5673 11.4667 17.5677 11.4667 17.5679L11.261 18.3997L11.2607 18.4008C11.0654 19.1779 11.2562 19.9933 11.7599 20.6058L11.7622 20.6085L13.2924 22.442L13.2934 22.4432C13.6468 22.8697 14.2746 22.9212 14.6955 22.5734L16.5962 20.9949C17.1708 20.518 17.4991 19.8157 17.4991 19.0738L17.4991 16.6268C17.4993 16.6262 17.4998 16.6243 17.5012 16.6208L19.0839 13.46C19.2393 13.1492 19.222 12.7824 19.0407 12.4886C18.8619 12.1914 18.5385 12.0096 18.1905 12.0096L17.8093 12.0092L17.2622 10.9196C17.2619 10.9189 17.262 10.9175 17.2618 10.9169L19.3888 10.6505L19.3899 10.6504C20.291 10.5356 21.0615 9.94363 21.4009 9.09819L22.3198 6.80273C23.9898 8.73163 25 11.2475 25 14C25 20.0765 20.0765 25 14 25C7.92354 25 3 20.0765 3 14ZM21.5604 6.00895C20.2534 4.77207 18.6431 3.85248 16.8525 3.37326L14.1409 4.92662C14.141 4.92642 14.1409 4.92672 14.1409 4.92662C14.1408 4.92686 14.1406 4.9276 14.1407 4.92774L14.1455 4.92959L14.4294 5.04413C15.3786 5.42416 15.9995 6.34462 15.9995 7.36677V8.51217C15.9995 9.06431 15.5502 9.51357 14.9981 9.51357H11.5481C11.475 9.51357 11.4125 9.50457 11.381 9.50004L11.3762 9.49934C11.3668 9.498 11.3575 9.4964 11.3482 9.49452L10.047 9.23246C9.51126 9.12546 8.96333 9.3156 8.61245 9.72839L6.88703 11.7529L6.88611 11.754L6.88479 11.756L7.5504 13.9411C7.74418 14.5738 8.32854 15.0088 8.99049 15.0088H10.6925C11.0653 15.0088 11.4172 15.2172 11.5869 15.5632L12.3672 17.1238C12.4667 17.3317 12.4938 17.5732 12.4391 17.8013L12.4383 17.8046L12.2313 18.6418L12.2307 18.6439C12.1139 19.1079 12.2263 19.5978 12.5312 19.9693L12.5323 19.9706L14.0601 21.8012L15.9574 20.2255C16.3029 19.9388 16.4991 19.5186 16.4991 19.0738V16.6266C16.4991 16.4674 16.537 16.322 16.5966 16.1943L16.6024 16.1818L18.1893 13.0131L18.1871 13.0096H17.8087C17.4361 13.0096 17.0843 12.8013 16.9145 12.4556L16.3683 11.3677C16.2266 11.0844 16.2201 10.7435 16.3768 10.4513C16.5288 10.1544 16.8171 9.96235 17.137 9.92476L19.2635 9.65838C19.8066 9.58901 20.2693 9.23292 20.4727 8.72613L21.5604 6.00895Z");
    			add_location(path, file$1w, 1, 0, 98);
    			set_svg_attributes(svg, svg_data);
    			add_location(svg, file$1w, 0, 0, 0);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);
    			append_dev(svg, path);
    		},
    		p: function update(ctx, [dirty]) {
    			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
    				{ width: "28" },
    				{ height: "28" },
    				{ viewBox: "0 0 28 28" },
    				{ xmlns: "http://www.w3.org/2000/svg" },
    				dirty & /*$$props*/ 1 && /*$$props*/ ctx[0]
    			]));
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$1x.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$1x($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Globe_svg', slots, []);

    	$$self.$$set = $$new_props => {
    		$$invalidate(0, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    	};

    	$$self.$inject_state = $$new_props => {
    		$$invalidate(0, $$props = assign(assign({}, $$props), $$new_props));
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$props = exclude_internal_props($$props);
    	return [$$props];
    }

    class Globe_svg extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$1x, create_fragment$1x, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Globe_svg",
    			options,
    			id: create_fragment$1x.name
    		});
    	}
    }

    var globe_svg = /*#__PURE__*/Object.freeze({
        __proto__: null,
        'default': Globe_svg
    });

    var require$$24 = /*@__PURE__*/getAugmentedNamespace(globe_svg);

    /* dist/components/icon/svgs/grid-solid.svg.svelte generated by Svelte v3.42.1 */

    const file$1v = "dist/components/icon/svgs/grid-solid.svg.svelte";

    function create_fragment$1w(ctx) {
    	let svg;
    	let path0;
    	let path1;
    	let path2;
    	let path3;

    	let svg_levels = [
    		{ width: "28" },
    		{ height: "28" },
    		{ viewBox: "0 0 28 28" },
    		{ xmlns: "http://www.w3.org/2000/svg" },
    		/*$$props*/ ctx[0]
    	];

    	let svg_data = {};

    	for (let i = 0; i < svg_levels.length; i += 1) {
    		svg_data = assign(svg_data, svg_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");
    			path0 = svg_element("path");
    			path1 = svg_element("path");
    			path2 = svg_element("path");
    			path3 = svg_element("path");
    			attr_dev(path0, "d", "M3 5C3 4.44772 3.44772 4 4 4H12C12.5523 4 13 4.44772 13 5V10C13 10.5523 12.5523 11 12 11H4C3.44772 11 3 10.5523 3 10V5Z");
    			add_location(path0, file$1v, 1, 0, 98);
    			attr_dev(path1, "d", "M3 14C3 13.4477 3.44772 13 4 13H12C12.5523 13 13 13.4477 13 14V23C13 23.5523 12.5523 24 12 24H4C3.44772 24 3 23.5523 3 23V14Z");
    			add_location(path1, file$1v, 2, 0, 230);
    			attr_dev(path2, "d", "M15 5C15 4.44772 15.4477 4 16 4H24C24.5523 4 25 4.44772 25 5V15C25 15.5523 24.5523 16 24 16H16C15.4477 16 15 15.5523 15 15V5Z");
    			add_location(path2, file$1v, 3, 0, 368);
    			attr_dev(path3, "d", "M15 19C15 18.4477 15.4477 18 16 18H24C24.5523 18 25 18.4477 25 19V23C25 23.5523 24.5523 24 24 24H16C15.4477 24 15 23.5523 15 23V19Z");
    			add_location(path3, file$1v, 4, 0, 506);
    			set_svg_attributes(svg, svg_data);
    			add_location(svg, file$1v, 0, 0, 0);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);
    			append_dev(svg, path0);
    			append_dev(svg, path1);
    			append_dev(svg, path2);
    			append_dev(svg, path3);
    		},
    		p: function update(ctx, [dirty]) {
    			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
    				{ width: "28" },
    				{ height: "28" },
    				{ viewBox: "0 0 28 28" },
    				{ xmlns: "http://www.w3.org/2000/svg" },
    				dirty & /*$$props*/ 1 && /*$$props*/ ctx[0]
    			]));
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$1w.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$1w($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Grid_solid_svg', slots, []);

    	$$self.$$set = $$new_props => {
    		$$invalidate(0, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    	};

    	$$self.$inject_state = $$new_props => {
    		$$invalidate(0, $$props = assign(assign({}, $$props), $$new_props));
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$props = exclude_internal_props($$props);
    	return [$$props];
    }

    class Grid_solid_svg extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$1w, create_fragment$1w, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Grid_solid_svg",
    			options,
    			id: create_fragment$1w.name
    		});
    	}
    }

    var gridSolid_svg = /*#__PURE__*/Object.freeze({
        __proto__: null,
        'default': Grid_solid_svg
    });

    var require$$25 = /*@__PURE__*/getAugmentedNamespace(gridSolid_svg);

    /* dist/components/icon/svgs/grid.svg.svelte generated by Svelte v3.42.1 */

    const file$1u = "dist/components/icon/svgs/grid.svg.svelte";

    function create_fragment$1v(ctx) {
    	let svg;
    	let path0;
    	let path1;
    	let path2;
    	let path3;

    	let svg_levels = [
    		{ width: "28" },
    		{ height: "28" },
    		{ viewBox: "0 0 28 28" },
    		{ xmlns: "http://www.w3.org/2000/svg" },
    		/*$$props*/ ctx[0]
    	];

    	let svg_data = {};

    	for (let i = 0; i < svg_levels.length; i += 1) {
    		svg_data = assign(svg_data, svg_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");
    			path0 = svg_element("path");
    			path1 = svg_element("path");
    			path2 = svg_element("path");
    			path3 = svg_element("path");
    			attr_dev(path0, "fill-rule", "evenodd");
    			attr_dev(path0, "clip-rule", "evenodd");
    			attr_dev(path0, "d", "M12.5 5H5L5 10.3684L12.5 10.3684V5ZM5 4C4.44772 4 4 4.44771 4 5V10.3684C4 10.9207 4.44772 11.3684 5 11.3684H12.5C13.0523 11.3684 13.5 10.9207 13.5 10.3684V5C13.5 4.44772 13.0523 4 12.5 4H5Z");
    			add_location(path0, file$1u, 1, 0, 98);
    			attr_dev(path1, "fill-rule", "evenodd");
    			attr_dev(path1, "clip-rule", "evenodd");
    			attr_dev(path1, "d", "M12.5 13.4211H5L5 23H12.5V13.4211ZM5 12.4211C4.44772 12.4211 4 12.8688 4 13.4211V23C4 23.5523 4.44772 24 5 24H12.5C13.0523 24 13.5 23.5523 13.5 23V13.4211C13.5 12.8688 13.0523 12.4211 12.5 12.4211H5Z");
    			add_location(path1, file$1u, 2, 0, 340);
    			attr_dev(path2, "fill-rule", "evenodd");
    			attr_dev(path2, "clip-rule", "evenodd");
    			attr_dev(path2, "d", "M23 5H15.5001V14.5789H23V5ZM15.5001 4C14.9478 4 14.5001 4.44771 14.5001 5V14.5789C14.5001 15.1312 14.9478 15.5789 15.5001 15.5789H23C23.5523 15.5789 24 15.1312 24 14.5789V5C24 4.44772 23.5523 4 23 4H15.5001Z");
    			add_location(path2, file$1u, 3, 0, 592);
    			attr_dev(path3, "fill-rule", "evenodd");
    			attr_dev(path3, "clip-rule", "evenodd");
    			attr_dev(path3, "d", "M23 17.6316L15.5 17.6316V23L23 23V17.6316ZM15.5 16.6316C14.9477 16.6316 14.5 17.0793 14.5 17.6316V23C14.5 23.5523 14.9477 24 15.5 24L23 24C23.5523 24 24 23.5523 24 23V17.6316C24 17.0793 23.5523 16.6316 23 16.6316L15.5 16.6316Z");
    			add_location(path3, file$1u, 4, 0, 852);
    			set_svg_attributes(svg, svg_data);
    			add_location(svg, file$1u, 0, 0, 0);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);
    			append_dev(svg, path0);
    			append_dev(svg, path1);
    			append_dev(svg, path2);
    			append_dev(svg, path3);
    		},
    		p: function update(ctx, [dirty]) {
    			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
    				{ width: "28" },
    				{ height: "28" },
    				{ viewBox: "0 0 28 28" },
    				{ xmlns: "http://www.w3.org/2000/svg" },
    				dirty & /*$$props*/ 1 && /*$$props*/ ctx[0]
    			]));
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$1v.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$1v($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Grid_svg', slots, []);

    	$$self.$$set = $$new_props => {
    		$$invalidate(0, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    	};

    	$$self.$inject_state = $$new_props => {
    		$$invalidate(0, $$props = assign(assign({}, $$props), $$new_props));
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$props = exclude_internal_props($$props);
    	return [$$props];
    }

    class Grid_svg extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$1v, create_fragment$1v, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Grid_svg",
    			options,
    			id: create_fragment$1v.name
    		});
    	}
    }

    var grid_svg = /*#__PURE__*/Object.freeze({
        __proto__: null,
        'default': Grid_svg
    });

    var require$$26 = /*@__PURE__*/getAugmentedNamespace(grid_svg);

    /* dist/components/icon/svgs/headphones.svg.svelte generated by Svelte v3.42.1 */

    const file$1t = "dist/components/icon/svgs/headphones.svg.svelte";

    function create_fragment$1u(ctx) {
    	let svg;
    	let path;

    	let svg_levels = [
    		{ version: "1.1" },
    		{ id: "Layer_1" },
    		{ xmlns: "http://www.w3.org/2000/svg" },
    		{
    			"xmlns:xlink": "http://www.w3.org/1999/xlink"
    		},
    		{ x: "0px" },
    		{ y: "0px" },
    		{ viewBox: "0 0 53 53" },
    		{
    			style: "enable-background:new 0 0 53 53;"
    		},
    		{ "xml:space": "preserve" },
    		/*$$props*/ ctx[0]
    	];

    	let svg_data = {};

    	for (let i = 0; i < svg_levels.length; i += 1) {
    		svg_data = assign(svg_data, svg_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");
    			path = svg_element("path");
    			attr_dev(path, "d", "M14.9,52.7c-0.5,0-1.1-0.1-1.6-0.3c-0.9-0.4-1.6-1.2-2-2.3L6.7,38.3c-0.4-1-0.4-2.1,0.1-3c0.4-0.9,1.2-1.6,2.2-1.9l2-0.9\n\tc1-0.4,2.1-0.4,3.1,0c0.9,0.4,1.6,1.2,2,2.3l4.6,11.8c0.4,1,0.4,2.1-0.1,3c-0.4,0.9-1.2,1.6-2.2,1.9l-2,0.9\n\tC15.9,52.6,15.4,52.7,14.9,52.7z M12.5,35.1c-0.1,0-0.2,0-0.3,0.1l-2,0.9c0,0-0.1,0-0.1,0.1c-0.2,0.1-0.4,0.2-0.5,0.4\n\tc-0.1,0.2-0.1,0.4,0,0.7c0,0,0,0,0,0l4.7,11.9c0.1,0.3,0.2,0.5,0.4,0.6c0.2,0.1,0.4,0.1,0.7,0l2-0.9c0,0,0.1,0,0.1-0.1\n\tc0.2-0.1,0.4-0.2,0.5-0.4c0.1-0.2,0.1-0.4,0-0.7l-4.7-11.9c-0.1-0.3-0.2-0.5-0.4-0.6C12.7,35.1,12.6,35.1,12.5,35.1z M38,52.6\n\tc-0.5,0-0.9-0.1-1.3-0.3l-2.2-1c-1.9-0.8-2.9-3.1-2.2-5L37,34.6c0.8-2,3.1-3,5-2.2l2.2,1c0.9,0.3,1.6,1.1,2.1,2c0.5,1,0.5,2,0.1,3\n\tl-4.7,11.9c0,0,0,0,0,0c-0.4,0.9-1.1,1.7-2,2.1C39.1,52.5,38.6,52.6,38,52.6z M40.7,35.1c-0.3,0-0.7,0.3-0.9,0.6l-4.7,11.9\n\tc-0.2,0.4,0.1,0.9,0.6,1.1l2.2,1c0.3,0.1,0.9-0.2,1-0.6l4.7-11.9c0.1-0.2,0.1-0.4,0-0.6c-0.1-0.2-0.3-0.4-0.5-0.5l-2.2-1\n\tC40.8,35.1,40.7,35.1,40.7,35.1z M40.3,49.6L40.3,49.6L40.3,49.6z M44,52.5c-0.2,0-0.5-0.1-0.7-0.2c-0.7-0.4-1-1.3-0.6-2\n\tc0.1-0.1,6.8-12.6,6.8-23.8c0-12.7-10.3-23-23-23c-12.7,0-23,10.3-23,23c0,11.1,6.7,23.7,6.8,23.8c0.4,0.7,0.1,1.6-0.6,2\n\tc-0.7,0.4-1.6,0.1-2-0.6c-0.3-0.5-7.2-13.3-7.2-25.2c0-14.3,11.7-26,26-26c14.3,0,26,11.7,26,26c0,11.9-6.9,24.7-7.2,25.2\n\tC45,52.2,44.5,52.5,44,52.5z");
    			add_location(path, file$1t, 2, 0, 225);
    			set_svg_attributes(svg, svg_data);
    			add_location(svg, file$1t, 0, 0, 0);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);
    			append_dev(svg, path);
    		},
    		p: function update(ctx, [dirty]) {
    			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
    				{ version: "1.1" },
    				{ id: "Layer_1" },
    				{ xmlns: "http://www.w3.org/2000/svg" },
    				{
    					"xmlns:xlink": "http://www.w3.org/1999/xlink"
    				},
    				{ x: "0px" },
    				{ y: "0px" },
    				{ viewBox: "0 0 53 53" },
    				{
    					style: "enable-background:new 0 0 53 53;"
    				},
    				{ "xml:space": "preserve" },
    				dirty & /*$$props*/ 1 && /*$$props*/ ctx[0]
    			]));
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$1u.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$1u($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Headphones_svg', slots, []);

    	$$self.$$set = $$new_props => {
    		$$invalidate(0, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    	};

    	$$self.$inject_state = $$new_props => {
    		$$invalidate(0, $$props = assign(assign({}, $$props), $$new_props));
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$props = exclude_internal_props($$props);
    	return [$$props];
    }

    class Headphones_svg extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$1u, create_fragment$1u, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Headphones_svg",
    			options,
    			id: create_fragment$1u.name
    		});
    	}
    }

    var headphones_svg = /*#__PURE__*/Object.freeze({
        __proto__: null,
        'default': Headphones_svg
    });

    var require$$27 = /*@__PURE__*/getAugmentedNamespace(headphones_svg);

    /* dist/components/icon/svgs/headset.svg.svelte generated by Svelte v3.42.1 */

    const file$1s = "dist/components/icon/svgs/headset.svg.svelte";

    function create_fragment$1t(ctx) {
    	let svg;
    	let path;

    	let svg_levels = [
    		{ xmlns: "http://www.w3.org/2000/svg" },
    		{ viewBox: "0 0 512 512" },
    		/*$$props*/ ctx[0]
    	];

    	let svg_data = {};

    	for (let i = 0; i < svg_levels.length; i += 1) {
    		svg_data = assign(svg_data, svg_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");
    			path = svg_element("path");
    			attr_dev(path, "d", "M192 208c0-17.67-14.33-32-32-32h-16c-35.35 0-64 28.65-64 64v48c0 35.35 28.65 64 64 64h16c17.67 0 32-14.33 32-32V208zm176 144c35.35 0 64-28.65 64-64v-48c0-35.35-28.65-64-64-64h-16c-17.67 0-32 14.33-32 32v112c0 17.67 14.33 32 32 32h16zM256 0C113.18 0 4.58 118.83 0 256v16c0 8.84 7.16 16 16 16h16c8.84 0 16-7.16 16-16v-16c0-114.69 93.31-208 208-208s208 93.31 208 208h-.12c.08 2.43.12 165.72.12 165.72 0 23.35-18.93 42.28-42.28 42.28H320c0-26.51-21.49-48-48-48h-32c-26.51 0-48 21.49-48 48s21.49 48 48 48h181.72c49.86 0 90.28-40.42 90.28-90.28V256C507.42 118.83 398.82 0 256 0z");
    			add_location(path, file$1s, 0, 76, 76);
    			set_svg_attributes(svg, svg_data);
    			add_location(svg, file$1s, 0, 0, 0);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);
    			append_dev(svg, path);
    		},
    		p: function update(ctx, [dirty]) {
    			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
    				{ xmlns: "http://www.w3.org/2000/svg" },
    				{ viewBox: "0 0 512 512" },
    				dirty & /*$$props*/ 1 && /*$$props*/ ctx[0]
    			]));
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$1t.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$1t($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Headset_svg', slots, []);

    	$$self.$$set = $$new_props => {
    		$$invalidate(0, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    	};

    	$$self.$inject_state = $$new_props => {
    		$$invalidate(0, $$props = assign(assign({}, $$props), $$new_props));
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$props = exclude_internal_props($$props);
    	return [$$props];
    }

    class Headset_svg extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$1t, create_fragment$1t, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Headset_svg",
    			options,
    			id: create_fragment$1t.name
    		});
    	}
    }

    var headset_svg = /*#__PURE__*/Object.freeze({
        __proto__: null,
        'default': Headset_svg
    });

    var require$$28 = /*@__PURE__*/getAugmentedNamespace(headset_svg);

    /* dist/components/icon/svgs/heart-solid.svg.svelte generated by Svelte v3.42.1 */

    const file$1r = "dist/components/icon/svgs/heart-solid.svg.svelte";

    function create_fragment$1s(ctx) {
    	let svg;
    	let path;

    	let svg_levels = [
    		{ width: "28" },
    		{ height: "28" },
    		{ viewBox: "0 0 28 28" },
    		{ xmlns: "http://www.w3.org/2000/svg" },
    		/*$$props*/ ctx[0]
    	];

    	let svg_data = {};

    	for (let i = 0; i < svg_levels.length; i += 1) {
    		svg_data = assign(svg_data, svg_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");
    			path = svg_element("path");
    			attr_dev(path, "d", "M13.7476 25.593C11.7386 24.2252 6.77784 20.8479 2.84216 16.2119C0.274076 13.1869 0.399282 8.72631 3.16613 5.89127C5.89203 3.09819 10.977 3.46316 14 6.56064C17.023 3.46316 22.108 3.09819 24.8339 5.89127C27.6007 8.72631 27.7259 13.1869 25.1578 16.2119C21.2222 20.8479 16.2614 24.2252 14.2524 25.593C14.099 25.6974 13.901 25.6974 13.7476 25.593Z");
    			add_location(path, file$1r, 1, 0, 98);
    			set_svg_attributes(svg, svg_data);
    			add_location(svg, file$1r, 0, 0, 0);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);
    			append_dev(svg, path);
    		},
    		p: function update(ctx, [dirty]) {
    			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
    				{ width: "28" },
    				{ height: "28" },
    				{ viewBox: "0 0 28 28" },
    				{ xmlns: "http://www.w3.org/2000/svg" },
    				dirty & /*$$props*/ 1 && /*$$props*/ ctx[0]
    			]));
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$1s.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$1s($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Heart_solid_svg', slots, []);

    	$$self.$$set = $$new_props => {
    		$$invalidate(0, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    	};

    	$$self.$inject_state = $$new_props => {
    		$$invalidate(0, $$props = assign(assign({}, $$props), $$new_props));
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$props = exclude_internal_props($$props);
    	return [$$props];
    }

    class Heart_solid_svg extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$1s, create_fragment$1s, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Heart_solid_svg",
    			options,
    			id: create_fragment$1s.name
    		});
    	}
    }

    var heartSolid_svg = /*#__PURE__*/Object.freeze({
        __proto__: null,
        'default': Heart_solid_svg
    });

    var require$$29 = /*@__PURE__*/getAugmentedNamespace(heartSolid_svg);

    /* dist/components/icon/svgs/heart.svg.svelte generated by Svelte v3.42.1 */

    const file$1q = "dist/components/icon/svgs/heart.svg.svelte";

    function create_fragment$1r(ctx) {
    	let svg;
    	let path;

    	let svg_levels = [
    		{ width: "28" },
    		{ height: "28" },
    		{ viewBox: "0 0 28 28" },
    		{ xmlns: "http://www.w3.org/2000/svg" },
    		/*$$props*/ ctx[0]
    	];

    	let svg_data = {};

    	for (let i = 0; i < svg_levels.length; i += 1) {
    		svg_data = assign(svg_data, svg_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");
    			path = svg_element("path");
    			attr_dev(path, "fill-rule", "evenodd");
    			attr_dev(path, "clip-rule", "evenodd");
    			attr_dev(path, "d", "M14 8.56064C13.4611 8.56064 12.9451 8.34318 12.5687 7.95754C10.1521 5.48141 6.37112 5.47078 4.59745 7.28816C2.56225 9.37353 2.45665 12.6675 4.36683 14.9176C7.64256 18.7761 11.6938 21.7442 14 23.3413C16.3062 21.7442 20.3574 18.7761 23.6332 14.9176C25.5434 12.6675 25.4378 9.37353 23.4025 7.28816C21.6289 5.47078 17.8479 5.48141 15.4313 7.95754C15.0549 8.34318 14.5389 8.56064 14 8.56064ZM14.87 23.9376C14.8711 23.9383 14.8721 23.939 14.8731 23.9397L14.8731 23.9397C14.8721 23.939 14.8711 23.9383 14.87 23.9376ZM14.2524 25.593C16.2614 24.2252 21.2222 20.8479 25.1578 16.2119C27.7259 13.1869 27.6007 8.72631 24.8339 5.89127C22.1932 3.18555 17.3388 3.44341 14.2896 6.27801C14.1911 6.36954 14.0946 6.46375 14 6.56064C13.9054 6.46374 13.8089 6.36953 13.7104 6.27799C10.6612 3.44341 5.80676 3.18556 3.16613 5.89127C0.399282 8.72631 0.274076 13.1869 2.84216 16.2119C6.77783 20.8479 11.7386 24.2252 13.7476 25.593C13.901 25.6974 14.099 25.6974 14.2524 25.593Z");
    			add_location(path, file$1q, 1, 0, 98);
    			set_svg_attributes(svg, svg_data);
    			add_location(svg, file$1q, 0, 0, 0);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);
    			append_dev(svg, path);
    		},
    		p: function update(ctx, [dirty]) {
    			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
    				{ width: "28" },
    				{ height: "28" },
    				{ viewBox: "0 0 28 28" },
    				{ xmlns: "http://www.w3.org/2000/svg" },
    				dirty & /*$$props*/ 1 && /*$$props*/ ctx[0]
    			]));
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$1r.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$1r($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Heart_svg', slots, []);

    	$$self.$$set = $$new_props => {
    		$$invalidate(0, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    	};

    	$$self.$inject_state = $$new_props => {
    		$$invalidate(0, $$props = assign(assign({}, $$props), $$new_props));
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$props = exclude_internal_props($$props);
    	return [$$props];
    }

    class Heart_svg extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$1r, create_fragment$1r, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Heart_svg",
    			options,
    			id: create_fragment$1r.name
    		});
    	}
    }

    var heart_svg = /*#__PURE__*/Object.freeze({
        __proto__: null,
        'default': Heart_svg
    });

    var require$$30 = /*@__PURE__*/getAugmentedNamespace(heart_svg);

    /* dist/components/icon/svgs/history.svg.svelte generated by Svelte v3.42.1 */

    const file$1p = "dist/components/icon/svgs/history.svg.svelte";

    function create_fragment$1q(ctx) {
    	let svg;
    	let path0;
    	let path1;

    	let svg_levels = [
    		{ width: "28" },
    		{ height: "28" },
    		{ viewBox: "0 0 28 28" },
    		{ xmlns: "http://www.w3.org/2000/svg" },
    		/*$$props*/ ctx[0]
    	];

    	let svg_data = {};

    	for (let i = 0; i < svg_levels.length; i += 1) {
    		svg_data = assign(svg_data, svg_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");
    			path0 = svg_element("path");
    			path1 = svg_element("path");
    			attr_dev(path0, "d", "M7.533 7.06573H5.42829C7.4358 4.57875 10.5146 3 13.9999 3C20.1237 3 24.9999 7.87614 24.9999 14C24.9999 20.1239 20.1237 25 13.9999 25C9.17128 25 5.12057 21.9689 3.62144 17.6887C3.53016 17.428 3.24489 17.2908 2.98427 17.382C2.72365 17.4733 2.58638 17.7586 2.67766 18.0192C4.31452 22.6928 8.7383 26 13.9999 26C20.676 26 25.9999 20.6761 25.9999 14C25.9999 7.32386 20.676 2 13.9999 2C10.367 2 7.13249 3.57701 4.9397 6.09254V4.42603C4.9397 4.14988 4.71584 3.92603 4.4397 3.92603C4.16355 3.92603 3.9397 4.14988 3.9397 4.42603V7.56573C3.9397 7.84187 4.16355 8.06573 4.4397 8.06573H7.533C7.80914 8.06573 8.033 7.84187 8.033 7.56573C8.033 7.28959 7.80914 7.06573 7.533 7.06573Z");
    			add_location(path0, file$1p, 1, 0, 98);
    			attr_dev(path1, "d", "M14.0002 8.5C14.0002 8.22386 13.7764 8 13.5002 8C13.2241 8 13.0002 8.22386 13.0002 8.5V13.4511C13.0002 13.9639 13.2623 14.4412 13.6949 14.7165L18.7318 17.9218C18.9648 18.0701 19.2738 18.0014 19.4221 17.7684C19.5703 17.5355 19.5017 17.2264 19.2687 17.0782L14.2318 13.8729C14.0876 13.7811 14.0002 13.622 14.0002 13.4511V8.5Z");
    			add_location(path1, file$1p, 2, 0, 778);
    			set_svg_attributes(svg, svg_data);
    			add_location(svg, file$1p, 0, 0, 0);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);
    			append_dev(svg, path0);
    			append_dev(svg, path1);
    		},
    		p: function update(ctx, [dirty]) {
    			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
    				{ width: "28" },
    				{ height: "28" },
    				{ viewBox: "0 0 28 28" },
    				{ xmlns: "http://www.w3.org/2000/svg" },
    				dirty & /*$$props*/ 1 && /*$$props*/ ctx[0]
    			]));
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$1q.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$1q($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('History_svg', slots, []);

    	$$self.$$set = $$new_props => {
    		$$invalidate(0, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    	};

    	$$self.$inject_state = $$new_props => {
    		$$invalidate(0, $$props = assign(assign({}, $$props), $$new_props));
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$props = exclude_internal_props($$props);
    	return [$$props];
    }

    class History_svg extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$1q, create_fragment$1q, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "History_svg",
    			options,
    			id: create_fragment$1q.name
    		});
    	}
    }

    var history_svg = /*#__PURE__*/Object.freeze({
        __proto__: null,
        'default': History_svg
    });

    var require$$31 = /*@__PURE__*/getAugmentedNamespace(history_svg);

    /* dist/components/icon/svgs/info-circle-solid.svg.svelte generated by Svelte v3.42.1 */

    const file$1o = "dist/components/icon/svgs/info-circle-solid.svg.svelte";

    function create_fragment$1p(ctx) {
    	let svg;
    	let path;

    	let svg_levels = [
    		{ width: "28" },
    		{ height: "28" },
    		{ viewBox: "0 0 28 28" },
    		{ xmlns: "http://www.w3.org/2000/svg" },
    		/*$$props*/ ctx[0]
    	];

    	let svg_data = {};

    	for (let i = 0; i < svg_levels.length; i += 1) {
    		svg_data = assign(svg_data, svg_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");
    			path = svg_element("path");
    			attr_dev(path, "fill-rule", "evenodd");
    			attr_dev(path, "clip-rule", "evenodd");
    			attr_dev(path, "d", "M3 14C3 7.92487 7.92487 3 14 3C20.0751 3 25 7.92487 25 14C25 20.0751 20.0751 25 14 25C7.92487 25 3 20.0751 3 14ZM15 9.5C15 8.94772 14.5523 8.5 14 8.5C13.4477 8.5 13 8.94772 13 9.5V10C13 10.5523 13.4477 11 14 11C14.5523 11 15 10.5523 15 10V9.5ZM12.5 12.5C11.9477 12.5 11.5 12.9477 11.5 13.5C11.5 14.0523 11.9477 14.5 12.5 14.5H13V16.5H12.5C11.9477 16.5 11.5 16.9477 11.5 17.5C11.5 18.0523 11.9477 18.5 12.5 18.5H15.5C16.0523 18.5 16.5 18.0523 16.5 17.5C16.5 16.9477 16.0523 16.5 15.5 16.5H15V13.5C15 12.9477 14.5523 12.5 14 12.5H12.5Z");
    			add_location(path, file$1o, 1, 0, 98);
    			set_svg_attributes(svg, svg_data);
    			add_location(svg, file$1o, 0, 0, 0);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);
    			append_dev(svg, path);
    		},
    		p: function update(ctx, [dirty]) {
    			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
    				{ width: "28" },
    				{ height: "28" },
    				{ viewBox: "0 0 28 28" },
    				{ xmlns: "http://www.w3.org/2000/svg" },
    				dirty & /*$$props*/ 1 && /*$$props*/ ctx[0]
    			]));
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$1p.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$1p($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Info_circle_solid_svg', slots, []);

    	$$self.$$set = $$new_props => {
    		$$invalidate(0, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    	};

    	$$self.$inject_state = $$new_props => {
    		$$invalidate(0, $$props = assign(assign({}, $$props), $$new_props));
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$props = exclude_internal_props($$props);
    	return [$$props];
    }

    class Info_circle_solid_svg extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$1p, create_fragment$1p, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Info_circle_solid_svg",
    			options,
    			id: create_fragment$1p.name
    		});
    	}
    }

    var infoCircleSolid_svg = /*#__PURE__*/Object.freeze({
        __proto__: null,
        'default': Info_circle_solid_svg
    });

    var require$$32 = /*@__PURE__*/getAugmentedNamespace(infoCircleSolid_svg);

    /* dist/components/icon/svgs/info-circle.svg.svelte generated by Svelte v3.42.1 */

    const file$1n = "dist/components/icon/svgs/info-circle.svg.svelte";

    function create_fragment$1o(ctx) {
    	let svg;
    	let path0;
    	let path1;
    	let path2;

    	let svg_levels = [
    		{ width: "28" },
    		{ height: "28" },
    		{ viewBox: "0 0 28 28" },
    		{ xmlns: "http://www.w3.org/2000/svg" },
    		/*$$props*/ ctx[0]
    	];

    	let svg_data = {};

    	for (let i = 0; i < svg_levels.length; i += 1) {
    		svg_data = assign(svg_data, svg_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");
    			path0 = svg_element("path");
    			path1 = svg_element("path");
    			path2 = svg_element("path");
    			attr_dev(path0, "fill-rule", "evenodd");
    			attr_dev(path0, "clip-rule", "evenodd");
    			attr_dev(path0, "d", "M14 5C9.02944 5 5 9.02944 5 14C5 18.9706 9.02944 23 14 23C18.9706 23 23 18.9706 23 14C23 9.02944 18.9706 5 14 5ZM3 14C3 7.92487 7.92487 3 14 3C20.0751 3 25 7.92487 25 14C25 20.0751 20.0751 25 14 25C7.92487 25 3 20.0751 3 14Z");
    			add_location(path0, file$1n, 1, 0, 98);
    			attr_dev(path1, "fill-rule", "evenodd");
    			attr_dev(path1, "clip-rule", "evenodd");
    			attr_dev(path1, "d", "M11.5 13.5C11.5 12.9477 11.9477 12.5 12.5 12.5H14C14.5523 12.5 15 12.9477 15 13.5V16.5H15.5C16.0523 16.5 16.5 16.9477 16.5 17.5C16.5 18.0523 16.0523 18.5 15.5 18.5H12.5C11.9477 18.5 11.5 18.0523 11.5 17.5C11.5 16.9477 11.9477 16.5 12.5 16.5H13V14.5H12.5C11.9477 14.5 11.5 14.0523 11.5 13.5Z");
    			add_location(path1, file$1n, 2, 0, 375);
    			attr_dev(path2, "fill-rule", "evenodd");
    			attr_dev(path2, "clip-rule", "evenodd");
    			attr_dev(path2, "d", "M14 8.5C14.5523 8.5 15 8.94772 15 9.5V10C15 10.5523 14.5523 11 14 11C13.4477 11 13 10.5523 13 10V9.5C13 8.94772 13.4477 8.5 14 8.5Z");
    			add_location(path2, file$1n, 3, 0, 718);
    			set_svg_attributes(svg, svg_data);
    			add_location(svg, file$1n, 0, 0, 0);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);
    			append_dev(svg, path0);
    			append_dev(svg, path1);
    			append_dev(svg, path2);
    		},
    		p: function update(ctx, [dirty]) {
    			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
    				{ width: "28" },
    				{ height: "28" },
    				{ viewBox: "0 0 28 28" },
    				{ xmlns: "http://www.w3.org/2000/svg" },
    				dirty & /*$$props*/ 1 && /*$$props*/ ctx[0]
    			]));
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$1o.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$1o($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Info_circle_svg', slots, []);

    	$$self.$$set = $$new_props => {
    		$$invalidate(0, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    	};

    	$$self.$inject_state = $$new_props => {
    		$$invalidate(0, $$props = assign(assign({}, $$props), $$new_props));
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$props = exclude_internal_props($$props);
    	return [$$props];
    }

    class Info_circle_svg extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$1o, create_fragment$1o, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Info_circle_svg",
    			options,
    			id: create_fragment$1o.name
    		});
    	}
    }

    var infoCircle_svg = /*#__PURE__*/Object.freeze({
        __proto__: null,
        'default': Info_circle_svg
    });

    var require$$33 = /*@__PURE__*/getAugmentedNamespace(infoCircle_svg);

    /* dist/components/icon/svgs/laptop.svg.svelte generated by Svelte v3.42.1 */

    const file$1m = "dist/components/icon/svgs/laptop.svg.svelte";

    function create_fragment$1n(ctx) {
    	let svg;
    	let path0;
    	let path1;

    	let svg_levels = [
    		{ width: "28" },
    		{ height: "28" },
    		{ viewBox: "0 0 28 28" },
    		{ xmlns: "http://www.w3.org/2000/svg" },
    		/*$$props*/ ctx[0]
    	];

    	let svg_data = {};

    	for (let i = 0; i < svg_levels.length; i += 1) {
    		svg_data = assign(svg_data, svg_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");
    			path0 = svg_element("path");
    			path1 = svg_element("path");
    			attr_dev(path0, "fill-rule", "evenodd");
    			attr_dev(path0, "clip-rule", "evenodd");
    			attr_dev(path0, "d", "M1 6C1 4.34315 2.34315 3 4 3H24C25.6569 3 27 4.34315 27 6V20C27 21.6569 25.6569 23 24 23H4C2.34315 23 1 21.6569 1 20V6ZM4 5C3.44772 5 3 5.44772 3 6V20C3 20.5523 3.44772 21 4 21H24C24.5523 21 25 20.5523 25 20V6C25 5.44771 24.5523 5 24 5H4Z");
    			add_location(path0, file$1m, 1, 0, 98);
    			attr_dev(path1, "fill-rule", "evenodd");
    			attr_dev(path1, "clip-rule", "evenodd");
    			attr_dev(path1, "d", "M0 25C0 24.4477 0.447715 24 1 24H27C27.5523 24 28 24.4477 28 25C28 25.5523 27.5523 26 27 26H1C0.447715 26 0 25.5523 0 25Z");
    			add_location(path1, file$1m, 2, 0, 389);
    			set_svg_attributes(svg, svg_data);
    			add_location(svg, file$1m, 0, 0, 0);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);
    			append_dev(svg, path0);
    			append_dev(svg, path1);
    		},
    		p: function update(ctx, [dirty]) {
    			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
    				{ width: "28" },
    				{ height: "28" },
    				{ viewBox: "0 0 28 28" },
    				{ xmlns: "http://www.w3.org/2000/svg" },
    				dirty & /*$$props*/ 1 && /*$$props*/ ctx[0]
    			]));
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$1n.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$1n($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Laptop_svg', slots, []);

    	$$self.$$set = $$new_props => {
    		$$invalidate(0, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    	};

    	$$self.$inject_state = $$new_props => {
    		$$invalidate(0, $$props = assign(assign({}, $$props), $$new_props));
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$props = exclude_internal_props($$props);
    	return [$$props];
    }

    class Laptop_svg extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$1n, create_fragment$1n, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Laptop_svg",
    			options,
    			id: create_fragment$1n.name
    		});
    	}
    }

    var laptop_svg = /*#__PURE__*/Object.freeze({
        __proto__: null,
        'default': Laptop_svg
    });

    var require$$34 = /*@__PURE__*/getAugmentedNamespace(laptop_svg);

    /* dist/components/icon/svgs/lightning.svg.svelte generated by Svelte v3.42.1 */

    const file$1l = "dist/components/icon/svgs/lightning.svg.svelte";

    function create_fragment$1m(ctx) {
    	let svg;
    	let path;

    	let svg_levels = [
    		{ viewBox: "0 0 10 16" },
    		{ xmlns: "http://www.w3.org/2000/svg" },
    		/*$$props*/ ctx[0]
    	];

    	let svg_data = {};

    	for (let i = 0; i < svg_levels.length; i += 1) {
    		svg_data = assign(svg_data, svg_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");
    			path = svg_element("path");
    			attr_dev(path, "d", "M3.3386 9.49129L0.487524 8.39426C-0.0111216 8.20239 -0.160746 7.59269 0.196055 7.20656L6.62062 0.25398C7.16186 -0.331744 8.15565 0.179283 7.95001 0.937577L6.43918 6.50871L9.29025 7.60574C9.7889 7.79761 9.93852 8.40731 9.58172 8.79344L3.15716 15.746C2.61592 16.3317 1.62213 15.8207 1.82777 15.0624L3.3386 9.49129Z");
    			add_location(path, file$1l, 1, 0, 75);
    			set_svg_attributes(svg, svg_data);
    			add_location(svg, file$1l, 0, 0, 0);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);
    			append_dev(svg, path);
    		},
    		p: function update(ctx, [dirty]) {
    			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
    				{ viewBox: "0 0 10 16" },
    				{ xmlns: "http://www.w3.org/2000/svg" },
    				dirty & /*$$props*/ 1 && /*$$props*/ ctx[0]
    			]));
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$1m.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$1m($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Lightning_svg', slots, []);

    	$$self.$$set = $$new_props => {
    		$$invalidate(0, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    	};

    	$$self.$inject_state = $$new_props => {
    		$$invalidate(0, $$props = assign(assign({}, $$props), $$new_props));
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$props = exclude_internal_props($$props);
    	return [$$props];
    }

    class Lightning_svg extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$1m, create_fragment$1m, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Lightning_svg",
    			options,
    			id: create_fragment$1m.name
    		});
    	}
    }

    var lightning_svg = /*#__PURE__*/Object.freeze({
        __proto__: null,
        'default': Lightning_svg
    });

    var require$$35 = /*@__PURE__*/getAugmentedNamespace(lightning_svg);

    /* dist/components/icon/svgs/linkedin.svg.svelte generated by Svelte v3.42.1 */

    const file$1k = "dist/components/icon/svgs/linkedin.svg.svelte";

    function create_fragment$1l(ctx) {
    	let svg;
    	let path;

    	let svg_levels = [
    		{ width: "28" },
    		{ height: "28" },
    		{ viewBox: "0 0 28 28" },
    		{ xmlns: "http://www.w3.org/2000/svg" },
    		/*$$props*/ ctx[0]
    	];

    	let svg_data = {};

    	for (let i = 0; i < svg_levels.length; i += 1) {
    		svg_data = assign(svg_data, svg_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");
    			path = svg_element("path");
    			attr_dev(path, "fill-rule", "evenodd");
    			attr_dev(path, "clip-rule", "evenodd");
    			attr_dev(path, "d", "M14 8.57333V11.0667C16.2 6.81333 24.7067 6.66667 25 12.9733V13.2667V24.2667H20.6V15.4667C20.6 9.30667 14.2933 11.0667 14 15.1733V15.4667V24.2667H9.6V8.57333H14ZM7.4 8.86667V24.2667H3V8.86667H7.4ZM5.2 3C6.37333 3 7.4 4.02667 7.4 5.2C7.4 6.37333 6.37333 7.4 5.2 7.4C4.02667 7.4 3 6.37333 3 5.2C3 4.02667 4.02667 3 5.2 3Z");
    			add_location(path, file$1k, 1, 0, 98);
    			set_svg_attributes(svg, svg_data);
    			add_location(svg, file$1k, 0, 0, 0);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);
    			append_dev(svg, path);
    		},
    		p: function update(ctx, [dirty]) {
    			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
    				{ width: "28" },
    				{ height: "28" },
    				{ viewBox: "0 0 28 28" },
    				{ xmlns: "http://www.w3.org/2000/svg" },
    				dirty & /*$$props*/ 1 && /*$$props*/ ctx[0]
    			]));
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$1l.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$1l($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Linkedin_svg', slots, []);

    	$$self.$$set = $$new_props => {
    		$$invalidate(0, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    	};

    	$$self.$inject_state = $$new_props => {
    		$$invalidate(0, $$props = assign(assign({}, $$props), $$new_props));
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$props = exclude_internal_props($$props);
    	return [$$props];
    }

    class Linkedin_svg extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$1l, create_fragment$1l, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Linkedin_svg",
    			options,
    			id: create_fragment$1l.name
    		});
    	}
    }

    var linkedin_svg = /*#__PURE__*/Object.freeze({
        __proto__: null,
        'default': Linkedin_svg
    });

    var require$$36 = /*@__PURE__*/getAugmentedNamespace(linkedin_svg);

    /* dist/components/icon/svgs/lock.svg.svelte generated by Svelte v3.42.1 */

    const file$1j = "dist/components/icon/svgs/lock.svg.svelte";

    function create_fragment$1k(ctx) {
    	let svg;
    	let path;

    	let svg_levels = [
    		{ xmlns: "http://www.w3.org/2000/svg" },
    		{ viewBox: "0 0 448 512" },
    		/*$$props*/ ctx[0]
    	];

    	let svg_data = {};

    	for (let i = 0; i < svg_levels.length; i += 1) {
    		svg_data = assign(svg_data, svg_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");
    			path = svg_element("path");
    			attr_dev(path, "d", "M400 192h-32v-46.6C368 65.8 304 .2 224.4 0 144.8-.2 80 64.5 80 144v48H48c-26.5 0-48 21.5-48 48v224c0 26.5 21.5 48 48 48h352c26.5 0 48-21.5 48-48V240c0-26.5-21.5-48-48-48zm-272-48c0-52.9 43.1-96 96-96s96 43.1 96 96v48H128v-48zm272 320H48V240h352v224z");
    			add_location(path, file$1j, 0, 76, 76);
    			set_svg_attributes(svg, svg_data);
    			add_location(svg, file$1j, 0, 0, 0);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);
    			append_dev(svg, path);
    		},
    		p: function update(ctx, [dirty]) {
    			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
    				{ xmlns: "http://www.w3.org/2000/svg" },
    				{ viewBox: "0 0 448 512" },
    				dirty & /*$$props*/ 1 && /*$$props*/ ctx[0]
    			]));
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$1k.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$1k($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Lock_svg', slots, []);

    	$$self.$$set = $$new_props => {
    		$$invalidate(0, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    	};

    	$$self.$inject_state = $$new_props => {
    		$$invalidate(0, $$props = assign(assign({}, $$props), $$new_props));
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$props = exclude_internal_props($$props);
    	return [$$props];
    }

    class Lock_svg extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$1k, create_fragment$1k, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Lock_svg",
    			options,
    			id: create_fragment$1k.name
    		});
    	}
    }

    var lock_svg = /*#__PURE__*/Object.freeze({
        __proto__: null,
        'default': Lock_svg
    });

    var require$$37 = /*@__PURE__*/getAugmentedNamespace(lock_svg);

    /* dist/components/icon/svgs/mail.svg.svelte generated by Svelte v3.42.1 */

    const file$1i = "dist/components/icon/svgs/mail.svg.svelte";

    function create_fragment$1j(ctx) {
    	let svg;
    	let path0;
    	let path1;

    	let svg_levels = [
    		{ width: "28" },
    		{ height: "28" },
    		{ viewBox: "0 0 28 28" },
    		{ xmlns: "http://www.w3.org/2000/svg" },
    		/*$$props*/ ctx[0]
    	];

    	let svg_data = {};

    	for (let i = 0; i < svg_levels.length; i += 1) {
    		svg_data = assign(svg_data, svg_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");
    			path0 = svg_element("path");
    			path1 = svg_element("path");
    			attr_dev(path0, "d", "M5.61399 7.21063C5.17804 6.87156 4.54976 6.9501 4.21069 7.38604C3.87162 7.82199 3.95016 8.45027 4.38611 8.78934L13.3861 15.7893C13.7472 16.0702 14.2529 16.0702 14.614 15.7893L23.614 8.78934C24.0499 8.45027 24.1285 7.82199 23.7894 7.38604C23.4503 6.9501 22.8221 6.87156 22.3861 7.21063L14 13.7331L5.61399 7.21063Z");
    			add_location(path0, file$1i, 1, 0, 98);
    			attr_dev(path1, "fill-rule", "evenodd");
    			attr_dev(path1, "clip-rule", "evenodd");
    			attr_dev(path1, "d", "M3.5 3C1.567 3 0 4.567 0 6.5V21.5C0 23.433 1.567 25 3.5 25H24.5C26.433 25 28 23.433 28 21.5V6.5C28 4.567 26.433 3 24.5 3H3.5ZM2 6.5C2 5.67157 2.67157 5 3.5 5H24.5C25.3284 5 26 5.67157 26 6.5V21.5C26 22.3284 25.3284 23 24.5 23H3.5C2.67157 23 2 22.3284 2 21.5V6.5Z");
    			add_location(path1, file$1i, 2, 0, 423);
    			set_svg_attributes(svg, svg_data);
    			add_location(svg, file$1i, 0, 0, 0);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);
    			append_dev(svg, path0);
    			append_dev(svg, path1);
    		},
    		p: function update(ctx, [dirty]) {
    			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
    				{ width: "28" },
    				{ height: "28" },
    				{ viewBox: "0 0 28 28" },
    				{ xmlns: "http://www.w3.org/2000/svg" },
    				dirty & /*$$props*/ 1 && /*$$props*/ ctx[0]
    			]));
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$1j.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$1j($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Mail_svg', slots, []);

    	$$self.$$set = $$new_props => {
    		$$invalidate(0, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    	};

    	$$self.$inject_state = $$new_props => {
    		$$invalidate(0, $$props = assign(assign({}, $$props), $$new_props));
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$props = exclude_internal_props($$props);
    	return [$$props];
    }

    class Mail_svg extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$1j, create_fragment$1j, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Mail_svg",
    			options,
    			id: create_fragment$1j.name
    		});
    	}
    }

    var mail_svg = /*#__PURE__*/Object.freeze({
        __proto__: null,
        'default': Mail_svg
    });

    var require$$38 = /*@__PURE__*/getAugmentedNamespace(mail_svg);

    /* dist/components/icon/svgs/mappin-solid.svg.svelte generated by Svelte v3.42.1 */

    const file$1h = "dist/components/icon/svgs/mappin-solid.svg.svelte";

    function create_fragment$1i(ctx) {
    	let svg;
    	let path;

    	let svg_levels = [
    		{ width: "28" },
    		{ height: "28" },
    		{ viewBox: "0 0 28 28" },
    		{ xmlns: "http://www.w3.org/2000/svg" },
    		/*$$props*/ ctx[0]
    	];

    	let svg_data = {};

    	for (let i = 0; i < svg_levels.length; i += 1) {
    		svg_data = assign(svg_data, svg_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");
    			path = svg_element("path");
    			attr_dev(path, "fill-rule", "evenodd");
    			attr_dev(path, "clip-rule", "evenodd");
    			attr_dev(path, "d", "M5.5 11C5.5 6.30558 9.30558 2.5 14 2.5C18.6944 2.5 22.5 6.30558 22.5 11C22.5 14.259 21.0588 17.302 19.4179 19.7173C17.7729 22.1386 15.8938 23.9778 14.9443 24.8398C14.4032 25.3311 13.5968 25.3311 13.0557 24.8398C12.1062 23.9778 10.2271 22.1386 8.58206 19.7173C6.94118 17.302 5.5 14.259 5.5 11ZM14 14C15.6569 14 17 12.6569 17 11C17 9.34315 15.6569 8 14 8C12.3431 8 11 9.34315 11 11C11 12.6569 12.3431 14 14 14Z");
    			add_location(path, file$1h, 1, 0, 98);
    			set_svg_attributes(svg, svg_data);
    			add_location(svg, file$1h, 0, 0, 0);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);
    			append_dev(svg, path);
    		},
    		p: function update(ctx, [dirty]) {
    			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
    				{ width: "28" },
    				{ height: "28" },
    				{ viewBox: "0 0 28 28" },
    				{ xmlns: "http://www.w3.org/2000/svg" },
    				dirty & /*$$props*/ 1 && /*$$props*/ ctx[0]
    			]));
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$1i.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$1i($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Mappin_solid_svg', slots, []);

    	$$self.$$set = $$new_props => {
    		$$invalidate(0, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    	};

    	$$self.$inject_state = $$new_props => {
    		$$invalidate(0, $$props = assign(assign({}, $$props), $$new_props));
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$props = exclude_internal_props($$props);
    	return [$$props];
    }

    class Mappin_solid_svg extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$1i, create_fragment$1i, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Mappin_solid_svg",
    			options,
    			id: create_fragment$1i.name
    		});
    	}
    }

    var mappinSolid_svg = /*#__PURE__*/Object.freeze({
        __proto__: null,
        'default': Mappin_solid_svg
    });

    var require$$39 = /*@__PURE__*/getAugmentedNamespace(mappinSolid_svg);

    /* dist/components/icon/svgs/mappin.svg.svelte generated by Svelte v3.42.1 */

    const file$1g = "dist/components/icon/svgs/mappin.svg.svelte";

    function create_fragment$1h(ctx) {
    	let svg;
    	let path0;
    	let path1;

    	let svg_levels = [
    		{ width: "28" },
    		{ height: "28" },
    		{ viewBox: "0 0 28 28" },
    		{ xmlns: "http://www.w3.org/2000/svg" },
    		/*$$props*/ ctx[0]
    	];

    	let svg_data = {};

    	for (let i = 0; i < svg_levels.length; i += 1) {
    		svg_data = assign(svg_data, svg_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");
    			path0 = svg_element("path");
    			path1 = svg_element("path");
    			attr_dev(path0, "fill-rule", "evenodd");
    			attr_dev(path0, "clip-rule", "evenodd");
    			attr_dev(path0, "d", "M14 3.5C9.85786 3.5 6.5 6.85786 6.5 11C6.5 13.9735 7.82105 16.8177 9.40922 19.1553C10.9932 21.4869 12.81 23.2662 13.7278 24.0994C13.8877 24.2445 14.1123 24.2445 14.2722 24.0994C15.19 23.2662 17.0068 21.4869 18.5908 19.1553C20.1789 16.8177 21.5 13.9735 21.5 11C21.5 6.85786 18.1421 3.5 14 3.5ZM5.5 11C5.5 6.30558 9.30558 2.5 14 2.5C18.6944 2.5 22.5 6.30558 22.5 11C22.5 14.259 21.0588 17.302 19.4179 19.7173C17.7729 22.1386 15.8938 23.9778 14.9443 24.8398C14.4032 25.3311 13.5968 25.3311 13.0557 24.8398C12.1062 23.9778 10.2271 22.1386 8.58206 19.7173C6.94118 17.302 5.5 14.259 5.5 11Z");
    			add_location(path0, file$1g, 1, 0, 98);
    			attr_dev(path1, "fill-rule", "evenodd");
    			attr_dev(path1, "clip-rule", "evenodd");
    			attr_dev(path1, "d", "M14 8C12.3431 8 11 9.34315 11 11C11 12.6569 12.3431 14 14 14C15.6569 14 17 12.6569 17 11C17 9.34315 15.6569 8 14 8ZM10 11C10 8.79086 11.7909 7 14 7C16.2091 7 18 8.79086 18 11C18 13.2091 16.2091 15 14 15C11.7909 15 10 13.2091 10 11Z");
    			add_location(path1, file$1g, 2, 0, 735);
    			set_svg_attributes(svg, svg_data);
    			add_location(svg, file$1g, 0, 0, 0);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);
    			append_dev(svg, path0);
    			append_dev(svg, path1);
    		},
    		p: function update(ctx, [dirty]) {
    			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
    				{ width: "28" },
    				{ height: "28" },
    				{ viewBox: "0 0 28 28" },
    				{ xmlns: "http://www.w3.org/2000/svg" },
    				dirty & /*$$props*/ 1 && /*$$props*/ ctx[0]
    			]));
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$1h.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$1h($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Mappin_svg', slots, []);

    	$$self.$$set = $$new_props => {
    		$$invalidate(0, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    	};

    	$$self.$inject_state = $$new_props => {
    		$$invalidate(0, $$props = assign(assign({}, $$props), $$new_props));
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$props = exclude_internal_props($$props);
    	return [$$props];
    }

    class Mappin_svg extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$1h, create_fragment$1h, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Mappin_svg",
    			options,
    			id: create_fragment$1h.name
    		});
    	}
    }

    var mappin_svg = /*#__PURE__*/Object.freeze({
        __proto__: null,
        'default': Mappin_svg
    });

    var require$$40 = /*@__PURE__*/getAugmentedNamespace(mappin_svg);

    /* dist/components/icon/svgs/medielogin.svg.svelte generated by Svelte v3.42.1 */

    const file$1f = "dist/components/icon/svgs/medielogin.svg.svelte";

    function create_fragment$1g(ctx) {
    	let svg;
    	let g;
    	let rect;
    	let polygon0;
    	let path;
    	let polygon1;

    	let svg_levels = [
    		{ version: "1.1" },
    		{ id: "Layer_1" },
    		{ xmlns: "http://www.w3.org/2000/svg" },
    		{
    			"xmlns:xlink": "http://www.w3.org/1999/xlink"
    		},
    		{ x: "0px" },
    		{ y: "0px" },
    		{ viewBox: "0 0 63.6 81.5" },
    		{
    			style: "enable-background:new 0 0 63.6 81.5;"
    		},
    		{ "xml:space": "preserve" },
    		/*$$props*/ ctx[0]
    	];

    	let svg_data = {};

    	for (let i = 0; i < svg_levels.length; i += 1) {
    		svg_data = assign(svg_data, svg_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");
    			g = svg_element("g");
    			rect = svg_element("rect");
    			polygon0 = svg_element("polygon");
    			path = svg_element("path");
    			polygon1 = svg_element("polygon");
    			attr_dev(rect, "y", "70.7");
    			attr_dev(rect, "width", "63.3");
    			attr_dev(rect, "height", "10.9");
    			add_location(rect, file$1f, 12, 4, 260);
    			attr_dev(polygon0, "points", "0,81.5 21.2,61.8 21.2,47.8 0,67.5 \t");
    			add_location(polygon0, file$1f, 13, 4, 309);
    			attr_dev(path, "d", "M31.8,0C14.2,0,0,14.2,0,31.8c0,13.8,8.9,25.6,21.2,30v-14c-5.2-3.4-8.6-9.3-8.6-16c0-10.6,8.6-19.2,19.2-19.2\n\t\tS51,21.2,51,31.8c0,6.7-3.4,12.5-8.6,16v14c12.3-4.4,21.2-16.1,21.2-30C63.6,14.2,49.3,0,31.8,0z");
    			add_location(path, file$1f, 14, 4, 370);
    			attr_dev(polygon1, "points", "63.6,81.5 42.4,61.7 42.4,47.8 63.6,67.5 \t");
    			add_location(polygon1, file$1f, 18, 4, 600);
    			add_location(g, file$1f, 11, 2, 252);
    			set_svg_attributes(svg, svg_data);
    			add_location(svg, file$1f, 0, 0, 0);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);
    			append_dev(svg, g);
    			append_dev(g, rect);
    			append_dev(g, polygon0);
    			append_dev(g, path);
    			append_dev(g, polygon1);
    		},
    		p: function update(ctx, [dirty]) {
    			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
    				{ version: "1.1" },
    				{ id: "Layer_1" },
    				{ xmlns: "http://www.w3.org/2000/svg" },
    				{
    					"xmlns:xlink": "http://www.w3.org/1999/xlink"
    				},
    				{ x: "0px" },
    				{ y: "0px" },
    				{ viewBox: "0 0 63.6 81.5" },
    				{
    					style: "enable-background:new 0 0 63.6 81.5;"
    				},
    				{ "xml:space": "preserve" },
    				dirty & /*$$props*/ 1 && /*$$props*/ ctx[0]
    			]));
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$1g.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$1g($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Medielogin_svg', slots, []);

    	$$self.$$set = $$new_props => {
    		$$invalidate(0, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    	};

    	$$self.$inject_state = $$new_props => {
    		$$invalidate(0, $$props = assign(assign({}, $$props), $$new_props));
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$props = exclude_internal_props($$props);
    	return [$$props];
    }

    class Medielogin_svg extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$1g, create_fragment$1g, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Medielogin_svg",
    			options,
    			id: create_fragment$1g.name
    		});
    	}
    }

    var medielogin_svg = /*#__PURE__*/Object.freeze({
        __proto__: null,
        'default': Medielogin_svg
    });

    var require$$41 = /*@__PURE__*/getAugmentedNamespace(medielogin_svg);

    /* dist/components/icon/svgs/menu-bars.svg.svelte generated by Svelte v3.42.1 */

    const file$1e = "dist/components/icon/svgs/menu-bars.svg.svelte";

    function create_fragment$1f(ctx) {
    	let svg;
    	let g1;
    	let g0;
    	let rect0;
    	let g3;
    	let g2;
    	let rect1;
    	let g5;
    	let g4;
    	let rect2;

    	let svg_levels = [
    		{ version: "1.1" },
    		{ id: "Lag_1" },
    		{ xmlns: "http://www.w3.org/2000/svg" },
    		{
    			"xmlns:xlink": "http://www.w3.org/1999/xlink"
    		},
    		{ x: "0px" },
    		{ y: "0px" },
    		{ viewBox: "0 0 30 30" },
    		{ "enable-background": "new 0 0 30 30" },
    		{ "xml:space": "preserve" },
    		/*$$props*/ ctx[0]
    	];

    	let svg_data = {};

    	for (let i = 0; i < svg_levels.length; i += 1) {
    		svg_data = assign(svg_data, svg_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");
    			g1 = svg_element("g");
    			g0 = svg_element("g");
    			rect0 = svg_element("rect");
    			g3 = svg_element("g");
    			g2 = svg_element("g");
    			rect1 = svg_element("rect");
    			g5 = svg_element("g");
    			g4 = svg_element("g");
    			rect2 = svg_element("rect");
    			attr_dev(rect0, "y", "4.3");
    			attr_dev(rect0, "width", "30");
    			attr_dev(rect0, "height", "4");
    			add_location(rect0, file$1e, 13, 6, 253);
    			add_location(g0, file$1e, 12, 4, 243);
    			add_location(g1, file$1e, 11, 2, 235);
    			attr_dev(rect1, "y", "12.3");
    			attr_dev(rect1, "width", "30");
    			attr_dev(rect1, "height", "4");
    			add_location(rect1, file$1e, 18, 6, 328);
    			add_location(g2, file$1e, 17, 4, 318);
    			add_location(g3, file$1e, 16, 2, 310);
    			attr_dev(rect2, "y", "20.3");
    			attr_dev(rect2, "width", "30");
    			attr_dev(rect2, "height", "4");
    			add_location(rect2, file$1e, 23, 6, 404);
    			add_location(g4, file$1e, 22, 4, 394);
    			add_location(g5, file$1e, 21, 2, 386);
    			set_svg_attributes(svg, svg_data);
    			add_location(svg, file$1e, 0, 0, 0);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);
    			append_dev(svg, g1);
    			append_dev(g1, g0);
    			append_dev(g0, rect0);
    			append_dev(svg, g3);
    			append_dev(g3, g2);
    			append_dev(g2, rect1);
    			append_dev(svg, g5);
    			append_dev(g5, g4);
    			append_dev(g4, rect2);
    		},
    		p: function update(ctx, [dirty]) {
    			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
    				{ version: "1.1" },
    				{ id: "Lag_1" },
    				{ xmlns: "http://www.w3.org/2000/svg" },
    				{
    					"xmlns:xlink": "http://www.w3.org/1999/xlink"
    				},
    				{ x: "0px" },
    				{ y: "0px" },
    				{ viewBox: "0 0 30 30" },
    				{ "enable-background": "new 0 0 30 30" },
    				{ "xml:space": "preserve" },
    				dirty & /*$$props*/ 1 && /*$$props*/ ctx[0]
    			]));
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$1f.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$1f($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Menu_bars_svg', slots, []);

    	$$self.$$set = $$new_props => {
    		$$invalidate(0, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    	};

    	$$self.$inject_state = $$new_props => {
    		$$invalidate(0, $$props = assign(assign({}, $$props), $$new_props));
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$props = exclude_internal_props($$props);
    	return [$$props];
    }

    class Menu_bars_svg extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$1f, create_fragment$1f, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Menu_bars_svg",
    			options,
    			id: create_fragment$1f.name
    		});
    	}
    }

    var menuBars_svg = /*#__PURE__*/Object.freeze({
        __proto__: null,
        'default': Menu_bars_svg
    });

    var require$$42 = /*@__PURE__*/getAugmentedNamespace(menuBars_svg);

    /* dist/components/icon/svgs/moneycheck-solid.svg.svelte generated by Svelte v3.42.1 */

    const file$1d = "dist/components/icon/svgs/moneycheck-solid.svg.svelte";

    function create_fragment$1e(ctx) {
    	let svg;
    	let path;

    	let svg_levels = [
    		{ width: "28" },
    		{ height: "28" },
    		{ viewBox: "0 0 28 28" },
    		{ xmlns: "http://www.w3.org/2000/svg" },
    		/*$$props*/ ctx[0]
    	];

    	let svg_data = {};

    	for (let i = 0; i < svg_levels.length; i += 1) {
    		svg_data = assign(svg_data, svg_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");
    			path = svg_element("path");
    			attr_dev(path, "fill-rule", "evenodd");
    			attr_dev(path, "clip-rule", "evenodd");
    			attr_dev(path, "d", "M2.5 2C1.11929 2 0 3.11929 0 4.5V6H28V4.5C28 3.11929 26.8807 2 25.5 2H2.5ZM0 23.5V8H28V23.5C28 24.8807 26.8807 26 25.5 26H2.5C1.11929 26 0 24.8807 0 23.5ZM5 13C4.44772 13 4 13.4477 4 14C4 14.5523 4.44772 15 5 15H14C14.5523 15 15 14.5523 15 14C15 13.4477 14.5523 13 14 13H5ZM5 17C4.44772 17 4 17.4477 4 18C4 18.5523 4.44772 19 5 19H10C10.5523 19 11 18.5523 11 18C11 17.4477 10.5523 17 10 17H5ZM18 18C18 17.4477 18.4477 17 19 17H23C23.5523 17 24 17.4477 24 18V21C24 21.5523 23.5523 22 23 22H19C18.4477 22 18 21.5523 18 21V18Z");
    			add_location(path, file$1d, 1, 0, 98);
    			set_svg_attributes(svg, svg_data);
    			add_location(svg, file$1d, 0, 0, 0);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);
    			append_dev(svg, path);
    		},
    		p: function update(ctx, [dirty]) {
    			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
    				{ width: "28" },
    				{ height: "28" },
    				{ viewBox: "0 0 28 28" },
    				{ xmlns: "http://www.w3.org/2000/svg" },
    				dirty & /*$$props*/ 1 && /*$$props*/ ctx[0]
    			]));
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$1e.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$1e($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Moneycheck_solid_svg', slots, []);

    	$$self.$$set = $$new_props => {
    		$$invalidate(0, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    	};

    	$$self.$inject_state = $$new_props => {
    		$$invalidate(0, $$props = assign(assign({}, $$props), $$new_props));
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$props = exclude_internal_props($$props);
    	return [$$props];
    }

    class Moneycheck_solid_svg extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$1e, create_fragment$1e, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Moneycheck_solid_svg",
    			options,
    			id: create_fragment$1e.name
    		});
    	}
    }

    var moneycheckSolid_svg = /*#__PURE__*/Object.freeze({
        __proto__: null,
        'default': Moneycheck_solid_svg
    });

    var require$$43 = /*@__PURE__*/getAugmentedNamespace(moneycheckSolid_svg);

    /* dist/components/icon/svgs/newspaper.svg.svelte generated by Svelte v3.42.1 */

    const file$1c = "dist/components/icon/svgs/newspaper.svg.svelte";

    function create_fragment$1d(ctx) {
    	let svg;
    	let path;

    	let svg_levels = [
    		{ width: "56" },
    		{ height: "56" },
    		{ viewBox: "0 0 56 56" },
    		{ xmlns: "http://www.w3.org/2000/svg" },
    		/*$$props*/ ctx[0]
    	];

    	let svg_data = {};

    	for (let i = 0; i < svg_levels.length; i += 1) {
    		svg_data = assign(svg_data, svg_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");
    			path = svg_element("path");
    			attr_dev(path, "fill-rule", "evenodd");
    			attr_dev(path, "clip-rule", "evenodd");
    			attr_dev(path, "d", "M6.25711 8.25711C6.11989 8.39433 6 8.62725 6 9V43C6 45.8477 8.15228 48 11 48H40.0359C38.7692 46.7428 38 44.9855 38 43V9C38 8.62725 37.8801 8.39433 37.7429 8.25711C37.6057 8.11989 37.3728 8 37 8H7C6.62725 8 6.39433 8.11989 6.25711 8.25711ZM45 48C47.8477 48 50 45.8477 50 43V13C50 12.4477 50.4477 12 51 12C51.5523 12 52 12.4477 52 13V43C52 46.9523 48.9523 50 45 50H11C7.04771 50 4 46.9523 4 43V9C4 8.17275 4.28011 7.40567 4.84289 6.84289C5.40567 6.28011 6.17275 6 7 6H37C37.8272 6 38.5943 6.28011 39.1571 6.84289C39.7199 7.40567 40 8.17275 40 9V43C40 45.8477 42.1523 48 45 48ZM45 12C45.5523 12 46 12.4477 46 13V43.5217C46 44.074 45.5523 44.5217 45 44.5217C44.4477 44.5217 44 44.074 44 43.5217V13C44 12.4477 44.4477 12 45 12ZM12 16V26H22V16H12ZM10.5679 14.5679C10.9557 14.1801 11.4728 14 12 14H22C22.5272 14 23.0443 14.1801 23.4321 14.5679C23.8199 14.9557 24 15.4728 24 16V26C24 26.5272 23.8199 27.0443 23.4321 27.4321C23.0443 27.8199 22.5272 28 22 28H12C11.4728 28 10.9557 27.8199 10.5679 27.4321C10.1801 27.0443 10 26.5272 10 26V16C10 15.4728 10.1801 14.9557 10.5679 14.5679ZM26.3696 15C26.3696 14.4477 26.8173 14 27.3696 14H33C33.5523 14 34 14.4477 34 15C34 15.5523 33.5523 16 33 16H27.3696C26.8173 16 26.3696 15.5523 26.3696 15ZM26.3696 21C26.3696 20.4477 26.8173 20 27.3696 20H33C33.5523 20 34 20.4477 34 21C34 21.5523 33.5523 22 33 22H27.3696C26.8173 22 26.3696 21.5523 26.3696 21ZM26.3696 27C26.3696 26.4477 26.8173 26 27.3696 26H33C33.5523 26 34 26.4477 34 27C34 27.5523 33.5523 28 33 28H27.3696C26.8173 28 26.3696 27.5523 26.3696 27ZM10 33C10 32.4477 10.4477 32 11 32H33C33.5523 32 34 32.4477 34 33C34 33.5523 33.5523 34 33 34H11C10.4477 34 10 33.5523 10 33ZM10 39C10 38.4477 10.4477 38 11 38H33C33.5523 38 34 38.4477 34 39C34 39.5523 33.5523 40 33 40H11C10.4477 40 10 39.5523 10 39Z");
    			add_location(path, file$1c, 1, 0, 98);
    			set_svg_attributes(svg, svg_data);
    			add_location(svg, file$1c, 0, 0, 0);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);
    			append_dev(svg, path);
    		},
    		p: function update(ctx, [dirty]) {
    			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
    				{ width: "56" },
    				{ height: "56" },
    				{ viewBox: "0 0 56 56" },
    				{ xmlns: "http://www.w3.org/2000/svg" },
    				dirty & /*$$props*/ 1 && /*$$props*/ ctx[0]
    			]));
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$1d.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$1d($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Newspaper_svg', slots, []);

    	$$self.$$set = $$new_props => {
    		$$invalidate(0, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    	};

    	$$self.$inject_state = $$new_props => {
    		$$invalidate(0, $$props = assign(assign({}, $$props), $$new_props));
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$props = exclude_internal_props($$props);
    	return [$$props];
    }

    class Newspaper_svg extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$1d, create_fragment$1d, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Newspaper_svg",
    			options,
    			id: create_fragment$1d.name
    		});
    	}
    }

    var newspaper_svg = /*#__PURE__*/Object.freeze({
        __proto__: null,
        'default': Newspaper_svg
    });

    var require$$44 = /*@__PURE__*/getAugmentedNamespace(newspaper_svg);

    /* dist/components/icon/svgs/phone.svg.svelte generated by Svelte v3.42.1 */

    const file$1b = "dist/components/icon/svgs/phone.svg.svelte";

    function create_fragment$1c(ctx) {
    	let svg;
    	let path;

    	let svg_levels = [
    		{ width: "28" },
    		{ height: "28" },
    		{ viewBox: "0 0 28 28" },
    		{ xmlns: "http://www.w3.org/2000/svg" },
    		/*$$props*/ ctx[0]
    	];

    	let svg_data = {};

    	for (let i = 0; i < svg_levels.length; i += 1) {
    		svg_data = assign(svg_data, svg_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");
    			path = svg_element("path");
    			attr_dev(path, "fill-rule", "evenodd");
    			attr_dev(path, "clip-rule", "evenodd");
    			attr_dev(path, "d", "M5.41041 5.5C4.82852 5.5 4.45993 5.95395 4.50401 6.39854C5.39401 15.3754 12.5351 22.5164 21.5119 23.4064C21.9565 23.4505 22.4104 23.0819 22.4104 22.5V18.9415C22.4104 18.5111 22.135 18.1289 21.7266 17.9928L18.2668 16.8396C17.9075 16.7198 17.5113 16.8133 17.2435 17.0811L16.6897 17.6349C16.0271 18.2976 14.9716 18.4243 14.1719 17.8773C12.2808 16.5836 11.1794 15.4895 10.0048 13.7209C9.47374 12.9213 9.61283 11.8834 10.2635 11.2327L10.8293 10.6669C11.0971 10.3991 11.1906 10.0029 11.0709 9.64359L9.91758 6.18377C9.78146 5.77543 9.39932 5.5 8.96889 5.5H5.41041ZM2.51376 6.59586C2.33989 4.84208 3.78316 3.5 5.41041 3.5H8.96889C10.2602 3.5 11.4066 4.32629 11.8149 5.55132L12.9682 9.01113C13.3276 10.0891 13.047 11.2776 12.2435 12.0811L11.6866 12.6381C12.6963 14.1536 13.6047 15.064 15.2824 16.2138L15.8293 15.6669C16.6328 14.8634 17.8213 14.5829 18.8993 14.9422L22.3591 16.0955C23.5841 16.5038 24.4104 17.6502 24.4104 18.9415V22.5C24.4104 24.1273 23.0683 25.5705 21.3146 25.3966C11.3892 24.4126 3.49781 16.5212 2.51376 6.59586ZM16.4104 4.5C16.4104 3.94772 16.8581 3.5 17.4104 3.5C21.2764 3.5 24.4104 6.63401 24.4104 10.5C24.4104 11.0523 23.9627 11.5 23.4104 11.5C22.8581 11.5 22.4104 11.0523 22.4104 10.5C22.4104 7.73858 20.1718 5.5 17.4104 5.5C16.8581 5.5 16.4104 5.05228 16.4104 4.5ZM16.4104 8.5C16.4104 7.94772 16.8581 7.5 17.4104 7.5C19.0673 7.5 20.4104 8.84315 20.4104 10.5C20.4104 11.0523 19.9627 11.5 19.4104 11.5C18.8581 11.5 18.4104 11.0523 18.4104 10.5C18.4104 9.94772 17.9627 9.5 17.4104 9.5C16.8581 9.5 16.4104 9.05228 16.4104 8.5Z");
    			add_location(path, file$1b, 1, 0, 98);
    			set_svg_attributes(svg, svg_data);
    			add_location(svg, file$1b, 0, 0, 0);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);
    			append_dev(svg, path);
    		},
    		p: function update(ctx, [dirty]) {
    			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
    				{ width: "28" },
    				{ height: "28" },
    				{ viewBox: "0 0 28 28" },
    				{ xmlns: "http://www.w3.org/2000/svg" },
    				dirty & /*$$props*/ 1 && /*$$props*/ ctx[0]
    			]));
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$1c.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$1c($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Phone_svg', slots, []);

    	$$self.$$set = $$new_props => {
    		$$invalidate(0, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    	};

    	$$self.$inject_state = $$new_props => {
    		$$invalidate(0, $$props = assign(assign({}, $$props), $$new_props));
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$props = exclude_internal_props($$props);
    	return [$$props];
    }

    class Phone_svg extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$1c, create_fragment$1c, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Phone_svg",
    			options,
    			id: create_fragment$1c.name
    		});
    	}
    }

    var phone_svg = /*#__PURE__*/Object.freeze({
        __proto__: null,
        'default': Phone_svg
    });

    var require$$45 = /*@__PURE__*/getAugmentedNamespace(phone_svg);

    /* dist/components/icon/svgs/play-circle.svg.svelte generated by Svelte v3.42.1 */

    const file$1a = "dist/components/icon/svgs/play-circle.svg.svelte";

    function create_fragment$1b(ctx) {
    	let svg;
    	let path;

    	let svg_levels = [
    		{ "aria-hidden": "true" },
    		{ focusable: "false" },
    		{ "data-prefix": "fal" },
    		{ "data-icon": "play-circle" },
    		{
    			class: "svg-inline--fa fa-play-circle fa-w-16"
    		},
    		{ role: "img" },
    		{ xmlns: "http://www.w3.org/2000/svg" },
    		{ viewBox: "0 0 512 512" },
    		/*$$props*/ ctx[0]
    	];

    	let svg_data = {};

    	for (let i = 0; i < svg_levels.length; i += 1) {
    		svg_data = assign(svg_data, svg_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");
    			path = svg_element("path");
    			attr_dev(path, "d", "M256 504c137 0 248-111 248-248S393 8 256 8 8 119 8 256s111 248 248 248zM40 256c0-118.7 96.1-216 216-216 118.7 0 216 96.1 216 216 0 118.7-96.1 216-216 216-118.7 0-216-96.1-216-216zm331.7-18l-176-107c-15.8-8.8-35.7 2.5-35.7 21v208c0 18.4 19.8 29.8 35.7 21l176-101c16.4-9.1 16.4-32.8 0-42zM192 335.8V176.9c0-4.7 5.1-7.6 9.1-5.1l134.5 81.7c3.9 2.4 3.8 8.1-.1 10.3L201 341c-4 2.3-9-.6-9-5.2z");
    			add_location(path, file$1a, 0, 212, 212);
    			set_svg_attributes(svg, svg_data);
    			add_location(svg, file$1a, 0, 0, 0);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);
    			append_dev(svg, path);
    		},
    		p: function update(ctx, [dirty]) {
    			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
    				{ "aria-hidden": "true" },
    				{ focusable: "false" },
    				{ "data-prefix": "fal" },
    				{ "data-icon": "play-circle" },
    				{
    					class: "svg-inline--fa fa-play-circle fa-w-16"
    				},
    				{ role: "img" },
    				{ xmlns: "http://www.w3.org/2000/svg" },
    				{ viewBox: "0 0 512 512" },
    				dirty & /*$$props*/ 1 && /*$$props*/ ctx[0]
    			]));
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$1b.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$1b($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Play_circle_svg', slots, []);

    	$$self.$$set = $$new_props => {
    		$$invalidate(0, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    	};

    	$$self.$inject_state = $$new_props => {
    		$$invalidate(0, $$props = assign(assign({}, $$props), $$new_props));
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$props = exclude_internal_props($$props);
    	return [$$props];
    }

    class Play_circle_svg extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$1b, create_fragment$1b, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Play_circle_svg",
    			options,
    			id: create_fragment$1b.name
    		});
    	}
    }

    var playCircle_svg = /*#__PURE__*/Object.freeze({
        __proto__: null,
        'default': Play_circle_svg
    });

    var require$$46 = /*@__PURE__*/getAugmentedNamespace(playCircle_svg);

    /* dist/components/icon/svgs/questionmark-circle-solid.svg.svelte generated by Svelte v3.42.1 */

    const file$19 = "dist/components/icon/svgs/questionmark-circle-solid.svg.svelte";

    function create_fragment$1a(ctx) {
    	let svg;
    	let path;

    	let svg_levels = [
    		{ width: "28" },
    		{ height: "28" },
    		{ viewBox: "0 0 28 28" },
    		{ xmlns: "http://www.w3.org/2000/svg" },
    		/*$$props*/ ctx[0]
    	];

    	let svg_data = {};

    	for (let i = 0; i < svg_levels.length; i += 1) {
    		svg_data = assign(svg_data, svg_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");
    			path = svg_element("path");
    			attr_dev(path, "fill-rule", "evenodd");
    			attr_dev(path, "clip-rule", "evenodd");
    			attr_dev(path, "d", "M3 14C3 7.92487 7.92487 3 14 3C20.0751 3 25 7.92487 25 14C25 20.0751 20.0751 25 14 25C7.92487 25 3 20.0751 3 14ZM12.8083 11.2365C13.1342 10.7065 13.6387 10.4103 14.1158 10.4103C14.3871 10.4103 14.7585 10.5488 15.0223 10.8057C15.2593 11.0366 15.3546 11.2991 15.2825 11.6094C15.2281 11.8435 15.0897 12.0146 14.7564 12.256C14.6716 12.3174 14.583 12.3773 14.4805 12.4463L14.4705 12.4531C14.3752 12.5173 14.2654 12.5913 14.1588 12.6685C13.9428 12.825 13.6711 13.0422 13.4544 13.3426C13.2643 13.6062 13 14.0701 13 14.6729V15.3513C13 15.9036 13.4477 16.3513 14 16.3513C14.5523 16.3513 15 15.9036 15 15.3513V14.6729C15 14.6688 15.0007 14.6537 15.0128 14.6236C15.0255 14.5919 15.0467 14.5539 15.0765 14.5125C15.1053 14.4727 15.1712 14.4047 15.332 14.2883C15.4099 14.2318 15.4943 14.1749 15.5982 14.1049L15.5995 14.104C15.6982 14.0375 15.8136 13.9597 15.9295 13.8758C16.4008 13.5345 17.0126 12.9999 17.2306 12.0622C17.4893 10.9492 17.0605 9.99902 16.4177 9.37293C15.8015 8.77292 14.9371 8.41034 14.1158 8.41034C12.804 8.41034 11.7145 9.19687 11.1045 10.1891C10.8153 10.6596 10.9622 11.2754 11.4327 11.5647C11.9032 11.8539 12.5191 11.707 12.8083 11.2365ZM15 18.25C15 17.6977 14.5523 17.25 14 17.25C13.4477 17.25 13 17.6977 13 18.25V18.75C13 19.3023 13.4477 19.75 14 19.75C14.5523 19.75 15 19.3023 15 18.75V18.25Z");
    			add_location(path, file$19, 1, 0, 98);
    			set_svg_attributes(svg, svg_data);
    			add_location(svg, file$19, 0, 0, 0);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);
    			append_dev(svg, path);
    		},
    		p: function update(ctx, [dirty]) {
    			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
    				{ width: "28" },
    				{ height: "28" },
    				{ viewBox: "0 0 28 28" },
    				{ xmlns: "http://www.w3.org/2000/svg" },
    				dirty & /*$$props*/ 1 && /*$$props*/ ctx[0]
    			]));
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$1a.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$1a($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Questionmark_circle_solid_svg', slots, []);

    	$$self.$$set = $$new_props => {
    		$$invalidate(0, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    	};

    	$$self.$inject_state = $$new_props => {
    		$$invalidate(0, $$props = assign(assign({}, $$props), $$new_props));
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$props = exclude_internal_props($$props);
    	return [$$props];
    }

    class Questionmark_circle_solid_svg extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$1a, create_fragment$1a, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Questionmark_circle_solid_svg",
    			options,
    			id: create_fragment$1a.name
    		});
    	}
    }

    var questionmarkCircleSolid_svg = /*#__PURE__*/Object.freeze({
        __proto__: null,
        'default': Questionmark_circle_solid_svg
    });

    var require$$47 = /*@__PURE__*/getAugmentedNamespace(questionmarkCircleSolid_svg);

    /* dist/components/icon/svgs/questionmark-circle.svg.svelte generated by Svelte v3.42.1 */

    const file$18 = "dist/components/icon/svgs/questionmark-circle.svg.svelte";

    function create_fragment$19(ctx) {
    	let svg;
    	let path0;
    	let path1;
    	let path2;

    	let svg_levels = [
    		{ width: "28" },
    		{ height: "28" },
    		{ viewBox: "0 0 28 28" },
    		{ xmlns: "http://www.w3.org/2000/svg" },
    		/*$$props*/ ctx[0]
    	];

    	let svg_data = {};

    	for (let i = 0; i < svg_levels.length; i += 1) {
    		svg_data = assign(svg_data, svg_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");
    			path0 = svg_element("path");
    			path1 = svg_element("path");
    			path2 = svg_element("path");
    			attr_dev(path0, "fill-rule", "evenodd");
    			attr_dev(path0, "clip-rule", "evenodd");
    			attr_dev(path0, "d", "M14 5C9.02944 5 5 9.02944 5 14C5 18.9706 9.02944 23 14 23C18.9706 23 23 18.9706 23 14C23 9.02944 18.9706 5 14 5ZM3 14C3 7.92487 7.92487 3 14 3C20.0751 3 25 7.92487 25 14C25 20.0751 20.0751 25 14 25C7.92487 25 3 20.0751 3 14Z");
    			add_location(path0, file$18, 1, 0, 98);
    			attr_dev(path1, "fill-rule", "evenodd");
    			attr_dev(path1, "clip-rule", "evenodd");
    			attr_dev(path1, "d", "M14.1158 10.4103C13.6387 10.4103 13.1342 10.7064 12.8083 11.2365C12.5191 11.707 11.9032 11.8539 11.4327 11.5647C10.9622 11.2754 10.8153 10.6596 11.1045 10.1891C11.7145 9.19686 12.804 8.41033 14.1158 8.41033C14.9371 8.41033 15.8015 8.77291 16.4176 9.37292C17.0605 9.99901 17.4892 10.9492 17.2305 12.0622C17.0126 12.9999 16.4008 13.5344 15.9295 13.8758C15.8136 13.9597 15.6981 14.0375 15.5995 14.104L15.5982 14.1049C15.4943 14.1749 15.4099 14.2318 15.332 14.2883C15.1712 14.4047 15.1053 14.4727 15.0765 14.5125C15.0467 14.5539 15.0254 14.5919 15.0128 14.6236C15.0007 14.6537 15 14.6688 15 14.6729V15.3513C15 15.9036 14.5523 16.3513 14 16.3513C13.4477 16.3513 13 15.9036 13 15.3513V14.6729C13 14.0701 13.2643 13.6062 13.4544 13.3426C13.6711 13.0422 13.9427 12.825 14.1587 12.6685C14.2654 12.5913 14.3752 12.5173 14.4704 12.4531L14.4805 12.4463C14.583 12.3773 14.6716 12.3174 14.7564 12.256C15.0897 12.0146 15.228 11.8435 15.2825 11.6094C15.3546 11.2991 15.2593 11.0366 15.0223 10.8057C14.7585 10.5488 14.3871 10.4103 14.1158 10.4103Z");
    			add_location(path1, file$18, 2, 0, 375);
    			attr_dev(path2, "fill-rule", "evenodd");
    			attr_dev(path2, "clip-rule", "evenodd");
    			attr_dev(path2, "d", "M14 17.25C14.5523 17.25 15 17.6977 15 18.25V18.75C15 19.3023 14.5523 19.75 14 19.75C13.4477 19.75 13 19.3023 13 18.75V18.25C13 17.6977 13.4477 17.25 14 17.25Z");
    			add_location(path2, file$18, 3, 0, 1458);
    			set_svg_attributes(svg, svg_data);
    			add_location(svg, file$18, 0, 0, 0);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);
    			append_dev(svg, path0);
    			append_dev(svg, path1);
    			append_dev(svg, path2);
    		},
    		p: function update(ctx, [dirty]) {
    			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
    				{ width: "28" },
    				{ height: "28" },
    				{ viewBox: "0 0 28 28" },
    				{ xmlns: "http://www.w3.org/2000/svg" },
    				dirty & /*$$props*/ 1 && /*$$props*/ ctx[0]
    			]));
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$19.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$19($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Questionmark_circle_svg', slots, []);

    	$$self.$$set = $$new_props => {
    		$$invalidate(0, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    	};

    	$$self.$inject_state = $$new_props => {
    		$$invalidate(0, $$props = assign(assign({}, $$props), $$new_props));
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$props = exclude_internal_props($$props);
    	return [$$props];
    }

    class Questionmark_circle_svg extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$19, create_fragment$19, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Questionmark_circle_svg",
    			options,
    			id: create_fragment$19.name
    		});
    	}
    }

    var questionmarkCircle_svg = /*#__PURE__*/Object.freeze({
        __proto__: null,
        'default': Questionmark_circle_svg
    });

    var require$$48 = /*@__PURE__*/getAugmentedNamespace(questionmarkCircle_svg);

    /* dist/components/icon/svgs/refresh.svg.svelte generated by Svelte v3.42.1 */

    const file$17 = "dist/components/icon/svgs/refresh.svg.svelte";

    function create_fragment$18(ctx) {
    	let svg;
    	let path;

    	let svg_levels = [
    		{ width: "28" },
    		{ height: "28" },
    		{ viewBox: "0 0 28 28" },
    		{ xmlns: "http://www.w3.org/2000/svg" },
    		/*$$props*/ ctx[0]
    	];

    	let svg_data = {};

    	for (let i = 0; i < svg_levels.length; i += 1) {
    		svg_data = assign(svg_data, svg_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");
    			path = svg_element("path");
    			attr_dev(path, "fill-rule", "evenodd");
    			attr_dev(path, "clip-rule", "evenodd");
    			attr_dev(path, "d", "M19.8822 8.68116C17.8848 6.49352 14.8413 5.54413 11.9937 6.20858L11.9863 6.21031L11.9863 6.21025C9.80869 6.68364 7.9048 8.10779 6.76148 10.0133C5.77442 11.6584 5.35736 13.5821 5.62594 15.48L8.16921 12.4598C8.34708 12.2486 8.66251 12.2216 8.87373 12.3994C9.08496 12.5773 9.112 12.8927 8.93412 13.104L5.70659 16.9367C5.60527 17.057 5.45324 17.1226 5.29618 17.1138C5.13913 17.105 4.99537 17.0228 4.90811 16.8919L2.08403 12.6558C1.93085 12.426 1.99294 12.1156 2.2227 11.9624C2.45247 11.8093 2.7629 11.8713 2.91608 12.1011L4.54836 14.5495C4.50862 12.7749 4.98801 11.0255 5.90399 9.49882C7.18068 7.37102 9.3097 5.7699 11.7701 5.23388C14.973 4.48797 18.3828 5.55591 20.6207 8.00689C20.8069 8.21082 20.7925 8.52708 20.5886 8.71327C20.3847 8.89947 20.0684 8.88509 19.8822 8.68116ZM21.874 12.4112L18.8604 15.9899C18.6825 16.2011 18.7096 16.5166 18.9208 16.6944C19.132 16.8723 19.4474 16.8453 19.6253 16.6341L21.9775 13.8409C21.9782 17.5489 19.4477 20.9241 15.7028 21.7752L15.7028 21.7751L15.6963 21.7767C12.9491 22.4398 10.1953 21.5911 8.19048 19.6817C7.99051 19.4913 7.67402 19.499 7.48358 19.699C7.29314 19.899 7.30086 20.2154 7.50082 20.4059C9.73135 22.5302 12.826 23.497 15.9276 22.7496C20.045 21.8122 22.8434 18.1742 22.9727 14.1342L24.8784 16.9928C25.0316 17.2225 25.3421 17.2846 25.5718 17.1315C25.8016 16.9783 25.8637 16.6678 25.7105 16.4381L22.8864 12.2019C22.7992 12.0711 22.6554 11.9889 22.4983 11.9801C22.4722 11.9786 22.4462 11.9792 22.4205 11.9818C22.3783 11.9775 22.3349 11.9785 22.291 11.9855C22.0681 12.021 21.9032 12.1986 21.874 12.4112Z");
    			add_location(path, file$17, 1, 0, 98);
    			set_svg_attributes(svg, svg_data);
    			add_location(svg, file$17, 0, 0, 0);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);
    			append_dev(svg, path);
    		},
    		p: function update(ctx, [dirty]) {
    			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
    				{ width: "28" },
    				{ height: "28" },
    				{ viewBox: "0 0 28 28" },
    				{ xmlns: "http://www.w3.org/2000/svg" },
    				dirty & /*$$props*/ 1 && /*$$props*/ ctx[0]
    			]));
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$18.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$18($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Refresh_svg', slots, []);

    	$$self.$$set = $$new_props => {
    		$$invalidate(0, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    	};

    	$$self.$inject_state = $$new_props => {
    		$$invalidate(0, $$props = assign(assign({}, $$props), $$new_props));
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$props = exclude_internal_props($$props);
    	return [$$props];
    }

    class Refresh_svg extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$18, create_fragment$18, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Refresh_svg",
    			options,
    			id: create_fragment$18.name
    		});
    	}
    }

    var refresh_svg = /*#__PURE__*/Object.freeze({
        __proto__: null,
        'default': Refresh_svg
    });

    var require$$49 = /*@__PURE__*/getAugmentedNamespace(refresh_svg);

    /* dist/components/icon/svgs/rss-solid.svg.svelte generated by Svelte v3.42.1 */

    const file$16 = "dist/components/icon/svgs/rss-solid.svg.svelte";

    function create_fragment$17(ctx) {
    	let svg;
    	let path0;
    	let path1;

    	let svg_levels = [
    		{ width: "33" },
    		{ height: "28" },
    		{ viewBox: "0 0 33 28" },
    		{ xmlns: "http://www.w3.org/2000/svg" },
    		/*$$props*/ ctx[0]
    	];

    	let svg_data = {};

    	for (let i = 0; i < svg_levels.length; i += 1) {
    		svg_data = assign(svg_data, svg_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");
    			path0 = svg_element("path");
    			path1 = svg_element("path");
    			attr_dev(path0, "d", "M6.73438 13.043H8.01758C8.84961 13.043 9.36914 13.0078 9.57617 12.9375C9.7832 12.8672 9.94531 12.7461 10.0625 12.5742C10.1797 12.4023 10.2383 12.1875 10.2383 11.9297C10.2383 11.6406 10.1602 11.4082 10.0039 11.2324C9.85156 11.0527 9.63477 10.9395 9.35352 10.8926C9.21289 10.873 8.79102 10.8633 8.08789 10.8633H6.73438V13.043Z");
    			add_location(path0, file$16, 1, 0, 98);
    			attr_dev(path1, "fill-rule", "evenodd");
    			attr_dev(path1, "clip-rule", "evenodd");
    			attr_dev(path1, "d", "M4 2C1.79086 2 0 3.79086 0 6V22C0 24.2091 1.79086 26 4 26H29C31.2091 26 33 24.2091 33 22V6C33 3.79086 31.2091 2 29 2H4ZM13.2266 15.2051L14.9141 15.041C15.0156 15.6074 15.2207 16.0234 15.5293 16.2891C15.8418 16.5547 16.2617 16.6875 16.7891 16.6875C17.3477 16.6875 17.7676 16.5703 18.0488 16.3359C18.334 16.0977 18.4766 15.8203 18.4766 15.5039C18.4766 15.3008 18.416 15.1289 18.2949 14.9883C18.1777 14.8438 17.9707 14.7188 17.6738 14.6133C17.4707 14.543 17.0078 14.418 16.2852 14.2383C15.3555 14.0078 14.7031 13.7246 14.3281 13.3887C13.8008 12.916 13.5371 12.3398 13.5371 11.6602C13.5371 11.2227 13.6602 10.8145 13.9062 10.4355C14.1562 10.0527 14.5137 9.76172 14.9785 9.5625C15.4473 9.36328 16.0117 9.26367 16.6719 9.26367C17.75 9.26367 18.5605 9.5 19.1035 9.97266C19.6504 10.4453 19.9375 11.0762 19.9648 11.8652L18.2305 11.9414C18.1562 11.5 17.9961 11.1836 17.75 10.9922C17.5078 10.7969 17.1426 10.6992 16.6543 10.6992C16.1504 10.6992 15.7559 10.8027 15.4707 11.0098C15.2871 11.1426 15.1953 11.3203 15.1953 11.543C15.1953 11.7461 15.2812 11.9199 15.4531 12.0645C15.6719 12.248 16.2031 12.4395 17.0469 12.6387C17.8906 12.8379 18.5137 13.0449 18.916 13.2598C19.3223 13.4707 19.6387 13.7617 19.8652 14.1328C20.0957 14.5 20.2109 14.9551 20.2109 15.498C20.2109 15.9902 20.0742 16.4512 19.8008 16.8809C19.5273 17.3105 19.1406 17.6309 18.6406 17.8418C18.1406 18.0488 17.5176 18.1523 16.7715 18.1523C15.6855 18.1523 14.8516 17.9023 14.2695 17.4023C13.6875 16.8984 13.3398 16.166 13.2266 15.2051ZM5 18V9.41016H8.65039C9.56836 9.41016 10.2344 9.48828 10.6484 9.64453C11.0664 9.79688 11.4004 10.0703 11.6504 10.4648C11.9004 10.8594 12.0254 11.3105 12.0254 11.8184C12.0254 12.4629 11.8359 12.9961 11.457 13.418C11.0781 13.8359 10.5117 14.0996 9.75781 14.209C10.1328 14.4277 10.4414 14.668 10.6836 14.9297C10.9297 15.1914 11.2598 15.6562 11.6738 16.3242L12.7227 18H10.6484L9.39453 16.1309C8.94922 15.4629 8.64453 15.043 8.48047 14.8711C8.31641 14.6953 8.14258 14.5762 7.95898 14.5137C7.77539 14.4473 7.48438 14.4141 7.08594 14.4141H6.73438V18H5ZM22.918 15.041L21.2305 15.2051C21.3438 16.166 21.6914 16.8984 22.2734 17.4023C22.8555 17.9023 23.6895 18.1523 24.7754 18.1523C25.5215 18.1523 26.1445 18.0488 26.6445 17.8418C27.1445 17.6309 27.5312 17.3105 27.8047 16.8809C28.0781 16.4512 28.2148 15.9902 28.2148 15.498C28.2148 14.9551 28.0996 14.5 27.8691 14.1328C27.6426 13.7617 27.3262 13.4707 26.9199 13.2598C26.5176 13.0449 25.8945 12.8379 25.0508 12.6387C24.207 12.4395 23.6758 12.248 23.457 12.0645C23.2852 11.9199 23.1992 11.7461 23.1992 11.543C23.1992 11.3203 23.291 11.1426 23.4746 11.0098C23.7598 10.8027 24.1543 10.6992 24.6582 10.6992C25.1465 10.6992 25.5117 10.7969 25.7539 10.9922C26 11.1836 26.1602 11.5 26.2344 11.9414L27.9688 11.8652C27.9414 11.0762 27.6543 10.4453 27.1074 9.97266C26.5645 9.5 25.7539 9.26367 24.6758 9.26367C24.0156 9.26367 23.4512 9.36328 22.9824 9.5625C22.5176 9.76172 22.1602 10.0527 21.9102 10.4355C21.6641 10.8145 21.541 11.2227 21.541 11.6602C21.541 12.3398 21.8047 12.916 22.332 13.3887C22.707 13.7246 23.3594 14.0078 24.2891 14.2383C25.0117 14.418 25.4746 14.543 25.6777 14.6133C25.9746 14.7188 26.1816 14.8438 26.2988 14.9883C26.4199 15.1289 26.4805 15.3008 26.4805 15.5039C26.4805 15.8203 26.3379 16.0977 26.0527 16.3359C25.7715 16.5703 25.3516 16.6875 24.793 16.6875C24.2656 16.6875 23.8457 16.5547 23.5332 16.2891C23.2246 16.0234 23.0195 15.6074 22.918 15.041Z");
    			add_location(path1, file$16, 2, 0, 435);
    			set_svg_attributes(svg, svg_data);
    			add_location(svg, file$16, 0, 0, 0);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);
    			append_dev(svg, path0);
    			append_dev(svg, path1);
    		},
    		p: function update(ctx, [dirty]) {
    			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
    				{ width: "33" },
    				{ height: "28" },
    				{ viewBox: "0 0 33 28" },
    				{ xmlns: "http://www.w3.org/2000/svg" },
    				dirty & /*$$props*/ 1 && /*$$props*/ ctx[0]
    			]));
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$17.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$17($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Rss_solid_svg', slots, []);

    	$$self.$$set = $$new_props => {
    		$$invalidate(0, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    	};

    	$$self.$inject_state = $$new_props => {
    		$$invalidate(0, $$props = assign(assign({}, $$props), $$new_props));
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$props = exclude_internal_props($$props);
    	return [$$props];
    }

    class Rss_solid_svg extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$17, create_fragment$17, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Rss_solid_svg",
    			options,
    			id: create_fragment$17.name
    		});
    	}
    }

    var rssSolid_svg = /*#__PURE__*/Object.freeze({
        __proto__: null,
        'default': Rss_solid_svg
    });

    var require$$50 = /*@__PURE__*/getAugmentedNamespace(rssSolid_svg);

    /* dist/components/icon/svgs/search.svg.svelte generated by Svelte v3.42.1 */

    const file$15 = "dist/components/icon/svgs/search.svg.svelte";

    function create_fragment$16(ctx) {
    	let svg;
    	let path;

    	let svg_levels = [
    		{ width: "28" },
    		{ height: "28" },
    		{ viewBox: "0 0 28 28" },
    		{ xmlns: "http://www.w3.org/2000/svg" },
    		/*$$props*/ ctx[0]
    	];

    	let svg_data = {};

    	for (let i = 0; i < svg_levels.length; i += 1) {
    		svg_data = assign(svg_data, svg_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");
    			path = svg_element("path");
    			attr_dev(path, "fill-rule", "evenodd");
    			attr_dev(path, "clip-rule", "evenodd");
    			attr_dev(path, "d", "M13.1819 6.5C9.4972 6.5 6.5 9.52445 6.5 13.2679C6.5 17.0113 9.4972 20.0357 13.1819 20.0357C16.8667 20.0357 19.8639 17.0113 19.8639 13.2679C19.8639 9.52445 16.8667 6.5 13.1819 6.5ZM5.5 13.2679C5.5 8.98341 8.93373 5.5 13.1819 5.5C17.4301 5.5 20.8639 8.98341 20.8639 13.2679C20.8639 15.1813 20.179 16.9349 19.0426 18.2899L22.8556 22.1486C23.0497 22.345 23.0479 22.6616 22.8514 22.8556C22.655 23.0497 22.3384 23.0479 22.1444 22.8514L18.3518 19.0135C16.9879 20.2694 15.1745 21.0357 13.1819 21.0357C8.93373 21.0357 5.5 17.5523 5.5 13.2679Z");
    			add_location(path, file$15, 1, 0, 98);
    			set_svg_attributes(svg, svg_data);
    			add_location(svg, file$15, 0, 0, 0);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);
    			append_dev(svg, path);
    		},
    		p: function update(ctx, [dirty]) {
    			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
    				{ width: "28" },
    				{ height: "28" },
    				{ viewBox: "0 0 28 28" },
    				{ xmlns: "http://www.w3.org/2000/svg" },
    				dirty & /*$$props*/ 1 && /*$$props*/ ctx[0]
    			]));
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$16.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$16($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Search_svg', slots, []);

    	$$self.$$set = $$new_props => {
    		$$invalidate(0, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    	};

    	$$self.$inject_state = $$new_props => {
    		$$invalidate(0, $$props = assign(assign({}, $$props), $$new_props));
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$props = exclude_internal_props($$props);
    	return [$$props];
    }

    class Search_svg extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$16, create_fragment$16, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Search_svg",
    			options,
    			id: create_fragment$16.name
    		});
    	}
    }

    var search_svg = /*#__PURE__*/Object.freeze({
        __proto__: null,
        'default': Search_svg
    });

    var require$$51 = /*@__PURE__*/getAugmentedNamespace(search_svg);

    /* dist/components/icon/svgs/smartphone.svg.svelte generated by Svelte v3.42.1 */

    const file$14 = "dist/components/icon/svgs/smartphone.svg.svelte";

    function create_fragment$15(ctx) {
    	let svg;
    	let path0;
    	let path1;

    	let svg_levels = [
    		{ width: "28" },
    		{ height: "28" },
    		{ viewBox: "0 0 28 28" },
    		{ xmlns: "http://www.w3.org/2000/svg" },
    		/*$$props*/ ctx[0]
    	];

    	let svg_data = {};

    	for (let i = 0; i < svg_levels.length; i += 1) {
    		svg_data = assign(svg_data, svg_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");
    			path0 = svg_element("path");
    			path1 = svg_element("path");
    			attr_dev(path0, "fill-rule", "evenodd");
    			attr_dev(path0, "clip-rule", "evenodd");
    			attr_dev(path0, "d", "M7 5C7 3.34314 8.34315 2 10 2H18C19.6569 2 21 3.34315 21 5V23C21 24.6569 19.6569 26 18 26H10C8.34315 26 7 24.6569 7 23V5ZM10 4C9.44771 4 9 4.44772 9 5V23C9 23.5523 9.44772 24 10 24H18C18.5523 24 19 23.5523 19 23V5C19 4.44772 18.5523 4 18 4H10Z");
    			add_location(path0, file$14, 1, 0, 98);
    			attr_dev(path1, "fill-rule", "evenodd");
    			attr_dev(path1, "clip-rule", "evenodd");
    			attr_dev(path1, "d", "M12.5 21.5C12.5 20.9477 12.9477 20.5 13.5 20.5H14.5C15.0523 20.5 15.5 20.9477 15.5 21.5C15.5 22.0523 15.0523 22.5 14.5 22.5H13.5C12.9477 22.5 12.5 22.0523 12.5 21.5Z");
    			add_location(path1, file$14, 2, 0, 394);
    			set_svg_attributes(svg, svg_data);
    			add_location(svg, file$14, 0, 0, 0);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);
    			append_dev(svg, path0);
    			append_dev(svg, path1);
    		},
    		p: function update(ctx, [dirty]) {
    			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
    				{ width: "28" },
    				{ height: "28" },
    				{ viewBox: "0 0 28 28" },
    				{ xmlns: "http://www.w3.org/2000/svg" },
    				dirty & /*$$props*/ 1 && /*$$props*/ ctx[0]
    			]));
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$15.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$15($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Smartphone_svg', slots, []);

    	$$self.$$set = $$new_props => {
    		$$invalidate(0, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    	};

    	$$self.$inject_state = $$new_props => {
    		$$invalidate(0, $$props = assign(assign({}, $$props), $$new_props));
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$props = exclude_internal_props($$props);
    	return [$$props];
    }

    class Smartphone_svg extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$15, create_fragment$15, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Smartphone_svg",
    			options,
    			id: create_fragment$15.name
    		});
    	}
    }

    var smartphone_svg = /*#__PURE__*/Object.freeze({
        __proto__: null,
        'default': Smartphone_svg
    });

    var require$$52 = /*@__PURE__*/getAugmentedNamespace(smartphone_svg);

    /* dist/components/icon/svgs/speechbubble-solid.svg.svelte generated by Svelte v3.42.1 */

    const file$13 = "dist/components/icon/svgs/speechbubble-solid.svg.svelte";

    function create_fragment$14(ctx) {
    	let svg;
    	let path;

    	let svg_levels = [
    		{ width: "28" },
    		{ height: "28" },
    		{ viewBox: "0 0 28 28" },
    		{ xmlns: "http://www.w3.org/2000/svg" },
    		/*$$props*/ ctx[0]
    	];

    	let svg_data = {};

    	for (let i = 0; i < svg_levels.length; i += 1) {
    		svg_data = assign(svg_data, svg_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");
    			path = svg_element("path");
    			attr_dev(path, "d", "M3 8.14286C3 6.40711 4.40711 5 6.14286 5H21.8571C23.5929 5 25 6.40711 25 8.14286V17.5714C25 19.3072 23.5929 20.7143 21.8571 20.7143H9.28571L3 25.4286V8.14286Z");
    			add_location(path, file$13, 1, 0, 98);
    			set_svg_attributes(svg, svg_data);
    			add_location(svg, file$13, 0, 0, 0);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);
    			append_dev(svg, path);
    		},
    		p: function update(ctx, [dirty]) {
    			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
    				{ width: "28" },
    				{ height: "28" },
    				{ viewBox: "0 0 28 28" },
    				{ xmlns: "http://www.w3.org/2000/svg" },
    				dirty & /*$$props*/ 1 && /*$$props*/ ctx[0]
    			]));
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$14.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$14($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Speechbubble_solid_svg', slots, []);

    	$$self.$$set = $$new_props => {
    		$$invalidate(0, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    	};

    	$$self.$inject_state = $$new_props => {
    		$$invalidate(0, $$props = assign(assign({}, $$props), $$new_props));
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$props = exclude_internal_props($$props);
    	return [$$props];
    }

    class Speechbubble_solid_svg extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$14, create_fragment$14, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Speechbubble_solid_svg",
    			options,
    			id: create_fragment$14.name
    		});
    	}
    }

    var speechbubbleSolid_svg = /*#__PURE__*/Object.freeze({
        __proto__: null,
        'default': Speechbubble_solid_svg
    });

    var require$$53 = /*@__PURE__*/getAugmentedNamespace(speechbubbleSolid_svg);

    /* dist/components/icon/svgs/sport.svg.svelte generated by Svelte v3.42.1 */

    const file$12 = "dist/components/icon/svgs/sport.svg.svelte";

    function create_fragment$13(ctx) {
    	let svg;
    	let path;

    	let svg_levels = [
    		{ width: "28" },
    		{ height: "28" },
    		{ viewBox: "0 0 28 28" },
    		{ xmlns: "http://www.w3.org/2000/svg" },
    		/*$$props*/ ctx[0]
    	];

    	let svg_data = {};

    	for (let i = 0; i < svg_levels.length; i += 1) {
    		svg_data = assign(svg_data, svg_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");
    			path = svg_element("path");
    			attr_dev(path, "fill-rule", "evenodd");
    			attr_dev(path, "clip-rule", "evenodd");
    			attr_dev(path, "d", "M14 2C7.37011 2 2 7.37011 2 14C2 19.6778 5.93851 24.4317 11.2339 25.6799C11.266 25.6909 11.2991 25.6985 11.3328 25.7028C12.1905 25.8973 13.0832 26 14 26C14.9422 26 15.8589 25.8916 16.7383 25.6865C16.7525 25.6838 16.7665 25.6805 16.7804 25.6766C22.0686 24.4231 26 19.6727 26 14C26 9.01218 22.9606 4.73739 18.6319 2.92582C18.6123 2.91615 18.5921 2.90775 18.5714 2.9007C17.1626 2.32018 15.6189 2 14 2ZM17.7298 24.3522C19.7172 23.6365 21.4387 22.3651 22.707 20.7251L19.4436 21.4773L17.7298 24.3522ZM23.5234 19.5107C24.2877 18.1921 24.786 16.6998 24.945 15.1073L22.1548 11.8983L19.5337 13.1826L17.738 18.7393L19.2989 20.4844L23.5234 19.5107ZM18.5057 21.0975L16.9505 19.3588H11.0778L9.51942 21.0959L11.712 24.762C12.45 24.918 13.2154 25 14 25C14.7981 25 15.5763 24.9151 16.3261 24.7539L18.5057 21.0975ZM8.72128 20.4881L10.2903 18.7391L8.49154 13.1894L5.86809 11.904L3.0576 15.1333C3.21934 16.7154 3.71605 18.1981 4.47572 19.5092L8.72128 20.4881ZM6.21631 10.961L8.8443 12.2487L13.5117 8.84653V5.58422L9.60521 3.9122C8.15981 4.54238 6.87634 5.47402 5.83413 6.62782L6.21631 10.961ZM19.1739 12.2453L21.8069 10.9552L22.1891 6.65358C21.1461 5.49166 19.8593 4.55316 18.4089 3.91838L14.5117 5.58424V8.84695L19.1739 12.2453ZM23.0909 7.80289C24.2325 9.47486 24.9248 11.4783 24.9942 13.6398L22.7969 11.1127L23.0909 7.80289ZM8.58577 21.4831L5.29181 20.7236C6.56869 22.3753 8.30526 23.6533 10.3102 24.3665L8.58577 21.4831ZM14 3C15.0501 3 16.0657 3.14695 17.0274 3.42141L14.0117 4.71046L10.989 3.41674C11.9459 3.14528 12.9559 3 14 3ZM3.00483 13.6706L5.22629 11.1182L4.93106 7.77083C3.77092 9.45715 3.06906 11.4835 3.00483 13.6706ZM9.48707 13.0176L14.0114 9.71974L18.5361 13.0178L16.8101 18.3588H11.2182L9.48707 13.0176Z");
    			add_location(path, file$12, 1, 0, 98);
    			set_svg_attributes(svg, svg_data);
    			add_location(svg, file$12, 0, 0, 0);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);
    			append_dev(svg, path);
    		},
    		p: function update(ctx, [dirty]) {
    			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
    				{ width: "28" },
    				{ height: "28" },
    				{ viewBox: "0 0 28 28" },
    				{ xmlns: "http://www.w3.org/2000/svg" },
    				dirty & /*$$props*/ 1 && /*$$props*/ ctx[0]
    			]));
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$13.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$13($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Sport_svg', slots, []);

    	$$self.$$set = $$new_props => {
    		$$invalidate(0, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    	};

    	$$self.$inject_state = $$new_props => {
    		$$invalidate(0, $$props = assign(assign({}, $$props), $$new_props));
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$props = exclude_internal_props($$props);
    	return [$$props];
    }

    class Sport_svg extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$13, create_fragment$13, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Sport_svg",
    			options,
    			id: create_fragment$13.name
    		});
    	}
    }

    var sport_svg = /*#__PURE__*/Object.freeze({
        __proto__: null,
        'default': Sport_svg
    });

    var require$$54 = /*@__PURE__*/getAugmentedNamespace(sport_svg);

    /* dist/components/icon/svgs/star-half-solid.svg.svelte generated by Svelte v3.42.1 */

    const file$11 = "dist/components/icon/svgs/star-half-solid.svg.svelte";

    function create_fragment$12(ctx) {
    	let svg;
    	let path;

    	let svg_levels = [
    		{ width: "28" },
    		{ height: "28" },
    		{ viewBox: "0 0 28 28" },
    		{ xmlns: "http://www.w3.org/2000/svg" },
    		/*$$props*/ ctx[0]
    	];

    	let svg_data = {};

    	for (let i = 0; i < svg_levels.length; i += 1) {
    		svg_data = assign(svg_data, svg_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");
    			path = svg_element("path");
    			attr_dev(path, "d", "M7.62976 24.2796L13.7521 20.8276C13.9093 20.739 14.0065 20.5725 14.0065 20.3921V3C14.0065 2.72386 13.7764 2.4921 13.5162 2.58459C13.1797 2.70419 12.8918 2.94493 12.7171 3.27014L9.89178 9.81415H4.39516C3.82745 9.79215 3.30816 10.131 3.09692 10.6591C2.88568 11.1828 3.02651 11.7857 3.45339 12.1642L8.22387 16.4066L5.58338 22.4797C5.34574 23.0474 5.49976 23.7031 5.96185 24.1124C6.42393 24.5217 7.09726 24.5877 7.62976 24.2796Z");
    			add_location(path, file$11, 1, 0, 98);
    			set_svg_attributes(svg, svg_data);
    			add_location(svg, file$11, 0, 0, 0);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);
    			append_dev(svg, path);
    		},
    		p: function update(ctx, [dirty]) {
    			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
    				{ width: "28" },
    				{ height: "28" },
    				{ viewBox: "0 0 28 28" },
    				{ xmlns: "http://www.w3.org/2000/svg" },
    				dirty & /*$$props*/ 1 && /*$$props*/ ctx[0]
    			]));
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$12.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$12($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Star_half_solid_svg', slots, []);

    	$$self.$$set = $$new_props => {
    		$$invalidate(0, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    	};

    	$$self.$inject_state = $$new_props => {
    		$$invalidate(0, $$props = assign(assign({}, $$props), $$new_props));
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$props = exclude_internal_props($$props);
    	return [$$props];
    }

    class Star_half_solid_svg extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$12, create_fragment$12, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Star_half_solid_svg",
    			options,
    			id: create_fragment$12.name
    		});
    	}
    }

    var starHalfSolid_svg = /*#__PURE__*/Object.freeze({
        __proto__: null,
        'default': Star_half_solid_svg
    });

    var require$$55 = /*@__PURE__*/getAugmentedNamespace(starHalfSolid_svg);

    /* dist/components/icon/svgs/star-half.svg.svelte generated by Svelte v3.42.1 */

    const file$10 = "dist/components/icon/svgs/star-half.svg.svelte";

    function create_fragment$11(ctx) {
    	let svg;
    	let path;

    	let svg_levels = [
    		{ width: "28" },
    		{ height: "28" },
    		{ viewBox: "0 0 28 28" },
    		{ xmlns: "http://www.w3.org/2000/svg" },
    		/*$$props*/ ctx[0]
    	];

    	let svg_data = {};

    	for (let i = 0; i < svg_levels.length; i += 1) {
    		svg_data = assign(svg_data, svg_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");
    			path = svg_element("path");
    			attr_dev(path, "fill-rule", "evenodd");
    			attr_dev(path, "clip-rule", "evenodd");
    			attr_dev(path, "d", "M7.13858 23.4085L7.13861 23.4085L13.0065 20.1V5.1226L10.8099 10.2105C10.6517 10.5769 10.2908 10.8142 9.89178 10.8142H4.39516C4.38225 10.8142 4.36933 10.8139 4.35643 10.8134C4.21398 10.8079 4.08044 10.8929 4.0254 11.0305L4.02432 11.0332C3.97171 11.1636 4.00563 11.3174 4.11679 11.4159L4.11792 11.4169L8.8884 15.6593C9.21142 15.9466 9.3133 16.4089 9.14094 16.8053L6.50399 22.8703C6.43664 23.0364 6.4797 23.2352 6.62488 23.3638C6.76357 23.4866 6.96789 23.5072 7.129 23.414L7.13858 23.4085ZM5.58338 22.4797L8.22387 16.4066L3.45339 12.1642C3.02651 11.7857 2.88568 11.1828 3.09692 10.6591C3.30816 10.131 3.82745 9.79215 4.39516 9.81415H9.89178L12.7171 3.27014C12.8918 2.94493 13.1797 2.70419 13.5162 2.58459C13.7764 2.4921 14.0065 2.72386 14.0065 3V20.3921C14.0065 20.5725 13.9093 20.739 13.7521 20.8276L7.62976 24.2796C7.09726 24.5877 6.42393 24.5217 5.96185 24.1124C5.49976 23.7031 5.34574 23.0474 5.58338 22.4797Z");
    			add_location(path, file$10, 1, 0, 98);
    			set_svg_attributes(svg, svg_data);
    			add_location(svg, file$10, 0, 0, 0);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);
    			append_dev(svg, path);
    		},
    		p: function update(ctx, [dirty]) {
    			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
    				{ width: "28" },
    				{ height: "28" },
    				{ viewBox: "0 0 28 28" },
    				{ xmlns: "http://www.w3.org/2000/svg" },
    				dirty & /*$$props*/ 1 && /*$$props*/ ctx[0]
    			]));
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$11.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$11($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Star_half_svg', slots, []);

    	$$self.$$set = $$new_props => {
    		$$invalidate(0, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    	};

    	$$self.$inject_state = $$new_props => {
    		$$invalidate(0, $$props = assign(assign({}, $$props), $$new_props));
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$props = exclude_internal_props($$props);
    	return [$$props];
    }

    class Star_half_svg extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$11, create_fragment$11, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Star_half_svg",
    			options,
    			id: create_fragment$11.name
    		});
    	}
    }

    var starHalf_svg = /*#__PURE__*/Object.freeze({
        __proto__: null,
        'default': Star_half_svg
    });

    var require$$56 = /*@__PURE__*/getAugmentedNamespace(starHalf_svg);

    /* dist/components/icon/svgs/star-solid.svg.svelte generated by Svelte v3.42.1 */

    const file$$ = "dist/components/icon/svgs/star-solid.svg.svelte";

    function create_fragment$10(ctx) {
    	let svg;
    	let path;

    	let svg_levels = [
    		{ width: "28" },
    		{ height: "28" },
    		{ viewBox: "0 0 28 28" },
    		{ xmlns: "http://www.w3.org/2000/svg" },
    		/*$$props*/ ctx[0]
    	];

    	let svg_data = {};

    	for (let i = 0; i < svg_levels.length; i += 1) {
    		svg_data = assign(svg_data, svg_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");
    			path = svg_element("path");
    			attr_dev(path, "d", "M15.296 3.27014L18.1169 9.81415H23.6047C24.1724 9.79215 24.6917 10.131 24.903 10.6547C25.1142 11.1828 24.9734 11.7857 24.5509 12.1642L19.7892 16.4066L22.4297 22.4797C22.6673 23.0474 22.5133 23.7075 22.0512 24.1124C21.5891 24.5217 20.9158 24.5877 20.3833 24.2796L14.0065 20.6842L7.62976 24.2796C7.09726 24.5877 6.42393 24.5217 5.96185 24.1124C5.49976 23.7031 5.34574 23.0474 5.58338 22.4797L8.22387 16.4066L3.45339 12.1642C3.02651 11.7857 2.88568 11.1828 3.09692 10.6591C3.30816 10.131 3.82745 9.79215 4.39516 9.81415H9.89178L12.7171 3.27014C12.9723 2.79485 13.4696 2.5 14.0065 2.5C14.5434 2.5 15.0407 2.79485 15.296 3.27014Z");
    			add_location(path, file$$, 1, 0, 98);
    			set_svg_attributes(svg, svg_data);
    			add_location(svg, file$$, 0, 0, 0);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);
    			append_dev(svg, path);
    		},
    		p: function update(ctx, [dirty]) {
    			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
    				{ width: "28" },
    				{ height: "28" },
    				{ viewBox: "0 0 28 28" },
    				{ xmlns: "http://www.w3.org/2000/svg" },
    				dirty & /*$$props*/ 1 && /*$$props*/ ctx[0]
    			]));
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$10.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$10($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Star_solid_svg', slots, []);

    	$$self.$$set = $$new_props => {
    		$$invalidate(0, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    	};

    	$$self.$inject_state = $$new_props => {
    		$$invalidate(0, $$props = assign(assign({}, $$props), $$new_props));
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$props = exclude_internal_props($$props);
    	return [$$props];
    }

    class Star_solid_svg extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$10, create_fragment$10, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Star_solid_svg",
    			options,
    			id: create_fragment$10.name
    		});
    	}
    }

    var starSolid_svg = /*#__PURE__*/Object.freeze({
        __proto__: null,
        'default': Star_solid_svg
    });

    var require$$57 = /*@__PURE__*/getAugmentedNamespace(starSolid_svg);

    /* dist/components/icon/svgs/star.svg.svelte generated by Svelte v3.42.1 */

    const file$_ = "dist/components/icon/svgs/star.svg.svelte";

    function create_fragment$$(ctx) {
    	let svg;
    	let path;

    	let svg_levels = [
    		{ width: "28" },
    		{ height: "28" },
    		{ viewBox: "0 0 28 28" },
    		{ xmlns: "http://www.w3.org/2000/svg" },
    		/*$$props*/ ctx[0]
    	];

    	let svg_data = {};

    	for (let i = 0; i < svg_levels.length; i += 1) {
    		svg_data = assign(svg_data, svg_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");
    			path = svg_element("path");
    			attr_dev(path, "fill-rule", "evenodd");
    			attr_dev(path, "clip-rule", "evenodd");
    			attr_dev(path, "d", "M18.1169 9.81415L15.296 3.27014C15.0407 2.79485 14.5434 2.5 14.0065 2.5C13.4696 2.5 12.9723 2.79485 12.7171 3.27014L9.89178 9.81415H4.39516C3.82745 9.79215 3.30816 10.131 3.09692 10.6591C2.88568 11.1828 3.02651 11.7857 3.45339 12.1642L8.22387 16.4066L5.58338 22.4797C5.34574 23.0474 5.49976 23.7031 5.96185 24.1124C6.42393 24.5217 7.09726 24.5877 7.62976 24.2796L14.0065 20.6842L20.3833 24.2796C20.9158 24.5877 21.5891 24.5217 22.0512 24.1124C22.5133 23.7075 22.6673 23.0474 22.4297 22.4797L19.7892 16.4066L24.5509 12.1642C24.9734 11.7857 25.1142 11.1828 24.903 10.6547C24.6917 10.131 24.1724 9.79215 23.6047 9.81415H18.1169ZM21.5091 22.8703L18.8721 16.8053C18.6999 16.4092 18.8015 15.9473 19.124 15.6599L23.8836 11.4193V11.4193C23.9916 11.3222 24.0297 11.166 23.975 11.0275C23.9206 10.894 23.7869 10.8078 23.6434 10.8134C23.6305 10.8139 23.6176 10.8141 23.6047 10.8141H18.1169C17.7176 10.8141 17.3566 10.5767 17.1986 10.21L14.3995 3.71662C14.3158 3.58325 14.167 3.5 14.0065 3.5C13.846 3.5 13.6972 3.58332 13.6135 3.71679L10.8099 10.2105C10.6517 10.5769 10.2908 10.8141 9.89178 10.8141H4.39516C4.38225 10.8141 4.36933 10.8139 4.35643 10.8134C4.21398 10.8079 4.08044 10.8929 4.0254 11.0305L4.02432 11.0332C3.97171 11.1636 4.00563 11.3174 4.11679 11.4159L4.11792 11.4169L8.8884 15.6593C9.21142 15.9466 9.3133 16.4089 9.14094 16.8053L6.50399 22.8703C6.43664 23.0365 6.4797 23.2352 6.62488 23.3638C6.76357 23.4866 6.96789 23.5072 7.129 23.414L7.13858 23.4085L13.5154 19.8131C13.8203 19.6412 14.1928 19.6412 14.4977 19.8131L20.8841 23.414C21.0452 23.5072 21.2495 23.4866 21.3882 23.3638L21.3922 23.3602C21.5307 23.2389 21.5776 23.0393 21.5091 22.8703Z");
    			add_location(path, file$_, 1, 0, 98);
    			set_svg_attributes(svg, svg_data);
    			add_location(svg, file$_, 0, 0, 0);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);
    			append_dev(svg, path);
    		},
    		p: function update(ctx, [dirty]) {
    			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
    				{ width: "28" },
    				{ height: "28" },
    				{ viewBox: "0 0 28 28" },
    				{ xmlns: "http://www.w3.org/2000/svg" },
    				dirty & /*$$props*/ 1 && /*$$props*/ ctx[0]
    			]));
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$$.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$$($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Star_svg', slots, []);

    	$$self.$$set = $$new_props => {
    		$$invalidate(0, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    	};

    	$$self.$inject_state = $$new_props => {
    		$$invalidate(0, $$props = assign(assign({}, $$props), $$new_props));
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$props = exclude_internal_props($$props);
    	return [$$props];
    }

    class Star_svg extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$$, create_fragment$$, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Star_svg",
    			options,
    			id: create_fragment$$.name
    		});
    	}
    }

    var star_svg = /*#__PURE__*/Object.freeze({
        __proto__: null,
        'default': Star_svg
    });

    var require$$58 = /*@__PURE__*/getAugmentedNamespace(star_svg);

    /* dist/components/icon/svgs/tablet.svg.svelte generated by Svelte v3.42.1 */

    const file$Z = "dist/components/icon/svgs/tablet.svg.svelte";

    function create_fragment$_(ctx) {
    	let svg;
    	let path0;
    	let path1;

    	let svg_levels = [
    		{ width: "28" },
    		{ height: "28" },
    		{ viewBox: "0 0 28 28" },
    		{ xmlns: "http://www.w3.org/2000/svg" },
    		/*$$props*/ ctx[0]
    	];

    	let svg_data = {};

    	for (let i = 0; i < svg_levels.length; i += 1) {
    		svg_data = assign(svg_data, svg_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");
    			path0 = svg_element("path");
    			path1 = svg_element("path");
    			attr_dev(path0, "fill-rule", "evenodd");
    			attr_dev(path0, "clip-rule", "evenodd");
    			attr_dev(path0, "d", "M3 4.5C3 2.567 4.567 1 6.5 1H21.5C23.433 1 25 2.567 25 4.5V23.5C25 25.433 23.433 27 21.5 27H6.5C4.567 27 3 25.433 3 23.5V4.5ZM6.5 3C5.67157 3 5 3.67157 5 4.5V23.5C5 24.3284 5.67157 25 6.5 25H21.5C22.3284 25 23 24.3284 23 23.5V4.5C23 3.67157 22.3284 3 21.5 3H6.5Z");
    			add_location(path0, file$Z, 1, 0, 98);
    			attr_dev(path1, "fill-rule", "evenodd");
    			attr_dev(path1, "clip-rule", "evenodd");
    			attr_dev(path1, "d", "M12.5 22.5C12.5 21.9477 12.9477 21.5 13.5 21.5H14.5C15.0523 21.5 15.5 21.9477 15.5 22.5C15.5 23.0523 15.0523 23.5 14.5 23.5H13.5C12.9477 23.5 12.5 23.0523 12.5 22.5Z");
    			add_location(path1, file$Z, 2, 0, 413);
    			set_svg_attributes(svg, svg_data);
    			add_location(svg, file$Z, 0, 0, 0);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);
    			append_dev(svg, path0);
    			append_dev(svg, path1);
    		},
    		p: function update(ctx, [dirty]) {
    			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
    				{ width: "28" },
    				{ height: "28" },
    				{ viewBox: "0 0 28 28" },
    				{ xmlns: "http://www.w3.org/2000/svg" },
    				dirty & /*$$props*/ 1 && /*$$props*/ ctx[0]
    			]));
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$_.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$_($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Tablet_svg', slots, []);

    	$$self.$$set = $$new_props => {
    		$$invalidate(0, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    	};

    	$$self.$inject_state = $$new_props => {
    		$$invalidate(0, $$props = assign(assign({}, $$props), $$new_props));
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$props = exclude_internal_props($$props);
    	return [$$props];
    }

    class Tablet_svg extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$_, create_fragment$_, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Tablet_svg",
    			options,
    			id: create_fragment$_.name
    		});
    	}
    }

    var tablet_svg = /*#__PURE__*/Object.freeze({
        __proto__: null,
        'default': Tablet_svg
    });

    var require$$59 = /*@__PURE__*/getAugmentedNamespace(tablet_svg);

    /* dist/components/icon/svgs/tag-solid.svg.svelte generated by Svelte v3.42.1 */

    const file$Y = "dist/components/icon/svgs/tag-solid.svg.svelte";

    function create_fragment$Z(ctx) {
    	let svg;
    	let path;

    	let svg_levels = [
    		{ width: "28" },
    		{ height: "28" },
    		{ viewBox: "0 0 28 28" },
    		{ xmlns: "http://www.w3.org/2000/svg" },
    		/*$$props*/ ctx[0]
    	];

    	let svg_data = {};

    	for (let i = 0; i < svg_levels.length; i += 1) {
    		svg_data = assign(svg_data, svg_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");
    			path = svg_element("path");
    			attr_dev(path, "fill-rule", "evenodd");
    			attr_dev(path, "clip-rule", "evenodd");
    			attr_dev(path, "d", "M15.2119 4.70923C14.0184 4.70923 12.8738 5.18333 12.0299 6.02725L4.00909 14.0481C3.03278 15.0244 3.03278 16.6073 4.00909 17.5836L10.373 23.9476C11.3494 24.9239 12.9323 24.9239 13.9086 23.9476L21.9294 15.9267C22.7733 15.0828 23.2474 13.9382 23.2474 12.7448V6.20923C23.2474 5.3808 22.5758 4.70923 21.7474 4.70923H15.2119ZM15.7268 9.50218C16.4801 8.74891 17.7014 8.74891 18.4547 9.50218C19.2079 10.2554 19.2079 11.4767 18.4547 12.23C17.7014 12.9833 16.4801 12.9833 15.7268 12.23C14.9736 11.4767 14.9736 10.2554 15.7268 9.50218Z");
    			add_location(path, file$Y, 1, 0, 98);
    			set_svg_attributes(svg, svg_data);
    			add_location(svg, file$Y, 0, 0, 0);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);
    			append_dev(svg, path);
    		},
    		p: function update(ctx, [dirty]) {
    			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
    				{ width: "28" },
    				{ height: "28" },
    				{ viewBox: "0 0 28 28" },
    				{ xmlns: "http://www.w3.org/2000/svg" },
    				dirty & /*$$props*/ 1 && /*$$props*/ ctx[0]
    			]));
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$Z.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$Z($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Tag_solid_svg', slots, []);

    	$$self.$$set = $$new_props => {
    		$$invalidate(0, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    	};

    	$$self.$inject_state = $$new_props => {
    		$$invalidate(0, $$props = assign(assign({}, $$props), $$new_props));
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$props = exclude_internal_props($$props);
    	return [$$props];
    }

    class Tag_solid_svg extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$Z, create_fragment$Z, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Tag_solid_svg",
    			options,
    			id: create_fragment$Z.name
    		});
    	}
    }

    var tagSolid_svg = /*#__PURE__*/Object.freeze({
        __proto__: null,
        'default': Tag_solid_svg
    });

    var require$$60 = /*@__PURE__*/getAugmentedNamespace(tagSolid_svg);

    /* dist/components/icon/svgs/tag.svg.svelte generated by Svelte v3.42.1 */

    const file$X = "dist/components/icon/svgs/tag.svg.svelte";

    function create_fragment$Y(ctx) {
    	let svg;
    	let path0;
    	let path1;

    	let svg_levels = [
    		{ width: "28" },
    		{ height: "28" },
    		{ viewBox: "0 0 28 28" },
    		{ xmlns: "http://www.w3.org/2000/svg" },
    		/*$$props*/ ctx[0]
    	];

    	let svg_data = {};

    	for (let i = 0; i < svg_levels.length; i += 1) {
    		svg_data = assign(svg_data, svg_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");
    			path0 = svg_element("path");
    			path1 = svg_element("path");
    			attr_dev(path0, "fill-rule", "evenodd");
    			attr_dev(path0, "clip-rule", "evenodd");
    			attr_dev(path0, "d", "M18.8585 9.09836C17.8822 8.12205 16.2993 8.12205 15.323 9.09836C14.3467 10.0747 14.3467 11.6576 15.323 12.6339C16.2993 13.6102 17.8822 13.6102 18.8585 12.6339C19.8348 11.6576 19.8348 10.0747 18.8585 9.09836ZM16.0301 9.80547C16.6159 9.21968 17.5656 9.21968 18.1514 9.80547C18.7372 10.3913 18.7372 11.341 18.1514 11.9268C17.5656 12.5126 16.6159 12.5126 16.0301 11.9268C15.4443 11.341 15.4443 10.3913 16.0301 9.80547Z");
    			add_location(path0, file$X, 1, 0, 98);
    			attr_dev(path1, "fill-rule", "evenodd");
    			attr_dev(path1, "clip-rule", "evenodd");
    			attr_dev(path1, "d", "M23.2477 6.20929C23.2477 5.38086 22.5761 4.70929 21.7477 4.70929H15.2121C14.0187 4.70929 12.8741 5.18339 12.0301 6.02731L4.00933 14.0481C3.03302 15.0244 3.03302 16.6073 4.00933 17.5837L10.3733 23.9476C11.3496 24.9239 12.9325 24.9239 13.9088 23.9476L21.9296 15.9268C22.7736 15.0829 23.2477 13.9383 23.2477 12.7448L23.2477 6.20929ZM21.7477 5.70929C22.0238 5.70929 22.2477 5.93315 22.2477 6.20929V12.7448C22.2477 13.6731 21.8789 14.5633 21.2225 15.2197L13.2017 23.2405C12.6159 23.8263 11.6662 23.8263 11.0804 23.2405L4.71644 16.8766C4.13065 16.2908 4.13065 15.341 4.71644 14.7552L12.7373 6.73442C13.3936 6.07804 14.2839 5.70929 15.2121 5.70929L21.7477 5.70929Z");
    			add_location(path1, file$X, 2, 0, 565);
    			set_svg_attributes(svg, svg_data);
    			add_location(svg, file$X, 0, 0, 0);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);
    			append_dev(svg, path0);
    			append_dev(svg, path1);
    		},
    		p: function update(ctx, [dirty]) {
    			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
    				{ width: "28" },
    				{ height: "28" },
    				{ viewBox: "0 0 28 28" },
    				{ xmlns: "http://www.w3.org/2000/svg" },
    				dirty & /*$$props*/ 1 && /*$$props*/ ctx[0]
    			]));
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$Y.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$Y($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Tag_svg', slots, []);

    	$$self.$$set = $$new_props => {
    		$$invalidate(0, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    	};

    	$$self.$inject_state = $$new_props => {
    		$$invalidate(0, $$props = assign(assign({}, $$props), $$new_props));
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$props = exclude_internal_props($$props);
    	return [$$props];
    }

    class Tag_svg extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$Y, create_fragment$Y, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Tag_svg",
    			options,
    			id: create_fragment$Y.name
    		});
    	}
    }

    var tag_svg = /*#__PURE__*/Object.freeze({
        __proto__: null,
        'default': Tag_svg
    });

    var require$$61 = /*@__PURE__*/getAugmentedNamespace(tag_svg);

    /* dist/components/icon/svgs/tags-solid.svg.svelte generated by Svelte v3.42.1 */

    const file$W = "dist/components/icon/svgs/tags-solid.svg.svelte";

    function create_fragment$X(ctx) {
    	let svg;
    	let path0;
    	let path1;
    	let path2;

    	let svg_levels = [
    		{ width: "28" },
    		{ height: "28" },
    		{ viewBox: "0 0 28 28" },
    		{ xmlns: "http://www.w3.org/2000/svg" },
    		/*$$props*/ ctx[0]
    	];

    	let svg_data = {};

    	for (let i = 0; i < svg_levels.length; i += 1) {
    		svg_data = assign(svg_data, svg_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");
    			path0 = svg_element("path");
    			path1 = svg_element("path");
    			path2 = svg_element("path");
    			attr_dev(path0, "d", "M20.8076 2C21.3599 2 21.8076 2.44772 21.8076 3C21.8076 3.55228 21.3599 4 20.8076 4H12.3568C11.8924 4 11.4504 4.18259 11.1384 4.50053C11.1308 4.50829 11.1231 4.51592 11.1152 4.52343L2.47658 12.7722C2.41308 12.8387 2.37476 12.9332 2.37476 13.0257C2.37476 13.1208 2.41525 13.218 2.48196 13.2847L2.88205 13.6848C3.27258 14.0753 3.27258 14.7085 2.88205 15.099C2.49153 15.4895 1.85837 15.4895 1.46784 15.099L1.06774 14.6989C0.627007 14.2582 0.374756 13.6527 0.374756 13.0257C0.374756 12.3987 0.627007 11.7932 1.06774 11.3525L1.08425 11.3364L9.72317 3.0873C10.425 2.37892 11.3827 2 12.3568 2H20.8076Z");
    			add_location(path0, file$W, 1, 0, 98);
    			attr_dev(path1, "d", "M18.8428 11.5062C19.4225 11.5062 19.892 11.9758 19.892 12.5555C19.892 13.1352 19.4225 13.6048 18.8428 13.6048C18.2631 13.6048 17.7935 13.1352 17.7935 12.5555C17.7935 11.9758 18.2631 11.5062 18.8428 11.5062Z");
    			add_location(path1, file$W, 2, 0, 704);
    			attr_dev(path2, "fill-rule", "evenodd");
    			attr_dev(path2, "clip-rule", "evenodd");
    			attr_dev(path2, "d", "M23.6341 5.39795C24.9378 5.39795 26.0003 6.46044 26.0003 7.76413V14.6048C26.0003 14.6235 25.9998 14.6422 25.9987 14.6609C25.9371 15.7574 25.5056 16.789 24.7847 17.6077C24.763 17.6324 24.74 17.656 24.7159 17.6784L15.7679 26.016C15.3285 26.448 14.7293 26.6949 14.109 26.6949C13.482 26.6949 12.8766 26.4426 12.4358 26.0019L4.79499 18.3611C4.35426 17.9203 4.102 17.3149 4.102 16.6879C4.102 16.0608 4.35426 15.4554 4.79499 15.0147C4.80317 15.0065 4.81149 14.9985 4.81996 14.9906L13.7791 6.63281L13.7947 6.6185C14.6072 5.89217 15.642 5.46106 16.7374 5.39952C16.7561 5.39847 16.7748 5.39795 16.7935 5.39795H23.6341ZM21.892 12.5555C21.892 10.8712 20.527 9.50623 18.8428 9.50623C17.1585 9.50623 15.7935 10.8712 15.7935 12.5555C15.7935 14.2398 17.1585 15.6048 18.8428 15.6048C20.527 15.6048 21.892 14.2398 21.892 12.5555Z");
    			add_location(path2, file$W, 3, 0, 923);
    			set_svg_attributes(svg, svg_data);
    			add_location(svg, file$W, 0, 0, 0);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);
    			append_dev(svg, path0);
    			append_dev(svg, path1);
    			append_dev(svg, path2);
    		},
    		p: function update(ctx, [dirty]) {
    			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
    				{ width: "28" },
    				{ height: "28" },
    				{ viewBox: "0 0 28 28" },
    				{ xmlns: "http://www.w3.org/2000/svg" },
    				dirty & /*$$props*/ 1 && /*$$props*/ ctx[0]
    			]));
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$X.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$X($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Tags_solid_svg', slots, []);

    	$$self.$$set = $$new_props => {
    		$$invalidate(0, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    	};

    	$$self.$inject_state = $$new_props => {
    		$$invalidate(0, $$props = assign(assign({}, $$props), $$new_props));
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$props = exclude_internal_props($$props);
    	return [$$props];
    }

    class Tags_solid_svg extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$X, create_fragment$X, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Tags_solid_svg",
    			options,
    			id: create_fragment$X.name
    		});
    	}
    }

    var tagsSolid_svg = /*#__PURE__*/Object.freeze({
        __proto__: null,
        'default': Tags_solid_svg
    });

    var require$$62 = /*@__PURE__*/getAugmentedNamespace(tagsSolid_svg);

    /* dist/components/icon/svgs/tags.svg.svelte generated by Svelte v3.42.1 */

    const file$V = "dist/components/icon/svgs/tags.svg.svelte";

    function create_fragment$W(ctx) {
    	let svg;
    	let path0;
    	let path1;
    	let path2;

    	let svg_levels = [
    		{ width: "28" },
    		{ height: "28" },
    		{ viewBox: "0 0 28 28" },
    		{ xmlns: "http://www.w3.org/2000/svg" },
    		/*$$props*/ ctx[0]
    	];

    	let svg_data = {};

    	for (let i = 0; i < svg_levels.length; i += 1) {
    		svg_data = assign(svg_data, svg_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");
    			path0 = svg_element("path");
    			path1 = svg_element("path");
    			path2 = svg_element("path");
    			attr_dev(path0, "fill-rule", "evenodd");
    			attr_dev(path0, "clip-rule", "evenodd");
    			attr_dev(path0, "d", "M23.6339 7.39792C23.833 7.39792 24.0001 7.56498 24.0001 7.7641V14.5746C23.9598 15.1905 23.7201 15.775 23.3135 16.2513L14.3932 24.5631C14.3846 24.5712 14.3761 24.5793 14.3678 24.5877C14.3011 24.6544 14.2039 24.6949 14.1088 24.6949C14.0137 24.6949 13.9165 24.6544 13.8498 24.5877L6.20897 16.9468C6.14227 16.8801 6.10177 16.7829 6.10177 16.6878C6.10177 16.5966 6.13902 16.5035 6.20092 16.4372L15.1348 8.10301C15.6028 7.6875 16.1947 7.439 16.8234 7.39792H23.6339ZM26.0001 7.7641C26.0001 6.46041 24.9376 5.39792 23.6339 5.39792H16.7932C16.7745 5.39792 16.7558 5.39844 16.7371 5.39949C15.6418 5.46103 14.607 5.89214 13.7945 6.61847L13.7788 6.63278L4.81973 14.9905C4.81127 14.9984 4.80294 15.0065 4.79476 15.0146C4.35403 15.4554 4.10177 16.0608 4.10177 16.6878C4.10177 17.3149 4.35403 17.9203 4.79476 18.361L12.4356 26.0019C12.8763 26.4426 13.4818 26.6949 14.1088 26.6949C14.7291 26.6949 15.3282 26.448 15.7677 26.016L24.7157 17.6784C24.7398 17.656 24.7627 17.6323 24.7845 17.6076C25.5054 16.789 25.9369 15.7574 25.9985 14.6608C25.9995 14.6422 26.0001 14.6235 26.0001 14.6047V7.7641Z");
    			add_location(path0, file$V, 1, 0, 98);
    			attr_dev(path1, "fill-rule", "evenodd");
    			attr_dev(path1, "clip-rule", "evenodd");
    			attr_dev(path1, "d", "M21.8076 3C21.8076 2.44772 21.3599 2 20.8076 2H12.3568C11.3827 2 10.425 2.37892 9.72317 3.0873L1.08425 11.3364L1.06774 11.3525C0.627007 11.7932 0.374756 12.3987 0.374756 13.0257C0.374756 13.6527 0.627007 14.2582 1.06774 14.6989L1.46784 15.099C1.85837 15.4895 2.49153 15.4895 2.88205 15.099C3.27258 14.7085 3.27258 14.0753 2.88205 13.6848L2.48196 13.2847C2.41525 13.218 2.37476 13.1208 2.37476 13.0257C2.37476 12.9332 2.41308 12.8387 2.47658 12.7722L11.1152 4.52343C11.1231 4.51592 11.1308 4.50829 11.1384 4.50053C11.4504 4.18259 11.8924 4 12.3568 4H20.8076C21.3599 4 21.8076 3.55228 21.8076 3Z");
    			add_location(path1, file$V, 2, 0, 1227);
    			attr_dev(path2, "fill-rule", "evenodd");
    			attr_dev(path2, "clip-rule", "evenodd");
    			attr_dev(path2, "d", "M21.892 12.5555C21.892 10.8712 20.527 9.50623 18.8428 9.50623C17.1585 9.50623 15.7935 10.8712 15.7935 12.5555C15.7935 14.2398 17.1585 15.6048 18.8428 15.6048C20.527 15.6048 21.892 14.2398 21.892 12.5555ZM18.8428 11.5062C19.4224 11.5062 19.892 11.9758 19.892 12.5555C19.892 13.1352 19.4224 13.6048 18.8428 13.6048C18.2631 13.6048 17.7935 13.1352 17.7935 12.5555C17.7935 11.9758 18.2631 11.5062 18.8428 11.5062Z");
    			add_location(path2, file$V, 3, 0, 1873);
    			set_svg_attributes(svg, svg_data);
    			add_location(svg, file$V, 0, 0, 0);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);
    			append_dev(svg, path0);
    			append_dev(svg, path1);
    			append_dev(svg, path2);
    		},
    		p: function update(ctx, [dirty]) {
    			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
    				{ width: "28" },
    				{ height: "28" },
    				{ viewBox: "0 0 28 28" },
    				{ xmlns: "http://www.w3.org/2000/svg" },
    				dirty & /*$$props*/ 1 && /*$$props*/ ctx[0]
    			]));
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$W.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$W($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Tags_svg', slots, []);

    	$$self.$$set = $$new_props => {
    		$$invalidate(0, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    	};

    	$$self.$inject_state = $$new_props => {
    		$$invalidate(0, $$props = assign(assign({}, $$props), $$new_props));
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$props = exclude_internal_props($$props);
    	return [$$props];
    }

    class Tags_svg extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$W, create_fragment$W, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Tags_svg",
    			options,
    			id: create_fragment$W.name
    		});
    	}
    }

    var tags_svg = /*#__PURE__*/Object.freeze({
        __proto__: null,
        'default': Tags_svg
    });

    var require$$63 = /*@__PURE__*/getAugmentedNamespace(tags_svg);

    /* dist/components/icon/svgs/times-circle.svg.svelte generated by Svelte v3.42.1 */

    const file$U = "dist/components/icon/svgs/times-circle.svg.svelte";

    function create_fragment$V(ctx) {
    	let svg;
    	let path0;
    	let path1;

    	let svg_levels = [
    		{ width: "16" },
    		{ height: "16" },
    		{ viewBox: "0 0 16 16" },
    		{ xmlns: "http://www.w3.org/2000/svg" },
    		/*$$props*/ ctx[0]
    	];

    	let svg_data = {};

    	for (let i = 0; i < svg_levels.length; i += 1) {
    		svg_data = assign(svg_data, svg_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");
    			path0 = svg_element("path");
    			path1 = svg_element("path");
    			attr_dev(path0, "d", "M11.3536 4.64645C11.1583 4.45118 10.8417 4.45118 10.6464 4.64645L8 7.29289L5.35355 4.64645C5.15829 4.45118 4.84171 4.45118 4.64645 4.64645C4.45118 4.84171 4.45118 5.15829 4.64645 5.35355L7.29289 8L4.64645 10.6464C4.45118 10.8417 4.45118 11.1583 4.64645 11.3536C4.84171 11.5488 5.15829 11.5488 5.35355 11.3536L8 8.70711L10.6464 11.3536C10.8417 11.5488 11.1583 11.5488 11.3536 11.3536C11.5488 11.1583 11.5488 10.8417 11.3536 10.6464L8.70711 8L11.3536 5.35355C11.5488 5.15829 11.5488 4.84171 11.3536 4.64645Z");
    			add_location(path0, file$U, 1, 0, 98);
    			attr_dev(path1, "fill-rule", "evenodd");
    			attr_dev(path1, "clip-rule", "evenodd");
    			attr_dev(path1, "d", "M16 8C16 12.4183 12.4183 16 8 16C3.58172 16 0 12.4183 0 8C0 3.58172 3.58172 0 8 0C12.4183 0 16 3.58172 16 8ZM15 8C15 11.866 11.866 15 8 15C4.13401 15 1 11.866 1 8C1 4.13401 4.13401 1 8 1C11.866 1 15 4.13401 15 8Z");
    			add_location(path1, file$U, 2, 0, 616);
    			set_svg_attributes(svg, svg_data);
    			add_location(svg, file$U, 0, 0, 0);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);
    			append_dev(svg, path0);
    			append_dev(svg, path1);
    		},
    		p: function update(ctx, [dirty]) {
    			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
    				{ width: "16" },
    				{ height: "16" },
    				{ viewBox: "0 0 16 16" },
    				{ xmlns: "http://www.w3.org/2000/svg" },
    				dirty & /*$$props*/ 1 && /*$$props*/ ctx[0]
    			]));
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$V.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$V($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Times_circle_svg', slots, []);

    	$$self.$$set = $$new_props => {
    		$$invalidate(0, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    	};

    	$$self.$inject_state = $$new_props => {
    		$$invalidate(0, $$props = assign(assign({}, $$props), $$new_props));
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$props = exclude_internal_props($$props);
    	return [$$props];
    }

    class Times_circle_svg extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$V, create_fragment$V, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Times_circle_svg",
    			options,
    			id: create_fragment$V.name
    		});
    	}
    }

    var timesCircle_svg = /*#__PURE__*/Object.freeze({
        __proto__: null,
        'default': Times_circle_svg
    });

    var require$$64 = /*@__PURE__*/getAugmentedNamespace(timesCircle_svg);

    /* dist/components/icon/svgs/times.svg.svelte generated by Svelte v3.42.1 */

    const file$T = "dist/components/icon/svgs/times.svg.svelte";

    function create_fragment$U(ctx) {
    	let svg;
    	let path;

    	let svg_levels = [
    		{ width: "28" },
    		{ height: "28" },
    		{ viewBox: "0 0 28 28" },
    		{ xmlns: "http://www.w3.org/2000/svg" },
    		/*$$props*/ ctx[0]
    	];

    	let svg_data = {};

    	for (let i = 0; i < svg_levels.length; i += 1) {
    		svg_data = assign(svg_data, svg_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");
    			path = svg_element("path");
    			attr_dev(path, "d", "M20.6464 6.64645C20.8417 6.45118 21.1583 6.45118 21.3536 6.64645C21.5488 6.84171 21.5488 7.15829 21.3536 7.35355L14.7071 14L21.3536 20.6464C21.5488 20.8417 21.5488 21.1583 21.3536 21.3536C21.1583 21.5488 20.8417 21.5488 20.6464 21.3536L14 14.7071L7.35355 21.3536C7.15829 21.5488 6.84171 21.5488 6.64645 21.3536C6.45118 21.1583 6.45118 20.8417 6.64645 20.6464L13.2929 14L6.64645 7.35355C6.45118 7.15829 6.45118 6.84171 6.64645 6.64645C6.84171 6.45118 7.15829 6.45118 7.35355 6.64645L14 13.2929L20.6464 6.64645Z");
    			add_location(path, file$T, 1, 0, 98);
    			set_svg_attributes(svg, svg_data);
    			add_location(svg, file$T, 0, 0, 0);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);
    			append_dev(svg, path);
    		},
    		p: function update(ctx, [dirty]) {
    			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
    				{ width: "28" },
    				{ height: "28" },
    				{ viewBox: "0 0 28 28" },
    				{ xmlns: "http://www.w3.org/2000/svg" },
    				dirty & /*$$props*/ 1 && /*$$props*/ ctx[0]
    			]));
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$U.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$U($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Times_svg', slots, []);

    	$$self.$$set = $$new_props => {
    		$$invalidate(0, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    	};

    	$$self.$inject_state = $$new_props => {
    		$$invalidate(0, $$props = assign(assign({}, $$props), $$new_props));
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$props = exclude_internal_props($$props);
    	return [$$props];
    }

    class Times_svg extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$U, create_fragment$U, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Times_svg",
    			options,
    			id: create_fragment$U.name
    		});
    	}
    }

    var times_svg = /*#__PURE__*/Object.freeze({
        __proto__: null,
        'default': Times_svg
    });

    var require$$65 = /*@__PURE__*/getAugmentedNamespace(times_svg);

    /* dist/components/icon/svgs/toggle-off.svg.svelte generated by Svelte v3.42.1 */

    const file$S = "dist/components/icon/svgs/toggle-off.svg.svelte";

    function create_fragment$T(ctx) {
    	let svg;
    	let path;

    	let svg_levels = [
    		{ "aria-hidden": "true" },
    		{ focusable: "false" },
    		{ "data-prefix": "far" },
    		{ "data-icon": "toggle-off" },
    		{
    			class: "svg-inline--fa fa-toggle-off fa-w-18"
    		},
    		{ role: "img" },
    		{ xmlns: "http://www.w3.org/2000/svg" },
    		{ viewBox: "0 0 576 512" },
    		/*$$props*/ ctx[0]
    	];

    	let svg_data = {};

    	for (let i = 0; i < svg_levels.length; i += 1) {
    		svg_data = assign(svg_data, svg_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");
    			path = svg_element("path");
    			attr_dev(path, "fill", "currentColor");
    			attr_dev(path, "d", "M384 64H192C85.961 64 0 149.961 0 256s85.961 192 192 192h192c106.039 0 192-85.961 192-192S490.039 64 384 64zM48 256c0-79.583 64.404-144 144-144 79.582 0 144 64.404 144 144 0 79.582-64.404 144-144 144-79.582 0-144-64.404-144-144zm336 144h-65.02c86.704-76.515 86.683-211.504 0-288H384c79.582 0 144 64.404 144 144 0 79.582-64.404 144-144 144z");
    			add_location(path, file$S, 0, 210, 210);
    			set_svg_attributes(svg, svg_data);
    			add_location(svg, file$S, 0, 0, 0);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);
    			append_dev(svg, path);
    		},
    		p: function update(ctx, [dirty]) {
    			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
    				{ "aria-hidden": "true" },
    				{ focusable: "false" },
    				{ "data-prefix": "far" },
    				{ "data-icon": "toggle-off" },
    				{
    					class: "svg-inline--fa fa-toggle-off fa-w-18"
    				},
    				{ role: "img" },
    				{ xmlns: "http://www.w3.org/2000/svg" },
    				{ viewBox: "0 0 576 512" },
    				dirty & /*$$props*/ 1 && /*$$props*/ ctx[0]
    			]));
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$T.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$T($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Toggle_off_svg', slots, []);

    	$$self.$$set = $$new_props => {
    		$$invalidate(0, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    	};

    	$$self.$inject_state = $$new_props => {
    		$$invalidate(0, $$props = assign(assign({}, $$props), $$new_props));
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$props = exclude_internal_props($$props);
    	return [$$props];
    }

    class Toggle_off_svg extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$T, create_fragment$T, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Toggle_off_svg",
    			options,
    			id: create_fragment$T.name
    		});
    	}
    }

    var toggleOff_svg = /*#__PURE__*/Object.freeze({
        __proto__: null,
        'default': Toggle_off_svg
    });

    var require$$66 = /*@__PURE__*/getAugmentedNamespace(toggleOff_svg);

    /* dist/components/icon/svgs/toggle-on.svg.svelte generated by Svelte v3.42.1 */

    const file$R = "dist/components/icon/svgs/toggle-on.svg.svelte";

    function create_fragment$S(ctx) {
    	let svg;
    	let path;

    	let svg_levels = [
    		{ "aria-hidden": "true" },
    		{ focusable: "false" },
    		{ "data-prefix": "far" },
    		{ "data-icon": "toggle-on" },
    		{
    			class: "svg-inline--fa fa-toggle-on fa-w-18"
    		},
    		{ role: "img" },
    		{ xmlns: "http://www.w3.org/2000/svg" },
    		{ viewBox: "0 0 576 512" },
    		/*$$props*/ ctx[0]
    	];

    	let svg_data = {};

    	for (let i = 0; i < svg_levels.length; i += 1) {
    		svg_data = assign(svg_data, svg_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");
    			path = svg_element("path");
    			attr_dev(path, "fill", "currentColor");
    			attr_dev(path, "d", "M384 64H192C86 64 0 150 0 256s86 192 192 192h192c106 0 192-86 192-192S490 64 384 64zm0 336c-79.6 0-144-64.4-144-144s64.4-144 144-144 144 64.4 144 144-64.4 144-144 144z");
    			add_location(path, file$R, 0, 208, 208);
    			set_svg_attributes(svg, svg_data);
    			add_location(svg, file$R, 0, 0, 0);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);
    			append_dev(svg, path);
    		},
    		p: function update(ctx, [dirty]) {
    			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
    				{ "aria-hidden": "true" },
    				{ focusable: "false" },
    				{ "data-prefix": "far" },
    				{ "data-icon": "toggle-on" },
    				{
    					class: "svg-inline--fa fa-toggle-on fa-w-18"
    				},
    				{ role: "img" },
    				{ xmlns: "http://www.w3.org/2000/svg" },
    				{ viewBox: "0 0 576 512" },
    				dirty & /*$$props*/ 1 && /*$$props*/ ctx[0]
    			]));
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$S.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$S($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Toggle_on_svg', slots, []);

    	$$self.$$set = $$new_props => {
    		$$invalidate(0, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    	};

    	$$self.$inject_state = $$new_props => {
    		$$invalidate(0, $$props = assign(assign({}, $$props), $$new_props));
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$props = exclude_internal_props($$props);
    	return [$$props];
    }

    class Toggle_on_svg extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$S, create_fragment$S, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Toggle_on_svg",
    			options,
    			id: create_fragment$S.name
    		});
    	}
    }

    var toggleOn_svg = /*#__PURE__*/Object.freeze({
        __proto__: null,
        'default': Toggle_on_svg
    });

    var require$$67 = /*@__PURE__*/getAugmentedNamespace(toggleOn_svg);

    /* dist/components/icon/svgs/twitter.svg.svelte generated by Svelte v3.42.1 */

    const file$Q = "dist/components/icon/svgs/twitter.svg.svelte";

    function create_fragment$R(ctx) {
    	let svg;
    	let path;

    	let svg_levels = [
    		{ width: "28" },
    		{ height: "28" },
    		{ viewBox: "0 0 28 28" },
    		{ xmlns: "http://www.w3.org/2000/svg" },
    		/*$$props*/ ctx[0]
    	];

    	let svg_data = {};

    	for (let i = 0; i < svg_levels.length; i += 1) {
    		svg_data = assign(svg_data, svg_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");
    			path = svg_element("path");
    			attr_dev(path, "fill-rule", "evenodd");
    			attr_dev(path, "clip-rule", "evenodd");
    			attr_dev(path, "d", "M26.751 6.34235C25.8492 6.75226 24.8771 7.02164 23.8699 7.15046C24.9006 6.52974 25.697 5.54595 26.0717 4.36306C25.0997 4.94865 24.0222 5.35856 22.8861 5.5928C21.9609 4.58559 20.6609 4 19.1852 4C16.4329 4 14.1843 6.24866 14.1843 9.02435C14.1843 9.42255 14.2311 9.80903 14.3131 10.1721C10.1437 9.96129 6.4311 7.95858 3.95992 4.92523C3.52658 5.66307 3.28064 6.52974 3.28064 7.44326C3.28064 9.18831 4.15902 10.7343 5.51758 11.6126C4.68605 11.6126 3.91307 11.3784 3.23379 11.0271C3.23379 11.0271 3.23379 11.0271 3.23379 11.0622C3.23379 13.4982 4.96713 15.5361 7.26264 15.9928C6.84101 16.11 6.39597 16.1685 5.93921 16.1685C5.62299 16.1685 5.30677 16.1334 5.00226 16.0748C5.6347 18.0541 7.47345 19.5298 9.68697 19.5649C7.97705 20.9235 5.81038 21.7199 3.4446 21.7199C3.0464 21.7199 2.6482 21.6965 2.25 21.6496C4.47524 23.0785 7.12209 23.91 9.95634 23.91C19.1852 23.91 24.2564 16.2505 24.2564 9.60994C24.2564 9.38741 24.2564 9.1766 24.2447 8.95408C25.2285 8.25137 26.0717 7.36128 26.751 6.34235Z");
    			add_location(path, file$Q, 1, 0, 98);
    			set_svg_attributes(svg, svg_data);
    			add_location(svg, file$Q, 0, 0, 0);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);
    			append_dev(svg, path);
    		},
    		p: function update(ctx, [dirty]) {
    			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
    				{ width: "28" },
    				{ height: "28" },
    				{ viewBox: "0 0 28 28" },
    				{ xmlns: "http://www.w3.org/2000/svg" },
    				dirty & /*$$props*/ 1 && /*$$props*/ ctx[0]
    			]));
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$R.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$R($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Twitter_svg', slots, []);

    	$$self.$$set = $$new_props => {
    		$$invalidate(0, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    	};

    	$$self.$inject_state = $$new_props => {
    		$$invalidate(0, $$props = assign(assign({}, $$props), $$new_props));
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$props = exclude_internal_props($$props);
    	return [$$props];
    }

    class Twitter_svg extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$R, create_fragment$R, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Twitter_svg",
    			options,
    			id: create_fragment$R.name
    		});
    	}
    }

    var twitter_svg = /*#__PURE__*/Object.freeze({
        __proto__: null,
        'default': Twitter_svg
    });

    var require$$68 = /*@__PURE__*/getAugmentedNamespace(twitter_svg);

    /* dist/components/icon/svgs/user-circle-solid.svg.svelte generated by Svelte v3.42.1 */

    const file$P = "dist/components/icon/svgs/user-circle-solid.svg.svelte";

    function create_fragment$Q(ctx) {
    	let svg;
    	let path0;
    	let path1;

    	let svg_levels = [
    		{ width: "28" },
    		{ height: "28" },
    		{ viewBox: "0 0 28 28" },
    		{ xmlns: "http://www.w3.org/2000/svg" },
    		/*$$props*/ ctx[0]
    	];

    	let svg_data = {};

    	for (let i = 0; i < svg_levels.length; i += 1) {
    		svg_data = assign(svg_data, svg_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");
    			path0 = svg_element("path");
    			path1 = svg_element("path");
    			attr_dev(path0, "d", "M11.3076 11.6923C11.3076 10.2575 12.519 9.0434 13.9999 9.0434C15.4504 9.0434 16.6922 10.3139 16.6922 11.7791C16.6922 13.2139 15.4808 14.428 13.9999 14.428C12.5494 14.428 11.3076 13.1575 11.3076 11.6923Z");
    			add_location(path0, file$P, 1, 0, 98);
    			attr_dev(path1, "fill-rule", "evenodd");
    			attr_dev(path1, "clip-rule", "evenodd");
    			attr_dev(path1, "d", "M26 14C26 20.6783 20.6783 26 14 26C7.32174 26 2 20.6783 2 14C2 7.32174 7.32174 2 14 2C20.6783 2 26 7.32174 26 14ZM13.9999 7.0434C11.4368 7.0434 9.30759 9.13067 9.30759 11.6923C9.30759 14.2234 11.4065 16.428 13.9999 16.428C16.563 16.428 18.6922 14.3407 18.6922 11.7791C18.6922 9.24802 16.5933 7.0434 13.9999 7.0434ZM8.8555 22.0177L9.59374 20.7975C10.0944 20.0585 10.9292 19.6154 11.8226 19.6154H16.1782C17.0715 19.6154 17.9062 20.0584 18.4069 20.7972L19.144 22.0172C19.4297 22.4899 20.0444 22.6415 20.5171 22.3559C20.9898 22.0703 21.1414 21.4555 20.8558 20.9828L20.0947 19.7233L20.0824 19.7048C19.2121 18.3995 17.747 17.6154 16.1782 17.6154H11.8226C10.2537 17.6154 8.78862 18.3995 7.91835 19.7048L7.90618 19.7231L7.14431 20.9824C6.85842 21.4549 7.00972 22.0697 7.48225 22.3556C7.95479 22.6415 8.56961 22.4902 8.8555 22.0177Z");
    			add_location(path1, file$P, 2, 0, 313);
    			set_svg_attributes(svg, svg_data);
    			add_location(svg, file$P, 0, 0, 0);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);
    			append_dev(svg, path0);
    			append_dev(svg, path1);
    		},
    		p: function update(ctx, [dirty]) {
    			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
    				{ width: "28" },
    				{ height: "28" },
    				{ viewBox: "0 0 28 28" },
    				{ xmlns: "http://www.w3.org/2000/svg" },
    				dirty & /*$$props*/ 1 && /*$$props*/ ctx[0]
    			]));
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$Q.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$Q($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('User_circle_solid_svg', slots, []);

    	$$self.$$set = $$new_props => {
    		$$invalidate(0, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    	};

    	$$self.$inject_state = $$new_props => {
    		$$invalidate(0, $$props = assign(assign({}, $$props), $$new_props));
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$props = exclude_internal_props($$props);
    	return [$$props];
    }

    class User_circle_solid_svg extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$Q, create_fragment$Q, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "User_circle_solid_svg",
    			options,
    			id: create_fragment$Q.name
    		});
    	}
    }

    var userCircleSolid_svg = /*#__PURE__*/Object.freeze({
        __proto__: null,
        'default': User_circle_solid_svg
    });

    var require$$69 = /*@__PURE__*/getAugmentedNamespace(userCircleSolid_svg);

    /* dist/components/icon/svgs/user-circle.svg.svelte generated by Svelte v3.42.1 */

    const file$O = "dist/components/icon/svgs/user-circle.svg.svelte";

    function create_fragment$P(ctx) {
    	let svg;
    	let path0;
    	let path1;

    	let svg_levels = [
    		{ width: "28" },
    		{ height: "28" },
    		{ viewBox: "0 0 28 28" },
    		{ xmlns: "http://www.w3.org/2000/svg" },
    		/*$$props*/ ctx[0]
    	];

    	let svg_data = {};

    	for (let i = 0; i < svg_levels.length; i += 1) {
    		svg_data = assign(svg_data, svg_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");
    			path0 = svg_element("path");
    			path1 = svg_element("path");
    			attr_dev(path0, "fill-rule", "evenodd");
    			attr_dev(path0, "clip-rule", "evenodd");
    			attr_dev(path0, "d", "M9.30762 11.6923C9.30762 9.13067 11.4369 7.0434 13.9999 7.0434C16.5933 7.0434 18.6922 9.24802 18.6922 11.7791C18.6922 14.3407 16.563 16.428 13.9999 16.428C11.4065 16.428 9.30762 14.2234 9.30762 11.6923ZM13.9999 9.0434C12.519 9.0434 11.3076 10.2575 11.3076 11.6923C11.3076 13.1575 12.5494 14.428 13.9999 14.428C15.4808 14.428 16.6922 13.2139 16.6922 11.7791C16.6922 10.3139 15.4505 9.0434 13.9999 9.0434Z");
    			add_location(path0, file$O, 1, 0, 98);
    			attr_dev(path1, "fill-rule", "evenodd");
    			attr_dev(path1, "clip-rule", "evenodd");
    			attr_dev(path1, "d", "M26 14C26 20.6783 20.6783 26 14 26C7.32174 26 2 20.6783 2 14C2 7.32174 7.32174 2 14 2C20.6783 2 26 7.32174 26 14ZM21.0394 21.1405C22.8726 19.3336 24 16.8129 24 14C24 8.42631 19.5737 4 14 4C8.42631 4 4 8.42631 4 14C4 16.813 5.12748 19.3338 6.96091 21.1408L7.91823 19.7048C8.78849 18.3994 10.2536 17.6154 11.8225 17.6154H16.178C17.7469 17.6154 19.212 18.3994 20.0823 19.7048L21.0394 21.1405ZM19.4738 22.3977L18.4182 20.8142C17.9188 20.0652 17.0782 19.6154 16.178 19.6154H11.8225C10.9223 19.6154 10.0817 20.0652 9.58233 20.8142L8.52652 22.3979C10.0934 23.4132 11.9707 24 14 24C16.0295 24 17.9069 23.4131 19.4738 22.3977Z");
    			add_location(path1, file$O, 2, 0, 554);
    			set_svg_attributes(svg, svg_data);
    			add_location(svg, file$O, 0, 0, 0);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);
    			append_dev(svg, path0);
    			append_dev(svg, path1);
    		},
    		p: function update(ctx, [dirty]) {
    			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
    				{ width: "28" },
    				{ height: "28" },
    				{ viewBox: "0 0 28 28" },
    				{ xmlns: "http://www.w3.org/2000/svg" },
    				dirty & /*$$props*/ 1 && /*$$props*/ ctx[0]
    			]));
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$P.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$P($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('User_circle_svg', slots, []);

    	$$self.$$set = $$new_props => {
    		$$invalidate(0, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    	};

    	$$self.$inject_state = $$new_props => {
    		$$invalidate(0, $$props = assign(assign({}, $$props), $$new_props));
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$props = exclude_internal_props($$props);
    	return [$$props];
    }

    class User_circle_svg extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$P, create_fragment$P, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "User_circle_svg",
    			options,
    			id: create_fragment$P.name
    		});
    	}
    }

    var userCircle_svg = /*#__PURE__*/Object.freeze({
        __proto__: null,
        'default': User_circle_svg
    });

    var require$$70 = /*@__PURE__*/getAugmentedNamespace(userCircle_svg);

    /* dist/components/icon/svgs/video.svg.svelte generated by Svelte v3.42.1 */

    const file$N = "dist/components/icon/svgs/video.svg.svelte";

    function create_fragment$O(ctx) {
    	let svg;
    	let path;

    	let svg_levels = [
    		{ width: "56" },
    		{ height: "56" },
    		{ viewBox: "0 0 56 56" },
    		{ xmlns: "http://www.w3.org/2000/svg" },
    		/*$$props*/ ctx[0]
    	];

    	let svg_data = {};

    	for (let i = 0; i < svg_levels.length; i += 1) {
    		svg_data = assign(svg_data, svg_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");
    			path = svg_element("path");
    			attr_dev(path, "fill-rule", "evenodd");
    			attr_dev(path, "clip-rule", "evenodd");
    			attr_dev(path, "d", "M8.09938 7C6.39701 7 5 8.39701 5 10.0994V45.9006C5 47.603 6.39701 49 8.09938 49H47.0435C48.7458 49 50.1429 47.603 50.1429 45.9006V10.0994C50.1429 8.39701 48.7458 7 47.0435 7H8.09938ZM3 10.0994C3 7.29244 5.29244 5 8.09938 5H47.0435C49.8504 5 52.1429 7.29244 52.1429 10.0994V45.9006C52.1429 48.7076 49.8504 51 47.0435 51H8.09938C5.29244 51 3 48.7076 3 45.9006V10.0994ZM22.3183 17.5559C22.298 17.563 22.2735 17.5729 22.2453 17.587C22.2249 17.5972 22.2143 17.6084 22.2052 17.6243C22.1938 17.6442 22.1832 17.6767 22.1832 17.7174V31.6553C22.1832 31.6961 22.1938 31.7285 22.2052 31.7485C22.2143 31.7643 22.2249 31.7755 22.2453 31.7857C22.2649 31.7955 22.284 31.8059 22.3028 31.8169C22.3179 31.8116 22.3353 31.8048 22.3548 31.7958L34.4168 24.8448C34.4339 24.835 34.4513 24.8256 34.4689 24.8168C34.4893 24.8066 34.5 24.7954 34.5091 24.7795C34.5205 24.7596 34.5311 24.7271 34.5311 24.6864C34.5311 24.6456 34.5205 24.6132 34.5091 24.5932C34.5 24.5774 34.4893 24.5662 34.4689 24.556C34.4513 24.5472 34.4339 24.5378 34.4168 24.528L22.3237 17.559C22.3219 17.558 22.3201 17.5569 22.3183 17.5559ZM23.4045 15.8736C23.0821 15.618 22.7007 15.5389 22.3874 15.5389C22.0257 15.5389 21.6682 15.6395 21.3509 15.7982C20.5553 16.196 20.1832 16.9842 20.1832 17.7174V31.6553C20.1832 32.3497 20.5169 33.0933 21.2279 33.5081C21.5479 33.7566 21.924 33.8339 22.2337 33.8339C22.5954 33.8339 22.9529 33.7333 23.2702 33.5746C23.2878 33.5658 23.3052 33.5564 23.3223 33.5466L35.3937 26.5902C36.1684 26.1877 36.5311 25.4103 36.5311 24.6864C36.5311 23.9625 36.1684 23.1851 35.3937 22.7826L23.4045 15.8736ZM30.5025 37.5584C31.074 36.9869 31.8535 36.7019 32.6957 36.7019C33.5378 36.7019 34.3173 36.9869 34.8888 37.5584C35.4603 38.1299 35.7453 38.9094 35.7453 39.7516V40.8012H44.9938C45.5461 40.8012 45.9938 41.249 45.9938 41.8012C45.9938 42.3535 45.5461 42.8012 44.9938 42.8012H35.7453V43.8509C35.7453 44.6931 35.4603 45.4726 34.8888 46.0441C34.3173 46.6155 33.5378 46.9006 32.6957 46.9006C31.8535 46.9006 31.074 46.6155 30.5025 46.0441C29.931 45.4726 29.646 44.6931 29.646 43.8509V42.8012H10.1491C9.59678 42.8012 9.14907 42.3535 9.14907 41.8012C9.14907 41.249 9.59678 40.8012 10.1491 40.8012H29.646V39.7516C29.646 38.9094 29.931 38.1299 30.5025 37.5584ZM31.646 43.8509C31.646 44.2386 31.7708 44.4839 31.9167 44.6298C32.0626 44.7758 32.308 44.9006 32.6957 44.9006C33.0833 44.9006 33.3287 44.7758 33.4746 44.6298C33.6205 44.4839 33.7453 44.2386 33.7453 43.8509V39.7516C33.7453 39.3639 33.6205 39.1185 33.4746 38.9726C33.3287 38.8267 33.0833 38.7019 32.6957 38.7019C32.308 38.7019 32.0626 38.8267 31.9167 38.9726C31.7708 39.1185 31.646 39.3639 31.646 39.7516V43.8509Z");
    			add_location(path, file$N, 1, 0, 98);
    			set_svg_attributes(svg, svg_data);
    			add_location(svg, file$N, 0, 0, 0);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);
    			append_dev(svg, path);
    		},
    		p: function update(ctx, [dirty]) {
    			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
    				{ width: "56" },
    				{ height: "56" },
    				{ viewBox: "0 0 56 56" },
    				{ xmlns: "http://www.w3.org/2000/svg" },
    				dirty & /*$$props*/ 1 && /*$$props*/ ctx[0]
    			]));
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$O.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$O($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Video_svg', slots, []);

    	$$self.$$set = $$new_props => {
    		$$invalidate(0, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    	};

    	$$self.$inject_state = $$new_props => {
    		$$invalidate(0, $$props = assign(assign({}, $$props), $$new_props));
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$props = exclude_internal_props($$props);
    	return [$$props];
    }

    class Video_svg extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$O, create_fragment$O, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Video_svg",
    			options,
    			id: create_fragment$O.name
    		});
    	}
    }

    var video_svg = /*#__PURE__*/Object.freeze({
        __proto__: null,
        'default': Video_svg
    });

    var require$$71 = /*@__PURE__*/getAugmentedNamespace(video_svg);

    /* dist/components/icon/svgs/warning-circle-solid.svg.svelte generated by Svelte v3.42.1 */

    const file$M = "dist/components/icon/svgs/warning-circle-solid.svg.svelte";

    function create_fragment$N(ctx) {
    	let svg;
    	let path;

    	let svg_levels = [
    		{ width: "28" },
    		{ height: "28" },
    		{ viewBox: "0 0 28 28" },
    		{ xmlns: "http://www.w3.org/2000/svg" },
    		/*$$props*/ ctx[0]
    	];

    	let svg_data = {};

    	for (let i = 0; i < svg_levels.length; i += 1) {
    		svg_data = assign(svg_data, svg_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");
    			path = svg_element("path");
    			attr_dev(path, "fill-rule", "evenodd");
    			attr_dev(path, "clip-rule", "evenodd");
    			attr_dev(path, "d", "M14 3C7.92487 3 3 7.92487 3 14C3 20.0751 7.92487 25 14 25C20.0751 25 25 20.0751 25 14C25 7.92487 20.0751 3 14 3ZM14 9C14.5523 9 15 9.44772 15 10V15C15 15.5523 14.5523 16 14 16C13.4477 16 13 15.5523 13 15V10C13 9.44772 13.4477 9 14 9ZM14 17C14.5523 17 15 17.4477 15 18V18.5C15 19.0523 14.5523 19.5 14 19.5C13.4477 19.5 13 19.0523 13 18.5V18C13 17.4477 13.4477 17 14 17Z");
    			add_location(path, file$M, 1, 0, 98);
    			set_svg_attributes(svg, svg_data);
    			add_location(svg, file$M, 0, 0, 0);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);
    			append_dev(svg, path);
    		},
    		p: function update(ctx, [dirty]) {
    			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
    				{ width: "28" },
    				{ height: "28" },
    				{ viewBox: "0 0 28 28" },
    				{ xmlns: "http://www.w3.org/2000/svg" },
    				dirty & /*$$props*/ 1 && /*$$props*/ ctx[0]
    			]));
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$N.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$N($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Warning_circle_solid_svg', slots, []);

    	$$self.$$set = $$new_props => {
    		$$invalidate(0, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    	};

    	$$self.$inject_state = $$new_props => {
    		$$invalidate(0, $$props = assign(assign({}, $$props), $$new_props));
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$props = exclude_internal_props($$props);
    	return [$$props];
    }

    class Warning_circle_solid_svg extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$N, create_fragment$N, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Warning_circle_solid_svg",
    			options,
    			id: create_fragment$N.name
    		});
    	}
    }

    var warningCircleSolid_svg = /*#__PURE__*/Object.freeze({
        __proto__: null,
        'default': Warning_circle_solid_svg
    });

    var require$$72 = /*@__PURE__*/getAugmentedNamespace(warningCircleSolid_svg);

    /* dist/components/icon/svgs/warning-circle.svg.svelte generated by Svelte v3.42.1 */

    const file$L = "dist/components/icon/svgs/warning-circle.svg.svelte";

    function create_fragment$M(ctx) {
    	let svg;
    	let path0;
    	let path1;
    	let path2;

    	let svg_levels = [
    		{ width: "28" },
    		{ height: "28" },
    		{ viewBox: "0 0 28 28" },
    		{ xmlns: "http://www.w3.org/2000/svg" },
    		/*$$props*/ ctx[0]
    	];

    	let svg_data = {};

    	for (let i = 0; i < svg_levels.length; i += 1) {
    		svg_data = assign(svg_data, svg_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");
    			path0 = svg_element("path");
    			path1 = svg_element("path");
    			path2 = svg_element("path");
    			attr_dev(path0, "fill-rule", "evenodd");
    			attr_dev(path0, "clip-rule", "evenodd");
    			attr_dev(path0, "d", "M14 5C9.02944 5 5 9.02944 5 14C5 18.9706 9.02944 23 14 23C18.9706 23 23 18.9706 23 14C23 9.02944 18.9706 5 14 5ZM3 14C3 7.92487 7.92487 3 14 3C20.0751 3 25 7.92487 25 14C25 20.0751 20.0751 25 14 25C7.92487 25 3 20.0751 3 14Z");
    			add_location(path0, file$L, 1, 0, 98);
    			attr_dev(path1, "fill-rule", "evenodd");
    			attr_dev(path1, "clip-rule", "evenodd");
    			attr_dev(path1, "d", "M14 9C14.5523 9 15 9.44772 15 10V15C15 15.5523 14.5523 16 14 16C13.4477 16 13 15.5523 13 15V10C13 9.44772 13.4477 9 14 9Z");
    			add_location(path1, file$L, 2, 0, 375);
    			attr_dev(path2, "fill-rule", "evenodd");
    			attr_dev(path2, "clip-rule", "evenodd");
    			attr_dev(path2, "d", "M14 17C14.5523 17 15 17.4477 15 18V18.5C15 19.0523 14.5523 19.5 14 19.5C13.4477 19.5 13 19.0523 13 18.5V18C13 17.4477 13.4477 17 14 17Z");
    			add_location(path2, file$L, 3, 0, 549);
    			set_svg_attributes(svg, svg_data);
    			add_location(svg, file$L, 0, 0, 0);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);
    			append_dev(svg, path0);
    			append_dev(svg, path1);
    			append_dev(svg, path2);
    		},
    		p: function update(ctx, [dirty]) {
    			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
    				{ width: "28" },
    				{ height: "28" },
    				{ viewBox: "0 0 28 28" },
    				{ xmlns: "http://www.w3.org/2000/svg" },
    				dirty & /*$$props*/ 1 && /*$$props*/ ctx[0]
    			]));
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$M.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$M($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Warning_circle_svg', slots, []);

    	$$self.$$set = $$new_props => {
    		$$invalidate(0, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    	};

    	$$self.$inject_state = $$new_props => {
    		$$invalidate(0, $$props = assign(assign({}, $$props), $$new_props));
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$props = exclude_internal_props($$props);
    	return [$$props];
    }

    class Warning_circle_svg extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$M, create_fragment$M, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Warning_circle_svg",
    			options,
    			id: create_fragment$M.name
    		});
    	}
    }

    var warningCircle_svg = /*#__PURE__*/Object.freeze({
        __proto__: null,
        'default': Warning_circle_svg
    });

    var require$$73 = /*@__PURE__*/getAugmentedNamespace(warningCircle_svg);

    /* dist/components/icon/svgs/warning-triangle.svg.svelte generated by Svelte v3.42.1 */

    const file$K = "dist/components/icon/svgs/warning-triangle.svg.svelte";

    function create_fragment$L(ctx) {
    	let svg;
    	let path0;
    	let path1;
    	let path2;

    	let svg_levels = [
    		{ width: "28" },
    		{ height: "28" },
    		{ viewBox: "0 0 28 28" },
    		{ xmlns: "http://www.w3.org/2000/svg" },
    		/*$$props*/ ctx[0]
    	];

    	let svg_data = {};

    	for (let i = 0; i < svg_levels.length; i += 1) {
    		svg_data = assign(svg_data, svg_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");
    			path0 = svg_element("path");
    			path1 = svg_element("path");
    			path2 = svg_element("path");
    			attr_dev(path0, "d", "M15 11.5C15 10.9477 14.5523 10.5 14 10.5C13.4477 10.5 13 10.9477 13 11.5V15.5C13 16.0523 13.4477 16.5 14 16.5C14.5523 16.5 15 16.0523 15 15.5V11.5Z");
    			add_location(path0, file$K, 1, 0, 98);
    			attr_dev(path1, "d", "M15 18.5C15 17.9477 14.5523 17.5 14 17.5C13.4477 17.5 13 17.9477 13 18.5V19C13 19.5523 13.4477 20 14 20C14.5523 20 15 19.5523 15 19V18.5Z");
    			add_location(path1, file$K, 2, 0, 258);
    			attr_dev(path2, "fill-rule", "evenodd");
    			attr_dev(path2, "clip-rule", "evenodd");
    			attr_dev(path2, "d", "M16.1438 4.62923C15.1728 3.01088 12.8274 3.01088 11.8563 4.62923L2.50564 20.2138C1.50585 21.8801 2.70613 24 4.64937 24H23.3508C25.294 24 26.4943 21.8801 25.4945 20.2137L16.1438 4.62923ZM13.5713 5.65822C13.7655 5.33455 14.2346 5.33455 14.4288 5.65822L23.7795 21.2427C23.9795 21.576 23.7394 22 23.3508 22H4.64937C4.26072 22 4.02067 21.576 4.22062 21.2427L13.5713 5.65822Z");
    			add_location(path2, file$K, 3, 0, 408);
    			set_svg_attributes(svg, svg_data);
    			add_location(svg, file$K, 0, 0, 0);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);
    			append_dev(svg, path0);
    			append_dev(svg, path1);
    			append_dev(svg, path2);
    		},
    		p: function update(ctx, [dirty]) {
    			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
    				{ width: "28" },
    				{ height: "28" },
    				{ viewBox: "0 0 28 28" },
    				{ xmlns: "http://www.w3.org/2000/svg" },
    				dirty & /*$$props*/ 1 && /*$$props*/ ctx[0]
    			]));
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$L.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$L($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Warning_triangle_svg', slots, []);

    	$$self.$$set = $$new_props => {
    		$$invalidate(0, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    	};

    	$$self.$inject_state = $$new_props => {
    		$$invalidate(0, $$props = assign(assign({}, $$props), $$new_props));
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$props = exclude_internal_props($$props);
    	return [$$props];
    }

    class Warning_triangle_svg extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$L, create_fragment$L, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Warning_triangle_svg",
    			options,
    			id: create_fragment$L.name
    		});
    	}
    }

    var warningTriangle_svg = /*#__PURE__*/Object.freeze({
        __proto__: null,
        'default': Warning_triangle_svg
    });

    var require$$74 = /*@__PURE__*/getAugmentedNamespace(warningTriangle_svg);

    /* dist/components/icon/graphics/ekstrabladet.svg.svelte generated by Svelte v3.42.1 */

    const file$J = "dist/components/icon/graphics/ekstrabladet.svg.svelte";

    function create_fragment$K(ctx) {
    	let svg;
    	let g;
    	let path0;
    	let polygon0;
    	let polygon1;
    	let path1;
    	let path2;
    	let path3;
    	let path4;
    	let path5;
    	let rect;
    	let path6;
    	let path7;
    	let path8;
    	let path9;

    	let svg_levels = [
    		{ version: "1.1" },
    		{ id: "logo" },
    		{ xmlns: "http://www.w3.org/2000/svg" },
    		{
    			"xmlns:xlink": "http://www.w3.org/1999/xlink"
    		},
    		{ x: "0px" },
    		{ y: "0px" },
    		{ viewBox: "0 0 100 88" },
    		{ "enable-background": "new 0 0 100 88" },
    		{ "xml:space": "preserve" },
    		/*$$props*/ ctx[0]
    	];

    	let svg_data = {};

    	for (let i = 0; i < svg_levels.length; i += 1) {
    		svg_data = assign(svg_data, svg_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");
    			g = svg_element("g");
    			path0 = svg_element("path");
    			polygon0 = svg_element("polygon");
    			polygon1 = svg_element("polygon");
    			path1 = svg_element("path");
    			path2 = svg_element("path");
    			path3 = svg_element("path");
    			path4 = svg_element("path");
    			path5 = svg_element("path");
    			rect = svg_element("rect");
    			path6 = svg_element("path");
    			path7 = svg_element("path");
    			path8 = svg_element("path");
    			path9 = svg_element("path");
    			attr_dev(path0, "fill", "#B30000");
    			attr_dev(path0, "d", "M0-0.9h100V78l-49.5,9.5L0,77.6V-0.9L0-0.9z");
    			add_location(path0, file$J, 4, 1, 223);
    			attr_dev(polygon0, "fill", "#FFFFFF");
    			attr_dev(polygon0, "points", "23,42.3 10.6,42.3 10.6,37.8 20.4,37.8 20.4,34.4 10.6,34.4 10.6,29.8 22.1,29.8 22.1,26.5\n\t\t6.1,26.5 6.1,46.1 23.1,46.1 \t\t");
    			add_location(polygon0, file$J, 6, 1, 295);
    			attr_dev(polygon1, "fill", "#FFFFFF");
    			attr_dev(polygon1, "points", "39.7,46.1 33.7,37.3 38.7,31.9 33.9,31.9 28.7,37.5 28.7,26.5 24.8,26.5 24.8,46.1 28.7,46.1\n\t\t28.7,42.2 31,39.9 34.8,46.1 \t\t");
    			add_location(polygon1, file$J, 8, 1, 462);
    			attr_dev(path1, "fill", "#FFFFFF");
    			attr_dev(path1, "d", "M46.3,43.9c-2.4,0-3.1-0.5-3.5-2h-3.7c0,3.1,2.5,4.9,6.7,4.9c4.7,0,7.5-1.8,7.5-4.8c0-2-1.6-3.7-3.6-4.1\n\t\tL44.1,37c-0.6-0.1-1.2-0.7-1.2-1.4c0-0.8,0.8-1.4,2.3-1.4c3,0,3.5,0.4,3.6,2h3.8v-0.5c0-2.4-2.8-4.5-6.5-4.5\n\t\tc-4.2,0-6.9,1.8-6.9,4.9c0,1.8,1.3,3.6,3,3.8l5.8,1c0.8,0.1,1.3,0.5,1.3,1.2C49.4,43.3,48.5,43.9,46.3,43.9z");
    			add_location(path1, file$J, 10, 1, 631);
    			attr_dev(path2, "fill", "#FFFFFF");
    			attr_dev(path2, "d", "M56.5,42.6c0,2.6,1.7,4.2,4.7,4.2c1.1,0,2-0.2,3.6-1v-1.9c-0.7,0.1-1.7,0.1-2,0.1c-1.6,0-2.2-0.6-2.2-1.8\n\t\tv-7.6h3.8V32h-3.8v-5.4h-2.9l-0.1,1.2C57,31.6,56.9,32,55.8,32h-2.5v2.6h3.4L56.5,42.6z");
    			add_location(path2, file$J, 13, 1, 984);
    			attr_dev(path3, "fill", "#FFFFFF");
    			attr_dev(path3, "d", "M70.8,39.9c0-3.1,1.7-4.8,4.7-4.8h1.7v-3.6H76c-2.3,0-4.1,1.1-5.3,3.2V32h-3.8v14.2h4V39.9z");
    			add_location(path3, file$J, 17, 1, 1213);
    			attr_dev(path4, "fill", "#FFFFFF");
    			attr_dev(path4, "d", "M91,41.5v-3.1v-2.8c0-1.7-0.2-2.3-1-2.8c-1.3-1.1-3.4-1.6-5.8-1.6c-4.3,0-6.3,1.4-6.6,4.8h3.7\n\t\tc0.2-1.6,1-2,3-2c2.2,0,2.9,0.6,2.9,2.3c0,0.7-0.2,1-1.1,1.1l-4.1,0.5c-4.1,0.5-5.6,1.8-5.6,4.6c0,2.6,2,4.2,5.4,4.2\n\t\tc2.5,0,4.1-0.8,5.5-2.9c0.8,2.2,1.8,2.9,3.7,2.9c1,0,1.8-0.2,3.4-1.1v-1.8c-0.8,0.1-1.4,0.1-1.7,0.1C91.5,43.9,91,43.2,91,41.5z\n\t\t M83,43.9c-1.4,0-2.3-0.7-2.3-1.8c0-1.6,0.7-1.9,5.3-2.8l1.2-0.2C87.2,42.3,85.9,43.9,83,43.9z");
    			add_location(path4, file$J, 19, 1, 1341);
    			attr_dev(path5, "fill", "#FFFFFF");
    			attr_dev(path5, "d", "M20.1,58.8c2.8-0.6,4.2-2.2,4.2-4.4c0-2.6-2.4-4.7-5.5-4.7H6.1v19.5h12.5c3.7,0,6.4-2.2,6.4-5.3\n\t\tC25,61.2,23.4,59.7,20.1,58.8z M10.6,52.8h5.9c2.3,0,3.1,0.6,3.1,2.3c0,1.8-0.8,2.4-3.1,2.4h-5.9V52.8z M16.5,65.7h-6v-5.3h6\n\t\tc2.4,0,3.5,0.8,3.5,2.6C20,65.1,19.1,65.7,16.5,65.7z");
    			add_location(path5, file$J, 25, 2, 1808);
    			attr_dev(rect, "x", "26.9");
    			attr_dev(rect, "y", "49.8");
    			attr_dev(rect, "fill", "#FFFFFF");
    			attr_dev(rect, "width", "4.1");
    			attr_dev(rect, "height", "19.5");
    			add_location(rect, file$J, 29, 1, 2117);
    			attr_dev(path6, "fill", "#FFFFFF");
    			attr_dev(path6, "d", "M47.4,64.9l-0.1-6.9c-0.1-2.3-2.5-3.6-6.6-3.6c-5.1,0-6.9,1.2-7.1,4.8h3.8c0.2-1.4,0.8-1.9,2.9-1.9\n\t\tc2.4,0,3.1,0.5,3.1,2.2c0,0.7-0.4,1-1.2,1.1c-0.2,0-1.9,0.1-4.1,0.5c-3.8,0.5-5.4,1.8-5.4,4.6c0,2.6,1.9,4.2,5.3,4.2\n\t\tc2.6,0,4.1-0.7,5.6-2.9c0.7,2,1.8,2.9,3.9,2.9c1,0,1.7-0.2,2.9-0.8v-2c-0.5,0.1-0.8,0.1-1.2,0.1C47.9,67.1,47.4,66.5,47.4,64.9z\n\t\t M39.4,67c-1.7,0-2.5-0.6-2.5-1.7c0-1.3,1-2,3.1-2.4c1.9-0.2,1.8-0.2,3.2-0.6C43.3,65.4,42,67,39.4,67z");
    			add_location(path6, file$J, 31, 1, 2196);
    			attr_dev(path7, "fill", "#FFFFFF");
    			attr_dev(path7, "d", "M61.7,57.3c-1.3-1.9-2.8-2.8-4.9-2.8c-3.8,0-6.7,3.2-6.7,7.6c0,4.8,2.5,7.8,6.6,7.8c2.3,0,3.4-0.6,5.2-2.8\n\t\tv2.3h3.9V49.8h-4V57.3z M57.6,67.1c-2.4,0-3.5-1.7-3.5-4.9c0-3,1.2-4.7,3.5-4.7c2.2,0,3.6,1.9,3.6,4.7\n\t\tC61.2,65.2,59.8,67.1,57.6,67.1z");
    			add_location(path7, file$J, 35, 1, 2673);
    			attr_dev(path8, "fill", "#FFFFFF");
    			attr_dev(path8, "d", "M75.5,54.6c-4.5,0-7.8,3.4-7.8,7.7c0,4.6,3.2,7.8,7.8,7.8c4.4,0,7.2-1.8,7.7-5.1h-3.8\n\t\tc-0.5,1.6-1.3,2-3.4,2c-2.8,0-4.1-1.3-4.1-4h11.3C83.2,58,80.2,54.6,75.5,54.6z M72,60.9c0.2-2.3,1.3-3.5,3.4-3.5\n\t\tc2.2,0,3.2,1.1,3.4,3.5H72z");
    			add_location(path8, file$J, 39, 1, 2950);
    			attr_dev(path9, "fill", "#FFFFFF");
    			attr_dev(path9, "d", "M90.3,65.7v-7.6h4v-2.9h-4v-5.3h-2.9L87.3,51c-0.7,4.2-0.6,4.2-1.7,4.2h-2.3v2.9h3l-0.1,6.9v0.5\n\t\tc0,3.2,1.4,4.7,4.6,4.7c1.6,0,2.4-0.1,3.7-0.8v-2.2c-0.8,0.1-1.7,0.1-2,0.1C90.9,67.2,90.3,66.8,90.3,65.7z");
    			add_location(path9, file$J, 43, 1, 3213);
    			add_location(g, file$J, 2, 0, 217);
    			set_svg_attributes(svg, svg_data);
    			add_location(svg, file$J, 0, 0, 0);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);
    			append_dev(svg, g);
    			append_dev(g, path0);
    			append_dev(g, polygon0);
    			append_dev(g, polygon1);
    			append_dev(g, path1);
    			append_dev(g, path2);
    			append_dev(g, path3);
    			append_dev(g, path4);
    			append_dev(g, path5);
    			append_dev(g, rect);
    			append_dev(g, path6);
    			append_dev(g, path7);
    			append_dev(g, path8);
    			append_dev(g, path9);
    		},
    		p: function update(ctx, [dirty]) {
    			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
    				{ version: "1.1" },
    				{ id: "logo" },
    				{ xmlns: "http://www.w3.org/2000/svg" },
    				{
    					"xmlns:xlink": "http://www.w3.org/1999/xlink"
    				},
    				{ x: "0px" },
    				{ y: "0px" },
    				{ viewBox: "0 0 100 88" },
    				{ "enable-background": "new 0 0 100 88" },
    				{ "xml:space": "preserve" },
    				dirty & /*$$props*/ 1 && /*$$props*/ ctx[0]
    			]));
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$K.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$K($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Ekstrabladet_svg', slots, []);

    	$$self.$$set = $$new_props => {
    		$$invalidate(0, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    	};

    	$$self.$inject_state = $$new_props => {
    		$$invalidate(0, $$props = assign(assign({}, $$props), $$new_props));
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$props = exclude_internal_props($$props);
    	return [$$props];
    }

    class Ekstrabladet_svg extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$K, create_fragment$K, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Ekstrabladet_svg",
    			options,
    			id: create_fragment$K.name
    		});
    	}
    }

    var ekstrabladet_svg = /*#__PURE__*/Object.freeze({
        __proto__: null,
        'default': Ekstrabladet_svg
    });

    var require$$75 = /*@__PURE__*/getAugmentedNamespace(ekstrabladet_svg);

    (function (exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.refresh = exports.questionmarkcircle = exports.questionmarkcirclesolid = exports.playcircle = exports.phone = exports.newspaper = exports.moneychecksolid = exports.menubars = exports.medielogin = exports.mappin = exports.mappinsolid = exports.mail = exports.lock = exports.linkedin = exports.lightning = exports.laptop = exports.infocircle = exports.infocirclesolid = exports.history = exports.heart = exports.heartsolid = exports.headset = exports.headphones = exports.grid = exports.gridsolid = exports.globe = exports.gallery = exports.figcaptionpin = exports.facebook = exports.externallink = exports.envelope = exports.entertainment = exports.edit = exports.ebplus = exports.ebpluscirclesolid = exports.creditcard = exports.creditcardsolid = exports.cog = exports.clock = exports.check = exports.checkcircle = exports.calendar = exports.bookmark = exports.at = exports.article = exports.arrow = exports.angleup = exports.angleright = exports.angleleft = exports.angledown = void 0;
    exports.ekstrabladet = exports.warningtriangle = exports.warningcircle = exports.warningcirclesolid = exports.video = exports.usercircle = exports.usercirclesolid = exports.twitter = exports.toggleon = exports.toggleoff = exports.times = exports.timescircle = exports.tags = exports.tagssolid = exports.tag = exports.tagsolid = exports.tablet = exports.star = exports.starsolid = exports.starhalf = exports.starhalfsolid = exports.sport = exports.speechbubblesolid = exports.smartphone = exports.search = exports.rsssolid = void 0;
    var angle_down_svg_1 = require$$0;
    Object.defineProperty(exports, "angledown", { enumerable: true, get: function () { return angle_down_svg_1.default; } });
    var angle_left_svg_1 = require$$1$1;
    Object.defineProperty(exports, "angleleft", { enumerable: true, get: function () { return angle_left_svg_1.default; } });
    var angle_right_svg_1 = require$$2$1;
    Object.defineProperty(exports, "angleright", { enumerable: true, get: function () { return angle_right_svg_1.default; } });
    var angle_up_svg_1 = require$$3$1;
    Object.defineProperty(exports, "angleup", { enumerable: true, get: function () { return angle_up_svg_1.default; } });
    var arrow_svg_1 = require$$4$1;
    Object.defineProperty(exports, "arrow", { enumerable: true, get: function () { return arrow_svg_1.default; } });
    var article_svg_1 = require$$5$1;
    Object.defineProperty(exports, "article", { enumerable: true, get: function () { return article_svg_1.default; } });
    var at_svg_1 = require$$6$1;
    Object.defineProperty(exports, "at", { enumerable: true, get: function () { return at_svg_1.default; } });
    var bookmark_svg_1 = require$$7$1;
    Object.defineProperty(exports, "bookmark", { enumerable: true, get: function () { return bookmark_svg_1.default; } });
    var calendar_svg_1 = require$$8$1;
    Object.defineProperty(exports, "calendar", { enumerable: true, get: function () { return calendar_svg_1.default; } });
    var check_circle_svg_1 = require$$9$1;
    Object.defineProperty(exports, "checkcircle", { enumerable: true, get: function () { return check_circle_svg_1.default; } });
    var check_svg_1 = require$$10$1;
    Object.defineProperty(exports, "check", { enumerable: true, get: function () { return check_svg_1.default; } });
    var clock_svg_1 = require$$11$1;
    Object.defineProperty(exports, "clock", { enumerable: true, get: function () { return clock_svg_1.default; } });
    var cog_svg_1 = require$$12$1;
    Object.defineProperty(exports, "cog", { enumerable: true, get: function () { return cog_svg_1.default; } });
    var creditcard_solid_svg_1 = require$$13$1;
    Object.defineProperty(exports, "creditcardsolid", { enumerable: true, get: function () { return creditcard_solid_svg_1.default; } });
    var creditcard_svg_1 = require$$14$1;
    Object.defineProperty(exports, "creditcard", { enumerable: true, get: function () { return creditcard_svg_1.default; } });
    var ebplus_circle_solid_svg_1 = require$$15$1;
    Object.defineProperty(exports, "ebpluscirclesolid", { enumerable: true, get: function () { return ebplus_circle_solid_svg_1.default; } });
    var ebplus_svg_1 = require$$16$1;
    Object.defineProperty(exports, "ebplus", { enumerable: true, get: function () { return ebplus_svg_1.default; } });
    var edit_svg_1 = require$$17$1;
    Object.defineProperty(exports, "edit", { enumerable: true, get: function () { return edit_svg_1.default; } });
    var entertainment_svg_1 = require$$18$1;
    Object.defineProperty(exports, "entertainment", { enumerable: true, get: function () { return entertainment_svg_1.default; } });
    var envelope_svg_1 = require$$19$1;
    Object.defineProperty(exports, "envelope", { enumerable: true, get: function () { return envelope_svg_1.default; } });
    var external_link_svg_1 = require$$20;
    Object.defineProperty(exports, "externallink", { enumerable: true, get: function () { return external_link_svg_1.default; } });
    var facebook_svg_1 = require$$21;
    Object.defineProperty(exports, "facebook", { enumerable: true, get: function () { return facebook_svg_1.default; } });
    var figcaption_pin_svg_1 = require$$22;
    Object.defineProperty(exports, "figcaptionpin", { enumerable: true, get: function () { return figcaption_pin_svg_1.default; } });
    var gallery_svg_1 = require$$23;
    Object.defineProperty(exports, "gallery", { enumerable: true, get: function () { return gallery_svg_1.default; } });
    var globe_svg_1 = require$$24;
    Object.defineProperty(exports, "globe", { enumerable: true, get: function () { return globe_svg_1.default; } });
    var grid_solid_svg_1 = require$$25;
    Object.defineProperty(exports, "gridsolid", { enumerable: true, get: function () { return grid_solid_svg_1.default; } });
    var grid_svg_1 = require$$26;
    Object.defineProperty(exports, "grid", { enumerable: true, get: function () { return grid_svg_1.default; } });
    var headphones_svg_1 = require$$27;
    Object.defineProperty(exports, "headphones", { enumerable: true, get: function () { return headphones_svg_1.default; } });
    var headset_svg_1 = require$$28;
    Object.defineProperty(exports, "headset", { enumerable: true, get: function () { return headset_svg_1.default; } });
    var heart_solid_svg_1 = require$$29;
    Object.defineProperty(exports, "heartsolid", { enumerable: true, get: function () { return heart_solid_svg_1.default; } });
    var heart_svg_1 = require$$30;
    Object.defineProperty(exports, "heart", { enumerable: true, get: function () { return heart_svg_1.default; } });
    var history_svg_1 = require$$31;
    Object.defineProperty(exports, "history", { enumerable: true, get: function () { return history_svg_1.default; } });
    var info_circle_solid_svg_1 = require$$32;
    Object.defineProperty(exports, "infocirclesolid", { enumerable: true, get: function () { return info_circle_solid_svg_1.default; } });
    var info_circle_svg_1 = require$$33;
    Object.defineProperty(exports, "infocircle", { enumerable: true, get: function () { return info_circle_svg_1.default; } });
    var laptop_svg_1 = require$$34;
    Object.defineProperty(exports, "laptop", { enumerable: true, get: function () { return laptop_svg_1.default; } });
    var lightning_svg_1 = require$$35;
    Object.defineProperty(exports, "lightning", { enumerable: true, get: function () { return lightning_svg_1.default; } });
    var linkedin_svg_1 = require$$36;
    Object.defineProperty(exports, "linkedin", { enumerable: true, get: function () { return linkedin_svg_1.default; } });
    var lock_svg_1 = require$$37;
    Object.defineProperty(exports, "lock", { enumerable: true, get: function () { return lock_svg_1.default; } });
    var mail_svg_1 = require$$38;
    Object.defineProperty(exports, "mail", { enumerable: true, get: function () { return mail_svg_1.default; } });
    var mappin_solid_svg_1 = require$$39;
    Object.defineProperty(exports, "mappinsolid", { enumerable: true, get: function () { return mappin_solid_svg_1.default; } });
    var mappin_svg_1 = require$$40;
    Object.defineProperty(exports, "mappin", { enumerable: true, get: function () { return mappin_svg_1.default; } });
    var medielogin_svg_1 = require$$41;
    Object.defineProperty(exports, "medielogin", { enumerable: true, get: function () { return medielogin_svg_1.default; } });
    var menu_bars_svg_1 = require$$42;
    Object.defineProperty(exports, "menubars", { enumerable: true, get: function () { return menu_bars_svg_1.default; } });
    var moneycheck_solid_svg_1 = require$$43;
    Object.defineProperty(exports, "moneychecksolid", { enumerable: true, get: function () { return moneycheck_solid_svg_1.default; } });
    var newspaper_svg_1 = require$$44;
    Object.defineProperty(exports, "newspaper", { enumerable: true, get: function () { return newspaper_svg_1.default; } });
    var phone_svg_1 = require$$45;
    Object.defineProperty(exports, "phone", { enumerable: true, get: function () { return phone_svg_1.default; } });
    var play_circle_svg_1 = require$$46;
    Object.defineProperty(exports, "playcircle", { enumerable: true, get: function () { return play_circle_svg_1.default; } });
    var questionmark_circle_solid_svg_1 = require$$47;
    Object.defineProperty(exports, "questionmarkcirclesolid", { enumerable: true, get: function () { return questionmark_circle_solid_svg_1.default; } });
    var questionmark_circle_svg_1 = require$$48;
    Object.defineProperty(exports, "questionmarkcircle", { enumerable: true, get: function () { return questionmark_circle_svg_1.default; } });
    var refresh_svg_1 = require$$49;
    Object.defineProperty(exports, "refresh", { enumerable: true, get: function () { return refresh_svg_1.default; } });
    var rss_solid_svg_1 = require$$50;
    Object.defineProperty(exports, "rsssolid", { enumerable: true, get: function () { return rss_solid_svg_1.default; } });
    var search_svg_1 = require$$51;
    Object.defineProperty(exports, "search", { enumerable: true, get: function () { return search_svg_1.default; } });
    var smartphone_svg_1 = require$$52;
    Object.defineProperty(exports, "smartphone", { enumerable: true, get: function () { return smartphone_svg_1.default; } });
    var speechbubble_solid_svg_1 = require$$53;
    Object.defineProperty(exports, "speechbubblesolid", { enumerable: true, get: function () { return speechbubble_solid_svg_1.default; } });
    var sport_svg_1 = require$$54;
    Object.defineProperty(exports, "sport", { enumerable: true, get: function () { return sport_svg_1.default; } });
    var star_half_solid_svg_1 = require$$55;
    Object.defineProperty(exports, "starhalfsolid", { enumerable: true, get: function () { return star_half_solid_svg_1.default; } });
    var star_half_svg_1 = require$$56;
    Object.defineProperty(exports, "starhalf", { enumerable: true, get: function () { return star_half_svg_1.default; } });
    var star_solid_svg_1 = require$$57;
    Object.defineProperty(exports, "starsolid", { enumerable: true, get: function () { return star_solid_svg_1.default; } });
    var star_svg_1 = require$$58;
    Object.defineProperty(exports, "star", { enumerable: true, get: function () { return star_svg_1.default; } });
    var tablet_svg_1 = require$$59;
    Object.defineProperty(exports, "tablet", { enumerable: true, get: function () { return tablet_svg_1.default; } });
    var tag_solid_svg_1 = require$$60;
    Object.defineProperty(exports, "tagsolid", { enumerable: true, get: function () { return tag_solid_svg_1.default; } });
    var tag_svg_1 = require$$61;
    Object.defineProperty(exports, "tag", { enumerable: true, get: function () { return tag_svg_1.default; } });
    var tags_solid_svg_1 = require$$62;
    Object.defineProperty(exports, "tagssolid", { enumerable: true, get: function () { return tags_solid_svg_1.default; } });
    var tags_svg_1 = require$$63;
    Object.defineProperty(exports, "tags", { enumerable: true, get: function () { return tags_svg_1.default; } });
    var times_circle_svg_1 = require$$64;
    Object.defineProperty(exports, "timescircle", { enumerable: true, get: function () { return times_circle_svg_1.default; } });
    var times_svg_1 = require$$65;
    Object.defineProperty(exports, "times", { enumerable: true, get: function () { return times_svg_1.default; } });
    var toggle_off_svg_1 = require$$66;
    Object.defineProperty(exports, "toggleoff", { enumerable: true, get: function () { return toggle_off_svg_1.default; } });
    var toggle_on_svg_1 = require$$67;
    Object.defineProperty(exports, "toggleon", { enumerable: true, get: function () { return toggle_on_svg_1.default; } });
    var twitter_svg_1 = require$$68;
    Object.defineProperty(exports, "twitter", { enumerable: true, get: function () { return twitter_svg_1.default; } });
    var user_circle_solid_svg_1 = require$$69;
    Object.defineProperty(exports, "usercirclesolid", { enumerable: true, get: function () { return user_circle_solid_svg_1.default; } });
    var user_circle_svg_1 = require$$70;
    Object.defineProperty(exports, "usercircle", { enumerable: true, get: function () { return user_circle_svg_1.default; } });
    var video_svg_1 = require$$71;
    Object.defineProperty(exports, "video", { enumerable: true, get: function () { return video_svg_1.default; } });
    var warning_circle_solid_svg_1 = require$$72;
    Object.defineProperty(exports, "warningcirclesolid", { enumerable: true, get: function () { return warning_circle_solid_svg_1.default; } });
    var warning_circle_svg_1 = require$$73;
    Object.defineProperty(exports, "warningcircle", { enumerable: true, get: function () { return warning_circle_svg_1.default; } });
    var warning_triangle_svg_1 = require$$74;
    Object.defineProperty(exports, "warningtriangle", { enumerable: true, get: function () { return warning_triangle_svg_1.default; } });
    var ekstrabladet_svg_1 = require$$75;
    Object.defineProperty(exports, "ekstrabladet", { enumerable: true, get: function () { return ekstrabladet_svg_1.default; } });
    }(IconComponents$1));

    var IconComponents = /*@__PURE__*/getDefaultExportFromCjs(IconComponents$1);

    var IconSVGS = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.assign(/*#__PURE__*/Object.create(null), IconComponents$1, {
        'default': IconComponents
    }));

    /* dist/components/icon/Icon.svelte generated by Svelte v3.42.1 */
    const file$I = "dist/components/icon/Icon.svelte";

    // (17:0) {:else}
    function create_else_block$h(ctx) {
    	let i;

    	const block = {
    		c: function create() {
    			i = element("i");
    			attr_dev(i, "class", /*className*/ ctx[1]);
    			attr_dev(i, "style", /*style*/ ctx[0]);
    			attr_dev(i, "aria-hidden", "true");
    			add_location(i, file$I, 17, 2, 605);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, i, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*className*/ 2) {
    				attr_dev(i, "class", /*className*/ ctx[1]);
    			}

    			if (dirty & /*style*/ 1) {
    				attr_dev(i, "style", /*style*/ ctx[0]);
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(i);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$h.name,
    		type: "else",
    		source: "(17:0) {:else}",
    		ctx
    	});

    	return block;
    }

    // (15:0) {#if type === 'svg'}
    function create_if_block$n(ctx) {
    	let switch_instance;
    	let switch_instance_anchor;
    	let current;
    	var switch_value = IconSVGS[/*name*/ ctx[2].replace('-', '')];

    	function switch_props(ctx) {
    		return {
    			props: {
    				style: /*style*/ ctx[0],
    				class: /*baseClass*/ ctx[4]
    			},
    			$$inline: true
    		};
    	}

    	if (switch_value) {
    		switch_instance = new switch_value(switch_props(ctx));
    		switch_instance.$on("click", /*click_handler*/ ctx[6]);
    	}

    	const block = {
    		c: function create() {
    			if (switch_instance) create_component(switch_instance.$$.fragment);
    			switch_instance_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			if (switch_instance) {
    				mount_component(switch_instance, target, anchor);
    			}

    			insert_dev(target, switch_instance_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const switch_instance_changes = {};
    			if (dirty & /*style*/ 1) switch_instance_changes.style = /*style*/ ctx[0];

    			if (switch_value !== (switch_value = IconSVGS[/*name*/ ctx[2].replace('-', '')])) {
    				if (switch_instance) {
    					group_outros();
    					const old_component = switch_instance;

    					transition_out(old_component.$$.fragment, 1, 0, () => {
    						destroy_component(old_component, 1);
    					});

    					check_outros();
    				}

    				if (switch_value) {
    					switch_instance = new switch_value(switch_props(ctx));
    					switch_instance.$on("click", /*click_handler*/ ctx[6]);
    					create_component(switch_instance.$$.fragment);
    					transition_in(switch_instance.$$.fragment, 1);
    					mount_component(switch_instance, switch_instance_anchor.parentNode, switch_instance_anchor);
    				} else {
    					switch_instance = null;
    				}
    			} else if (switch_value) {
    				switch_instance.$set(switch_instance_changes);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			if (switch_instance) transition_in(switch_instance.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			if (switch_instance) transition_out(switch_instance.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(switch_instance_anchor);
    			if (switch_instance) destroy_component(switch_instance, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$n.name,
    		type: "if",
    		source: "(15:0) {#if type === 'svg'}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$J(ctx) {
    	let current_block_type_index;
    	let if_block;
    	let if_block_anchor;
    	let current;
    	const if_block_creators = [create_if_block$n, create_else_block$h];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (/*type*/ ctx[3] === 'svg') return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type(ctx);
    	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

    	const block = {
    		c: function create() {
    			if_block.c();
    			if_block_anchor = empty();
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if_blocks[current_block_type_index].m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if_blocks[current_block_type_index].p(ctx, dirty);
    			} else {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block = if_blocks[current_block_type_index];

    				if (!if_block) {
    					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block.c();
    				} else {
    					if_block.p(ctx, dirty);
    				}

    				transition_in(if_block, 1);
    				if_block.m(if_block_anchor.parentNode, if_block_anchor);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if_blocks[current_block_type_index].d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$J.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }



    function instance$J($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Icon', slots, []);
    	let { className = undefined } = $$props;
    	let { name = undefined } = $$props;
    	let { type = 'svg' } = $$props;
    	let { width = 36 } = $$props;
    	let { style = undefined } = $$props;

    	const defaultStyle = type === 'svg'
    	? `width: ${width}px; height: ${width}px;`
    	: '';

    	let baseClass = className ? `icon-svg ${className}` : 'icon-svg';
    	const writable_props = ['className', 'name', 'type', 'width', 'style'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Icon> was created with unknown prop '${key}'`);
    	});

    	function click_handler(event) {
    		bubble.call(this, $$self, event);
    	}

    	$$self.$$set = $$props => {
    		if ('className' in $$props) $$invalidate(1, className = $$props.className);
    		if ('name' in $$props) $$invalidate(2, name = $$props.name);
    		if ('type' in $$props) $$invalidate(3, type = $$props.type);
    		if ('width' in $$props) $$invalidate(5, width = $$props.width);
    		if ('style' in $$props) $$invalidate(0, style = $$props.style);
    	};

    	$$self.$capture_state = () => ({
    		IconSVGS,
    		className,
    		name,
    		type,
    		width,
    		style,
    		defaultStyle,
    		baseClass
    	});

    	$$self.$inject_state = $$props => {
    		if ('className' in $$props) $$invalidate(1, className = $$props.className);
    		if ('name' in $$props) $$invalidate(2, name = $$props.name);
    		if ('type' in $$props) $$invalidate(3, type = $$props.type);
    		if ('width' in $$props) $$invalidate(5, width = $$props.width);
    		if ('style' in $$props) $$invalidate(0, style = $$props.style);
    		if ('baseClass' in $$props) $$invalidate(4, baseClass = $$props.baseClass);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*style*/ 1) {
    			$$invalidate(0, style = style ? `${defaultStyle} ${style}` : defaultStyle);
    		}
    	};

    	return [style, className, name, type, baseClass, width, click_handler];
    }

    class Icon extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$J, create_fragment$J, safe_not_equal, {
    			className: 1,
    			name: 2,
    			type: 3,
    			width: 5,
    			style: 0
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Icon",
    			options,
    			id: create_fragment$J.name
    		});
    	}

    	get className() {
    		throw new Error("<Icon>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set className(value) {
    		throw new Error("<Icon>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get name() {
    		throw new Error("<Icon>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set name(value) {
    		throw new Error("<Icon>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get type() {
    		throw new Error("<Icon>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set type(value) {
    		throw new Error("<Icon>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get width() {
    		throw new Error("<Icon>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set width(value) {
    		throw new Error("<Icon>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get style() {
    		throw new Error("<Icon>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set style(value) {
    		throw new Error("<Icon>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    var Icon$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        'default': Icon
    });

    /* dist/components/toggler/Toggler.svelte generated by Svelte v3.42.1 */
    const file$H = "dist/components/toggler/Toggler.svelte";
    const get_off_slot_changes_1 = dirty => ({});
    const get_off_slot_context_1 = ctx => ({});
    const get_on_slot_changes_1 = dirty => ({});
    const get_on_slot_context_1 = ctx => ({});
    const get_off_slot_changes = dirty => ({});
    const get_off_slot_context = ctx => ({});
    const get_on_slot_changes = dirty => ({});
    const get_on_slot_context = ctx => ({});

    // (33:0) {:else}
    function create_else_block$g(ctx) {
    	let button;
    	let current_block_type_index;
    	let if_block;
    	let current;
    	let mounted;
    	let dispose;
    	const if_block_creators = [create_if_block_1$c, create_else_block_1$9];
    	const if_blocks = [];

    	function select_block_type_1(ctx, dirty) {
    		if (/*itsOn*/ ctx[2]) return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type_1(ctx);
    	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

    	const block = {
    		c: function create() {
    			button = element("button");
    			if_block.c();
    			attr_dev(button, "class", /*baseClass*/ ctx[1]);
    			add_location(button, file$H, 33, 2, 1140);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, button, anchor);
    			if_blocks[current_block_type_index].m(button, null);
    			current = true;

    			if (!mounted) {
    				dispose = listen_dev(button, "click", /*toggle*/ ctx[4], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type_1(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if_blocks[current_block_type_index].p(ctx, dirty);
    			} else {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block = if_blocks[current_block_type_index];

    				if (!if_block) {
    					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block.c();
    				} else {
    					if_block.p(ctx, dirty);
    				}

    				transition_in(if_block, 1);
    				if_block.m(button, null);
    			}

    			if (!current || dirty & /*baseClass*/ 2) {
    				attr_dev(button, "class", /*baseClass*/ ctx[1]);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(button);
    			if_blocks[current_block_type_index].d();
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$g.name,
    		type: "else",
    		source: "(33:0) {:else}",
    		ctx
    	});

    	return block;
    }

    // (23:0) {#if isSwitch}
    function create_if_block$m(ctx) {
    	let div;
    	let button0;
    	let button0_class_value;
    	let t0;
    	let icon;
    	let updating_name;
    	let t1;
    	let button1;
    	let button1_class_value;
    	let current;
    	let mounted;
    	let dispose;
    	const on_slot_template = /*#slots*/ ctx[8].on;
    	const on_slot = create_slot(on_slot_template, ctx, /*$$scope*/ ctx[7], get_on_slot_context);

    	function icon_name_binding(value) {
    		/*icon_name_binding*/ ctx[10](value);
    	}

    	let icon_props = {
    		className: "margin-s--rl",
    		width: "20",
    		style: "cursor: pointer;"
    	};

    	if (/*name*/ ctx[3] !== void 0) {
    		icon_props.name = /*name*/ ctx[3];
    	}

    	icon = new Icon({ props: icon_props, $$inline: true });
    	binding_callbacks.push(() => bind(icon, 'name', icon_name_binding));
    	icon.$on("click", /*toggle*/ ctx[4]);
    	const off_slot_template = /*#slots*/ ctx[8].off;
    	const off_slot = create_slot(off_slot_template, ctx, /*$$scope*/ ctx[7], get_off_slot_context);

    	const block = {
    		c: function create() {
    			div = element("div");
    			button0 = element("button");
    			if (on_slot) on_slot.c();
    			t0 = space();
    			create_component(icon.$$.fragment);
    			t1 = space();
    			button1 = element("button");
    			if (off_slot) off_slot.c();
    			attr_dev(button0, "data-status", /*itsOn*/ ctx[2]);
    			attr_dev(button0, "class", button0_class_value = "toggle--switch " + /*baseClass*/ ctx[1]);
    			add_location(button0, file$H, 24, 4, 731);
    			attr_dev(button1, "data-status", /*itsOn*/ ctx[2]);
    			attr_dev(button1, "class", button1_class_value = "toggle--switch " + /*baseClass*/ ctx[1]);
    			add_location(button1, file$H, 28, 4, 978);
    			attr_dev(div, "class", "flex flex-align--center");
    			add_location(div, file$H, 23, 2, 689);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, button0);

    			if (on_slot) {
    				on_slot.m(button0, null);
    			}

    			append_dev(div, t0);
    			mount_component(icon, div, null);
    			append_dev(div, t1);
    			append_dev(div, button1);

    			if (off_slot) {
    				off_slot.m(button1, null);
    			}

    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(button0, "click", /*click_handler*/ ctx[9], false, false, false),
    					listen_dev(button1, "click", /*click_handler_1*/ ctx[11], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (on_slot) {
    				if (on_slot.p && (!current || dirty & /*$$scope*/ 128)) {
    					update_slot_base(
    						on_slot,
    						on_slot_template,
    						ctx,
    						/*$$scope*/ ctx[7],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[7])
    						: get_slot_changes(on_slot_template, /*$$scope*/ ctx[7], dirty, get_on_slot_changes),
    						get_on_slot_context
    					);
    				}
    			}

    			if (!current || dirty & /*itsOn*/ 4) {
    				attr_dev(button0, "data-status", /*itsOn*/ ctx[2]);
    			}

    			if (!current || dirty & /*baseClass*/ 2 && button0_class_value !== (button0_class_value = "toggle--switch " + /*baseClass*/ ctx[1])) {
    				attr_dev(button0, "class", button0_class_value);
    			}

    			const icon_changes = {};

    			if (!updating_name && dirty & /*name*/ 8) {
    				updating_name = true;
    				icon_changes.name = /*name*/ ctx[3];
    				add_flush_callback(() => updating_name = false);
    			}

    			icon.$set(icon_changes);

    			if (off_slot) {
    				if (off_slot.p && (!current || dirty & /*$$scope*/ 128)) {
    					update_slot_base(
    						off_slot,
    						off_slot_template,
    						ctx,
    						/*$$scope*/ ctx[7],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[7])
    						: get_slot_changes(off_slot_template, /*$$scope*/ ctx[7], dirty, get_off_slot_changes),
    						get_off_slot_context
    					);
    				}
    			}

    			if (!current || dirty & /*itsOn*/ 4) {
    				attr_dev(button1, "data-status", /*itsOn*/ ctx[2]);
    			}

    			if (!current || dirty & /*baseClass*/ 2 && button1_class_value !== (button1_class_value = "toggle--switch " + /*baseClass*/ ctx[1])) {
    				attr_dev(button1, "class", button1_class_value);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(on_slot, local);
    			transition_in(icon.$$.fragment, local);
    			transition_in(off_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(on_slot, local);
    			transition_out(icon.$$.fragment, local);
    			transition_out(off_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (on_slot) on_slot.d(detaching);
    			destroy_component(icon);
    			if (off_slot) off_slot.d(detaching);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$m.name,
    		type: "if",
    		source: "(23:0) {#if isSwitch}",
    		ctx
    	});

    	return block;
    }

    // (37:4) {:else}
    function create_else_block_1$9(ctx) {
    	let current;
    	const off_slot_template = /*#slots*/ ctx[8].off;
    	const off_slot = create_slot(off_slot_template, ctx, /*$$scope*/ ctx[7], get_off_slot_context_1);

    	const block = {
    		c: function create() {
    			if (off_slot) off_slot.c();
    		},
    		m: function mount(target, anchor) {
    			if (off_slot) {
    				off_slot.m(target, anchor);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (off_slot) {
    				if (off_slot.p && (!current || dirty & /*$$scope*/ 128)) {
    					update_slot_base(
    						off_slot,
    						off_slot_template,
    						ctx,
    						/*$$scope*/ ctx[7],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[7])
    						: get_slot_changes(off_slot_template, /*$$scope*/ ctx[7], dirty, get_off_slot_changes_1),
    						get_off_slot_context_1
    					);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(off_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(off_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (off_slot) off_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block_1$9.name,
    		type: "else",
    		source: "(37:4) {:else}",
    		ctx
    	});

    	return block;
    }

    // (35:4) {#if itsOn}
    function create_if_block_1$c(ctx) {
    	let current;
    	const on_slot_template = /*#slots*/ ctx[8].on;
    	const on_slot = create_slot(on_slot_template, ctx, /*$$scope*/ ctx[7], get_on_slot_context_1);

    	const block = {
    		c: function create() {
    			if (on_slot) on_slot.c();
    		},
    		m: function mount(target, anchor) {
    			if (on_slot) {
    				on_slot.m(target, anchor);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (on_slot) {
    				if (on_slot.p && (!current || dirty & /*$$scope*/ 128)) {
    					update_slot_base(
    						on_slot,
    						on_slot_template,
    						ctx,
    						/*$$scope*/ ctx[7],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[7])
    						: get_slot_changes(on_slot_template, /*$$scope*/ ctx[7], dirty, get_on_slot_changes_1),
    						get_on_slot_context_1
    					);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(on_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(on_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (on_slot) on_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$c.name,
    		type: "if",
    		source: "(35:4) {#if itsOn}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$I(ctx) {
    	let current_block_type_index;
    	let if_block;
    	let if_block_anchor;
    	let current;
    	const if_block_creators = [create_if_block$m, create_else_block$g];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (/*isSwitch*/ ctx[0]) return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type(ctx);
    	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

    	const block = {
    		c: function create() {
    			if_block.c();
    			if_block_anchor = empty();
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if_blocks[current_block_type_index].m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if_blocks[current_block_type_index].p(ctx, dirty);
    			} else {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block = if_blocks[current_block_type_index];

    				if (!if_block) {
    					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block.c();
    				} else {
    					if_block.p(ctx, dirty);
    				}

    				transition_in(if_block, 1);
    				if_block.m(if_block_anchor.parentNode, if_block_anchor);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if_blocks[current_block_type_index].d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$I.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$I($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Toggler', slots, ['on','off']);
    	let { className = undefined } = $$props;
    	let { defaultState = true } = $$props;
    	let { isSwitch = false } = $$props;
    	let baseClass = `toggle-button`;
    	if (className) baseClass = `${className} ${baseClass}`;

    	/**
     * Handle user click on toggle element
     */
    	let itsOn = defaultState;

    	let name = itsOn ? 'toggle-on' : 'toggle-off';
    	const dispatch = createEventDispatcher();

    	function toggle(evt, status) {
    		evt.preventDefault();
    		$$invalidate(2, itsOn = status !== null && status !== void 0 ? status : !itsOn);
    		$$invalidate(3, name = itsOn ? 'toggle-on' : 'toggle-off');
    		dispatch('toggle', itsOn);
    	}

    	const writable_props = ['className', 'defaultState', 'isSwitch'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Toggler> was created with unknown prop '${key}'`);
    	});

    	const click_handler = evt => toggle(evt, true);

    	function icon_name_binding(value) {
    		name = value;
    		$$invalidate(3, name);
    	}

    	const click_handler_1 = evt => toggle(evt, false);

    	$$self.$$set = $$props => {
    		if ('className' in $$props) $$invalidate(5, className = $$props.className);
    		if ('defaultState' in $$props) $$invalidate(6, defaultState = $$props.defaultState);
    		if ('isSwitch' in $$props) $$invalidate(0, isSwitch = $$props.isSwitch);
    		if ('$$scope' in $$props) $$invalidate(7, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		createEventDispatcher,
    		Icon,
    		className,
    		defaultState,
    		isSwitch,
    		baseClass,
    		itsOn,
    		name,
    		dispatch,
    		toggle
    	});

    	$$self.$inject_state = $$props => {
    		if ('className' in $$props) $$invalidate(5, className = $$props.className);
    		if ('defaultState' in $$props) $$invalidate(6, defaultState = $$props.defaultState);
    		if ('isSwitch' in $$props) $$invalidate(0, isSwitch = $$props.isSwitch);
    		if ('baseClass' in $$props) $$invalidate(1, baseClass = $$props.baseClass);
    		if ('itsOn' in $$props) $$invalidate(2, itsOn = $$props.itsOn);
    		if ('name' in $$props) $$invalidate(3, name = $$props.name);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		isSwitch,
    		baseClass,
    		itsOn,
    		name,
    		toggle,
    		className,
    		defaultState,
    		$$scope,
    		slots,
    		click_handler,
    		icon_name_binding,
    		click_handler_1
    	];
    }

    class Toggler extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$I, create_fragment$I, safe_not_equal, {
    			className: 5,
    			defaultState: 6,
    			isSwitch: 0
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Toggler",
    			options,
    			id: create_fragment$I.name
    		});
    	}

    	get className() {
    		throw new Error("<Toggler>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set className(value) {
    		throw new Error("<Toggler>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get defaultState() {
    		throw new Error("<Toggler>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set defaultState(value) {
    		throw new Error("<Toggler>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get isSwitch() {
    		throw new Error("<Toggler>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set isSwitch(value) {
    		throw new Error("<Toggler>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    var Toggler$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        'default': Toggler
    });

    /* dist/components/articlecard/ArticleCard.svelte generated by Svelte v3.42.1 */
    const file$G = "dist/components/articlecard/ArticleCard.svelte";
    const get_default_slot_changes_1$1 = dirty => ({});
    const get_default_slot_context_1$1 = ctx => ({ slot: "on" });
    const get_default_slot_changes$1 = dirty => ({});
    const get_default_slot_context$1 = ctx => ({ slot: "off" });

    // (60:4) {#if loading}
    function create_if_block_7(ctx) {
    	let div1;
    	let div0;

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			div0 = element("div");
    			attr_dev(div0, "class", "card-image bg--graa4");
    			attr_dev(div0, "style", /*loadingStyle*/ ctx[12]);
    			add_location(div0, file$G, 61, 8, 2029);
    			attr_dev(div1, "class", "card-media");
    			add_location(div1, file$G, 60, 6, 1996);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			append_dev(div1, div0);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*loadingStyle*/ 4096) {
    				attr_dev(div0, "style", /*loadingStyle*/ ctx[12]);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_7.name,
    		type: "if",
    		source: "(60:4) {#if loading}",
    		ctx
    	});

    	return block;
    }

    // (65:4) {#if media}
    function create_if_block_5$2(ctx) {
    	let div;
    	let t;
    	let img;
    	let img_src_value;
    	let img_height_value;
    	let img_width_value;
    	let div_class_value;
    	let current;
    	let if_block = /*update*/ ctx[4] && create_if_block_6(ctx);

    	const block = {
    		c: function create() {
    			div = element("div");
    			if (if_block) if_block.c();
    			t = space();
    			img = element("img");
    			attr_dev(img, "alt", /*title*/ ctx[0]);
    			attr_dev(img, "class", "card-image");
    			if (!src_url_equal(img.src, img_src_value = /*media*/ ctx[5].src)) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "height", img_height_value = /*media*/ ctx[5].height);
    			attr_dev(img, "width", img_width_value = /*media*/ ctx[5].width);
    			add_location(img, file$G, 80, 8, 2669);
    			attr_dev(div, "class", div_class_value = "card-media " + /*media*/ ctx[5].className);
    			add_location(div, file$G, 65, 6, 2132);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			if (if_block) if_block.m(div, null);
    			append_dev(div, t);
    			append_dev(div, img);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (/*update*/ ctx[4]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty & /*update*/ 16) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block_6(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(div, t);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}

    			if (!current || dirty & /*title*/ 1) {
    				attr_dev(img, "alt", /*title*/ ctx[0]);
    			}

    			if (!current || dirty & /*media*/ 32 && !src_url_equal(img.src, img_src_value = /*media*/ ctx[5].src)) {
    				attr_dev(img, "src", img_src_value);
    			}

    			if (!current || dirty & /*media*/ 32 && img_height_value !== (img_height_value = /*media*/ ctx[5].height)) {
    				attr_dev(img, "height", img_height_value);
    			}

    			if (!current || dirty & /*media*/ 32 && img_width_value !== (img_width_value = /*media*/ ctx[5].width)) {
    				attr_dev(img, "width", img_width_value);
    			}

    			if (!current || dirty & /*media*/ 32 && div_class_value !== (div_class_value = "card-media " + /*media*/ ctx[5].className)) {
    				attr_dev(div, "class", div_class_value);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (if_block) if_block.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_5$2.name,
    		type: "if",
    		source: "(65:4) {#if media}",
    		ctx
    	});

    	return block;
    }

    // (67:8) {#if update}
    function create_if_block_6(ctx) {
    	let badge;
    	let current;

    	badge = new Badge({
    			props: {
    				className: "margin-s position-absolute padding-none padding-s--r card--shadow bg--black fontsize-small",
    				style: "bottom: 5px;  left: 5px;",
    				$$slots: { default: [create_default_slot_1$q] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(badge.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(badge, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const badge_changes = {};

    			if (dirty & /*$$scope, colorClass*/ 67108868) {
    				badge_changes.$$scope = { dirty, ctx };
    			}

    			badge.$set(badge_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(badge.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(badge.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(badge, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_6.name,
    		type: "if",
    		source: "(67:8) {#if update}",
    		ctx
    	});

    	return block;
    }

    // (68:10) <Badge             className="margin-s position-absolute padding-none padding-s--r card--shadow bg--black fontsize-small"             style="bottom: 5px;  left: 5px;"           >
    function create_default_slot_1$q(ctx) {
    	let icon;
    	let t;
    	let current;

    	icon = new Icon({
    			props: {
    				name: "lightning",
    				className: "bg--white color--" + /*colorClass*/ ctx[2] + " border-radius-s padding-s margin-s--r",
    				style: "margin-left: -1px;",
    				width: "15"
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(icon.$$.fragment);
    			t = text("\n            UPDATE");
    		},
    		m: function mount(target, anchor) {
    			mount_component(icon, target, anchor);
    			insert_dev(target, t, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const icon_changes = {};
    			if (dirty & /*colorClass*/ 4) icon_changes.className = "bg--white color--" + /*colorClass*/ ctx[2] + " border-radius-s padding-s margin-s--r";
    			icon.$set(icon_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(icon.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(icon.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(icon, detaching);
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_1$q.name,
    		type: "slot",
    		source: "(68:10) <Badge             className=\\\"margin-s position-absolute padding-none padding-s--r card--shadow bg--black fontsize-small\\\"             style=\\\"bottom: 5px;  left: 5px;\\\"           >",
    		ctx
    	});

    	return block;
    }

    // (86:8) {#if premium}
    function create_if_block_4$5(ctx) {
    	let icon;
    	let current;

    	icon = new Icon({
    			props: { name: "ebpluscirclesolid", width: "20" },
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(icon.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(icon, target, anchor);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(icon.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(icon.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(icon, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_4$5.name,
    		type: "if",
    		source: "(86:8) {#if premium}",
    		ctx
    	});

    	return block;
    }

    // (91:8) {#if saved !== undefined}
    function create_if_block_3$6(ctx) {
    	let toggler;
    	let current;

    	toggler = new Toggler({
    			props: {
    				className: "card-save-toggle",
    				defaultState: /*saved*/ ctx[8],
    				$$slots: {
    					off: [create_off_slot$1],
    					on: [create_on_slot$1]
    				},
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	toggler.$on("toggle", /*toggleSave*/ ctx[17]);

    	const block = {
    		c: function create() {
    			create_component(toggler.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(toggler, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const toggler_changes = {};
    			if (dirty & /*saved*/ 256) toggler_changes.defaultState = /*saved*/ ctx[8];

    			if (dirty & /*$$scope, breaking, colorClass*/ 67108870) {
    				toggler_changes.$$scope = { dirty, ctx };
    			}

    			toggler.$set(toggler_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(toggler.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(toggler.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(toggler, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_3$6.name,
    		type: "if",
    		source: "(91:8) {#if saved !== undefined}",
    		ctx
    	});

    	return block;
    }

    // (93:28)                
    function fallback_block_1$1(ctx) {
    	let icon;
    	let current;

    	icon = new Icon({
    			props: {
    				type: "fa",
    				className: "fas fa-star",
    				style: "color: var(--fgcolor--" + (/*breaking*/ ctx[1] ? 'breaking' : /*colorClass*/ ctx[2]) + ");"
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(icon.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(icon, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const icon_changes = {};
    			if (dirty & /*breaking, colorClass*/ 6) icon_changes.style = "color: var(--fgcolor--" + (/*breaking*/ ctx[1] ? 'breaking' : /*colorClass*/ ctx[2]) + ");";
    			icon.$set(icon_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(icon.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(icon.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(icon, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: fallback_block_1$1.name,
    		type: "fallback",
    		source: "(93:28)                ",
    		ctx
    	});

    	return block;
    }

    // (93:12) 
    function create_on_slot$1(ctx) {
    	let current;
    	const default_slot_template = /*#slots*/ ctx[24].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[26], get_default_slot_context_1$1);
    	const default_slot_or_fallback = default_slot || fallback_block_1$1(ctx);

    	const block = {
    		c: function create() {
    			if (default_slot_or_fallback) default_slot_or_fallback.c();
    		},
    		m: function mount(target, anchor) {
    			if (default_slot_or_fallback) {
    				default_slot_or_fallback.m(target, anchor);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 67108864)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[26],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[26])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[26], dirty, get_default_slot_changes_1$1),
    						get_default_slot_context_1$1
    					);
    				}
    			} else {
    				if (default_slot_or_fallback && default_slot_or_fallback.p && (!current || dirty & /*breaking, colorClass*/ 6)) {
    					default_slot_or_fallback.p(ctx, !current ? -1 : dirty);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot_or_fallback, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot_or_fallback, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (default_slot_or_fallback) default_slot_or_fallback.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_on_slot$1.name,
    		type: "slot",
    		source: "(93:12) ",
    		ctx
    	});

    	return block;
    }

    // (100:29)                
    function fallback_block$1(ctx) {
    	let icon;
    	let current;

    	icon = new Icon({
    			props: {
    				type: "fa",
    				className: "far fa-star",
    				style: "color: var(--fgcolor--" + (/*breaking*/ ctx[1] ? 'breaking' : /*colorClass*/ ctx[2]) + ");"
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(icon.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(icon, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const icon_changes = {};
    			if (dirty & /*breaking, colorClass*/ 6) icon_changes.style = "color: var(--fgcolor--" + (/*breaking*/ ctx[1] ? 'breaking' : /*colorClass*/ ctx[2]) + ");";
    			icon.$set(icon_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(icon.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(icon.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(icon, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: fallback_block$1.name,
    		type: "fallback",
    		source: "(100:29)                ",
    		ctx
    	});

    	return block;
    }

    // (100:12) 
    function create_off_slot$1(ctx) {
    	let current;
    	const default_slot_template = /*#slots*/ ctx[24].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[26], get_default_slot_context$1);
    	const default_slot_or_fallback = default_slot || fallback_block$1(ctx);

    	const block = {
    		c: function create() {
    			if (default_slot_or_fallback) default_slot_or_fallback.c();
    		},
    		m: function mount(target, anchor) {
    			if (default_slot_or_fallback) {
    				default_slot_or_fallback.m(target, anchor);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 67108864)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[26],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[26])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[26], dirty, get_default_slot_changes$1),
    						get_default_slot_context$1
    					);
    				}
    			} else {
    				if (default_slot_or_fallback && default_slot_or_fallback.p && (!current || dirty & /*breaking, colorClass*/ 6)) {
    					default_slot_or_fallback.p(ctx, !current ? -1 : dirty);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot_or_fallback, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot_or_fallback, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (default_slot_or_fallback) default_slot_or_fallback.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_off_slot$1.name,
    		type: "slot",
    		source: "(100:12) ",
    		ctx
    	});

    	return block;
    }

    // (109:8) {#if section || published}
    function create_if_block$l(ctx) {
    	let div;
    	let t;
    	let current;
    	let if_block0 = /*section*/ ctx[9] && create_if_block_2$8(ctx);
    	let if_block1 = /*published*/ ctx[7] && create_if_block_1$b(ctx);

    	const block = {
    		c: function create() {
    			div = element("div");
    			if (if_block0) if_block0.c();
    			t = space();
    			if (if_block1) if_block1.c();
    			attr_dev(div, "class", "card-meta flex fontsize-xxsmall padding-s--b");
    			add_location(div, file$G, 109, 10, 3700);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			if (if_block0) if_block0.m(div, null);
    			append_dev(div, t);
    			if (if_block1) if_block1.m(div, null);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (/*section*/ ctx[9]) {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);

    					if (dirty & /*section*/ 512) {
    						transition_in(if_block0, 1);
    					}
    				} else {
    					if_block0 = create_if_block_2$8(ctx);
    					if_block0.c();
    					transition_in(if_block0, 1);
    					if_block0.m(div, t);
    				}
    			} else if (if_block0) {
    				group_outros();

    				transition_out(if_block0, 1, 1, () => {
    					if_block0 = null;
    				});

    				check_outros();
    			}

    			if (/*published*/ ctx[7]) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);

    					if (dirty & /*published*/ 128) {
    						transition_in(if_block1, 1);
    					}
    				} else {
    					if_block1 = create_if_block_1$b(ctx);
    					if_block1.c();
    					transition_in(if_block1, 1);
    					if_block1.m(div, null);
    				}
    			} else if (if_block1) {
    				group_outros();

    				transition_out(if_block1, 1, 1, () => {
    					if_block1 = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block0);
    			transition_in(if_block1);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block0);
    			transition_out(if_block1);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (if_block0) if_block0.d();
    			if (if_block1) if_block1.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$l.name,
    		type: "if",
    		source: "(109:8) {#if section || published}",
    		ctx
    	});

    	return block;
    }

    // (111:12) {#if section}
    function create_if_block_2$8(ctx) {
    	let div;
    	let span1;
    	let icon;
    	let t0;
    	let span0;
    	let t1;
    	let current;

    	icon = new Icon({
    			props: { name: "tag", width: "16" },
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			div = element("div");
    			span1 = element("span");
    			create_component(icon.$$.fragment);
    			t0 = space();
    			span0 = element("span");
    			t1 = text(/*section*/ ctx[9]);
    			attr_dev(span0, "class", "padding-s--l");
    			add_location(span0, file$G, 114, 18, 3971);
    			attr_dev(span1, "class", "flex flex-justify--center flex-align--center");
    			add_location(span1, file$G, 112, 16, 3844);
    			attr_dev(div, "class", "card-meta-item");
    			add_location(div, file$G, 111, 14, 3799);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, span1);
    			mount_component(icon, span1, null);
    			append_dev(span1, t0);
    			append_dev(span1, span0);
    			append_dev(span0, t1);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (!current || dirty & /*section*/ 512) set_data_dev(t1, /*section*/ ctx[9]);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(icon.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(icon.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_component(icon);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2$8.name,
    		type: "if",
    		source: "(111:12) {#if section}",
    		ctx
    	});

    	return block;
    }

    // (119:12) {#if published}
    function create_if_block_1$b(ctx) {
    	let div;
    	let icon;
    	let t0;
    	let span;
    	let t1_value = parseDate_1(/*published*/ ctx[7]) + "";
    	let t1;
    	let current;

    	icon = new Icon({
    			props: { name: "clock", width: "14" },
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			div = element("div");
    			create_component(icon.$$.fragment);
    			t0 = space();
    			span = element("span");
    			t1 = text(t1_value);
    			attr_dev(span, "class", "padding-s--l");
    			add_location(span, file$G, 121, 16, 4214);
    			attr_dev(div, "class", "card-meta-item");
    			add_location(div, file$G, 119, 14, 4120);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			mount_component(icon, div, null);
    			append_dev(div, t0);
    			append_dev(div, span);
    			append_dev(span, t1);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if ((!current || dirty & /*published*/ 128) && t1_value !== (t1_value = parseDate_1(/*published*/ ctx[7]) + "")) set_data_dev(t1, t1_value);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(icon.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(icon.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_component(icon);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$b.name,
    		type: "if",
    		source: "(119:12) {#if published}",
    		ctx
    	});

    	return block;
    }

    // (58:0) <Card {url} className={cssClass} style={styleProp} data-breaking={breaking} on:click>
    function create_default_slot$s(ctx) {
    	let div3;
    	let t0;
    	let t1;
    	let div2;
    	let div0;
    	let t2;
    	let div1;
    	let t3;
    	let t4;
    	let h2;
    	let t5;
    	let h2_class_value;
    	let current;
    	let if_block0 = /*loading*/ ctx[3] && create_if_block_7(ctx);
    	let if_block1 = /*media*/ ctx[5] && create_if_block_5$2(ctx);
    	let if_block2 = /*premium*/ ctx[6] && create_if_block_4$5(ctx);
    	let if_block3 = /*saved*/ ctx[8] !== undefined && create_if_block_3$6(ctx);
    	let if_block4 = (/*section*/ ctx[9] || /*published*/ ctx[7]) && create_if_block$l(ctx);

    	const block = {
    		c: function create() {
    			div3 = element("div");
    			if (if_block0) if_block0.c();
    			t0 = space();
    			if (if_block1) if_block1.c();
    			t1 = space();
    			div2 = element("div");
    			div0 = element("div");
    			if (if_block2) if_block2.c();
    			t2 = space();
    			div1 = element("div");
    			if (if_block3) if_block3.c();
    			t3 = space();
    			if (if_block4) if_block4.c();
    			t4 = space();
    			h2 = element("h2");
    			t5 = text(/*title*/ ctx[0]);
    			attr_dev(div0, "class", "card-icon flex flex-justify--end");
    			add_location(div0, file$G, 84, 6, 2834);
    			attr_dev(h2, "class", h2_class_value = "card-title " + (/*truncateTitle*/ ctx[10] ? 'card-title--truncated' : ''));
    			attr_dev(h2, "style", /*titleStyle*/ ctx[16]);
    			add_location(h2, file$G, 126, 8, 4349);
    			attr_dev(div1, "class", "card-content");
    			add_location(div1, file$G, 89, 6, 2991);
    			attr_dev(div2, "class", "card-content-wrapper");
    			add_location(div2, file$G, 83, 4, 2793);
    			attr_dev(div3, "class", /*innerClass*/ ctx[13]);
    			add_location(div3, file$G, 58, 2, 1947);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div3, anchor);
    			if (if_block0) if_block0.m(div3, null);
    			append_dev(div3, t0);
    			if (if_block1) if_block1.m(div3, null);
    			append_dev(div3, t1);
    			append_dev(div3, div2);
    			append_dev(div2, div0);
    			if (if_block2) if_block2.m(div0, null);
    			append_dev(div2, t2);
    			append_dev(div2, div1);
    			if (if_block3) if_block3.m(div1, null);
    			append_dev(div1, t3);
    			if (if_block4) if_block4.m(div1, null);
    			append_dev(div1, t4);
    			append_dev(div1, h2);
    			append_dev(h2, t5);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (/*loading*/ ctx[3]) {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);
    				} else {
    					if_block0 = create_if_block_7(ctx);
    					if_block0.c();
    					if_block0.m(div3, t0);
    				}
    			} else if (if_block0) {
    				if_block0.d(1);
    				if_block0 = null;
    			}

    			if (/*media*/ ctx[5]) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);

    					if (dirty & /*media*/ 32) {
    						transition_in(if_block1, 1);
    					}
    				} else {
    					if_block1 = create_if_block_5$2(ctx);
    					if_block1.c();
    					transition_in(if_block1, 1);
    					if_block1.m(div3, t1);
    				}
    			} else if (if_block1) {
    				group_outros();

    				transition_out(if_block1, 1, 1, () => {
    					if_block1 = null;
    				});

    				check_outros();
    			}

    			if (/*premium*/ ctx[6]) {
    				if (if_block2) {
    					if (dirty & /*premium*/ 64) {
    						transition_in(if_block2, 1);
    					}
    				} else {
    					if_block2 = create_if_block_4$5(ctx);
    					if_block2.c();
    					transition_in(if_block2, 1);
    					if_block2.m(div0, null);
    				}
    			} else if (if_block2) {
    				group_outros();

    				transition_out(if_block2, 1, 1, () => {
    					if_block2 = null;
    				});

    				check_outros();
    			}

    			if (/*saved*/ ctx[8] !== undefined) {
    				if (if_block3) {
    					if_block3.p(ctx, dirty);

    					if (dirty & /*saved*/ 256) {
    						transition_in(if_block3, 1);
    					}
    				} else {
    					if_block3 = create_if_block_3$6(ctx);
    					if_block3.c();
    					transition_in(if_block3, 1);
    					if_block3.m(div1, t3);
    				}
    			} else if (if_block3) {
    				group_outros();

    				transition_out(if_block3, 1, 1, () => {
    					if_block3 = null;
    				});

    				check_outros();
    			}

    			if (/*section*/ ctx[9] || /*published*/ ctx[7]) {
    				if (if_block4) {
    					if_block4.p(ctx, dirty);

    					if (dirty & /*section, published*/ 640) {
    						transition_in(if_block4, 1);
    					}
    				} else {
    					if_block4 = create_if_block$l(ctx);
    					if_block4.c();
    					transition_in(if_block4, 1);
    					if_block4.m(div1, t4);
    				}
    			} else if (if_block4) {
    				group_outros();

    				transition_out(if_block4, 1, 1, () => {
    					if_block4 = null;
    				});

    				check_outros();
    			}

    			if (!current || dirty & /*title*/ 1) set_data_dev(t5, /*title*/ ctx[0]);

    			if (!current || dirty & /*truncateTitle*/ 1024 && h2_class_value !== (h2_class_value = "card-title " + (/*truncateTitle*/ ctx[10] ? 'card-title--truncated' : ''))) {
    				attr_dev(h2, "class", h2_class_value);
    			}

    			if (!current || dirty & /*innerClass*/ 8192) {
    				attr_dev(div3, "class", /*innerClass*/ ctx[13]);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block1);
    			transition_in(if_block2);
    			transition_in(if_block3);
    			transition_in(if_block4);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block1);
    			transition_out(if_block2);
    			transition_out(if_block3);
    			transition_out(if_block4);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div3);
    			if (if_block0) if_block0.d();
    			if (if_block1) if_block1.d();
    			if (if_block2) if_block2.d();
    			if (if_block3) if_block3.d();
    			if (if_block4) if_block4.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$s.name,
    		type: "slot",
    		source: "(58:0) <Card {url} className={cssClass} style={styleProp} data-breaking={breaking} on:click>",
    		ctx
    	});

    	return block;
    }

    function create_fragment$H(ctx) {
    	let card;
    	let current;

    	card = new Card({
    			props: {
    				url: /*url*/ ctx[11],
    				className: /*cssClass*/ ctx[14],
    				style: /*styleProp*/ ctx[15],
    				"data-breaking": /*breaking*/ ctx[1],
    				$$slots: { default: [create_default_slot$s] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	card.$on("click", /*click_handler*/ ctx[25]);

    	const block = {
    		c: function create() {
    			create_component(card.$$.fragment);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			mount_component(card, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const card_changes = {};
    			if (dirty & /*url*/ 2048) card_changes.url = /*url*/ ctx[11];
    			if (dirty & /*cssClass*/ 16384) card_changes.className = /*cssClass*/ ctx[14];
    			if (dirty & /*styleProp*/ 32768) card_changes.style = /*styleProp*/ ctx[15];
    			if (dirty & /*breaking*/ 2) card_changes["data-breaking"] = /*breaking*/ ctx[1];

    			if (dirty & /*$$scope, innerClass, truncateTitle, title, published, section, saved, breaking, colorClass, premium, media, update, loadingStyle, loading*/ 67123199) {
    				card_changes.$$scope = { dirty, ctx };
    			}

    			card.$set(card_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(card.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(card.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(card, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$H.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$H($$self, $$props, $$invalidate) {
    	let styleProp;
    	let cssClass;
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('ArticleCard', slots, ['default']);
    	
    	let { title } = $$props;
    	let { breaking = false } = $$props;
    	let { cardType = undefined } = $$props;
    	let { className = undefined } = $$props;
    	let { colorClass = undefined } = $$props;
    	let { id = undefined } = $$props;
    	let { loading = false } = $$props;
    	let { update = false } = $$props;
    	let { maxLines = undefined } = $$props;
    	let { media = undefined } = $$props;
    	let { premium = false } = $$props;
    	let { published = undefined } = $$props;
    	let { saved = undefined } = $$props;
    	let { section = undefined } = $$props;
    	let { style = '' } = $$props;
    	let { truncateTitle = false } = $$props;
    	let { url = undefined } = $$props;
    	const dispatch = createEventDispatcher();
    	let baseClass = `card-mode card-mode--article`;
    	let loadingStyle = 'padding-top: 56.25%; width: 100%;';

    	if (loading) {
    		baseClass = `${baseClass} animation-fogwave`;
    		title = 'Loading';

    		switch (cardType) {
    			case 'small-media':
    			case 'small-media--reverse':
    				loadingStyle = 'width: 200px;height: 115px;';
    				break;
    		}
    	}

    	let innerClass = 'card-inner';

    	switch (cardType) {
    		case 'small-media':
    			innerClass = `${innerClass} card--small-media`;
    			break;
    		case 'small-media--reverse':
    			innerClass = `${innerClass} card--small-media card--small-media--reverse`;
    			break;
    	}

    	const titleStyle = maxLines ? `--max-lines: ${maxLines};` : undefined;

    	function toggleSave(evt) {
    		dispatch('save', { id, save: evt.detail });
    	}

    	const writable_props = [
    		'title',
    		'breaking',
    		'cardType',
    		'className',
    		'colorClass',
    		'id',
    		'loading',
    		'update',
    		'maxLines',
    		'media',
    		'premium',
    		'published',
    		'saved',
    		'section',
    		'style',
    		'truncateTitle',
    		'url'
    	];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<ArticleCard> was created with unknown prop '${key}'`);
    	});

    	function click_handler(event) {
    		bubble.call(this, $$self, event);
    	}

    	$$self.$$set = $$props => {
    		if ('title' in $$props) $$invalidate(0, title = $$props.title);
    		if ('breaking' in $$props) $$invalidate(1, breaking = $$props.breaking);
    		if ('cardType' in $$props) $$invalidate(18, cardType = $$props.cardType);
    		if ('className' in $$props) $$invalidate(19, className = $$props.className);
    		if ('colorClass' in $$props) $$invalidate(2, colorClass = $$props.colorClass);
    		if ('id' in $$props) $$invalidate(20, id = $$props.id);
    		if ('loading' in $$props) $$invalidate(3, loading = $$props.loading);
    		if ('update' in $$props) $$invalidate(4, update = $$props.update);
    		if ('maxLines' in $$props) $$invalidate(21, maxLines = $$props.maxLines);
    		if ('media' in $$props) $$invalidate(5, media = $$props.media);
    		if ('premium' in $$props) $$invalidate(6, premium = $$props.premium);
    		if ('published' in $$props) $$invalidate(7, published = $$props.published);
    		if ('saved' in $$props) $$invalidate(8, saved = $$props.saved);
    		if ('section' in $$props) $$invalidate(9, section = $$props.section);
    		if ('style' in $$props) $$invalidate(22, style = $$props.style);
    		if ('truncateTitle' in $$props) $$invalidate(10, truncateTitle = $$props.truncateTitle);
    		if ('url' in $$props) $$invalidate(11, url = $$props.url);
    		if ('$$scope' in $$props) $$invalidate(26, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		createEventDispatcher,
    		parseDate: parseDate_1,
    		Badge,
    		Card,
    		Icon,
    		Toggler,
    		title,
    		breaking,
    		cardType,
    		className,
    		colorClass,
    		id,
    		loading,
    		update,
    		maxLines,
    		media,
    		premium,
    		published,
    		saved,
    		section,
    		style,
    		truncateTitle,
    		url,
    		dispatch,
    		baseClass,
    		loadingStyle,
    		innerClass,
    		titleStyle,
    		toggleSave,
    		cssClass,
    		styleProp
    	});

    	$$self.$inject_state = $$props => {
    		if ('title' in $$props) $$invalidate(0, title = $$props.title);
    		if ('breaking' in $$props) $$invalidate(1, breaking = $$props.breaking);
    		if ('cardType' in $$props) $$invalidate(18, cardType = $$props.cardType);
    		if ('className' in $$props) $$invalidate(19, className = $$props.className);
    		if ('colorClass' in $$props) $$invalidate(2, colorClass = $$props.colorClass);
    		if ('id' in $$props) $$invalidate(20, id = $$props.id);
    		if ('loading' in $$props) $$invalidate(3, loading = $$props.loading);
    		if ('update' in $$props) $$invalidate(4, update = $$props.update);
    		if ('maxLines' in $$props) $$invalidate(21, maxLines = $$props.maxLines);
    		if ('media' in $$props) $$invalidate(5, media = $$props.media);
    		if ('premium' in $$props) $$invalidate(6, premium = $$props.premium);
    		if ('published' in $$props) $$invalidate(7, published = $$props.published);
    		if ('saved' in $$props) $$invalidate(8, saved = $$props.saved);
    		if ('section' in $$props) $$invalidate(9, section = $$props.section);
    		if ('style' in $$props) $$invalidate(22, style = $$props.style);
    		if ('truncateTitle' in $$props) $$invalidate(10, truncateTitle = $$props.truncateTitle);
    		if ('url' in $$props) $$invalidate(11, url = $$props.url);
    		if ('baseClass' in $$props) $$invalidate(23, baseClass = $$props.baseClass);
    		if ('loadingStyle' in $$props) $$invalidate(12, loadingStyle = $$props.loadingStyle);
    		if ('innerClass' in $$props) $$invalidate(13, innerClass = $$props.innerClass);
    		if ('cssClass' in $$props) $$invalidate(14, cssClass = $$props.cssClass);
    		if ('styleProp' in $$props) $$invalidate(15, styleProp = $$props.styleProp);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*style, colorClass*/ 4194308) {
    			$$invalidate(15, styleProp = `${style}; --color--list-hover: var(--color--${colorClass}); --fgcolor--list-hover: var(--fgcolor--${colorClass});`);
    		}

    		if ($$self.$$.dirty & /*className, baseClass*/ 8912896) {
    			$$invalidate(14, cssClass = className ? `${className} ${baseClass}` : baseClass);
    		}
    	};

    	return [
    		title,
    		breaking,
    		colorClass,
    		loading,
    		update,
    		media,
    		premium,
    		published,
    		saved,
    		section,
    		truncateTitle,
    		url,
    		loadingStyle,
    		innerClass,
    		cssClass,
    		styleProp,
    		titleStyle,
    		toggleSave,
    		cardType,
    		className,
    		id,
    		maxLines,
    		style,
    		baseClass,
    		slots,
    		click_handler,
    		$$scope
    	];
    }

    class ArticleCard extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$H, create_fragment$H, safe_not_equal, {
    			title: 0,
    			breaking: 1,
    			cardType: 18,
    			className: 19,
    			colorClass: 2,
    			id: 20,
    			loading: 3,
    			update: 4,
    			maxLines: 21,
    			media: 5,
    			premium: 6,
    			published: 7,
    			saved: 8,
    			section: 9,
    			style: 22,
    			truncateTitle: 10,
    			url: 11
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "ArticleCard",
    			options,
    			id: create_fragment$H.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*title*/ ctx[0] === undefined && !('title' in props)) {
    			console.warn("<ArticleCard> was created without expected prop 'title'");
    		}
    	}

    	get title() {
    		throw new Error("<ArticleCard>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set title(value) {
    		throw new Error("<ArticleCard>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get breaking() {
    		throw new Error("<ArticleCard>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set breaking(value) {
    		throw new Error("<ArticleCard>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get cardType() {
    		throw new Error("<ArticleCard>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set cardType(value) {
    		throw new Error("<ArticleCard>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get className() {
    		throw new Error("<ArticleCard>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set className(value) {
    		throw new Error("<ArticleCard>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get colorClass() {
    		throw new Error("<ArticleCard>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set colorClass(value) {
    		throw new Error("<ArticleCard>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get id() {
    		throw new Error("<ArticleCard>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set id(value) {
    		throw new Error("<ArticleCard>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get loading() {
    		throw new Error("<ArticleCard>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set loading(value) {
    		throw new Error("<ArticleCard>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get update() {
    		throw new Error("<ArticleCard>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set update(value) {
    		throw new Error("<ArticleCard>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get maxLines() {
    		throw new Error("<ArticleCard>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set maxLines(value) {
    		throw new Error("<ArticleCard>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get media() {
    		throw new Error("<ArticleCard>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set media(value) {
    		throw new Error("<ArticleCard>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get premium() {
    		throw new Error("<ArticleCard>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set premium(value) {
    		throw new Error("<ArticleCard>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get published() {
    		throw new Error("<ArticleCard>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set published(value) {
    		throw new Error("<ArticleCard>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get saved() {
    		throw new Error("<ArticleCard>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set saved(value) {
    		throw new Error("<ArticleCard>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get section() {
    		throw new Error("<ArticleCard>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set section(value) {
    		throw new Error("<ArticleCard>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get style() {
    		throw new Error("<ArticleCard>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set style(value) {
    		throw new Error("<ArticleCard>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get truncateTitle() {
    		throw new Error("<ArticleCard>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set truncateTitle(value) {
    		throw new Error("<ArticleCard>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get url() {
    		throw new Error("<ArticleCard>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set url(value) {
    		throw new Error("<ArticleCard>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    var ArticleCard$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        'default': ArticleCard
    });

    var require$$1 = /*@__PURE__*/getAugmentedNamespace(ArticleCard$1);

    var require$$2 = /*@__PURE__*/getAugmentedNamespace(Badge$1);

    const greendarkBGClass = 'bg--greendark';
    const greenBGClass = 'bg--green';
    const bluedarkBGClass = 'bg--bluedark';
    const Background = {
      bordeaux: { background: '#8a0c36', color: '#fff' },
      reddark: { background: '#900', color: '#fff' },
      red: { background: '#bd1118', color: '#fff' },
      pink: { background: '#b31e61', color: '#fff' },
      rose: { background: '#dc7095', color: '#fff' },
      orangedark: { background: '#e96c0d', color: '#fff' },
      orange: { background: '#e5ad02', color: '#fff' },
      yellow: { background: '#fae500', color: '#fff' },
      yellowlight: { background: '#ff0', color: '#000' },
      sand: { background: '#cec4a6', color: '#fff' },
      greendark: { background: '#2f7820', color: '#fff' },
      green: { background: '#029e5d', color: '#fff' },
      greenlight: { background: '#93b923', color: '#fff' },
      lime: { background: '#cbfe33', color: '#000' },
      purpledark: { background: '#51208c', color: '#fff' },
      bluenavy: { background: '#1a237e', color: '#fff' },
      bluedark: { background: '#1058c2', color: '#fff' },
      blue: { background: '#31769b', color: '#fff' },
      bluelight: { background: '#4fa8df', color: '#fff' },
      cyan: { background: '#00b6d2', color: '#fff' },
      sea: { background: '#84a8c4', color: '#fff' },
      black: { background: '#000', color: '#fff' },
      graa1: { background: '#3c3c3c', color: '#fff' },
      graa2: { background: '#484848', color: '#fff' },
      graa3: { background: '#999', color: '#fff' },
      graa4: { background: '#c8c8c8', color: '#000' },
      graa5: { background: '#ddd', color: '#000' },
      graa6: { background: '#e5e5e5', color: '#000' },
      graa7: { background: '#efefef', color: '#000' },
      white: { background: '#fff', color: '#000' },
      pastelred: { background: '#db5040', color: '#fff' },
      pasteldarkred: { background: '#954839', color: '#fff' },
      pastellightred: { background: '#d67e9b', color: '#fff' },
      pastelgreen: { background: '#9fc29c', color: '#fff' },
      pasteldarkgreen: { background: '#91a34f', color: '#fff' },
      pastelyellow: { background: '#d4c564', color: '#fff' },
      eb: { background: '#bd1118', color: '#fff' },
      eb2: { background: '#900', color: '#fff' },
      breaking: { background: '#ff0', color: '#000' },
      bruger: { background: '#4fa8df', color: '#fff' },
      live: { background: '#000', color: '#fff' },
      native: { background: '#cec4a6', color: '#fff' },
      native2: { background: '#84a8c4', color: '#fff' },
      facebook: { background: '#31769b', color: '#fff' },
      twitter: { background: '#4fa8df', color: '#fff' },
      flash: { background: '#e5ad02', color: '#fff' },
      forbrug: { background: '#00b6d2', color: '#fff' },
      leder: { background: '#1a237e', color: '#fff' },
      livescore: { background: '#029e5d', color: '#fff' },
      livescore2: { background: '#cbfe33', color: '#000' },
      nyheder: { background: '#1058c2', color: '#fff' },
      nyheder2: { background: '#000', color: '#fff' },
      sexsamliv: { background: '#b31e61', color: '#fff' },
      sexsamliv2: { background: '#dc7095', color: '#fff' },
      skolefodbold: { background: '#93b923', color: '#fff' },
      sport: { background: '#029e5d', color: '#fff' },
      tv: { background: '#bd1118', color: '#fff' },
      underholdning: { background: '#51208c', color: '#fff' },
    };

    /* dist/components/buttongroup/ButtonGroup.svelte generated by Svelte v3.42.1 */
    const file$F = "dist/components/buttongroup/ButtonGroup.svelte";

    function create_fragment$G(ctx) {
    	let div;
    	let current;
    	const default_slot_template = /*#slots*/ ctx[10].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[9], null);

    	const block = {
    		c: function create() {
    			div = element("div");
    			if (default_slot) default_slot.c();
    			attr_dev(div, "class", /*cssClass*/ ctx[1]);
    			attr_dev(div, "style", /*style*/ ctx[0]);
    			add_location(div, file$F, 55, 0, 1964);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			if (default_slot) {
    				default_slot.m(div, null);
    			}

    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 512)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[9],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[9])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[9], dirty, null),
    						null
    					);
    				}
    			}

    			if (!current || dirty & /*cssClass*/ 2) {
    				attr_dev(div, "class", /*cssClass*/ ctx[1]);
    			}

    			if (!current || dirty & /*style*/ 1) {
    				attr_dev(div, "style", /*style*/ ctx[0]);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (default_slot) default_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$G.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    const BUTTONS$1 = {};

    function instance$G($$self, $$props, $$invalidate) {
    	let cssClass;
    	let style;
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('ButtonGroup', slots, ['default']);
    	
    	const selectedId = writable(0);
    	const buttons = [];
    	const selectedButton = writable(null);

    	selectedId.subscribe(i => {
    		selectedButton.set(buttons[i]);
    	});

    	setContext(BUTTONS$1, {
    		registerTab: button => {
    			buttons.push(button);
    			selectedButton.update(current => current || button);

    			onDestroy(() => {
    				const i = buttons.indexOf(button);
    				buttons.splice(i, 1);

    				selectedButton.update(current => current === button
    				? buttons[i] || buttons[buttons.length - 1]
    				: current);
    			});
    		},
    		selectButton: button => {
    			const i = buttons.indexOf(button);
    			selectedId.set(i);
    		},
    		selectedButton
    	});

    	let { className = undefined } = $$props;
    	let { type = undefined } = $$props;
    	let { color = undefined } = $$props;
    	let { colorHover = undefined } = $$props;
    	let { solid = false } = $$props;
    	let baseClass = `buttongroup`;

    	if (solid) {
    		baseClass = `${baseClass} buttongroup--solid`;
    	}

    	if (type) {
    		baseClass = `${baseClass} buttongroup--${type}`;
    	}

    	const { background: colorBackground, color: colorForeground } = Background[color]
    	? Background[color]
    	: Background['bruger'];

    	/**
     * If hovercolor is not specified, use color and utimately fall back to "Bruger"
     */
    	colorHover = color && !colorHover ? color : colorHover;

    	const { background: hoverColor, color: hoverColorForeground } = Background[colorHover]
    	? Background[colorHover]
    	: Background['bruger'];

    	const writable_props = ['className', 'type', 'color', 'colorHover', 'solid'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<ButtonGroup> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('className' in $$props) $$invalidate(4, className = $$props.className);
    		if ('type' in $$props) $$invalidate(5, type = $$props.type);
    		if ('color' in $$props) $$invalidate(6, color = $$props.color);
    		if ('colorHover' in $$props) $$invalidate(2, colorHover = $$props.colorHover);
    		if ('solid' in $$props) $$invalidate(7, solid = $$props.solid);
    		if ('$$scope' in $$props) $$invalidate(9, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		BUTTONS: BUTTONS$1,
    		setContext,
    		onDestroy,
    		writable,
    		Background,
    		selectedId,
    		buttons,
    		selectedButton,
    		className,
    		type,
    		color,
    		colorHover,
    		solid,
    		baseClass,
    		colorBackground,
    		colorForeground,
    		hoverColor,
    		hoverColorForeground,
    		style,
    		cssClass
    	});

    	$$self.$inject_state = $$props => {
    		if ('className' in $$props) $$invalidate(4, className = $$props.className);
    		if ('type' in $$props) $$invalidate(5, type = $$props.type);
    		if ('color' in $$props) $$invalidate(6, color = $$props.color);
    		if ('colorHover' in $$props) $$invalidate(2, colorHover = $$props.colorHover);
    		if ('solid' in $$props) $$invalidate(7, solid = $$props.solid);
    		if ('baseClass' in $$props) $$invalidate(8, baseClass = $$props.baseClass);
    		if ('style' in $$props) $$invalidate(0, style = $$props.style);
    		if ('cssClass' in $$props) $$invalidate(1, cssClass = $$props.cssClass);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*className, baseClass*/ 272) {
    			$$invalidate(1, cssClass = className ? `${className} ${baseClass}` : baseClass);
    		}
    	};

    	$$invalidate(0, style = `--buttongroup-color: ${colorBackground}; --buttongroup-fgcolor: ${colorForeground}; --buttongroup-color--hover: ${hoverColor}; --buttongroup-fgcolor--hover: ${hoverColorForeground};`);

    	return [
    		style,
    		cssClass,
    		colorHover,
    		selectedId,
    		className,
    		type,
    		color,
    		solid,
    		baseClass,
    		$$scope,
    		slots
    	];
    }

    class ButtonGroup extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$G, create_fragment$G, safe_not_equal, {
    			selectedId: 3,
    			className: 4,
    			type: 5,
    			color: 6,
    			colorHover: 2,
    			solid: 7
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "ButtonGroup",
    			options,
    			id: create_fragment$G.name
    		});
    	}

    	get selectedId() {
    		return this.$$.ctx[3];
    	}

    	set selectedId(value) {
    		throw new Error("<ButtonGroup>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get className() {
    		throw new Error("<ButtonGroup>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set className(value) {
    		throw new Error("<ButtonGroup>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get type() {
    		throw new Error("<ButtonGroup>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set type(value) {
    		throw new Error("<ButtonGroup>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get color() {
    		throw new Error("<ButtonGroup>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set color(value) {
    		throw new Error("<ButtonGroup>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get colorHover() {
    		throw new Error("<ButtonGroup>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set colorHover(value) {
    		throw new Error("<ButtonGroup>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get solid() {
    		throw new Error("<ButtonGroup>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set solid(value) {
    		throw new Error("<ButtonGroup>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    var ButtonGroup$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        'default': ButtonGroup,
        BUTTONS: BUTTONS$1
    });

    /* dist/components/button/Button.svelte generated by Svelte v3.42.1 */
    const file$E = "dist/components/button/Button.svelte";

    // (48:0) {:else}
    function create_else_block$f(ctx) {
    	let button_1;
    	let button_1_data_selected_value;
    	let current;
    	let mounted;
    	let dispose;
    	const default_slot_template = /*#slots*/ ctx[14].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[13], null);

    	const block = {
    		c: function create() {
    			button_1 = element("button");
    			if (default_slot) default_slot.c();
    			attr_dev(button_1, "class", /*cssClass*/ ctx[4]);
    			button_1.disabled = /*disabled*/ ctx[0];
    			attr_dev(button_1, "data-selected", button_1_data_selected_value = /*$selectedButton*/ ctx[5] === /*button*/ ctx[6]);
    			add_location(button_1, file$E, 48, 2, 1400);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, button_1, anchor);

    			if (default_slot) {
    				default_slot.m(button_1, null);
    			}

    			/*button_1_binding*/ ctx[18](button_1);
    			current = true;

    			if (!mounted) {
    				dispose = listen_dev(button_1, "click", /*click_handler_1*/ ctx[16], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 8192)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[13],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[13])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[13], dirty, null),
    						null
    					);
    				}
    			}

    			if (!current || dirty & /*cssClass*/ 16) {
    				attr_dev(button_1, "class", /*cssClass*/ ctx[4]);
    			}

    			if (!current || dirty & /*disabled*/ 1) {
    				prop_dev(button_1, "disabled", /*disabled*/ ctx[0]);
    			}

    			if (!current || dirty & /*$selectedButton*/ 32 && button_1_data_selected_value !== (button_1_data_selected_value = /*$selectedButton*/ ctx[5] === /*button*/ ctx[6])) {
    				attr_dev(button_1, "data-selected", button_1_data_selected_value);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(button_1);
    			if (default_slot) default_slot.d(detaching);
    			/*button_1_binding*/ ctx[18](null);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$f.name,
    		type: "else",
    		source: "(48:0) {:else}",
    		ctx
    	});

    	return block;
    }

    // (44:0) {#if href}
    function create_if_block$k(ctx) {
    	let a;
    	let a_data_selected_value;
    	let current;
    	let mounted;
    	let dispose;
    	const default_slot_template = /*#slots*/ ctx[14].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[13], null);

    	const block = {
    		c: function create() {
    			a = element("a");
    			if (default_slot) default_slot.c();
    			attr_dev(a, "href", /*href*/ ctx[1]);
    			attr_dev(a, "class", /*cssClass*/ ctx[4]);
    			attr_dev(a, "disabled", /*disabled*/ ctx[0]);
    			attr_dev(a, "data-selected", a_data_selected_value = /*$selectedButton*/ ctx[5] === /*button*/ ctx[6]);
    			add_location(a, file$E, 44, 2, 1258);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, a, anchor);

    			if (default_slot) {
    				default_slot.m(a, null);
    			}

    			/*a_binding*/ ctx[17](a);
    			current = true;

    			if (!mounted) {
    				dispose = listen_dev(a, "click", /*click_handler*/ ctx[15], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 8192)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[13],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[13])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[13], dirty, null),
    						null
    					);
    				}
    			}

    			if (!current || dirty & /*href*/ 2) {
    				attr_dev(a, "href", /*href*/ ctx[1]);
    			}

    			if (!current || dirty & /*cssClass*/ 16) {
    				attr_dev(a, "class", /*cssClass*/ ctx[4]);
    			}

    			if (!current || dirty & /*disabled*/ 1) {
    				attr_dev(a, "disabled", /*disabled*/ ctx[0]);
    			}

    			if (!current || dirty & /*$selectedButton*/ 32 && a_data_selected_value !== (a_data_selected_value = /*$selectedButton*/ ctx[5] === /*button*/ ctx[6])) {
    				attr_dev(a, "data-selected", a_data_selected_value);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(a);
    			if (default_slot) default_slot.d(detaching);
    			/*a_binding*/ ctx[17](null);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$k.name,
    		type: "if",
    		source: "(44:0) {#if href}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$F(ctx) {
    	let current_block_type_index;
    	let if_block;
    	let if_block_anchor;
    	let current;
    	const if_block_creators = [create_if_block$k, create_else_block$f];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (/*href*/ ctx[1]) return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type(ctx);
    	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

    	const block = {
    		c: function create() {
    			if_block.c();
    			if_block_anchor = empty();
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if_blocks[current_block_type_index].m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if_blocks[current_block_type_index].p(ctx, dirty);
    			} else {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block = if_blocks[current_block_type_index];

    				if (!if_block) {
    					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block.c();
    				} else {
    					if_block.p(ctx, dirty);
    				}

    				transition_in(if_block, 1);
    				if_block.m(if_block_anchor.parentNode, if_block_anchor);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if_blocks[current_block_type_index].d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$F.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$F($$self, $$props, $$invalidate) {
    	let cssClass;

    	let $selectedButton,
    		$$unsubscribe_selectedButton = noop,
    		$$subscribe_selectedButton = () => ($$unsubscribe_selectedButton(), $$unsubscribe_selectedButton = subscribe(selectedButton, $$value => $$invalidate(5, $selectedButton = $$value)), selectedButton);

    	$$self.$$.on_destroy.push(() => $$unsubscribe_selectedButton());
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Button', slots, ['default']);
    	let { className = undefined } = $$props;
    	let { disabled = false } = $$props;
    	let { extension = undefined } = $$props;
    	let { href = undefined } = $$props;
    	let { size = undefined } = $$props;
    	let { type = undefined } = $$props;
    	let baseClass = 'button';

    	if (extension) {
    		let extSplit = extension.split(' ');

    		extSplit.forEach(extClass => {
    			$$invalidate(12, baseClass = `${baseClass} button--${extClass}`);
    		});
    	}

    	if (size) {
    		baseClass = `${baseClass} button--${size}`;
    	}

    	if (type) {
    		baseClass = `${baseClass} button--${type}`;
    	}

    	let buttonEl;
    	let { initial = false } = $$props;
    	let registerTab, selectButton, selectedButton;
    	const button = {};
    	const contextButtons = getContext(BUTTONS$1);

    	if (contextButtons) {
    		registerTab = contextButtons.registerTab;
    		selectButton = contextButtons.selectButton;
    		$$subscribe_selectedButton(selectedButton = contextButtons.selectedButton);
    		registerTab(button);

    		if (initial) {
    			selectButton(button);
    		}
    	}

    	onMount(() => {
    		if (typeof selectButton !== 'undefined') {
    			buttonEl.addEventListener('click', () => selectButton(button));
    		}
    	});

    	const writable_props = ['className', 'disabled', 'extension', 'href', 'size', 'type', 'initial'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Button> was created with unknown prop '${key}'`);
    	});

    	function click_handler(event) {
    		bubble.call(this, $$self, event);
    	}

    	function click_handler_1(event) {
    		bubble.call(this, $$self, event);
    	}

    	function a_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			buttonEl = $$value;
    			$$invalidate(2, buttonEl);
    		});
    	}

    	function button_1_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			buttonEl = $$value;
    			$$invalidate(2, buttonEl);
    		});
    	}

    	$$self.$$set = $$props => {
    		if ('className' in $$props) $$invalidate(7, className = $$props.className);
    		if ('disabled' in $$props) $$invalidate(0, disabled = $$props.disabled);
    		if ('extension' in $$props) $$invalidate(8, extension = $$props.extension);
    		if ('href' in $$props) $$invalidate(1, href = $$props.href);
    		if ('size' in $$props) $$invalidate(9, size = $$props.size);
    		if ('type' in $$props) $$invalidate(10, type = $$props.type);
    		if ('initial' in $$props) $$invalidate(11, initial = $$props.initial);
    		if ('$$scope' in $$props) $$invalidate(13, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		className,
    		disabled,
    		extension,
    		href,
    		size,
    		type,
    		baseClass,
    		buttonEl,
    		getContext,
    		onMount,
    		BUTTONS: BUTTONS$1,
    		initial,
    		registerTab,
    		selectButton,
    		selectedButton,
    		button,
    		contextButtons,
    		cssClass,
    		$selectedButton
    	});

    	$$self.$inject_state = $$props => {
    		if ('className' in $$props) $$invalidate(7, className = $$props.className);
    		if ('disabled' in $$props) $$invalidate(0, disabled = $$props.disabled);
    		if ('extension' in $$props) $$invalidate(8, extension = $$props.extension);
    		if ('href' in $$props) $$invalidate(1, href = $$props.href);
    		if ('size' in $$props) $$invalidate(9, size = $$props.size);
    		if ('type' in $$props) $$invalidate(10, type = $$props.type);
    		if ('baseClass' in $$props) $$invalidate(12, baseClass = $$props.baseClass);
    		if ('buttonEl' in $$props) $$invalidate(2, buttonEl = $$props.buttonEl);
    		if ('initial' in $$props) $$invalidate(11, initial = $$props.initial);
    		if ('registerTab' in $$props) registerTab = $$props.registerTab;
    		if ('selectButton' in $$props) selectButton = $$props.selectButton;
    		if ('selectedButton' in $$props) $$subscribe_selectedButton($$invalidate(3, selectedButton = $$props.selectedButton));
    		if ('cssClass' in $$props) $$invalidate(4, cssClass = $$props.cssClass);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*className, baseClass*/ 4224) {
    			$$invalidate(4, cssClass = className ? `${baseClass} ${className}` : baseClass);
    		}
    	};

    	return [
    		disabled,
    		href,
    		buttonEl,
    		selectedButton,
    		cssClass,
    		$selectedButton,
    		button,
    		className,
    		extension,
    		size,
    		type,
    		initial,
    		baseClass,
    		$$scope,
    		slots,
    		click_handler,
    		click_handler_1,
    		a_binding,
    		button_1_binding
    	];
    }

    class Button extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$F, create_fragment$F, safe_not_equal, {
    			className: 7,
    			disabled: 0,
    			extension: 8,
    			href: 1,
    			size: 9,
    			type: 10,
    			initial: 11
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Button",
    			options,
    			id: create_fragment$F.name
    		});
    	}

    	get className() {
    		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set className(value) {
    		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get disabled() {
    		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set disabled(value) {
    		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get extension() {
    		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set extension(value) {
    		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get href() {
    		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set href(value) {
    		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get size() {
    		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set size(value) {
    		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get type() {
    		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set type(value) {
    		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get initial() {
    		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set initial(value) {
    		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    var Button$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        'default': Button
    });

    var require$$3 = /*@__PURE__*/getAugmentedNamespace(Button$1);

    var require$$4 = /*@__PURE__*/getAugmentedNamespace(ButtonGroup$1);

    var require$$5 = /*@__PURE__*/getAugmentedNamespace(Card$1);

    /* dist/components/form-elements/Checkbox.svelte generated by Svelte v3.42.1 */

    const file$D = "dist/components/form-elements/Checkbox.svelte";

    // (19:4) {:else}
    function create_else_block$e(ctx) {
    	let i0;
    	let t;
    	let i1;

    	const block = {
    		c: function create() {
    			i0 = element("i");
    			t = space();
    			i1 = element("i");
    			attr_dev(i0, "class", "far fa-check-circle form-checkbox-toggle--on");
    			attr_dev(i0, "aria-hidden", "true");
    			add_location(i0, file$D, 19, 6, 667);
    			attr_dev(i1, "class", "far fa-circle form-checkbox-toggle--off");
    			attr_dev(i1, "aria-hidden", "true");
    			add_location(i1, file$D, 20, 6, 751);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, i0, anchor);
    			insert_dev(target, t, anchor);
    			insert_dev(target, i1, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(i0);
    			if (detaching) detach_dev(t);
    			if (detaching) detach_dev(i1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$e.name,
    		type: "else",
    		source: "(19:4) {:else}",
    		ctx
    	});

    	return block;
    }

    // (16:4) {#if inputtype === 'checkbox'}
    function create_if_block$j(ctx) {
    	let i0;
    	let t;
    	let i1;

    	const block = {
    		c: function create() {
    			i0 = element("i");
    			t = space();
    			i1 = element("i");
    			attr_dev(i0, "class", "far fa-check-square form-checkbox-toggle--on");
    			attr_dev(i0, "aria-hidden", "true");
    			add_location(i0, file$D, 16, 6, 492);
    			attr_dev(i1, "class", "far fa-square form-checkbox-toggle--off");
    			attr_dev(i1, "aria-hidden", "true");
    			add_location(i1, file$D, 17, 6, 576);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, i0, anchor);
    			insert_dev(target, t, anchor);
    			insert_dev(target, i1, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(i0);
    			if (detaching) detach_dev(t);
    			if (detaching) detach_dev(i1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$j.name,
    		type: "if",
    		source: "(16:4) {#if inputtype === 'checkbox'}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$E(ctx) {
    	let label_1;
    	let input;
    	let t0;
    	let span;
    	let t1;
    	let t2;

    	function select_block_type(ctx, dirty) {
    		if (/*inputtype*/ ctx[3] === 'checkbox') return create_if_block$j;
    		return create_else_block$e;
    	}

    	let current_block_type = select_block_type(ctx);
    	let if_block = current_block_type(ctx);

    	const block = {
    		c: function create() {
    			label_1 = element("label");
    			input = element("input");
    			t0 = space();
    			span = element("span");
    			t1 = text(/*label*/ ctx[2]);
    			t2 = space();
    			if_block.c();
    			attr_dev(input, "type", /*inputtype*/ ctx[3]);
    			attr_dev(input, "class", /*baseClass*/ ctx[5]);
    			attr_dev(input, "name", /*fieldName*/ ctx[0]);
    			attr_dev(input, "group", /*group*/ ctx[1]);
    			input.value = /*value*/ ctx[4];
    			add_location(input, file$D, 12, 2, 333);
    			attr_dev(span, "class", "form-label");
    			add_location(span, file$D, 13, 2, 413);
    			add_location(label_1, file$D, 11, 0, 323);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, label_1, anchor);
    			append_dev(label_1, input);
    			append_dev(label_1, t0);
    			append_dev(label_1, span);
    			append_dev(span, t1);
    			append_dev(span, t2);
    			if_block.m(span, null);
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*inputtype*/ 8) {
    				attr_dev(input, "type", /*inputtype*/ ctx[3]);
    			}

    			if (dirty & /*baseClass*/ 32) {
    				attr_dev(input, "class", /*baseClass*/ ctx[5]);
    			}

    			if (dirty & /*fieldName*/ 1) {
    				attr_dev(input, "name", /*fieldName*/ ctx[0]);
    			}

    			if (dirty & /*group*/ 2) {
    				attr_dev(input, "group", /*group*/ ctx[1]);
    			}

    			if (dirty & /*value*/ 16 && input.value !== /*value*/ ctx[4]) {
    				prop_dev(input, "value", /*value*/ ctx[4]);
    			}

    			if (dirty & /*label*/ 4) set_data_dev(t1, /*label*/ ctx[2]);

    			if (current_block_type !== (current_block_type = select_block_type(ctx))) {
    				if_block.d(1);
    				if_block = current_block_type(ctx);

    				if (if_block) {
    					if_block.c();
    					if_block.m(span, null);
    				}
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(label_1);
    			if_block.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$E.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$E($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Checkbox', slots, []);
    	let { fieldName = undefined } = $$props;
    	let { group = undefined } = $$props;
    	let { label = undefined } = $$props;
    	let { inputtype = 'checkbox' } = $$props;
    	let { value } = $$props;
    	let { className = undefined } = $$props;
    	let baseClass = `form-checkbox form-checkbox--icon`;
    	if (className) baseClass = `${className} ${baseClass}`;
    	const writable_props = ['fieldName', 'group', 'label', 'inputtype', 'value', 'className'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Checkbox> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('fieldName' in $$props) $$invalidate(0, fieldName = $$props.fieldName);
    		if ('group' in $$props) $$invalidate(1, group = $$props.group);
    		if ('label' in $$props) $$invalidate(2, label = $$props.label);
    		if ('inputtype' in $$props) $$invalidate(3, inputtype = $$props.inputtype);
    		if ('value' in $$props) $$invalidate(4, value = $$props.value);
    		if ('className' in $$props) $$invalidate(6, className = $$props.className);
    	};

    	$$self.$capture_state = () => ({
    		fieldName,
    		group,
    		label,
    		inputtype,
    		value,
    		className,
    		baseClass
    	});

    	$$self.$inject_state = $$props => {
    		if ('fieldName' in $$props) $$invalidate(0, fieldName = $$props.fieldName);
    		if ('group' in $$props) $$invalidate(1, group = $$props.group);
    		if ('label' in $$props) $$invalidate(2, label = $$props.label);
    		if ('inputtype' in $$props) $$invalidate(3, inputtype = $$props.inputtype);
    		if ('value' in $$props) $$invalidate(4, value = $$props.value);
    		if ('className' in $$props) $$invalidate(6, className = $$props.className);
    		if ('baseClass' in $$props) $$invalidate(5, baseClass = $$props.baseClass);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [fieldName, group, label, inputtype, value, baseClass, className];
    }

    class Checkbox extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$E, create_fragment$E, safe_not_equal, {
    			fieldName: 0,
    			group: 1,
    			label: 2,
    			inputtype: 3,
    			value: 4,
    			className: 6
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Checkbox",
    			options,
    			id: create_fragment$E.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*value*/ ctx[4] === undefined && !('value' in props)) {
    			console.warn("<Checkbox> was created without expected prop 'value'");
    		}
    	}

    	get fieldName() {
    		throw new Error("<Checkbox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set fieldName(value) {
    		throw new Error("<Checkbox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get group() {
    		throw new Error("<Checkbox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set group(value) {
    		throw new Error("<Checkbox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get label() {
    		throw new Error("<Checkbox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set label(value) {
    		throw new Error("<Checkbox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get inputtype() {
    		throw new Error("<Checkbox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set inputtype(value) {
    		throw new Error("<Checkbox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get value() {
    		throw new Error("<Checkbox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set value(value) {
    		throw new Error("<Checkbox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get className() {
    		throw new Error("<Checkbox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set className(value) {
    		throw new Error("<Checkbox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    var Checkbox$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        'default': Checkbox
    });

    var require$$6 = /*@__PURE__*/getAugmentedNamespace(Checkbox$1);

    /* dist/components/form-elements/Select.svelte generated by Svelte v3.42.1 */

    const file$C = "dist/components/form-elements/Select.svelte";

    function create_fragment$D(ctx) {
    	let label_1;
    	let t0;
    	let t1;
    	let select;
    	let current;
    	const default_slot_template = /*#slots*/ ctx[5].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[4], null);

    	const block = {
    		c: function create() {
    			label_1 = element("label");
    			t0 = text(/*label*/ ctx[0]);
    			t1 = space();
    			select = element("select");
    			if (default_slot) default_slot.c();
    			attr_dev(label_1, "class", "form-label");
    			attr_dev(label_1, "for", "select");
    			add_location(label_1, file$C, 8, 0, 239);
    			attr_dev(select, "classname", /*baseClass*/ ctx[1]);
    			attr_dev(select, "id", "select");
    			add_location(select, file$C, 9, 0, 294);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, label_1, anchor);
    			append_dev(label_1, t0);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, select, anchor);

    			if (default_slot) {
    				default_slot.m(select, null);
    			}

    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (!current || dirty & /*label*/ 1) set_data_dev(t0, /*label*/ ctx[0]);

    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 16)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[4],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[4])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[4], dirty, null),
    						null
    					);
    				}
    			}

    			if (!current || dirty & /*baseClass*/ 2) {
    				attr_dev(select, "classname", /*baseClass*/ ctx[1]);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(label_1);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(select);
    			if (default_slot) default_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$D.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$D($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Select', slots, ['default']);
    	let { inputtype = 'text' } = $$props;
    	let { label = undefined } = $$props;
    	let { className = undefined } = $$props;
    	let baseClass = `form-input form-input--${inputtype}`;
    	if (className) baseClass = `${className} ${baseClass}`;
    	const writable_props = ['inputtype', 'label', 'className'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Select> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('inputtype' in $$props) $$invalidate(2, inputtype = $$props.inputtype);
    		if ('label' in $$props) $$invalidate(0, label = $$props.label);
    		if ('className' in $$props) $$invalidate(3, className = $$props.className);
    		if ('$$scope' in $$props) $$invalidate(4, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => ({ inputtype, label, className, baseClass });

    	$$self.$inject_state = $$props => {
    		if ('inputtype' in $$props) $$invalidate(2, inputtype = $$props.inputtype);
    		if ('label' in $$props) $$invalidate(0, label = $$props.label);
    		if ('className' in $$props) $$invalidate(3, className = $$props.className);
    		if ('baseClass' in $$props) $$invalidate(1, baseClass = $$props.baseClass);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [label, baseClass, inputtype, className, $$scope, slots];
    }

    class Select extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$D, create_fragment$D, safe_not_equal, { inputtype: 2, label: 0, className: 3 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Select",
    			options,
    			id: create_fragment$D.name
    		});
    	}

    	get inputtype() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set inputtype(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get label() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set label(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get className() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set className(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    var Select$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        'default': Select
    });

    /* dist/components/form-elements/TextInput.svelte generated by Svelte v3.42.1 */
    const file$B = "dist/components/form-elements/TextInput.svelte";

    // (28:2) {#if label}
    function create_if_block$i(ctx) {
    	let span;
    	let t0;
    	let t1;

    	const block = {
    		c: function create() {
    			span = element("span");
    			t0 = text(/*label*/ ctx[1]);
    			t1 = text(":");
    			attr_dev(span, "class", "hidden");
    			add_location(span, file$B, 28, 4, 954);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    			append_dev(span, t0);
    			append_dev(span, t1);
    			/*span_binding*/ ctx[8](span);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*label*/ 2) set_data_dev(t0, /*label*/ ctx[1]);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    			/*span_binding*/ ctx[8](null);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$i.name,
    		type: "if",
    		source: "(28:2) {#if label}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$C(ctx) {
    	let div;
    	let t;
    	let input;
    	let div_class_value;
    	let mounted;
    	let dispose;
    	let if_block = /*label*/ ctx[1] && create_if_block$i(ctx);

    	const block = {
    		c: function create() {
    			div = element("div");
    			if (if_block) if_block.c();
    			t = space();
    			input = element("input");
    			attr_dev(input, "type", /*inputtype*/ ctx[0]);
    			attr_dev(input, "placeholder", /*label*/ ctx[1]);
    			attr_dev(input, "class", /*baseClass*/ ctx[5]);
    			add_location(input, file$B, 30, 2, 1026);
    			attr_dev(div, "class", div_class_value = `form-input-container flex border-radius padding-m--rl ${/*size*/ ctx[2]}`);
    			add_location(div, file$B, 26, 0, 858);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			if (if_block) if_block.m(div, null);
    			append_dev(div, t);
    			append_dev(div, input);
    			/*input_binding*/ ctx[9](input);

    			if (!mounted) {
    				dispose = listen_dev(input, "focus", /*focus_handler*/ ctx[7], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (/*label*/ ctx[1]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block$i(ctx);
    					if_block.c();
    					if_block.m(div, t);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}

    			if (dirty & /*inputtype*/ 1) {
    				attr_dev(input, "type", /*inputtype*/ ctx[0]);
    			}

    			if (dirty & /*label*/ 2) {
    				attr_dev(input, "placeholder", /*label*/ ctx[1]);
    			}

    			if (dirty & /*baseClass*/ 32) {
    				attr_dev(input, "class", /*baseClass*/ ctx[5]);
    			}

    			if (dirty & /*size*/ 4 && div_class_value !== (div_class_value = `form-input-container flex border-radius padding-m--rl ${/*size*/ ctx[2]}`)) {
    				attr_dev(div, "class", div_class_value);
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (if_block) if_block.d();
    			/*input_binding*/ ctx[9](null);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$C.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$C($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('TextInput', slots, []);
    	let { inputtype = 'text' } = $$props;
    	let { label = undefined } = $$props;
    	let { className = undefined } = $$props;
    	let { size = "padding-m--tb" } = $$props;
    	let inputEl;
    	let inputLabelEl;
    	let baseClass = `form-input form-input--${inputtype} width-1of1`;
    	if (className) baseClass = `${className} ${baseClass}`;

    	/* focus effect on form elements */
    	onMount(() => {
    		inputEl.addEventListener('focus', () => {
    			inputEl.parentElement.setAttribute('data-focus', 'true');
    			const inputLabel = inputEl.previousElementSibling;
    			inputLabel.classList.remove('hidden');
    		});

    		inputEl.addEventListener('focusout', () => {
    			inputEl.parentElement.setAttribute('data-focus', 'false');

    			if (inputEl.value.length === 0) {
    				inputLabelEl.classList.add('hidden');
    			}
    		});
    	});

    	const writable_props = ['inputtype', 'label', 'className', 'size'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<TextInput> was created with unknown prop '${key}'`);
    	});

    	function focus_handler(event) {
    		bubble.call(this, $$self, event);
    	}

    	function span_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			inputLabelEl = $$value;
    			$$invalidate(4, inputLabelEl);
    		});
    	}

    	function input_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			inputEl = $$value;
    			$$invalidate(3, inputEl);
    		});
    	}

    	$$self.$$set = $$props => {
    		if ('inputtype' in $$props) $$invalidate(0, inputtype = $$props.inputtype);
    		if ('label' in $$props) $$invalidate(1, label = $$props.label);
    		if ('className' in $$props) $$invalidate(6, className = $$props.className);
    		if ('size' in $$props) $$invalidate(2, size = $$props.size);
    	};

    	$$self.$capture_state = () => ({
    		onMount,
    		inputtype,
    		label,
    		className,
    		size,
    		inputEl,
    		inputLabelEl,
    		baseClass
    	});

    	$$self.$inject_state = $$props => {
    		if ('inputtype' in $$props) $$invalidate(0, inputtype = $$props.inputtype);
    		if ('label' in $$props) $$invalidate(1, label = $$props.label);
    		if ('className' in $$props) $$invalidate(6, className = $$props.className);
    		if ('size' in $$props) $$invalidate(2, size = $$props.size);
    		if ('inputEl' in $$props) $$invalidate(3, inputEl = $$props.inputEl);
    		if ('inputLabelEl' in $$props) $$invalidate(4, inputLabelEl = $$props.inputLabelEl);
    		if ('baseClass' in $$props) $$invalidate(5, baseClass = $$props.baseClass);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		inputtype,
    		label,
    		size,
    		inputEl,
    		inputLabelEl,
    		baseClass,
    		className,
    		focus_handler,
    		span_binding,
    		input_binding
    	];
    }

    class TextInput extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$C, create_fragment$C, safe_not_equal, {
    			inputtype: 0,
    			label: 1,
    			className: 6,
    			size: 2
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "TextInput",
    			options,
    			id: create_fragment$C.name
    		});
    	}

    	get inputtype() {
    		throw new Error("<TextInput>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set inputtype(value) {
    		throw new Error("<TextInput>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get label() {
    		throw new Error("<TextInput>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set label(value) {
    		throw new Error("<TextInput>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get className() {
    		throw new Error("<TextInput>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set className(value) {
    		throw new Error("<TextInput>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get size() {
    		throw new Error("<TextInput>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set size(value) {
    		throw new Error("<TextInput>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    var TextInput$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        'default': TextInput
    });

    /* dist/components/form-elements/TextArea.svelte generated by Svelte v3.42.1 */
    const file$A = "dist/components/form-elements/TextArea.svelte";

    // (28:2) {#if label}
    function create_if_block$h(ctx) {
    	let span;
    	let t0;
    	let t1;

    	const block = {
    		c: function create() {
    			span = element("span");
    			t0 = text(/*label*/ ctx[0]);
    			t1 = text(":");
    			attr_dev(span, "class", "hidden");
    			add_location(span, file$A, 28, 4, 998);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    			append_dev(span, t0);
    			append_dev(span, t1);
    			/*span_binding*/ ctx[8](span);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*label*/ 1) set_data_dev(t0, /*label*/ ctx[0]);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    			/*span_binding*/ ctx[8](null);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$h.name,
    		type: "if",
    		source: "(28:2) {#if label}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$B(ctx) {
    	let div;
    	let t;
    	let textarea;
    	let div_class_value;
    	let mounted;
    	let dispose;
    	let if_block = /*label*/ ctx[0] && create_if_block$h(ctx);

    	const block = {
    		c: function create() {
    			div = element("div");
    			if (if_block) if_block.c();
    			t = space();
    			textarea = element("textarea");
    			attr_dev(textarea, "class", /*baseClass*/ ctx[4]);
    			attr_dev(textarea, "placeholder", /*label*/ ctx[0]);
    			add_location(textarea, file$A, 30, 2, 1073);
    			attr_dev(div, "class", div_class_value = `form-input-container flex flex--column border-radius padding-m--rl ${/*size*/ ctx[1]}`);
    			add_location(div, file$A, 26, 0, 889);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			if (if_block) if_block.m(div, null);
    			append_dev(div, t);
    			append_dev(div, textarea);
    			/*textarea_binding*/ ctx[9](textarea);

    			if (!mounted) {
    				dispose = listen_dev(textarea, "focus", /*focus_handler*/ ctx[7], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (/*label*/ ctx[0]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block$h(ctx);
    					if_block.c();
    					if_block.m(div, t);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}

    			if (dirty & /*baseClass*/ 16) {
    				attr_dev(textarea, "class", /*baseClass*/ ctx[4]);
    			}

    			if (dirty & /*label*/ 1) {
    				attr_dev(textarea, "placeholder", /*label*/ ctx[0]);
    			}

    			if (dirty & /*size*/ 2 && div_class_value !== (div_class_value = `form-input-container flex flex--column border-radius padding-m--rl ${/*size*/ ctx[1]}`)) {
    				attr_dev(div, "class", div_class_value);
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (if_block) if_block.d();
    			/*textarea_binding*/ ctx[9](null);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$B.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$B($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('TextArea', slots, []);
    	let { inputtype = 'textarea' } = $$props;
    	let { label = undefined } = $$props;
    	let { className = undefined } = $$props;
    	let { size = "padding-m--tb" } = $$props;
    	let textareaEl;
    	let textareaLabelEl;
    	let baseClass = `form-input form-input--${inputtype} width-1of1`;
    	if (className) baseClass = `${className} ${baseClass}`;

    	/* focus effect on form elements */
    	onMount(() => {
    		textareaEl.addEventListener('focus', () => {
    			textareaEl.parentElement.setAttribute('data-focus', 'true');
    			const inputLabel = textareaEl.previousElementSibling;
    			inputLabel.classList.remove('hidden');
    		});

    		textareaEl.addEventListener('focusout', () => {
    			textareaEl.parentElement.setAttribute('data-focus', 'false');

    			if (textareaEl.value.length === 0) {
    				textareaLabelEl.classList.add('hidden');
    			}
    		});
    	});

    	const writable_props = ['inputtype', 'label', 'className', 'size'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<TextArea> was created with unknown prop '${key}'`);
    	});

    	function focus_handler(event) {
    		bubble.call(this, $$self, event);
    	}

    	function span_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			textareaLabelEl = $$value;
    			$$invalidate(3, textareaLabelEl);
    		});
    	}

    	function textarea_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			textareaEl = $$value;
    			$$invalidate(2, textareaEl);
    		});
    	}

    	$$self.$$set = $$props => {
    		if ('inputtype' in $$props) $$invalidate(5, inputtype = $$props.inputtype);
    		if ('label' in $$props) $$invalidate(0, label = $$props.label);
    		if ('className' in $$props) $$invalidate(6, className = $$props.className);
    		if ('size' in $$props) $$invalidate(1, size = $$props.size);
    	};

    	$$self.$capture_state = () => ({
    		onMount,
    		inputtype,
    		label,
    		className,
    		size,
    		textareaEl,
    		textareaLabelEl,
    		baseClass
    	});

    	$$self.$inject_state = $$props => {
    		if ('inputtype' in $$props) $$invalidate(5, inputtype = $$props.inputtype);
    		if ('label' in $$props) $$invalidate(0, label = $$props.label);
    		if ('className' in $$props) $$invalidate(6, className = $$props.className);
    		if ('size' in $$props) $$invalidate(1, size = $$props.size);
    		if ('textareaEl' in $$props) $$invalidate(2, textareaEl = $$props.textareaEl);
    		if ('textareaLabelEl' in $$props) $$invalidate(3, textareaLabelEl = $$props.textareaLabelEl);
    		if ('baseClass' in $$props) $$invalidate(4, baseClass = $$props.baseClass);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		label,
    		size,
    		textareaEl,
    		textareaLabelEl,
    		baseClass,
    		inputtype,
    		className,
    		focus_handler,
    		span_binding,
    		textarea_binding
    	];
    }

    class TextArea extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$B, create_fragment$B, safe_not_equal, {
    			inputtype: 5,
    			label: 0,
    			className: 6,
    			size: 1
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "TextArea",
    			options,
    			id: create_fragment$B.name
    		});
    	}

    	get inputtype() {
    		throw new Error("<TextArea>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set inputtype(value) {
    		throw new Error("<TextArea>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get label() {
    		throw new Error("<TextArea>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set label(value) {
    		throw new Error("<TextArea>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get className() {
    		throw new Error("<TextArea>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set className(value) {
    		throw new Error("<TextArea>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get size() {
    		throw new Error("<TextArea>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set size(value) {
    		throw new Error("<TextArea>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    var TextArea$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        'default': TextArea
    });

    /* dist/components/form-elements/FormElement.svelte generated by Svelte v3.42.1 */
    const file$z = "dist/components/form-elements/FormElement.svelte";

    // (42:2) <svelte:component this={component} class={className} {size} {label} {inputtype} {group} {value} name={fieldName}>
    function create_default_slot$r(ctx) {
    	let current;
    	const default_slot_template = /*#slots*/ ctx[8].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[9], null);

    	const block = {
    		c: function create() {
    			if (default_slot) default_slot.c();
    		},
    		m: function mount(target, anchor) {
    			if (default_slot) {
    				default_slot.m(target, anchor);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 512)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[9],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[9])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[9], dirty, null),
    						null
    					);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (default_slot) default_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$r.name,
    		type: "slot",
    		source: "(42:2) <svelte:component this={component} class={className} {size} {label} {inputtype} {group} {value} name={fieldName}>",
    		ctx
    	});

    	return block;
    }

    function create_fragment$A(ctx) {
    	let div;
    	let switch_instance;
    	let current;
    	var switch_value = /*component*/ ctx[7];

    	function switch_props(ctx) {
    		return {
    			props: {
    				class: /*className*/ ctx[1],
    				size: /*size*/ ctx[0],
    				label: /*label*/ ctx[5],
    				inputtype: /*inputtype*/ ctx[4],
    				group: /*group*/ ctx[3],
    				value: /*value*/ ctx[6],
    				name: /*fieldName*/ ctx[2],
    				$$slots: { default: [create_default_slot$r] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		};
    	}

    	if (switch_value) {
    		switch_instance = new switch_value(switch_props(ctx));
    	}

    	const block = {
    		c: function create() {
    			div = element("div");
    			if (switch_instance) create_component(switch_instance.$$.fragment);
    			attr_dev(div, "class", "form-element margin-l--b");
    			add_location(div, file$z, 40, 0, 900);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			if (switch_instance) {
    				mount_component(switch_instance, div, null);
    			}

    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const switch_instance_changes = {};
    			if (dirty & /*className*/ 2) switch_instance_changes.class = /*className*/ ctx[1];
    			if (dirty & /*size*/ 1) switch_instance_changes.size = /*size*/ ctx[0];
    			if (dirty & /*label*/ 32) switch_instance_changes.label = /*label*/ ctx[5];
    			if (dirty & /*inputtype*/ 16) switch_instance_changes.inputtype = /*inputtype*/ ctx[4];
    			if (dirty & /*group*/ 8) switch_instance_changes.group = /*group*/ ctx[3];
    			if (dirty & /*value*/ 64) switch_instance_changes.value = /*value*/ ctx[6];
    			if (dirty & /*fieldName*/ 4) switch_instance_changes.name = /*fieldName*/ ctx[2];

    			if (dirty & /*$$scope*/ 512) {
    				switch_instance_changes.$$scope = { dirty, ctx };
    			}

    			if (switch_value !== (switch_value = /*component*/ ctx[7])) {
    				if (switch_instance) {
    					group_outros();
    					const old_component = switch_instance;

    					transition_out(old_component.$$.fragment, 1, 0, () => {
    						destroy_component(old_component, 1);
    					});

    					check_outros();
    				}

    				if (switch_value) {
    					switch_instance = new switch_value(switch_props(ctx));
    					create_component(switch_instance.$$.fragment);
    					transition_in(switch_instance.$$.fragment, 1);
    					mount_component(switch_instance, div, null);
    				} else {
    					switch_instance = null;
    				}
    			} else if (switch_value) {
    				switch_instance.$set(switch_instance_changes);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			if (switch_instance) transition_in(switch_instance.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			if (switch_instance) transition_out(switch_instance.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (switch_instance) destroy_component(switch_instance);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$A.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$A($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('FormElement', slots, ['default']);
    	let { className = undefined } = $$props;
    	let { fieldName = undefined } = $$props;
    	let { group = undefined } = $$props;
    	let { inputtype = 'text' } = $$props;
    	let { label = undefined } = $$props;
    	let { value } = $$props;
    	let { size = 'medium' } = $$props;
    	let component = TextInput;

    	switch (inputtype) {
    		case 'select':
    			component = Select;
    			break;
    		case 'checkbox':
    		case 'radio':
    			component = Checkbox;
    			break;
    		case 'textarea':
    			component = TextArea;
    			break;
    	}

    	switch (size) {
    		case 'small':
    			{
    				size = 'padding-s--tb';
    				break;
    			}
    		case 'medium':
    			{
    				size = 'padding-m--tb';
    				break;
    			}
    		case 'large':
    			{
    				size = 'padding-l--tb';
    				break;
    			}
    	}

    	const writable_props = ['className', 'fieldName', 'group', 'inputtype', 'label', 'value', 'size'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<FormElement> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('className' in $$props) $$invalidate(1, className = $$props.className);
    		if ('fieldName' in $$props) $$invalidate(2, fieldName = $$props.fieldName);
    		if ('group' in $$props) $$invalidate(3, group = $$props.group);
    		if ('inputtype' in $$props) $$invalidate(4, inputtype = $$props.inputtype);
    		if ('label' in $$props) $$invalidate(5, label = $$props.label);
    		if ('value' in $$props) $$invalidate(6, value = $$props.value);
    		if ('size' in $$props) $$invalidate(0, size = $$props.size);
    		if ('$$scope' in $$props) $$invalidate(9, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		Checkbox,
    		Select,
    		TextInput,
    		TextArea,
    		className,
    		fieldName,
    		group,
    		inputtype,
    		label,
    		value,
    		size,
    		component
    	});

    	$$self.$inject_state = $$props => {
    		if ('className' in $$props) $$invalidate(1, className = $$props.className);
    		if ('fieldName' in $$props) $$invalidate(2, fieldName = $$props.fieldName);
    		if ('group' in $$props) $$invalidate(3, group = $$props.group);
    		if ('inputtype' in $$props) $$invalidate(4, inputtype = $$props.inputtype);
    		if ('label' in $$props) $$invalidate(5, label = $$props.label);
    		if ('value' in $$props) $$invalidate(6, value = $$props.value);
    		if ('size' in $$props) $$invalidate(0, size = $$props.size);
    		if ('component' in $$props) $$invalidate(7, component = $$props.component);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		size,
    		className,
    		fieldName,
    		group,
    		inputtype,
    		label,
    		value,
    		component,
    		slots,
    		$$scope
    	];
    }

    class FormElement extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$A, create_fragment$A, safe_not_equal, {
    			className: 1,
    			fieldName: 2,
    			group: 3,
    			inputtype: 4,
    			label: 5,
    			value: 6,
    			size: 0
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "FormElement",
    			options,
    			id: create_fragment$A.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*value*/ ctx[6] === undefined && !('value' in props)) {
    			console.warn("<FormElement> was created without expected prop 'value'");
    		}
    	}

    	get className() {
    		throw new Error("<FormElement>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set className(value) {
    		throw new Error("<FormElement>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get fieldName() {
    		throw new Error("<FormElement>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set fieldName(value) {
    		throw new Error("<FormElement>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get group() {
    		throw new Error("<FormElement>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set group(value) {
    		throw new Error("<FormElement>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get inputtype() {
    		throw new Error("<FormElement>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set inputtype(value) {
    		throw new Error("<FormElement>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get label() {
    		throw new Error("<FormElement>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set label(value) {
    		throw new Error("<FormElement>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get value() {
    		throw new Error("<FormElement>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set value(value) {
    		throw new Error("<FormElement>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get size() {
    		throw new Error("<FormElement>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set size(value) {
    		throw new Error("<FormElement>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    var FormElement$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        'default': FormElement
    });

    var require$$7 = /*@__PURE__*/getAugmentedNamespace(FormElement$1);

    var throttle$1 = {};

    Object.defineProperty(throttle$1, "__esModule", { value: true });
    var throttle_2 = throttle$1.throttle = void 0;
    function throttle(callback, wait) {
        let inThrottle;
        return function () {
            const args = arguments;
            const context = this;
            if (!inThrottle) {
                callback.apply(context, args);
                inThrottle = true;
                setTimeout(() => (inThrottle = false), wait);
            }
        };
    }
    throttle_2 = throttle$1.throttle = throttle;

    /* dist/components/horizontalScroll/HorizontalScroll.svelte generated by Svelte v3.42.1 */
    const file$y = "dist/components/horizontalScroll/HorizontalScroll.svelte";

    // (122:2) <Button on:click={prevScroll} className="horizontal-scroll-nav button-prev bg--white" extension="icon">
    function create_default_slot_1$p(ctx) {
    	let i;

    	const block = {
    		c: function create() {
    			i = element("i");
    			attr_dev(i, "class", "fa fa-chevron-left");
    			add_location(i, file$y, 122, 4, 3857);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, i, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(i);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_1$p.name,
    		type: "slot",
    		source: "(122:2) <Button on:click={prevScroll} className=\\\"horizontal-scroll-nav button-prev bg--white\\\" extension=\\\"icon\\\">",
    		ctx
    	});

    	return block;
    }

    // (125:2) <Button on:click={nextScroll} className="horizontal-scroll-nav button-next bg--white" extension="icon">
    function create_default_slot$q(ctx) {
    	let i;

    	const block = {
    		c: function create() {
    			i = element("i");
    			attr_dev(i, "class", "fa fa-chevron-right");
    			add_location(i, file$y, 125, 4, 4012);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, i, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(i);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$q.name,
    		type: "slot",
    		source: "(125:2) <Button on:click={nextScroll} className=\\\"horizontal-scroll-nav button-next bg--white\\\" extension=\\\"icon\\\">",
    		ctx
    	});

    	return block;
    }

    function create_fragment$z(ctx) {
    	let div1;
    	let button0;
    	let t0;
    	let button1;
    	let t1;
    	let div0;
    	let current;

    	button0 = new Button({
    			props: {
    				className: "horizontal-scroll-nav button-prev bg--white",
    				extension: "icon",
    				$$slots: { default: [create_default_slot_1$p] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	button0.$on("click", /*prevScroll*/ ctx[3]);

    	button1 = new Button({
    			props: {
    				className: "horizontal-scroll-nav button-next bg--white",
    				extension: "icon",
    				$$slots: { default: [create_default_slot$q] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	button1.$on("click", /*nextScroll*/ ctx[2]);
    	const default_slot_template = /*#slots*/ ctx[5].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[8], null);

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			create_component(button0.$$.fragment);
    			t0 = space();
    			create_component(button1.$$.fragment);
    			t1 = space();
    			div0 = element("div");
    			if (default_slot) default_slot.c();
    			attr_dev(div0, "class", "horizontal-scroll-items flex position-relative");
    			attr_dev(div0, "data-horizontallist", "horizontallist");
    			add_location(div0, file$y, 127, 2, 4060);
    			attr_dev(div1, "class", "horizontal-scroll-container position-relative");
    			add_location(div1, file$y, 120, 0, 3659);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			mount_component(button0, div1, null);
    			append_dev(div1, t0);
    			mount_component(button1, div1, null);
    			append_dev(div1, t1);
    			append_dev(div1, div0);

    			if (default_slot) {
    				default_slot.m(div0, null);
    			}

    			/*div0_binding*/ ctx[6](div0);
    			/*div1_binding*/ ctx[7](div1);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const button0_changes = {};

    			if (dirty & /*$$scope*/ 256) {
    				button0_changes.$$scope = { dirty, ctx };
    			}

    			button0.$set(button0_changes);
    			const button1_changes = {};

    			if (dirty & /*$$scope*/ 256) {
    				button1_changes.$$scope = { dirty, ctx };
    			}

    			button1.$set(button1_changes);

    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 256)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[8],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[8])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[8], dirty, null),
    						null
    					);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(button0.$$.fragment, local);
    			transition_in(button1.$$.fragment, local);
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(button0.$$.fragment, local);
    			transition_out(button1.$$.fragment, local);
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    			destroy_component(button0);
    			destroy_component(button1);
    			if (default_slot) default_slot.d(detaching);
    			/*div0_binding*/ ctx[6](null);
    			/*div1_binding*/ ctx[7](null);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$z.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$z($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('HorizontalScroll', slots, ['default']);
    	let { className = undefined } = $$props;
    	let baseClass = `horizontal-scroll-container position-relative`;
    	if (className) baseClass = `${className} ${baseClass}`;

    	/* Horizontial Scroll elements */
    	let scrollContainer;

    	let scrollItemContainer;
    	let listCurrent = 0;
    	let children;
    	let maxLength;
    	let listLength;

    	function updateDataSet(pos, fromScroll = false) {
    		switch (pos) {
    			case 'neutral':
    				$$invalidate(0, scrollContainer.dataset.atstart = 'false', scrollContainer);
    				$$invalidate(0, scrollContainer.dataset.atend = 'false', scrollContainer);
    				if (fromScroll) listCurrent = 1;
    				break;
    			case 'end':
    				$$invalidate(0, scrollContainer.dataset.atstart = 'false', scrollContainer);
    				$$invalidate(0, scrollContainer.dataset.atend = 'true', scrollContainer);
    				listCurrent = maxLength;
    				break;
    			case 'start':
    				$$invalidate(0, scrollContainer.dataset.atstart = 'true', scrollContainer);
    				$$invalidate(0, scrollContainer.dataset.atend = 'false', scrollContainer);
    				listCurrent = 0;
    				break;
    			case 'disabled':
    				$$invalidate(0, scrollContainer.dataset.atstart = 'true', scrollContainer);
    				$$invalidate(0, scrollContainer.dataset.atend = 'true', scrollContainer);
    				break;
    		}
    	}

    	function updateButtons() {
    		if (listCurrent === 0) {
    			updateDataSet('start');
    		} else if (listCurrent === maxLength) {
    			updateDataSet('end');
    		} else {
    			updateDataSet('neutral');
    		}
    	}

    	function updateButtonsThroughScroll() {
    		const childLeft = children[0].getBoundingClientRect().left;
    		const wrapLeft = scrollItemContainer.getBoundingClientRect().left;
    		const childRight = children[listLength - 1].getBoundingClientRect().right;
    		const wrapRight = scrollItemContainer.getBoundingClientRect().right;
    		const childrenHiddenLeft = childLeft < wrapLeft;
    		const childrenHiddenRight = childRight > wrapRight;

    		if (childrenHiddenLeft && childrenHiddenRight) {
    			updateDataSet('neutral', true);
    		} else if (childrenHiddenLeft) {
    			updateDataSet('end', true);
    		} else if (childrenHiddenRight) {
    			updateDataSet('start', true);
    		} else {
    			updateDataSet('disabled', true);
    		}
    	}

    	/**
     * Advance scroll to make next or previous element visible
     */
    	function scroll(listCurrent) {
    		const newPos = children[listCurrent];

    		scrollItemContainer.scrollTo({
    			behavior: 'smooth',
    			left: newPos.offsetLeft,
    			top: 0
    		});

    		updateButtons();
    	}

    	function nextScroll(_ev) {
    		if (listCurrent !== maxLength) {
    			listCurrent = listCurrent + 1;
    			scroll(listCurrent);
    		}
    	}

    	function prevScroll(_ev) {
    		if (listCurrent !== 0) {
    			listCurrent = listCurrent - 1;
    			scroll(listCurrent);
    		}
    	}

    	onMount(() => {
    		scrollItemContainer.addEventListener('wheel', throttle_2(
    			() => {
    				updateButtonsThroughScroll();
    			},
    			150
    		));
    	});

    	afterUpdate(() => {
    		if (listLength === scrollItemContainer.children.length) return;
    		children = scrollItemContainer.children;
    		listLength = children.length;
    		const containerBBox = scrollContainer.getBoundingClientRect();

    		/**
     * Find how many visible elements we have
     */
    		let visibleChildren = Array.from(children).filter(child => child.getBoundingClientRect().left >= containerBBox.left && child.getBoundingClientRect().right <= containerBBox.right).length;

    		maxLength = listLength - visibleChildren;

    		if (maxLength) {
    			// Some children not visible - enable scroling
    			updateButtons();
    		} else {
    			updateDataSet('disabled');
    		}
    	});

    	const writable_props = ['className'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<HorizontalScroll> was created with unknown prop '${key}'`);
    	});

    	function div0_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			scrollItemContainer = $$value;
    			$$invalidate(1, scrollItemContainer);
    		});
    	}

    	function div1_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			scrollContainer = $$value;
    			$$invalidate(0, scrollContainer);
    		});
    	}

    	$$self.$$set = $$props => {
    		if ('className' in $$props) $$invalidate(4, className = $$props.className);
    		if ('$$scope' in $$props) $$invalidate(8, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		afterUpdate,
    		onMount,
    		throttle: throttle_2,
    		Button,
    		className,
    		baseClass,
    		scrollContainer,
    		scrollItemContainer,
    		listCurrent,
    		children,
    		maxLength,
    		listLength,
    		updateDataSet,
    		updateButtons,
    		updateButtonsThroughScroll,
    		scroll,
    		nextScroll,
    		prevScroll
    	});

    	$$self.$inject_state = $$props => {
    		if ('className' in $$props) $$invalidate(4, className = $$props.className);
    		if ('baseClass' in $$props) baseClass = $$props.baseClass;
    		if ('scrollContainer' in $$props) $$invalidate(0, scrollContainer = $$props.scrollContainer);
    		if ('scrollItemContainer' in $$props) $$invalidate(1, scrollItemContainer = $$props.scrollItemContainer);
    		if ('listCurrent' in $$props) listCurrent = $$props.listCurrent;
    		if ('children' in $$props) children = $$props.children;
    		if ('maxLength' in $$props) maxLength = $$props.maxLength;
    		if ('listLength' in $$props) listLength = $$props.listLength;
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		scrollContainer,
    		scrollItemContainer,
    		nextScroll,
    		prevScroll,
    		className,
    		slots,
    		div0_binding,
    		div1_binding,
    		$$scope
    	];
    }

    class HorizontalScroll extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$z, create_fragment$z, safe_not_equal, { className: 4 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "HorizontalScroll",
    			options,
    			id: create_fragment$z.name
    		});
    	}

    	get className() {
    		throw new Error("<HorizontalScroll>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set className(value) {
    		throw new Error("<HorizontalScroll>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    var HorizontalScroll$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        'default': HorizontalScroll
    });

    var require$$8 = /*@__PURE__*/getAugmentedNamespace(HorizontalScroll$1);

    var require$$9 = /*@__PURE__*/getAugmentedNamespace(Icon$1);

    var require$$10 = /*@__PURE__*/getAugmentedNamespace(Select$1);

    /* dist/components/spinner/Spinner.svelte generated by Svelte v3.42.1 */

    const file$x = "dist/components/spinner/Spinner.svelte";

    // (4:0) {#if isLoading}
    function create_if_block$g(ctx) {
    	let div;
    	let i0;
    	let t0;
    	let i1;
    	let t1;
    	let i2;

    	const block = {
    		c: function create() {
    			div = element("div");
    			i0 = element("i");
    			t0 = space();
    			i1 = element("i");
    			t1 = space();
    			i2 = element("i");
    			attr_dev(i0, "class", "fas fa-circle bounce bounce1");
    			add_location(i0, file$x, 5, 4, 120);
    			attr_dev(i1, "class", "fas fa-circle bounce bounce2");
    			add_location(i1, file$x, 6, 4, 167);
    			attr_dev(i2, "class", "fas fa-circle bounce bounce3");
    			add_location(i2, file$x, 7, 4, 214);
    			attr_dev(div, "class", "loader flex flex--center");
    			add_location(div, file$x, 4, 2, 77);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, i0);
    			append_dev(div, t0);
    			append_dev(div, i1);
    			append_dev(div, t1);
    			append_dev(div, i2);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$g.name,
    		type: "if",
    		source: "(4:0) {#if isLoading}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$y(ctx) {
    	let if_block_anchor;
    	let if_block = /*isLoading*/ ctx[0] && create_if_block$g(ctx);

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    		},
    		p: function update(ctx, [dirty]) {
    			if (/*isLoading*/ ctx[0]) {
    				if (if_block) ; else {
    					if_block = create_if_block$g(ctx);
    					if_block.c();
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$y.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$y($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Spinner', slots, []);
    	let { isLoading = false } = $$props;
    	const writable_props = ['isLoading'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Spinner> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('isLoading' in $$props) $$invalidate(0, isLoading = $$props.isLoading);
    	};

    	$$self.$capture_state = () => ({ isLoading });

    	$$self.$inject_state = $$props => {
    		if ('isLoading' in $$props) $$invalidate(0, isLoading = $$props.isLoading);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [isLoading];
    }

    class Spinner extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$y, create_fragment$y, safe_not_equal, { isLoading: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Spinner",
    			options,
    			id: create_fragment$y.name
    		});
    	}

    	get isLoading() {
    		throw new Error("<Spinner>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set isLoading(value) {
    		throw new Error("<Spinner>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    var Spinner$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        'default': Spinner
    });

    var require$$11 = /*@__PURE__*/getAugmentedNamespace(Spinner$1);

    /* dist/components/tabs/Tabs.svelte generated by Svelte v3.42.1 */
    const file$w = "dist/components/tabs/Tabs.svelte";

    function create_fragment$x(ctx) {
    	let div;
    	let current;
    	const default_slot_template = /*#slots*/ ctx[3].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[2], null);

    	const block = {
    		c: function create() {
    			div = element("div");
    			if (default_slot) default_slot.c();
    			attr_dev(div, "class", /*className*/ ctx[0]);
    			add_location(div, file$w, 44, 0, 1397);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			if (default_slot) {
    				default_slot.m(div, null);
    			}

    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 4)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[2],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[2])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[2], dirty, null),
    						null
    					);
    				}
    			}

    			if (!current || dirty & /*className*/ 1) {
    				attr_dev(div, "class", /*className*/ ctx[0]);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (default_slot) default_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$x.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    const BUTTONS = {};

    function instance$x($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Tabs', slots, ['default']);
    	
    	const selectedId = writable(0);
    	const buttons = [];
    	const panels = [];
    	const selectedButton = writable(null);
    	const selectedPanel = writable(null);

    	selectedId.subscribe(i => {
    		selectedButton.set(buttons[i]);
    		selectedPanel.set(panels[i]);
    	});

    	setContext(BUTTONS, {
    		registerTab: button => {
    			buttons.push(button);
    			selectedButton.update(current => current || button);

    			onDestroy(() => {
    				const i = buttons.indexOf(button);
    				buttons.splice(i, 1);

    				selectedButton.update(current => current === button
    				? buttons[i] || buttons[buttons.length - 1]
    				: current);
    			});
    		},
    		registerPanel: panel => {
    			panels.push(panel);
    			selectedPanel.update(current => current || panel);

    			onDestroy(() => {
    				const i = panels.indexOf(panel);
    				panels.splice(i, 1);

    				selectedPanel.update(current => current === panel
    				? panels[i] || panels[panels.length - 1]
    				: current);
    			});
    		},
    		selectButton: button => {
    			const i = buttons.indexOf(button);
    			selectedId.set(i);
    		},
    		selectedButton,
    		selectedPanel
    	});

    	let { className = undefined } = $$props;
    	const writable_props = ['className'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Tabs> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('className' in $$props) $$invalidate(0, className = $$props.className);
    		if ('$$scope' in $$props) $$invalidate(2, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		BUTTONS,
    		setContext,
    		onDestroy,
    		writable,
    		selectedId,
    		buttons,
    		panels,
    		selectedButton,
    		selectedPanel,
    		className
    	});

    	$$self.$inject_state = $$props => {
    		if ('className' in $$props) $$invalidate(0, className = $$props.className);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [className, selectedId, $$scope, slots];
    }

    class Tabs extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$x, create_fragment$x, safe_not_equal, { selectedId: 1, className: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Tabs",
    			options,
    			id: create_fragment$x.name
    		});
    	}

    	get selectedId() {
    		return this.$$.ctx[1];
    	}

    	set selectedId(value) {
    		throw new Error("<Tabs>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get className() {
    		throw new Error("<Tabs>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set className(value) {
    		throw new Error("<Tabs>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    var Tabs$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        'default': Tabs,
        BUTTONS: BUTTONS
    });

    /* dist/components/tabs/Tab.svelte generated by Svelte v3.42.1 */
    const file$v = "dist/components/tabs/Tab.svelte";

    function create_fragment$w(ctx) {
    	let button_1;
    	let button_1_data_selected_value;
    	let current;
    	let mounted;
    	let dispose;
    	const default_slot_template = /*#slots*/ ctx[7].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[6], null);

    	const block = {
    		c: function create() {
    			button_1 = element("button");
    			if (default_slot) default_slot.c();
    			attr_dev(button_1, "class", /*cssClass*/ ctx[0]);
    			attr_dev(button_1, "data-selected", button_1_data_selected_value = /*$selectedButton*/ ctx[1] === /*button*/ ctx[2]);
    			add_location(button_1, file$v, 10, 0, 349);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, button_1, anchor);

    			if (default_slot) {
    				default_slot.m(button_1, null);
    			}

    			current = true;

    			if (!mounted) {
    				dispose = listen_dev(button_1, "click", /*click_handler*/ ctx[8], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 64)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[6],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[6])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[6], dirty, null),
    						null
    					);
    				}
    			}

    			if (!current || dirty & /*cssClass*/ 1) {
    				attr_dev(button_1, "class", /*cssClass*/ ctx[0]);
    			}

    			if (!current || dirty & /*$selectedButton*/ 2 && button_1_data_selected_value !== (button_1_data_selected_value = /*$selectedButton*/ ctx[1] === /*button*/ ctx[2])) {
    				attr_dev(button_1, "data-selected", button_1_data_selected_value);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(button_1);
    			if (default_slot) default_slot.d(detaching);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$w.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$w($$self, $$props, $$invalidate) {
    	let cssClass;
    	let $selectedButton;
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Tab', slots, ['default']);
    	const button = {};
    	const { registerTab, selectButton, selectedButton } = getContext(BUTTONS);
    	validate_store(selectedButton, 'selectedButton');
    	component_subscribe($$self, selectedButton, value => $$invalidate(1, $selectedButton = value));
    	registerTab(button);
    	let { className = undefined } = $$props;
    	let baseClass = `button`;
    	const writable_props = ['className'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Tab> was created with unknown prop '${key}'`);
    	});

    	const click_handler = () => selectButton(button);

    	$$self.$$set = $$props => {
    		if ('className' in $$props) $$invalidate(5, className = $$props.className);
    		if ('$$scope' in $$props) $$invalidate(6, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		getContext,
    		BUTTONS,
    		button,
    		registerTab,
    		selectButton,
    		selectedButton,
    		className,
    		baseClass,
    		cssClass,
    		$selectedButton
    	});

    	$$self.$inject_state = $$props => {
    		if ('className' in $$props) $$invalidate(5, className = $$props.className);
    		if ('baseClass' in $$props) $$invalidate(10, baseClass = $$props.baseClass);
    		if ('cssClass' in $$props) $$invalidate(0, cssClass = $$props.cssClass);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*className*/ 32) {
    			$$invalidate(0, cssClass = className ? `${baseClass} ${className}` : baseClass);
    		}
    	};

    	return [
    		cssClass,
    		$selectedButton,
    		button,
    		selectButton,
    		selectedButton,
    		className,
    		$$scope,
    		slots,
    		click_handler
    	];
    }

    class Tab extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$w, create_fragment$w, safe_not_equal, { className: 5 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Tab",
    			options,
    			id: create_fragment$w.name
    		});
    	}

    	get className() {
    		throw new Error("<Tab>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set className(value) {
    		throw new Error("<Tab>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    var Tab$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        'default': Tab
    });

    var require$$12 = /*@__PURE__*/getAugmentedNamespace(Tab$1);

    /* dist/components/tabs/TabContent.svelte generated by Svelte v3.42.1 */

    // (11:0) {#if $selectedPanel === panel}
    function create_if_block$f(ctx) {
    	let current;
    	const default_slot_template = /*#slots*/ ctx[4].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[3], null);

    	const block = {
    		c: function create() {
    			if (default_slot) default_slot.c();
    		},
    		m: function mount(target, anchor) {
    			if (default_slot) {
    				default_slot.m(target, anchor);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 8)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[3],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[3])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[3], dirty, null),
    						null
    					);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (default_slot) default_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$f.name,
    		type: "if",
    		source: "(11:0) {#if $selectedPanel === panel}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$v(ctx) {
    	let if_block_anchor;
    	let current;
    	let if_block = /*$selectedPanel*/ ctx[0] === /*panel*/ ctx[1] && create_if_block$f(ctx);

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (/*$selectedPanel*/ ctx[0] === /*panel*/ ctx[1]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty & /*$selectedPanel*/ 1) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block$f(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$v.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$v($$self, $$props, $$invalidate) {
    	let $selectedPanel;
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('TabContent', slots, ['default']);
    	const panel = {};
    	const { registerPanel, selectedPanel } = getContext(BUTTONS);
    	validate_store(selectedPanel, 'selectedPanel');
    	component_subscribe($$self, selectedPanel, value => $$invalidate(0, $selectedPanel = value));
    	registerPanel(panel);
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<TabContent> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('$$scope' in $$props) $$invalidate(3, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		getContext,
    		BUTTONS,
    		panel,
    		registerPanel,
    		selectedPanel,
    		$selectedPanel
    	});

    	return [$selectedPanel, panel, selectedPanel, $$scope, slots];
    }

    class TabContent extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$v, create_fragment$v, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "TabContent",
    			options,
    			id: create_fragment$v.name
    		});
    	}
    }

    var TabContent$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        'default': TabContent
    });

    var require$$13 = /*@__PURE__*/getAugmentedNamespace(TabContent$1);

    /* dist/components/tabs/TabList.svelte generated by Svelte v3.42.1 */

    const file$u = "dist/components/tabs/TabList.svelte";

    function create_fragment$u(ctx) {
    	let div;
    	let current;
    	const default_slot_template = /*#slots*/ ctx[5].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[4], null);

    	const block = {
    		c: function create() {
    			div = element("div");
    			if (default_slot) default_slot.c();
    			attr_dev(div, "class", /*cssClass*/ ctx[0]);
    			add_location(div, file$u, 14, 0, 357);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			if (default_slot) {
    				default_slot.m(div, null);
    			}

    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 16)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[4],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[4])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[4], dirty, null),
    						null
    					);
    				}
    			}

    			if (!current || dirty & /*cssClass*/ 1) {
    				attr_dev(div, "class", /*cssClass*/ ctx[0]);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (default_slot) default_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$u.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$u($$self, $$props, $$invalidate) {
    	let cssClass;
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('TabList', slots, ['default']);
    	let { type = 'tabs' } = $$props;
    	let { className = undefined } = $$props;
    	let baseClass = '';

    	switch (type) {
    		case 'tabs':
    			baseClass = 'tabs';
    			break;
    		case 'pillnavigation':
    			baseClass = 'pillnavigation toggle toggle--buttons';
    			break;
    	}

    	const writable_props = ['type', 'className'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<TabList> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('type' in $$props) $$invalidate(1, type = $$props.type);
    		if ('className' in $$props) $$invalidate(2, className = $$props.className);
    		if ('$$scope' in $$props) $$invalidate(4, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => ({ type, className, baseClass, cssClass });

    	$$self.$inject_state = $$props => {
    		if ('type' in $$props) $$invalidate(1, type = $$props.type);
    		if ('className' in $$props) $$invalidate(2, className = $$props.className);
    		if ('baseClass' in $$props) $$invalidate(3, baseClass = $$props.baseClass);
    		if ('cssClass' in $$props) $$invalidate(0, cssClass = $$props.cssClass);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*className, baseClass*/ 12) {
    			$$invalidate(0, cssClass = className ? `${baseClass} ${className}` : baseClass);
    		}
    	};

    	return [cssClass, type, className, baseClass, $$scope, slots];
    }

    class TabList extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$u, create_fragment$u, safe_not_equal, { type: 1, className: 2 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "TabList",
    			options,
    			id: create_fragment$u.name
    		});
    	}

    	get type() {
    		throw new Error("<TabList>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set type(value) {
    		throw new Error("<TabList>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get className() {
    		throw new Error("<TabList>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set className(value) {
    		throw new Error("<TabList>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    var TabList$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        'default': TabList
    });

    var require$$14 = /*@__PURE__*/getAugmentedNamespace(TabList$1);

    var require$$15 = /*@__PURE__*/getAugmentedNamespace(Tabs$1);

    var require$$16 = /*@__PURE__*/getAugmentedNamespace(TextArea$1);

    var require$$17 = /*@__PURE__*/getAugmentedNamespace(TextInput$1);

    var require$$18 = /*@__PURE__*/getAugmentedNamespace(Toggler$1);

    /* dist/components/tooltip/Tooltip.svelte generated by Svelte v3.42.1 */

    const file$t = "dist/components/tooltip/Tooltip.svelte";

    function create_fragment$t(ctx) {
    	let label;
    	let input;
    	let t0;
    	let div0;
    	let i0;
    	let i0_class_value;
    	let t1;
    	let div2;
    	let i1;
    	let i1_class_value;
    	let t2;
    	let div1;
    	let current;
    	const default_slot_template = /*#slots*/ ctx[6].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[5], null);

    	const block = {
    		c: function create() {
    			label = element("label");
    			input = element("input");
    			t0 = space();
    			div0 = element("div");
    			i0 = element("i");
    			t1 = space();
    			div2 = element("div");
    			i1 = element("i");
    			t2 = space();
    			div1 = element("div");
    			if (default_slot) default_slot.c();
    			attr_dev(input, "type", "checkbox");
    			input.hidden = true;
    			attr_dev(input, "class", "tooltip-input");
    			add_location(input, file$t, 10, 2, 275);
    			attr_dev(i0, "class", i0_class_value = "tooltip-toggle fas fa-" + /*iconOff*/ ctx[1]);
    			add_location(i0, file$t, 12, 4, 362);
    			attr_dev(div0, "class", "tooltip-off");
    			add_location(div0, file$t, 11, 2, 332);
    			attr_dev(i1, "class", i1_class_value = "tooltip-toggle fas fa-" + /*iconOn*/ ctx[0]);
    			add_location(i1, file$t, 15, 4, 448);
    			attr_dev(div1, "class", "padding-s");
    			add_location(div1, file$t, 16, 4, 497);
    			attr_dev(div2, "class", "tooltip-on");
    			add_location(div2, file$t, 14, 2, 419);
    			attr_dev(label, "class", /*cssClass*/ ctx[2]);
    			add_location(label, file$t, 9, 0, 248);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, label, anchor);
    			append_dev(label, input);
    			append_dev(label, t0);
    			append_dev(label, div0);
    			append_dev(div0, i0);
    			append_dev(label, t1);
    			append_dev(label, div2);
    			append_dev(div2, i1);
    			append_dev(div2, t2);
    			append_dev(div2, div1);

    			if (default_slot) {
    				default_slot.m(div1, null);
    			}

    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (!current || dirty & /*iconOff*/ 2 && i0_class_value !== (i0_class_value = "tooltip-toggle fas fa-" + /*iconOff*/ ctx[1])) {
    				attr_dev(i0, "class", i0_class_value);
    			}

    			if (!current || dirty & /*iconOn*/ 1 && i1_class_value !== (i1_class_value = "tooltip-toggle fas fa-" + /*iconOn*/ ctx[0])) {
    				attr_dev(i1, "class", i1_class_value);
    			}

    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 32)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[5],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[5])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[5], dirty, null),
    						null
    					);
    				}
    			}

    			if (!current || dirty & /*cssClass*/ 4) {
    				attr_dev(label, "class", /*cssClass*/ ctx[2]);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(label);
    			if (default_slot) default_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$t.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$t($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Tooltip', slots, ['default']);
    	let { iconOn = 'times' } = $$props;
    	let { iconOff = 'question' } = $$props;
    	let { position = 'left' } = $$props;
    	let { className } = $$props;
    	let cssClass = `tooltip tooltip--${position}`;
    	if (className) cssClass = `${cssClass} ${className}`;
    	const writable_props = ['iconOn', 'iconOff', 'position', 'className'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Tooltip> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('iconOn' in $$props) $$invalidate(0, iconOn = $$props.iconOn);
    		if ('iconOff' in $$props) $$invalidate(1, iconOff = $$props.iconOff);
    		if ('position' in $$props) $$invalidate(3, position = $$props.position);
    		if ('className' in $$props) $$invalidate(4, className = $$props.className);
    		if ('$$scope' in $$props) $$invalidate(5, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		iconOn,
    		iconOff,
    		position,
    		className,
    		cssClass
    	});

    	$$self.$inject_state = $$props => {
    		if ('iconOn' in $$props) $$invalidate(0, iconOn = $$props.iconOn);
    		if ('iconOff' in $$props) $$invalidate(1, iconOff = $$props.iconOff);
    		if ('position' in $$props) $$invalidate(3, position = $$props.position);
    		if ('className' in $$props) $$invalidate(4, className = $$props.className);
    		if ('cssClass' in $$props) $$invalidate(2, cssClass = $$props.cssClass);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [iconOn, iconOff, cssClass, position, className, $$scope, slots];
    }

    class Tooltip extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$t, create_fragment$t, safe_not_equal, {
    			iconOn: 0,
    			iconOff: 1,
    			position: 3,
    			className: 4
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Tooltip",
    			options,
    			id: create_fragment$t.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*className*/ ctx[4] === undefined && !('className' in props)) {
    			console.warn("<Tooltip> was created without expected prop 'className'");
    		}
    	}

    	get iconOn() {
    		throw new Error("<Tooltip>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set iconOn(value) {
    		throw new Error("<Tooltip>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get iconOff() {
    		throw new Error("<Tooltip>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set iconOff(value) {
    		throw new Error("<Tooltip>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get position() {
    		throw new Error("<Tooltip>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set position(value) {
    		throw new Error("<Tooltip>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get className() {
    		throw new Error("<Tooltip>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set className(value) {
    		throw new Error("<Tooltip>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    var Tooltip$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        'default': Tooltip
    });

    var require$$19 = /*@__PURE__*/getAugmentedNamespace(Tooltip$1);

    (function (exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.throttle = exports.parseDate = exports.Tooltip = exports.Toggler = exports.TextInput = exports.TextArea = exports.Tabs = exports.TabList = exports.TabContent = exports.Tab = exports.Spinner = exports.Select = exports.Icon = exports.HorizontalScroll = exports.FormElement = exports.Checkbox = exports.Card = exports.ButtonGroup = exports.Button = exports.Badge = exports.ArticleCard = exports.Accordion = void 0;
    var Accordion_svelte_1 = require$$0$1;
    Object.defineProperty(exports, "Accordion", { enumerable: true, get: function () { return Accordion_svelte_1.default; } });
    var ArticleCard_svelte_1 = require$$1;
    Object.defineProperty(exports, "ArticleCard", { enumerable: true, get: function () { return ArticleCard_svelte_1.default; } });
    var Badge_svelte_1 = require$$2;
    Object.defineProperty(exports, "Badge", { enumerable: true, get: function () { return Badge_svelte_1.default; } });
    var Button_svelte_1 = require$$3;
    Object.defineProperty(exports, "Button", { enumerable: true, get: function () { return Button_svelte_1.default; } });
    var ButtonGroup_svelte_1 = require$$4;
    Object.defineProperty(exports, "ButtonGroup", { enumerable: true, get: function () { return ButtonGroup_svelte_1.default; } });
    var Card_svelte_1 = require$$5;
    Object.defineProperty(exports, "Card", { enumerable: true, get: function () { return Card_svelte_1.default; } });
    var Checkbox_svelte_1 = require$$6;
    Object.defineProperty(exports, "Checkbox", { enumerable: true, get: function () { return Checkbox_svelte_1.default; } });
    var FormElement_svelte_1 = require$$7;
    Object.defineProperty(exports, "FormElement", { enumerable: true, get: function () { return FormElement_svelte_1.default; } });
    var HorizontalScroll_svelte_1 = require$$8;
    Object.defineProperty(exports, "HorizontalScroll", { enumerable: true, get: function () { return HorizontalScroll_svelte_1.default; } });
    var Icon_svelte_1 = require$$9;
    Object.defineProperty(exports, "Icon", { enumerable: true, get: function () { return Icon_svelte_1.default; } });
    var Select_svelte_1 = require$$10;
    Object.defineProperty(exports, "Select", { enumerable: true, get: function () { return Select_svelte_1.default; } });
    var Spinner_svelte_1 = require$$11;
    Object.defineProperty(exports, "Spinner", { enumerable: true, get: function () { return Spinner_svelte_1.default; } });
    var Tab_svelte_1 = require$$12;
    Object.defineProperty(exports, "Tab", { enumerable: true, get: function () { return Tab_svelte_1.default; } });
    var TabContent_svelte_1 = require$$13;
    Object.defineProperty(exports, "TabContent", { enumerable: true, get: function () { return TabContent_svelte_1.default; } });
    var TabList_svelte_1 = require$$14;
    Object.defineProperty(exports, "TabList", { enumerable: true, get: function () { return TabList_svelte_1.default; } });
    var Tabs_svelte_1 = require$$15;
    Object.defineProperty(exports, "Tabs", { enumerable: true, get: function () { return Tabs_svelte_1.default; } });
    var TextArea_svelte_1 = require$$16;
    Object.defineProperty(exports, "TextArea", { enumerable: true, get: function () { return TextArea_svelte_1.default; } });
    var TextInput_svelte_1 = require$$17;
    Object.defineProperty(exports, "TextInput", { enumerable: true, get: function () { return TextInput_svelte_1.default; } });
    var Toggler_svelte_1 = require$$18;
    Object.defineProperty(exports, "Toggler", { enumerable: true, get: function () { return Toggler_svelte_1.default; } });
    var Tooltip_svelte_1 = require$$19;
    Object.defineProperty(exports, "Tooltip", { enumerable: true, get: function () { return Tooltip_svelte_1.default; } });
    var parsedate_1 = parsedate;
    Object.defineProperty(exports, "parseDate", { enumerable: true, get: function () { return parsedate_1.parseDate; } });
    var throttle_1 = throttle$1;
    Object.defineProperty(exports, "throttle", { enumerable: true, get: function () { return throttle_1.throttle; } });
    }(dist$1));

    /* docs_src/routes/Home.svelte generated by Svelte v3.42.1 */
    const file$s = "docs_src/routes/Home.svelte";

    // (31:8) <Card className="padding-m" url={componentsLink}>
    function create_default_slot_2$n(ctx) {
    	let div;
    	let h2;
    	let t1;
    	let i;

    	const block = {
    		c: function create() {
    			div = element("div");
    			h2 = element("h2");
    			h2.textContent = "Components";
    			t1 = space();
    			i = element("i");
    			attr_dev(h2, "class", "color--graa1");
    			add_location(h2, file$s, 32, 12, 1262);
    			attr_dev(i, "class", "home-section-icon fas fa-cubes svelte-pq6zsy");
    			add_location(i, file$s, 33, 12, 1315);
    			attr_dev(div, "class", "flex-item flex-item--center text-align--center");
    			add_location(div, file$s, 31, 10, 1189);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, h2);
    			append_dev(div, t1);
    			append_dev(div, i);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_2$n.name,
    		type: "slot",
    		source: "(31:8) <Card className=\\\"padding-m\\\" url={componentsLink}>",
    		ctx
    	});

    	return block;
    }

    // (39:8) <Card className="padding-m" url={utilityLink}>
    function create_default_slot_1$o(ctx) {
    	let div;
    	let h2;
    	let t1;
    	let i;

    	const block = {
    		c: function create() {
    			div = element("div");
    			h2 = element("h2");
    			h2.textContent = "Utilities";
    			t1 = space();
    			i = element("i");
    			attr_dev(h2, "class", "color--graa1");
    			add_location(h2, file$s, 40, 12, 1597);
    			attr_dev(i, "class", "home-section-icon fab fa-connectdevelop svelte-pq6zsy");
    			add_location(i, file$s, 41, 12, 1649);
    			attr_dev(div, "class", "flex-item flex-item--center text-align--center");
    			add_location(div, file$s, 39, 10, 1524);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, h2);
    			append_dev(div, t1);
    			append_dev(div, i);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_1$o.name,
    		type: "slot",
    		source: "(39:8) <Card className=\\\"padding-m\\\" url={utilityLink}>",
    		ctx
    	});

    	return block;
    }

    // (47:8) <Card className="padding-m" url={guidelineLink}>
    function create_default_slot$p(ctx) {
    	let div;
    	let h2;
    	let t1;
    	let i;

    	const block = {
    		c: function create() {
    			div = element("div");
    			h2 = element("h2");
    			h2.textContent = "Guidelines";
    			t1 = space();
    			i = element("i");
    			attr_dev(h2, "class", "color--graa1");
    			add_location(h2, file$s, 48, 12, 1942);
    			attr_dev(i, "class", "home-section-icon fas fa-quran svelte-pq6zsy");
    			add_location(i, file$s, 49, 12, 1995);
    			attr_dev(div, "class", "flex-item flex-item--center text-align--center");
    			add_location(div, file$s, 47, 10, 1869);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, h2);
    			append_dev(div, t1);
    			append_dev(div, i);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$p.name,
    		type: "slot",
    		source: "(47:8) <Card className=\\\"padding-m\\\" url={guidelineLink}>",
    		ctx
    	});

    	return block;
    }

    function create_fragment$s(ctx) {
    	let div8;
    	let div7;
    	let div0;
    	let img;
    	let img_src_value;
    	let t0;
    	let div1;
    	let h1;
    	let t2;
    	let div2;
    	let t4;
    	let div6;
    	let div3;
    	let card0;
    	let t5;
    	let div4;
    	let card1;
    	let t6;
    	let div5;
    	let card2;
    	let current;

    	card0 = new dist$1.Card({
    			props: {
    				className: "padding-m",
    				url: /*componentsLink*/ ctx[0],
    				$$slots: { default: [create_default_slot_2$n] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	card1 = new dist$1.Card({
    			props: {
    				className: "padding-m",
    				url: /*utilityLink*/ ctx[1],
    				$$slots: { default: [create_default_slot_1$o] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	card2 = new dist$1.Card({
    			props: {
    				className: "padding-m",
    				url: /*guidelineLink*/ ctx[2],
    				$$slots: { default: [create_default_slot$p] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			div8 = element("div");
    			div7 = element("div");
    			div0 = element("div");
    			img = element("img");
    			t0 = space();
    			div1 = element("div");
    			h1 = element("h1");
    			h1.textContent = "Design system";
    			t2 = space();
    			div2 = element("div");
    			div2.textContent = "yarn add @ekstra-bladet/designsystem";
    			t4 = space();
    			div6 = element("div");
    			div3 = element("div");
    			create_component(card0.$$.fragment);
    			t5 = space();
    			div4 = element("div");
    			create_component(card1.$$.fragment);
    			t6 = space();
    			div5 = element("div");
    			create_component(card2.$$.fragment);
    			attr_dev(img, "alt", "");
    			if (!src_url_equal(img.src, img_src_value = "ekstrabladet.svg")) attr_dev(img, "src", img_src_value);
    			set_style(img, "height", "70px");
    			add_location(img, file$s, 22, 6, 766);
    			attr_dev(div0, "class", "flex flex-justify--center");
    			add_location(div0, file$s, 21, 4, 720);
    			add_location(h1, file$s, 25, 6, 899);
    			attr_dev(div1, "class", "flex flex-justify--center  margin-l--b");
    			add_location(div1, file$s, 24, 4, 840);
    			attr_dev(div2, "class", "text-align--center margin-m--tb padding-m bg--graa7");
    			add_location(div2, file$s, 27, 4, 937);
    			attr_dev(div3, "class", "home-section width-1of1 margin-m svelte-pq6zsy");
    			add_location(div3, file$s, 29, 6, 1074);
    			attr_dev(div4, "class", "home-section width-1of1 margin-m svelte-pq6zsy");
    			add_location(div4, file$s, 37, 6, 1412);
    			attr_dev(div5, "class", "home-section width-1of1 margin-m svelte-pq6zsy");
    			add_location(div5, file$s, 45, 6, 1755);
    			attr_dev(div6, "class", "flex");
    			add_location(div6, file$s, 28, 4, 1049);
    			attr_dev(div7, "class", "grid-width--medium");
    			add_location(div7, file$s, 20, 2, 683);
    			attr_dev(div8, "class", "flex flex-justify--around width-1of1");
    			add_location(div8, file$s, 19, 0, 630);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div8, anchor);
    			append_dev(div8, div7);
    			append_dev(div7, div0);
    			append_dev(div0, img);
    			append_dev(div7, t0);
    			append_dev(div7, div1);
    			append_dev(div1, h1);
    			append_dev(div7, t2);
    			append_dev(div7, div2);
    			append_dev(div7, t4);
    			append_dev(div7, div6);
    			append_dev(div6, div3);
    			mount_component(card0, div3, null);
    			append_dev(div6, t5);
    			append_dev(div6, div4);
    			mount_component(card1, div4, null);
    			append_dev(div6, t6);
    			append_dev(div6, div5);
    			mount_component(card2, div5, null);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const card0_changes = {};
    			if (dirty & /*componentsLink*/ 1) card0_changes.url = /*componentsLink*/ ctx[0];

    			if (dirty & /*$$scope*/ 8) {
    				card0_changes.$$scope = { dirty, ctx };
    			}

    			card0.$set(card0_changes);
    			const card1_changes = {};
    			if (dirty & /*utilityLink*/ 2) card1_changes.url = /*utilityLink*/ ctx[1];

    			if (dirty & /*$$scope*/ 8) {
    				card1_changes.$$scope = { dirty, ctx };
    			}

    			card1.$set(card1_changes);
    			const card2_changes = {};
    			if (dirty & /*guidelineLink*/ 4) card2_changes.url = /*guidelineLink*/ ctx[2];

    			if (dirty & /*$$scope*/ 8) {
    				card2_changes.$$scope = { dirty, ctx };
    			}

    			card2.$set(card2_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(card0.$$.fragment, local);
    			transition_in(card1.$$.fragment, local);
    			transition_in(card2.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(card0.$$.fragment, local);
    			transition_out(card1.$$.fragment, local);
    			transition_out(card2.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div8);
    			destroy_component(card0);
    			destroy_component(card1);
    			destroy_component(card2);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$s.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$s($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Home', slots, []);
    	let componentsLink = '#/';
    	let utilityLink = '#/';
    	let guidelineLink = '#/';

    	// Adds dynamic links to home-section cards. It finds the first element for each type.
    	routes.forEach(route => {
    		if (componentsLink === '#/' && route.group === 'components') {
    			$$invalidate(0, componentsLink = `#${route.link}`);
    		}

    		if (utilityLink === '#/' && route.group === 'utilities') {
    			$$invalidate(1, utilityLink = `#${route.link}`);
    		}

    		if (guidelineLink === '#/' && route.group === 'guidelines') {
    			$$invalidate(2, guidelineLink = `#${route.link}`);
    		}
    	});

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Home> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({
    		Card: dist$1.Card,
    		Routes: routes,
    		componentsLink,
    		utilityLink,
    		guidelineLink
    	});

    	$$self.$inject_state = $$props => {
    		if ('componentsLink' in $$props) $$invalidate(0, componentsLink = $$props.componentsLink);
    		if ('utilityLink' in $$props) $$invalidate(1, utilityLink = $$props.utilityLink);
    		if ('guidelineLink' in $$props) $$invalidate(2, guidelineLink = $$props.guidelineLink);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [componentsLink, utilityLink, guidelineLink];
    }

    class Home extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$s, create_fragment$s, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Home",
    			options,
    			id: create_fragment$s.name
    		});
    	}
    }

    if (window.Prism)
        console.warn('Prism has already been initiated. Please ensure that svelte-prism is imported first.');

    window.Prism = window.Prism || {};
    window.Prism.manual = true;

    var prism$2 = {exports: {}};

    (function (module) {
    /* **********************************************
         Begin prism-core.js
    ********************************************** */

    /// <reference lib="WebWorker"/>

    var _self = (typeof window !== 'undefined')
    	? window   // if in browser
    	: (
    		(typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope)
    			? self // if in worker
    			: {}   // if in node js
    	);

    /**
     * Prism: Lightweight, robust, elegant syntax highlighting
     *
     * @license MIT <https://opensource.org/licenses/MIT>
     * @author Lea Verou <https://lea.verou.me>
     * @namespace
     * @public
     */
    var Prism = (function (_self) {

    	// Private helper vars
    	var lang = /\blang(?:uage)?-([\w-]+)\b/i;
    	var uniqueId = 0;

    	// The grammar object for plaintext
    	var plainTextGrammar = {};


    	var _ = {
    		/**
    		 * By default, Prism will attempt to highlight all code elements (by calling {@link Prism.highlightAll}) on the
    		 * current page after the page finished loading. This might be a problem if e.g. you wanted to asynchronously load
    		 * additional languages or plugins yourself.
    		 *
    		 * By setting this value to `true`, Prism will not automatically highlight all code elements on the page.
    		 *
    		 * You obviously have to change this value before the automatic highlighting started. To do this, you can add an
    		 * empty Prism object into the global scope before loading the Prism script like this:
    		 *
    		 * ```js
    		 * window.Prism = window.Prism || {};
    		 * Prism.manual = true;
    		 * // add a new <script> to load Prism's script
    		 * ```
    		 *
    		 * @default false
    		 * @type {boolean}
    		 * @memberof Prism
    		 * @public
    		 */
    		manual: _self.Prism && _self.Prism.manual,
    		disableWorkerMessageHandler: _self.Prism && _self.Prism.disableWorkerMessageHandler,

    		/**
    		 * A namespace for utility methods.
    		 *
    		 * All function in this namespace that are not explicitly marked as _public_ are for __internal use only__ and may
    		 * change or disappear at any time.
    		 *
    		 * @namespace
    		 * @memberof Prism
    		 */
    		util: {
    			encode: function encode(tokens) {
    				if (tokens instanceof Token) {
    					return new Token(tokens.type, encode(tokens.content), tokens.alias);
    				} else if (Array.isArray(tokens)) {
    					return tokens.map(encode);
    				} else {
    					return tokens.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/\u00a0/g, ' ');
    				}
    			},

    			/**
    			 * Returns the name of the type of the given value.
    			 *
    			 * @param {any} o
    			 * @returns {string}
    			 * @example
    			 * type(null)      === 'Null'
    			 * type(undefined) === 'Undefined'
    			 * type(123)       === 'Number'
    			 * type('foo')     === 'String'
    			 * type(true)      === 'Boolean'
    			 * type([1, 2])    === 'Array'
    			 * type({})        === 'Object'
    			 * type(String)    === 'Function'
    			 * type(/abc+/)    === 'RegExp'
    			 */
    			type: function (o) {
    				return Object.prototype.toString.call(o).slice(8, -1);
    			},

    			/**
    			 * Returns a unique number for the given object. Later calls will still return the same number.
    			 *
    			 * @param {Object} obj
    			 * @returns {number}
    			 */
    			objId: function (obj) {
    				if (!obj['__id']) {
    					Object.defineProperty(obj, '__id', { value: ++uniqueId });
    				}
    				return obj['__id'];
    			},

    			/**
    			 * Creates a deep clone of the given object.
    			 *
    			 * The main intended use of this function is to clone language definitions.
    			 *
    			 * @param {T} o
    			 * @param {Record<number, any>} [visited]
    			 * @returns {T}
    			 * @template T
    			 */
    			clone: function deepClone(o, visited) {
    				visited = visited || {};

    				var clone; var id;
    				switch (_.util.type(o)) {
    					case 'Object':
    						id = _.util.objId(o);
    						if (visited[id]) {
    							return visited[id];
    						}
    						clone = /** @type {Record<string, any>} */ ({});
    						visited[id] = clone;

    						for (var key in o) {
    							if (o.hasOwnProperty(key)) {
    								clone[key] = deepClone(o[key], visited);
    							}
    						}

    						return /** @type {any} */ (clone);

    					case 'Array':
    						id = _.util.objId(o);
    						if (visited[id]) {
    							return visited[id];
    						}
    						clone = [];
    						visited[id] = clone;

    						(/** @type {Array} */(/** @type {any} */(o))).forEach(function (v, i) {
    							clone[i] = deepClone(v, visited);
    						});

    						return /** @type {any} */ (clone);

    					default:
    						return o;
    				}
    			},

    			/**
    			 * Returns the Prism language of the given element set by a `language-xxxx` or `lang-xxxx` class.
    			 *
    			 * If no language is set for the element or the element is `null` or `undefined`, `none` will be returned.
    			 *
    			 * @param {Element} element
    			 * @returns {string}
    			 */
    			getLanguage: function (element) {
    				while (element && !lang.test(element.className)) {
    					element = element.parentElement;
    				}
    				if (element) {
    					return (element.className.match(lang) || [, 'none'])[1].toLowerCase();
    				}
    				return 'none';
    			},

    			/**
    			 * Returns the script element that is currently executing.
    			 *
    			 * This does __not__ work for line script element.
    			 *
    			 * @returns {HTMLScriptElement | null}
    			 */
    			currentScript: function () {
    				if (typeof document === 'undefined') {
    					return null;
    				}
    				if ('currentScript' in document && 1 < 2 /* hack to trip TS' flow analysis */) {
    					return /** @type {any} */ (document.currentScript);
    				}

    				// IE11 workaround
    				// we'll get the src of the current script by parsing IE11's error stack trace
    				// this will not work for inline scripts

    				try {
    					throw new Error();
    				} catch (err) {
    					// Get file src url from stack. Specifically works with the format of stack traces in IE.
    					// A stack will look like this:
    					//
    					// Error
    					//    at _.util.currentScript (http://localhost/components/prism-core.js:119:5)
    					//    at Global code (http://localhost/components/prism-core.js:606:1)

    					var src = (/at [^(\r\n]*\((.*):.+:.+\)$/i.exec(err.stack) || [])[1];
    					if (src) {
    						var scripts = document.getElementsByTagName('script');
    						for (var i in scripts) {
    							if (scripts[i].src == src) {
    								return scripts[i];
    							}
    						}
    					}
    					return null;
    				}
    			},

    			/**
    			 * Returns whether a given class is active for `element`.
    			 *
    			 * The class can be activated if `element` or one of its ancestors has the given class and it can be deactivated
    			 * if `element` or one of its ancestors has the negated version of the given class. The _negated version_ of the
    			 * given class is just the given class with a `no-` prefix.
    			 *
    			 * Whether the class is active is determined by the closest ancestor of `element` (where `element` itself is
    			 * closest ancestor) that has the given class or the negated version of it. If neither `element` nor any of its
    			 * ancestors have the given class or the negated version of it, then the default activation will be returned.
    			 *
    			 * In the paradoxical situation where the closest ancestor contains __both__ the given class and the negated
    			 * version of it, the class is considered active.
    			 *
    			 * @param {Element} element
    			 * @param {string} className
    			 * @param {boolean} [defaultActivation=false]
    			 * @returns {boolean}
    			 */
    			isActive: function (element, className, defaultActivation) {
    				var no = 'no-' + className;

    				while (element) {
    					var classList = element.classList;
    					if (classList.contains(className)) {
    						return true;
    					}
    					if (classList.contains(no)) {
    						return false;
    					}
    					element = element.parentElement;
    				}
    				return !!defaultActivation;
    			}
    		},

    		/**
    		 * This namespace contains all currently loaded languages and the some helper functions to create and modify languages.
    		 *
    		 * @namespace
    		 * @memberof Prism
    		 * @public
    		 */
    		languages: {
    			/**
    			 * The grammar for plain, unformatted text.
    			 */
    			plain: plainTextGrammar,
    			plaintext: plainTextGrammar,
    			text: plainTextGrammar,
    			txt: plainTextGrammar,

    			/**
    			 * Creates a deep copy of the language with the given id and appends the given tokens.
    			 *
    			 * If a token in `redef` also appears in the copied language, then the existing token in the copied language
    			 * will be overwritten at its original position.
    			 *
    			 * ## Best practices
    			 *
    			 * Since the position of overwriting tokens (token in `redef` that overwrite tokens in the copied language)
    			 * doesn't matter, they can technically be in any order. However, this can be confusing to others that trying to
    			 * understand the language definition because, normally, the order of tokens matters in Prism grammars.
    			 *
    			 * Therefore, it is encouraged to order overwriting tokens according to the positions of the overwritten tokens.
    			 * Furthermore, all non-overwriting tokens should be placed after the overwriting ones.
    			 *
    			 * @param {string} id The id of the language to extend. This has to be a key in `Prism.languages`.
    			 * @param {Grammar} redef The new tokens to append.
    			 * @returns {Grammar} The new language created.
    			 * @public
    			 * @example
    			 * Prism.languages['css-with-colors'] = Prism.languages.extend('css', {
    			 *     // Prism.languages.css already has a 'comment' token, so this token will overwrite CSS' 'comment' token
    			 *     // at its original position
    			 *     'comment': { ... },
    			 *     // CSS doesn't have a 'color' token, so this token will be appended
    			 *     'color': /\b(?:red|green|blue)\b/
    			 * });
    			 */
    			extend: function (id, redef) {
    				var lang = _.util.clone(_.languages[id]);

    				for (var key in redef) {
    					lang[key] = redef[key];
    				}

    				return lang;
    			},

    			/**
    			 * Inserts tokens _before_ another token in a language definition or any other grammar.
    			 *
    			 * ## Usage
    			 *
    			 * This helper method makes it easy to modify existing languages. For example, the CSS language definition
    			 * not only defines CSS highlighting for CSS documents, but also needs to define highlighting for CSS embedded
    			 * in HTML through `<style>` elements. To do this, it needs to modify `Prism.languages.markup` and add the
    			 * appropriate tokens. However, `Prism.languages.markup` is a regular JavaScript object literal, so if you do
    			 * this:
    			 *
    			 * ```js
    			 * Prism.languages.markup.style = {
    			 *     // token
    			 * };
    			 * ```
    			 *
    			 * then the `style` token will be added (and processed) at the end. `insertBefore` allows you to insert tokens
    			 * before existing tokens. For the CSS example above, you would use it like this:
    			 *
    			 * ```js
    			 * Prism.languages.insertBefore('markup', 'cdata', {
    			 *     'style': {
    			 *         // token
    			 *     }
    			 * });
    			 * ```
    			 *
    			 * ## Special cases
    			 *
    			 * If the grammars of `inside` and `insert` have tokens with the same name, the tokens in `inside`'s grammar
    			 * will be ignored.
    			 *
    			 * This behavior can be used to insert tokens after `before`:
    			 *
    			 * ```js
    			 * Prism.languages.insertBefore('markup', 'comment', {
    			 *     'comment': Prism.languages.markup.comment,
    			 *     // tokens after 'comment'
    			 * });
    			 * ```
    			 *
    			 * ## Limitations
    			 *
    			 * The main problem `insertBefore` has to solve is iteration order. Since ES2015, the iteration order for object
    			 * properties is guaranteed to be the insertion order (except for integer keys) but some browsers behave
    			 * differently when keys are deleted and re-inserted. So `insertBefore` can't be implemented by temporarily
    			 * deleting properties which is necessary to insert at arbitrary positions.
    			 *
    			 * To solve this problem, `insertBefore` doesn't actually insert the given tokens into the target object.
    			 * Instead, it will create a new object and replace all references to the target object with the new one. This
    			 * can be done without temporarily deleting properties, so the iteration order is well-defined.
    			 *
    			 * However, only references that can be reached from `Prism.languages` or `insert` will be replaced. I.e. if
    			 * you hold the target object in a variable, then the value of the variable will not change.
    			 *
    			 * ```js
    			 * var oldMarkup = Prism.languages.markup;
    			 * var newMarkup = Prism.languages.insertBefore('markup', 'comment', { ... });
    			 *
    			 * assert(oldMarkup !== Prism.languages.markup);
    			 * assert(newMarkup === Prism.languages.markup);
    			 * ```
    			 *
    			 * @param {string} inside The property of `root` (e.g. a language id in `Prism.languages`) that contains the
    			 * object to be modified.
    			 * @param {string} before The key to insert before.
    			 * @param {Grammar} insert An object containing the key-value pairs to be inserted.
    			 * @param {Object<string, any>} [root] The object containing `inside`, i.e. the object that contains the
    			 * object to be modified.
    			 *
    			 * Defaults to `Prism.languages`.
    			 * @returns {Grammar} The new grammar object.
    			 * @public
    			 */
    			insertBefore: function (inside, before, insert, root) {
    				root = root || /** @type {any} */ (_.languages);
    				var grammar = root[inside];
    				/** @type {Grammar} */
    				var ret = {};

    				for (var token in grammar) {
    					if (grammar.hasOwnProperty(token)) {

    						if (token == before) {
    							for (var newToken in insert) {
    								if (insert.hasOwnProperty(newToken)) {
    									ret[newToken] = insert[newToken];
    								}
    							}
    						}

    						// Do not insert token which also occur in insert. See #1525
    						if (!insert.hasOwnProperty(token)) {
    							ret[token] = grammar[token];
    						}
    					}
    				}

    				var old = root[inside];
    				root[inside] = ret;

    				// Update references in other language definitions
    				_.languages.DFS(_.languages, function (key, value) {
    					if (value === old && key != inside) {
    						this[key] = ret;
    					}
    				});

    				return ret;
    			},

    			// Traverse a language definition with Depth First Search
    			DFS: function DFS(o, callback, type, visited) {
    				visited = visited || {};

    				var objId = _.util.objId;

    				for (var i in o) {
    					if (o.hasOwnProperty(i)) {
    						callback.call(o, i, o[i], type || i);

    						var property = o[i];
    						var propertyType = _.util.type(property);

    						if (propertyType === 'Object' && !visited[objId(property)]) {
    							visited[objId(property)] = true;
    							DFS(property, callback, null, visited);
    						} else if (propertyType === 'Array' && !visited[objId(property)]) {
    							visited[objId(property)] = true;
    							DFS(property, callback, i, visited);
    						}
    					}
    				}
    			}
    		},

    		plugins: {},

    		/**
    		 * This is the most high-level function in Prism’s API.
    		 * It fetches all the elements that have a `.language-xxxx` class and then calls {@link Prism.highlightElement} on
    		 * each one of them.
    		 *
    		 * This is equivalent to `Prism.highlightAllUnder(document, async, callback)`.
    		 *
    		 * @param {boolean} [async=false] Same as in {@link Prism.highlightAllUnder}.
    		 * @param {HighlightCallback} [callback] Same as in {@link Prism.highlightAllUnder}.
    		 * @memberof Prism
    		 * @public
    		 */
    		highlightAll: function (async, callback) {
    			_.highlightAllUnder(document, async, callback);
    		},

    		/**
    		 * Fetches all the descendants of `container` that have a `.language-xxxx` class and then calls
    		 * {@link Prism.highlightElement} on each one of them.
    		 *
    		 * The following hooks will be run:
    		 * 1. `before-highlightall`
    		 * 2. `before-all-elements-highlight`
    		 * 3. All hooks of {@link Prism.highlightElement} for each element.
    		 *
    		 * @param {ParentNode} container The root element, whose descendants that have a `.language-xxxx` class will be highlighted.
    		 * @param {boolean} [async=false] Whether each element is to be highlighted asynchronously using Web Workers.
    		 * @param {HighlightCallback} [callback] An optional callback to be invoked on each element after its highlighting is done.
    		 * @memberof Prism
    		 * @public
    		 */
    		highlightAllUnder: function (container, async, callback) {
    			var env = {
    				callback: callback,
    				container: container,
    				selector: 'code[class*="language-"], [class*="language-"] code, code[class*="lang-"], [class*="lang-"] code'
    			};

    			_.hooks.run('before-highlightall', env);

    			env.elements = Array.prototype.slice.apply(env.container.querySelectorAll(env.selector));

    			_.hooks.run('before-all-elements-highlight', env);

    			for (var i = 0, element; (element = env.elements[i++]);) {
    				_.highlightElement(element, async === true, env.callback);
    			}
    		},

    		/**
    		 * Highlights the code inside a single element.
    		 *
    		 * The following hooks will be run:
    		 * 1. `before-sanity-check`
    		 * 2. `before-highlight`
    		 * 3. All hooks of {@link Prism.highlight}. These hooks will be run by an asynchronous worker if `async` is `true`.
    		 * 4. `before-insert`
    		 * 5. `after-highlight`
    		 * 6. `complete`
    		 *
    		 * Some the above hooks will be skipped if the element doesn't contain any text or there is no grammar loaded for
    		 * the element's language.
    		 *
    		 * @param {Element} element The element containing the code.
    		 * It must have a class of `language-xxxx` to be processed, where `xxxx` is a valid language identifier.
    		 * @param {boolean} [async=false] Whether the element is to be highlighted asynchronously using Web Workers
    		 * to improve performance and avoid blocking the UI when highlighting very large chunks of code. This option is
    		 * [disabled by default](https://prismjs.com/faq.html#why-is-asynchronous-highlighting-disabled-by-default).
    		 *
    		 * Note: All language definitions required to highlight the code must be included in the main `prism.js` file for
    		 * asynchronous highlighting to work. You can build your own bundle on the
    		 * [Download page](https://prismjs.com/download.html).
    		 * @param {HighlightCallback} [callback] An optional callback to be invoked after the highlighting is done.
    		 * Mostly useful when `async` is `true`, since in that case, the highlighting is done asynchronously.
    		 * @memberof Prism
    		 * @public
    		 */
    		highlightElement: function (element, async, callback) {
    			// Find language
    			var language = _.util.getLanguage(element);
    			var grammar = _.languages[language];

    			// Set language on the element, if not present
    			element.className = element.className.replace(lang, '').replace(/\s+/g, ' ') + ' language-' + language;

    			// Set language on the parent, for styling
    			var parent = element.parentElement;
    			if (parent && parent.nodeName.toLowerCase() === 'pre') {
    				parent.className = parent.className.replace(lang, '').replace(/\s+/g, ' ') + ' language-' + language;
    			}

    			var code = element.textContent;

    			var env = {
    				element: element,
    				language: language,
    				grammar: grammar,
    				code: code
    			};

    			function insertHighlightedCode(highlightedCode) {
    				env.highlightedCode = highlightedCode;

    				_.hooks.run('before-insert', env);

    				env.element.innerHTML = env.highlightedCode;

    				_.hooks.run('after-highlight', env);
    				_.hooks.run('complete', env);
    				callback && callback.call(env.element);
    			}

    			_.hooks.run('before-sanity-check', env);

    			// plugins may change/add the parent/element
    			parent = env.element.parentElement;
    			if (parent && parent.nodeName.toLowerCase() === 'pre' && !parent.hasAttribute('tabindex')) {
    				parent.setAttribute('tabindex', '0');
    			}

    			if (!env.code) {
    				_.hooks.run('complete', env);
    				callback && callback.call(env.element);
    				return;
    			}

    			_.hooks.run('before-highlight', env);

    			if (!env.grammar) {
    				insertHighlightedCode(_.util.encode(env.code));
    				return;
    			}

    			if (async && _self.Worker) {
    				var worker = new Worker(_.filename);

    				worker.onmessage = function (evt) {
    					insertHighlightedCode(evt.data);
    				};

    				worker.postMessage(JSON.stringify({
    					language: env.language,
    					code: env.code,
    					immediateClose: true
    				}));
    			} else {
    				insertHighlightedCode(_.highlight(env.code, env.grammar, env.language));
    			}
    		},

    		/**
    		 * Low-level function, only use if you know what you’re doing. It accepts a string of text as input
    		 * and the language definitions to use, and returns a string with the HTML produced.
    		 *
    		 * The following hooks will be run:
    		 * 1. `before-tokenize`
    		 * 2. `after-tokenize`
    		 * 3. `wrap`: On each {@link Token}.
    		 *
    		 * @param {string} text A string with the code to be highlighted.
    		 * @param {Grammar} grammar An object containing the tokens to use.
    		 *
    		 * Usually a language definition like `Prism.languages.markup`.
    		 * @param {string} language The name of the language definition passed to `grammar`.
    		 * @returns {string} The highlighted HTML.
    		 * @memberof Prism
    		 * @public
    		 * @example
    		 * Prism.highlight('var foo = true;', Prism.languages.javascript, 'javascript');
    		 */
    		highlight: function (text, grammar, language) {
    			var env = {
    				code: text,
    				grammar: grammar,
    				language: language
    			};
    			_.hooks.run('before-tokenize', env);
    			env.tokens = _.tokenize(env.code, env.grammar);
    			_.hooks.run('after-tokenize', env);
    			return Token.stringify(_.util.encode(env.tokens), env.language);
    		},

    		/**
    		 * This is the heart of Prism, and the most low-level function you can use. It accepts a string of text as input
    		 * and the language definitions to use, and returns an array with the tokenized code.
    		 *
    		 * When the language definition includes nested tokens, the function is called recursively on each of these tokens.
    		 *
    		 * This method could be useful in other contexts as well, as a very crude parser.
    		 *
    		 * @param {string} text A string with the code to be highlighted.
    		 * @param {Grammar} grammar An object containing the tokens to use.
    		 *
    		 * Usually a language definition like `Prism.languages.markup`.
    		 * @returns {TokenStream} An array of strings and tokens, a token stream.
    		 * @memberof Prism
    		 * @public
    		 * @example
    		 * let code = `var foo = 0;`;
    		 * let tokens = Prism.tokenize(code, Prism.languages.javascript);
    		 * tokens.forEach(token => {
    		 *     if (token instanceof Prism.Token && token.type === 'number') {
    		 *         console.log(`Found numeric literal: ${token.content}`);
    		 *     }
    		 * });
    		 */
    		tokenize: function (text, grammar) {
    			var rest = grammar.rest;
    			if (rest) {
    				for (var token in rest) {
    					grammar[token] = rest[token];
    				}

    				delete grammar.rest;
    			}

    			var tokenList = new LinkedList();
    			addAfter(tokenList, tokenList.head, text);

    			matchGrammar(text, tokenList, grammar, tokenList.head, 0);

    			return toArray(tokenList);
    		},

    		/**
    		 * @namespace
    		 * @memberof Prism
    		 * @public
    		 */
    		hooks: {
    			all: {},

    			/**
    			 * Adds the given callback to the list of callbacks for the given hook.
    			 *
    			 * The callback will be invoked when the hook it is registered for is run.
    			 * Hooks are usually directly run by a highlight function but you can also run hooks yourself.
    			 *
    			 * One callback function can be registered to multiple hooks and the same hook multiple times.
    			 *
    			 * @param {string} name The name of the hook.
    			 * @param {HookCallback} callback The callback function which is given environment variables.
    			 * @public
    			 */
    			add: function (name, callback) {
    				var hooks = _.hooks.all;

    				hooks[name] = hooks[name] || [];

    				hooks[name].push(callback);
    			},

    			/**
    			 * Runs a hook invoking all registered callbacks with the given environment variables.
    			 *
    			 * Callbacks will be invoked synchronously and in the order in which they were registered.
    			 *
    			 * @param {string} name The name of the hook.
    			 * @param {Object<string, any>} env The environment variables of the hook passed to all callbacks registered.
    			 * @public
    			 */
    			run: function (name, env) {
    				var callbacks = _.hooks.all[name];

    				if (!callbacks || !callbacks.length) {
    					return;
    				}

    				for (var i = 0, callback; (callback = callbacks[i++]);) {
    					callback(env);
    				}
    			}
    		},

    		Token: Token
    	};
    	_self.Prism = _;


    	// Typescript note:
    	// The following can be used to import the Token type in JSDoc:
    	//
    	//   @typedef {InstanceType<import("./prism-core")["Token"]>} Token

    	/**
    	 * Creates a new token.
    	 *
    	 * @param {string} type See {@link Token#type type}
    	 * @param {string | TokenStream} content See {@link Token#content content}
    	 * @param {string|string[]} [alias] The alias(es) of the token.
    	 * @param {string} [matchedStr=""] A copy of the full string this token was created from.
    	 * @class
    	 * @global
    	 * @public
    	 */
    	function Token(type, content, alias, matchedStr) {
    		/**
    		 * The type of the token.
    		 *
    		 * This is usually the key of a pattern in a {@link Grammar}.
    		 *
    		 * @type {string}
    		 * @see GrammarToken
    		 * @public
    		 */
    		this.type = type;
    		/**
    		 * The strings or tokens contained by this token.
    		 *
    		 * This will be a token stream if the pattern matched also defined an `inside` grammar.
    		 *
    		 * @type {string | TokenStream}
    		 * @public
    		 */
    		this.content = content;
    		/**
    		 * The alias(es) of the token.
    		 *
    		 * @type {string|string[]}
    		 * @see GrammarToken
    		 * @public
    		 */
    		this.alias = alias;
    		// Copy of the full string this token was created from
    		this.length = (matchedStr || '').length | 0;
    	}

    	/**
    	 * A token stream is an array of strings and {@link Token Token} objects.
    	 *
    	 * Token streams have to fulfill a few properties that are assumed by most functions (mostly internal ones) that process
    	 * them.
    	 *
    	 * 1. No adjacent strings.
    	 * 2. No empty strings.
    	 *
    	 *    The only exception here is the token stream that only contains the empty string and nothing else.
    	 *
    	 * @typedef {Array<string | Token>} TokenStream
    	 * @global
    	 * @public
    	 */

    	/**
    	 * Converts the given token or token stream to an HTML representation.
    	 *
    	 * The following hooks will be run:
    	 * 1. `wrap`: On each {@link Token}.
    	 *
    	 * @param {string | Token | TokenStream} o The token or token stream to be converted.
    	 * @param {string} language The name of current language.
    	 * @returns {string} The HTML representation of the token or token stream.
    	 * @memberof Token
    	 * @static
    	 */
    	Token.stringify = function stringify(o, language) {
    		if (typeof o == 'string') {
    			return o;
    		}
    		if (Array.isArray(o)) {
    			var s = '';
    			o.forEach(function (e) {
    				s += stringify(e, language);
    			});
    			return s;
    		}

    		var env = {
    			type: o.type,
    			content: stringify(o.content, language),
    			tag: 'span',
    			classes: ['token', o.type],
    			attributes: {},
    			language: language
    		};

    		var aliases = o.alias;
    		if (aliases) {
    			if (Array.isArray(aliases)) {
    				Array.prototype.push.apply(env.classes, aliases);
    			} else {
    				env.classes.push(aliases);
    			}
    		}

    		_.hooks.run('wrap', env);

    		var attributes = '';
    		for (var name in env.attributes) {
    			attributes += ' ' + name + '="' + (env.attributes[name] || '').replace(/"/g, '&quot;') + '"';
    		}

    		return '<' + env.tag + ' class="' + env.classes.join(' ') + '"' + attributes + '>' + env.content + '</' + env.tag + '>';
    	};

    	/**
    	 * @param {RegExp} pattern
    	 * @param {number} pos
    	 * @param {string} text
    	 * @param {boolean} lookbehind
    	 * @returns {RegExpExecArray | null}
    	 */
    	function matchPattern(pattern, pos, text, lookbehind) {
    		pattern.lastIndex = pos;
    		var match = pattern.exec(text);
    		if (match && lookbehind && match[1]) {
    			// change the match to remove the text matched by the Prism lookbehind group
    			var lookbehindLength = match[1].length;
    			match.index += lookbehindLength;
    			match[0] = match[0].slice(lookbehindLength);
    		}
    		return match;
    	}

    	/**
    	 * @param {string} text
    	 * @param {LinkedList<string | Token>} tokenList
    	 * @param {any} grammar
    	 * @param {LinkedListNode<string | Token>} startNode
    	 * @param {number} startPos
    	 * @param {RematchOptions} [rematch]
    	 * @returns {void}
    	 * @private
    	 *
    	 * @typedef RematchOptions
    	 * @property {string} cause
    	 * @property {number} reach
    	 */
    	function matchGrammar(text, tokenList, grammar, startNode, startPos, rematch) {
    		for (var token in grammar) {
    			if (!grammar.hasOwnProperty(token) || !grammar[token]) {
    				continue;
    			}

    			var patterns = grammar[token];
    			patterns = Array.isArray(patterns) ? patterns : [patterns];

    			for (var j = 0; j < patterns.length; ++j) {
    				if (rematch && rematch.cause == token + ',' + j) {
    					return;
    				}

    				var patternObj = patterns[j];
    				var inside = patternObj.inside;
    				var lookbehind = !!patternObj.lookbehind;
    				var greedy = !!patternObj.greedy;
    				var alias = patternObj.alias;

    				if (greedy && !patternObj.pattern.global) {
    					// Without the global flag, lastIndex won't work
    					var flags = patternObj.pattern.toString().match(/[imsuy]*$/)[0];
    					patternObj.pattern = RegExp(patternObj.pattern.source, flags + 'g');
    				}

    				/** @type {RegExp} */
    				var pattern = patternObj.pattern || patternObj;

    				for ( // iterate the token list and keep track of the current token/string position
    					var currentNode = startNode.next, pos = startPos;
    					currentNode !== tokenList.tail;
    					pos += currentNode.value.length, currentNode = currentNode.next
    				) {

    					if (rematch && pos >= rematch.reach) {
    						break;
    					}

    					var str = currentNode.value;

    					if (tokenList.length > text.length) {
    						// Something went terribly wrong, ABORT, ABORT!
    						return;
    					}

    					if (str instanceof Token) {
    						continue;
    					}

    					var removeCount = 1; // this is the to parameter of removeBetween
    					var match;

    					if (greedy) {
    						match = matchPattern(pattern, pos, text, lookbehind);
    						if (!match) {
    							break;
    						}

    						var from = match.index;
    						var to = match.index + match[0].length;
    						var p = pos;

    						// find the node that contains the match
    						p += currentNode.value.length;
    						while (from >= p) {
    							currentNode = currentNode.next;
    							p += currentNode.value.length;
    						}
    						// adjust pos (and p)
    						p -= currentNode.value.length;
    						pos = p;

    						// the current node is a Token, then the match starts inside another Token, which is invalid
    						if (currentNode.value instanceof Token) {
    							continue;
    						}

    						// find the last node which is affected by this match
    						for (
    							var k = currentNode;
    							k !== tokenList.tail && (p < to || typeof k.value === 'string');
    							k = k.next
    						) {
    							removeCount++;
    							p += k.value.length;
    						}
    						removeCount--;

    						// replace with the new match
    						str = text.slice(pos, p);
    						match.index -= pos;
    					} else {
    						match = matchPattern(pattern, 0, str, lookbehind);
    						if (!match) {
    							continue;
    						}
    					}

    					// eslint-disable-next-line no-redeclare
    					var from = match.index;
    					var matchStr = match[0];
    					var before = str.slice(0, from);
    					var after = str.slice(from + matchStr.length);

    					var reach = pos + str.length;
    					if (rematch && reach > rematch.reach) {
    						rematch.reach = reach;
    					}

    					var removeFrom = currentNode.prev;

    					if (before) {
    						removeFrom = addAfter(tokenList, removeFrom, before);
    						pos += before.length;
    					}

    					removeRange(tokenList, removeFrom, removeCount);

    					var wrapped = new Token(token, inside ? _.tokenize(matchStr, inside) : matchStr, alias, matchStr);
    					currentNode = addAfter(tokenList, removeFrom, wrapped);

    					if (after) {
    						addAfter(tokenList, currentNode, after);
    					}

    					if (removeCount > 1) {
    						// at least one Token object was removed, so we have to do some rematching
    						// this can only happen if the current pattern is greedy

    						/** @type {RematchOptions} */
    						var nestedRematch = {
    							cause: token + ',' + j,
    							reach: reach
    						};
    						matchGrammar(text, tokenList, grammar, currentNode.prev, pos, nestedRematch);

    						// the reach might have been extended because of the rematching
    						if (rematch && nestedRematch.reach > rematch.reach) {
    							rematch.reach = nestedRematch.reach;
    						}
    					}
    				}
    			}
    		}
    	}

    	/**
    	 * @typedef LinkedListNode
    	 * @property {T} value
    	 * @property {LinkedListNode<T> | null} prev The previous node.
    	 * @property {LinkedListNode<T> | null} next The next node.
    	 * @template T
    	 * @private
    	 */

    	/**
    	 * @template T
    	 * @private
    	 */
    	function LinkedList() {
    		/** @type {LinkedListNode<T>} */
    		var head = { value: null, prev: null, next: null };
    		/** @type {LinkedListNode<T>} */
    		var tail = { value: null, prev: head, next: null };
    		head.next = tail;

    		/** @type {LinkedListNode<T>} */
    		this.head = head;
    		/** @type {LinkedListNode<T>} */
    		this.tail = tail;
    		this.length = 0;
    	}

    	/**
    	 * Adds a new node with the given value to the list.
    	 *
    	 * @param {LinkedList<T>} list
    	 * @param {LinkedListNode<T>} node
    	 * @param {T} value
    	 * @returns {LinkedListNode<T>} The added node.
    	 * @template T
    	 */
    	function addAfter(list, node, value) {
    		// assumes that node != list.tail && values.length >= 0
    		var next = node.next;

    		var newNode = { value: value, prev: node, next: next };
    		node.next = newNode;
    		next.prev = newNode;
    		list.length++;

    		return newNode;
    	}
    	/**
    	 * Removes `count` nodes after the given node. The given node will not be removed.
    	 *
    	 * @param {LinkedList<T>} list
    	 * @param {LinkedListNode<T>} node
    	 * @param {number} count
    	 * @template T
    	 */
    	function removeRange(list, node, count) {
    		var next = node.next;
    		for (var i = 0; i < count && next !== list.tail; i++) {
    			next = next.next;
    		}
    		node.next = next;
    		next.prev = node;
    		list.length -= i;
    	}
    	/**
    	 * @param {LinkedList<T>} list
    	 * @returns {T[]}
    	 * @template T
    	 */
    	function toArray(list) {
    		var array = [];
    		var node = list.head.next;
    		while (node !== list.tail) {
    			array.push(node.value);
    			node = node.next;
    		}
    		return array;
    	}


    	if (!_self.document) {
    		if (!_self.addEventListener) {
    			// in Node.js
    			return _;
    		}

    		if (!_.disableWorkerMessageHandler) {
    			// In worker
    			_self.addEventListener('message', function (evt) {
    				var message = JSON.parse(evt.data);
    				var lang = message.language;
    				var code = message.code;
    				var immediateClose = message.immediateClose;

    				_self.postMessage(_.highlight(code, _.languages[lang], lang));
    				if (immediateClose) {
    					_self.close();
    				}
    			}, false);
    		}

    		return _;
    	}

    	// Get current script and highlight
    	var script = _.util.currentScript();

    	if (script) {
    		_.filename = script.src;

    		if (script.hasAttribute('data-manual')) {
    			_.manual = true;
    		}
    	}

    	function highlightAutomaticallyCallback() {
    		if (!_.manual) {
    			_.highlightAll();
    		}
    	}

    	if (!_.manual) {
    		// If the document state is "loading", then we'll use DOMContentLoaded.
    		// If the document state is "interactive" and the prism.js script is deferred, then we'll also use the
    		// DOMContentLoaded event because there might be some plugins or languages which have also been deferred and they
    		// might take longer one animation frame to execute which can create a race condition where only some plugins have
    		// been loaded when Prism.highlightAll() is executed, depending on how fast resources are loaded.
    		// See https://github.com/PrismJS/prism/issues/2102
    		var readyState = document.readyState;
    		if (readyState === 'loading' || readyState === 'interactive' && script && script.defer) {
    			document.addEventListener('DOMContentLoaded', highlightAutomaticallyCallback);
    		} else {
    			if (window.requestAnimationFrame) {
    				window.requestAnimationFrame(highlightAutomaticallyCallback);
    			} else {
    				window.setTimeout(highlightAutomaticallyCallback, 16);
    			}
    		}
    	}

    	return _;

    }(_self));

    if (module.exports) {
    	module.exports = Prism;
    }

    // hack for components to work correctly in node.js
    if (typeof commonjsGlobal !== 'undefined') {
    	commonjsGlobal.Prism = Prism;
    }

    // some additional documentation/types

    /**
     * The expansion of a simple `RegExp` literal to support additional properties.
     *
     * @typedef GrammarToken
     * @property {RegExp} pattern The regular expression of the token.
     * @property {boolean} [lookbehind=false] If `true`, then the first capturing group of `pattern` will (effectively)
     * behave as a lookbehind group meaning that the captured text will not be part of the matched text of the new token.
     * @property {boolean} [greedy=false] Whether the token is greedy.
     * @property {string|string[]} [alias] An optional alias or list of aliases.
     * @property {Grammar} [inside] The nested grammar of this token.
     *
     * The `inside` grammar will be used to tokenize the text value of each token of this kind.
     *
     * This can be used to make nested and even recursive language definitions.
     *
     * Note: This can cause infinite recursion. Be careful when you embed different languages or even the same language into
     * each another.
     * @global
     * @public
     */

    /**
     * @typedef Grammar
     * @type {Object<string, RegExp | GrammarToken | Array<RegExp | GrammarToken>>}
     * @property {Grammar} [rest] An optional grammar object that will be appended to this grammar.
     * @global
     * @public
     */

    /**
     * A function which will invoked after an element was successfully highlighted.
     *
     * @callback HighlightCallback
     * @param {Element} element The element successfully highlighted.
     * @returns {void}
     * @global
     * @public
     */

    /**
     * @callback HookCallback
     * @param {Object<string, any>} env The environment variables of the hook.
     * @returns {void}
     * @global
     * @public
     */


    /* **********************************************
         Begin prism-markup.js
    ********************************************** */

    Prism.languages.markup = {
    	'comment': /<!--[\s\S]*?-->/,
    	'prolog': /<\?[\s\S]+?\?>/,
    	'doctype': {
    		// https://www.w3.org/TR/xml/#NT-doctypedecl
    		pattern: /<!DOCTYPE(?:[^>"'[\]]|"[^"]*"|'[^']*')+(?:\[(?:[^<"'\]]|"[^"]*"|'[^']*'|<(?!!--)|<!--(?:[^-]|-(?!->))*-->)*\]\s*)?>/i,
    		greedy: true,
    		inside: {
    			'internal-subset': {
    				pattern: /(^[^\[]*\[)[\s\S]+(?=\]>$)/,
    				lookbehind: true,
    				greedy: true,
    				inside: null // see below
    			},
    			'string': {
    				pattern: /"[^"]*"|'[^']*'/,
    				greedy: true
    			},
    			'punctuation': /^<!|>$|[[\]]/,
    			'doctype-tag': /^DOCTYPE/,
    			'name': /[^\s<>'"]+/
    		}
    	},
    	'cdata': /<!\[CDATA\[[\s\S]*?\]\]>/i,
    	'tag': {
    		pattern: /<\/?(?!\d)[^\s>\/=$<%]+(?:\s(?:\s*[^\s>\/=]+(?:\s*=\s*(?:"[^"]*"|'[^']*'|[^\s'">=]+(?=[\s>]))|(?=[\s/>])))+)?\s*\/?>/,
    		greedy: true,
    		inside: {
    			'tag': {
    				pattern: /^<\/?[^\s>\/]+/,
    				inside: {
    					'punctuation': /^<\/?/,
    					'namespace': /^[^\s>\/:]+:/
    				}
    			},
    			'special-attr': [],
    			'attr-value': {
    				pattern: /=\s*(?:"[^"]*"|'[^']*'|[^\s'">=]+)/,
    				inside: {
    					'punctuation': [
    						{
    							pattern: /^=/,
    							alias: 'attr-equals'
    						},
    						/"|'/
    					]
    				}
    			},
    			'punctuation': /\/?>/,
    			'attr-name': {
    				pattern: /[^\s>\/]+/,
    				inside: {
    					'namespace': /^[^\s>\/:]+:/
    				}
    			}

    		}
    	},
    	'entity': [
    		{
    			pattern: /&[\da-z]{1,8};/i,
    			alias: 'named-entity'
    		},
    		/&#x?[\da-f]{1,8};/i
    	]
    };

    Prism.languages.markup['tag'].inside['attr-value'].inside['entity'] =
    	Prism.languages.markup['entity'];
    Prism.languages.markup['doctype'].inside['internal-subset'].inside = Prism.languages.markup;

    // Plugin to make entity title show the real entity, idea by Roman Komarov
    Prism.hooks.add('wrap', function (env) {

    	if (env.type === 'entity') {
    		env.attributes['title'] = env.content.replace(/&amp;/, '&');
    	}
    });

    Object.defineProperty(Prism.languages.markup.tag, 'addInlined', {
    	/**
    	 * Adds an inlined language to markup.
    	 *
    	 * An example of an inlined language is CSS with `<style>` tags.
    	 *
    	 * @param {string} tagName The name of the tag that contains the inlined language. This name will be treated as
    	 * case insensitive.
    	 * @param {string} lang The language key.
    	 * @example
    	 * addInlined('style', 'css');
    	 */
    	value: function addInlined(tagName, lang) {
    		var includedCdataInside = {};
    		includedCdataInside['language-' + lang] = {
    			pattern: /(^<!\[CDATA\[)[\s\S]+?(?=\]\]>$)/i,
    			lookbehind: true,
    			inside: Prism.languages[lang]
    		};
    		includedCdataInside['cdata'] = /^<!\[CDATA\[|\]\]>$/i;

    		var inside = {
    			'included-cdata': {
    				pattern: /<!\[CDATA\[[\s\S]*?\]\]>/i,
    				inside: includedCdataInside
    			}
    		};
    		inside['language-' + lang] = {
    			pattern: /[\s\S]+/,
    			inside: Prism.languages[lang]
    		};

    		var def = {};
    		def[tagName] = {
    			pattern: RegExp(/(<__[^>]*>)(?:<!\[CDATA\[(?:[^\]]|\](?!\]>))*\]\]>|(?!<!\[CDATA\[)[\s\S])*?(?=<\/__>)/.source.replace(/__/g, function () { return tagName; }), 'i'),
    			lookbehind: true,
    			greedy: true,
    			inside: inside
    		};

    		Prism.languages.insertBefore('markup', 'cdata', def);
    	}
    });
    Object.defineProperty(Prism.languages.markup.tag, 'addAttribute', {
    	/**
    	 * Adds an pattern to highlight languages embedded in HTML attributes.
    	 *
    	 * An example of an inlined language is CSS with `style` attributes.
    	 *
    	 * @param {string} attrName The name of the tag that contains the inlined language. This name will be treated as
    	 * case insensitive.
    	 * @param {string} lang The language key.
    	 * @example
    	 * addAttribute('style', 'css');
    	 */
    	value: function (attrName, lang) {
    		Prism.languages.markup.tag.inside['special-attr'].push({
    			pattern: RegExp(
    				/(^|["'\s])/.source + '(?:' + attrName + ')' + /\s*=\s*(?:"[^"]*"|'[^']*'|[^\s'">=]+(?=[\s>]))/.source,
    				'i'
    			),
    			lookbehind: true,
    			inside: {
    				'attr-name': /^[^\s=]+/,
    				'attr-value': {
    					pattern: /=[\s\S]+/,
    					inside: {
    						'value': {
    							pattern: /(^=\s*(["']|(?!["'])))\S[\s\S]*(?=\2$)/,
    							lookbehind: true,
    							alias: [lang, 'language-' + lang],
    							inside: Prism.languages[lang]
    						},
    						'punctuation': [
    							{
    								pattern: /^=/,
    								alias: 'attr-equals'
    							},
    							/"|'/
    						]
    					}
    				}
    			}
    		});
    	}
    });

    Prism.languages.html = Prism.languages.markup;
    Prism.languages.mathml = Prism.languages.markup;
    Prism.languages.svg = Prism.languages.markup;

    Prism.languages.xml = Prism.languages.extend('markup', {});
    Prism.languages.ssml = Prism.languages.xml;
    Prism.languages.atom = Prism.languages.xml;
    Prism.languages.rss = Prism.languages.xml;


    /* **********************************************
         Begin prism-css.js
    ********************************************** */

    (function (Prism) {

    	var string = /(?:"(?:\\(?:\r\n|[\s\S])|[^"\\\r\n])*"|'(?:\\(?:\r\n|[\s\S])|[^'\\\r\n])*')/;

    	Prism.languages.css = {
    		'comment': /\/\*[\s\S]*?\*\//,
    		'atrule': {
    			pattern: /@[\w-](?:[^;{\s]|\s+(?![\s{]))*(?:;|(?=\s*\{))/,
    			inside: {
    				'rule': /^@[\w-]+/,
    				'selector-function-argument': {
    					pattern: /(\bselector\s*\(\s*(?![\s)]))(?:[^()\s]|\s+(?![\s)])|\((?:[^()]|\([^()]*\))*\))+(?=\s*\))/,
    					lookbehind: true,
    					alias: 'selector'
    				},
    				'keyword': {
    					pattern: /(^|[^\w-])(?:and|not|only|or)(?![\w-])/,
    					lookbehind: true
    				}
    				// See rest below
    			}
    		},
    		'url': {
    			// https://drafts.csswg.org/css-values-3/#urls
    			pattern: RegExp('\\burl\\((?:' + string.source + '|' + /(?:[^\\\r\n()"']|\\[\s\S])*/.source + ')\\)', 'i'),
    			greedy: true,
    			inside: {
    				'function': /^url/i,
    				'punctuation': /^\(|\)$/,
    				'string': {
    					pattern: RegExp('^' + string.source + '$'),
    					alias: 'url'
    				}
    			}
    		},
    		'selector': {
    			pattern: RegExp('(^|[{}\\s])[^{}\\s](?:[^{};"\'\\s]|\\s+(?![\\s{])|' + string.source + ')*(?=\\s*\\{)'),
    			lookbehind: true
    		},
    		'string': {
    			pattern: string,
    			greedy: true
    		},
    		'property': {
    			pattern: /(^|[^-\w\xA0-\uFFFF])(?!\s)[-_a-z\xA0-\uFFFF](?:(?!\s)[-\w\xA0-\uFFFF])*(?=\s*:)/i,
    			lookbehind: true
    		},
    		'important': /!important\b/i,
    		'function': {
    			pattern: /(^|[^-a-z0-9])[-a-z0-9]+(?=\()/i,
    			lookbehind: true
    		},
    		'punctuation': /[(){};:,]/
    	};

    	Prism.languages.css['atrule'].inside.rest = Prism.languages.css;

    	var markup = Prism.languages.markup;
    	if (markup) {
    		markup.tag.addInlined('style', 'css');
    		markup.tag.addAttribute('style', 'css');
    	}

    }(Prism));


    /* **********************************************
         Begin prism-clike.js
    ********************************************** */

    Prism.languages.clike = {
    	'comment': [
    		{
    			pattern: /(^|[^\\])\/\*[\s\S]*?(?:\*\/|$)/,
    			lookbehind: true,
    			greedy: true
    		},
    		{
    			pattern: /(^|[^\\:])\/\/.*/,
    			lookbehind: true,
    			greedy: true
    		}
    	],
    	'string': {
    		pattern: /(["'])(?:\\(?:\r\n|[\s\S])|(?!\1)[^\\\r\n])*\1/,
    		greedy: true
    	},
    	'class-name': {
    		pattern: /(\b(?:class|interface|extends|implements|trait|instanceof|new)\s+|\bcatch\s+\()[\w.\\]+/i,
    		lookbehind: true,
    		inside: {
    			'punctuation': /[.\\]/
    		}
    	},
    	'keyword': /\b(?:if|else|while|do|for|return|in|instanceof|function|new|try|throw|catch|finally|null|break|continue)\b/,
    	'boolean': /\b(?:true|false)\b/,
    	'function': /\b\w+(?=\()/,
    	'number': /\b0x[\da-f]+\b|(?:\b\d+(?:\.\d*)?|\B\.\d+)(?:e[+-]?\d+)?/i,
    	'operator': /[<>]=?|[!=]=?=?|--?|\+\+?|&&?|\|\|?|[?*/~^%]/,
    	'punctuation': /[{}[\];(),.:]/
    };


    /* **********************************************
         Begin prism-javascript.js
    ********************************************** */

    Prism.languages.javascript = Prism.languages.extend('clike', {
    	'class-name': [
    		Prism.languages.clike['class-name'],
    		{
    			pattern: /(^|[^$\w\xA0-\uFFFF])(?!\s)[_$A-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\.(?:prototype|constructor))/,
    			lookbehind: true
    		}
    	],
    	'keyword': [
    		{
    			pattern: /((?:^|\})\s*)catch\b/,
    			lookbehind: true
    		},
    		{
    			pattern: /(^|[^.]|\.\.\.\s*)\b(?:as|assert(?=\s*\{)|async(?=\s*(?:function\b|\(|[$\w\xA0-\uFFFF]|$))|await|break|case|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally(?=\s*(?:\{|$))|for|from(?=\s*(?:['"]|$))|function|(?:get|set)(?=\s*(?:[#\[$\w\xA0-\uFFFF]|$))|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)\b/,
    			lookbehind: true
    		},
    	],
    	// Allow for all non-ASCII characters (See http://stackoverflow.com/a/2008444)
    	'function': /#?(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\s*(?:\.\s*(?:apply|bind|call)\s*)?\()/,
    	'number': /\b(?:(?:0[xX](?:[\dA-Fa-f](?:_[\dA-Fa-f])?)+|0[bB](?:[01](?:_[01])?)+|0[oO](?:[0-7](?:_[0-7])?)+)n?|(?:\d(?:_\d)?)+n|NaN|Infinity)\b|(?:\b(?:\d(?:_\d)?)+\.?(?:\d(?:_\d)?)*|\B\.(?:\d(?:_\d)?)+)(?:[Ee][+-]?(?:\d(?:_\d)?)+)?/,
    	'operator': /--|\+\+|\*\*=?|=>|&&=?|\|\|=?|[!=]==|<<=?|>>>?=?|[-+*/%&|^!=<>]=?|\.{3}|\?\?=?|\?\.?|[~:]/
    });

    Prism.languages.javascript['class-name'][0].pattern = /(\b(?:class|interface|extends|implements|instanceof|new)\s+)[\w.\\]+/;

    Prism.languages.insertBefore('javascript', 'keyword', {
    	'regex': {
    		// eslint-disable-next-line regexp/no-dupe-characters-character-class
    		pattern: /((?:^|[^$\w\xA0-\uFFFF."'\])\s]|\b(?:return|yield))\s*)\/(?:\[(?:[^\]\\\r\n]|\\.)*\]|\\.|[^/\\\[\r\n])+\/[dgimyus]{0,7}(?=(?:\s|\/\*(?:[^*]|\*(?!\/))*\*\/)*(?:$|[\r\n,.;:})\]]|\/\/))/,
    		lookbehind: true,
    		greedy: true,
    		inside: {
    			'regex-source': {
    				pattern: /^(\/)[\s\S]+(?=\/[a-z]*$)/,
    				lookbehind: true,
    				alias: 'language-regex',
    				inside: Prism.languages.regex
    			},
    			'regex-delimiter': /^\/|\/$/,
    			'regex-flags': /^[a-z]+$/,
    		}
    	},
    	// This must be declared before keyword because we use "function" inside the look-forward
    	'function-variable': {
    		pattern: /#?(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\s*[=:]\s*(?:async\s*)?(?:\bfunction\b|(?:\((?:[^()]|\([^()]*\))*\)|(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*)\s*=>))/,
    		alias: 'function'
    	},
    	'parameter': [
    		{
    			pattern: /(function(?:\s+(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*)?\s*\(\s*)(?!\s)(?:[^()\s]|\s+(?![\s)])|\([^()]*\))+(?=\s*\))/,
    			lookbehind: true,
    			inside: Prism.languages.javascript
    		},
    		{
    			pattern: /(^|[^$\w\xA0-\uFFFF])(?!\s)[_$a-z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\s*=>)/i,
    			lookbehind: true,
    			inside: Prism.languages.javascript
    		},
    		{
    			pattern: /(\(\s*)(?!\s)(?:[^()\s]|\s+(?![\s)])|\([^()]*\))+(?=\s*\)\s*=>)/,
    			lookbehind: true,
    			inside: Prism.languages.javascript
    		},
    		{
    			pattern: /((?:\b|\s|^)(?!(?:as|async|await|break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)(?![$\w\xA0-\uFFFF]))(?:(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*\s*)\(\s*|\]\s*\(\s*)(?!\s)(?:[^()\s]|\s+(?![\s)])|\([^()]*\))+(?=\s*\)\s*\{)/,
    			lookbehind: true,
    			inside: Prism.languages.javascript
    		}
    	],
    	'constant': /\b[A-Z](?:[A-Z_]|\dx?)*\b/
    });

    Prism.languages.insertBefore('javascript', 'string', {
    	'hashbang': {
    		pattern: /^#!.*/,
    		greedy: true,
    		alias: 'comment'
    	},
    	'template-string': {
    		pattern: /`(?:\\[\s\S]|\$\{(?:[^{}]|\{(?:[^{}]|\{[^}]*\})*\})+\}|(?!\$\{)[^\\`])*`/,
    		greedy: true,
    		inside: {
    			'template-punctuation': {
    				pattern: /^`|`$/,
    				alias: 'string'
    			},
    			'interpolation': {
    				pattern: /((?:^|[^\\])(?:\\{2})*)\$\{(?:[^{}]|\{(?:[^{}]|\{[^}]*\})*\})+\}/,
    				lookbehind: true,
    				inside: {
    					'interpolation-punctuation': {
    						pattern: /^\$\{|\}$/,
    						alias: 'punctuation'
    					},
    					rest: Prism.languages.javascript
    				}
    			},
    			'string': /[\s\S]+/
    		}
    	}
    });

    if (Prism.languages.markup) {
    	Prism.languages.markup.tag.addInlined('script', 'javascript');

    	// add attribute support for all DOM events.
    	// https://developer.mozilla.org/en-US/docs/Web/Events#Standard_events
    	Prism.languages.markup.tag.addAttribute(
    		/on(?:abort|blur|change|click|composition(?:end|start|update)|dblclick|error|focus(?:in|out)?|key(?:down|up)|load|mouse(?:down|enter|leave|move|out|over|up)|reset|resize|scroll|select|slotchange|submit|unload|wheel)/.source,
    		'javascript'
    	);
    }

    Prism.languages.js = Prism.languages.javascript;


    /* **********************************************
         Begin prism-file-highlight.js
    ********************************************** */

    (function () {

    	if (typeof Prism === 'undefined' || typeof document === 'undefined') {
    		return;
    	}

    	// https://developer.mozilla.org/en-US/docs/Web/API/Element/matches#Polyfill
    	if (!Element.prototype.matches) {
    		Element.prototype.matches = Element.prototype.msMatchesSelector || Element.prototype.webkitMatchesSelector;
    	}

    	var LOADING_MESSAGE = 'Loading…';
    	var FAILURE_MESSAGE = function (status, message) {
    		return '✖ Error ' + status + ' while fetching file: ' + message;
    	};
    	var FAILURE_EMPTY_MESSAGE = '✖ Error: File does not exist or is empty';

    	var EXTENSIONS = {
    		'js': 'javascript',
    		'py': 'python',
    		'rb': 'ruby',
    		'ps1': 'powershell',
    		'psm1': 'powershell',
    		'sh': 'bash',
    		'bat': 'batch',
    		'h': 'c',
    		'tex': 'latex'
    	};

    	var STATUS_ATTR = 'data-src-status';
    	var STATUS_LOADING = 'loading';
    	var STATUS_LOADED = 'loaded';
    	var STATUS_FAILED = 'failed';

    	var SELECTOR = 'pre[data-src]:not([' + STATUS_ATTR + '="' + STATUS_LOADED + '"])'
    		+ ':not([' + STATUS_ATTR + '="' + STATUS_LOADING + '"])';

    	var lang = /\blang(?:uage)?-([\w-]+)\b/i;

    	/**
    	 * Sets the Prism `language-xxxx` or `lang-xxxx` class to the given language.
    	 *
    	 * @param {HTMLElement} element
    	 * @param {string} language
    	 * @returns {void}
    	 */
    	function setLanguageClass(element, language) {
    		var className = element.className;
    		className = className.replace(lang, ' ') + ' language-' + language;
    		element.className = className.replace(/\s+/g, ' ').trim();
    	}


    	Prism.hooks.add('before-highlightall', function (env) {
    		env.selector += ', ' + SELECTOR;
    	});

    	Prism.hooks.add('before-sanity-check', function (env) {
    		var pre = /** @type {HTMLPreElement} */ (env.element);
    		if (pre.matches(SELECTOR)) {
    			env.code = ''; // fast-path the whole thing and go to complete

    			pre.setAttribute(STATUS_ATTR, STATUS_LOADING); // mark as loading

    			// add code element with loading message
    			var code = pre.appendChild(document.createElement('CODE'));
    			code.textContent = LOADING_MESSAGE;

    			var src = pre.getAttribute('data-src');

    			var language = env.language;
    			if (language === 'none') {
    				// the language might be 'none' because there is no language set;
    				// in this case, we want to use the extension as the language
    				var extension = (/\.(\w+)$/.exec(src) || [, 'none'])[1];
    				language = EXTENSIONS[extension] || extension;
    			}

    			// set language classes
    			setLanguageClass(code, language);
    			setLanguageClass(pre, language);

    			// preload the language
    			var autoloader = Prism.plugins.autoloader;
    			if (autoloader) {
    				autoloader.loadLanguages(language);
    			}

    			// load file
    			var xhr = new XMLHttpRequest();
    			xhr.open('GET', src, true);
    			xhr.onreadystatechange = function () {
    				if (xhr.readyState == 4) {
    					if (xhr.status < 400 && xhr.responseText) {
    						// mark as loaded
    						pre.setAttribute(STATUS_ATTR, STATUS_LOADED);

    						// highlight code
    						code.textContent = xhr.responseText;
    						Prism.highlightElement(code);

    					} else {
    						// mark as failed
    						pre.setAttribute(STATUS_ATTR, STATUS_FAILED);

    						if (xhr.status >= 400) {
    							code.textContent = FAILURE_MESSAGE(xhr.status, xhr.statusText);
    						} else {
    							code.textContent = FAILURE_EMPTY_MESSAGE;
    						}
    					}
    				}
    			};
    			xhr.send(null);
    		}
    	});

    	Prism.plugins.fileHighlight = {
    		/**
    		 * Executes the File Highlight plugin for all matching `pre` elements under the given container.
    		 *
    		 * Note: Elements which are already loaded or currently loading will not be touched by this method.
    		 *
    		 * @param {ParentNode} [container=document]
    		 */
    		highlight: function highlight(container) {
    			var elements = (container || document).querySelectorAll(SELECTOR);

    			for (var i = 0, element; (element = elements[i++]);) {
    				Prism.highlightElement(element);
    			}
    		}
    	};

    	var logged = false;
    	/** @deprecated Use `Prism.plugins.fileHighlight.highlight` instead. */
    	Prism.fileHighlight = function () {
    		if (!logged) {
    			console.warn('Prism.fileHighlight is deprecated. Use `Prism.plugins.fileHighlight.highlight` instead.');
    			logged = true;
    		}
    		Prism.plugins.fileHighlight.highlight.apply(this, arguments);
    	};

    }());
    }(prism$2));

    var prism$1 = prism$2.exports;

    const blocks = '(if|else if|await|then|catch|each|html|debug)';

    Prism.languages.svelte = Prism.languages.extend('markup', {
    	each: {
    		pattern: new RegExp(
    			'{[#/]each' +
    				'(?:(?:\\{(?:(?:\\{(?:[^{}])*\\})|(?:[^{}]))*\\})|(?:[^{}]))*}'
    		),
    		inside: {
    			'language-javascript': [
    				{
    					pattern: /(as[\s\S]*)\([\s\S]*\)(?=\s*\})/,
    					lookbehind: true,
    					inside: Prism.languages['javascript'],
    				},
    				{
    					pattern: /(as[\s]*)[\s\S]*(?=\s*)/,
    					lookbehind: true,
    					inside: Prism.languages['javascript'],
    				},
    				{
    					pattern: /(#each[\s]*)[\s\S]*(?=as)/,
    					lookbehind: true,
    					inside: Prism.languages['javascript'],
    				},
    			],
    			keyword: /[#/]each|as/,
    			punctuation: /{|}/,
    		},
    	},
    	block: {
    		pattern: new RegExp(
    			'{[#:/@]/s' +
    				blocks +
    				'(?:(?:\\{(?:(?:\\{(?:[^{}])*\\})|(?:[^{}]))*\\})|(?:[^{}]))*}'
    		),
    		inside: {
    			punctuation: /^{|}$/,
    			keyword: [new RegExp('[#:/@]' + blocks + '( )*'), /as/, /then/],
    			'language-javascript': {
    				pattern: /[\s\S]*/,
    				inside: Prism.languages['javascript'],
    			},
    		},
    	},
    	tag: {
    		pattern: /<\/?(?!\d)[^\s>\/=$<%]+(?:\s(?:\s*[^\s>\/=]+(?:\s*=\s*(?:(?:"[^"]*"|'[^']*'|[^\s'">=]+(?=[\s>]))|(?:"[^"]*"|'[^']*'|{[\s\S]+?}(?=[\s/>])))|(?=[\s/>])))+)?\s*\/?>/i,
    		greedy: true,
    		inside: {
    			tag: {
    				pattern: /^<\/?[^\s>\/]+/i,
    				inside: {
    					punctuation: /^<\/?/,
    					namespace: /^[^\s>\/:]+:/,
    				},
    			},
    			'language-javascript': {
    				pattern: /\{(?:(?:\{(?:(?:\{(?:[^{}])*\})|(?:[^{}]))*\})|(?:[^{}]))*\}/,
    				inside: Prism.languages['javascript'],
    			},
    			'attr-value': {
    				pattern: /=\s*(?:"[^"]*"|'[^']*'|[^\s'">=]+)/i,
    				inside: {
    					punctuation: [
    						/^=/,
    						{
    							pattern: /^(\s*)["']|["']$/,
    							lookbehind: true,
    						},
    					],
    					'language-javascript': {
    						pattern: /{[\s\S]+}/,
    						inside: Prism.languages['javascript'],
    					},
    				},
    			},
    			punctuation: /\/?>/,
    			'attr-name': {
    				pattern: /[^\s>\/]+/,
    				inside: {
    					namespace: /^[^\s>\/:]+:/,
    				},
    			},
    		},
    	},
    	'language-javascript': {
    		pattern: /\{(?:(?:\{(?:(?:\{(?:[^{}])*\})|(?:[^{}]))*\})|(?:[^{}]))*\}/,
    		lookbehind: true,
    		inside: Prism.languages['javascript'],
    	},
    });

    Prism.languages.svelte['tag'].inside['attr-value'].inside['entity'] =
    	Prism.languages.svelte['entity'];

    Prism.hooks.add('wrap', env => {
    	if (env.type === 'entity') {
    		env.attributes['title'] = env.content.replace(/&amp;/, '&');
    	}
    });

    Object.defineProperty(Prism.languages.svelte.tag, 'addInlined', {
    	value: function addInlined(tagName, lang) {
    		const includedCdataInside = {};
    		includedCdataInside['language-' + lang] = {
    			pattern: /(^<!\[CDATA\[)[\s\S]+?(?=\]\]>$)/i,
    			lookbehind: true,
    			inside: Prism.languages[lang],
    		};
    		includedCdataInside['cdata'] = /^<!\[CDATA\[|\]\]>$/i;

    		const inside = {
    			'included-cdata': {
    				pattern: /<!\[CDATA\[[\s\S]*?\]\]>/i,
    				inside: includedCdataInside,
    			},
    		};
    		inside['language-' + lang] = {
    			pattern: /[\s\S]+/,
    			inside: Prism.languages[lang],
    		};

    		const def = {};
    		def[tagName] = {
    			pattern: RegExp(
    				/(<__[\s\S]*?>)(?:<!\[CDATA\[[\s\S]*?\]\]>\s*|[\s\S])*?(?=<\/__>)/.source.replace(
    					/__/g,
    					tagName
    				),
    				'i'
    			),
    			lookbehind: true,
    			greedy: true,
    			inside,
    		};

    		Prism.languages.insertBefore('svelte', 'cdata', def);
    	},
    });

    Prism.languages.svelte.tag.addInlined('style', 'css');
    Prism.languages.svelte.tag.addInlined('script', 'javascript');

    /* node_modules/svelte-prism/src/Prism.svelte generated by Svelte v3.42.1 */
    const file$r = "node_modules/svelte-prism/src/Prism.svelte";

    // (37:4) {:else}
    function create_else_block$d(ctx) {
    	let html_tag;
    	let html_anchor;

    	const block = {
    		c: function create() {
    			html_tag = new HtmlTag();
    			html_anchor = empty();
    			html_tag.a = html_anchor;
    		},
    		m: function mount(target, anchor) {
    			html_tag.m(/*formattedCode*/ ctx[2], target, anchor);
    			insert_dev(target, html_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*formattedCode*/ 4) html_tag.p(/*formattedCode*/ ctx[2]);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(html_anchor);
    			if (detaching) html_tag.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$d.name,
    		type: "else",
    		source: "(37:4) {:else}",
    		ctx
    	});

    	return block;
    }

    // (35:4) {#if language === 'none'}
    function create_if_block$e(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text(/*formattedCode*/ ctx[2]);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*formattedCode*/ 4) set_data_dev(t, /*formattedCode*/ ctx[2]);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$e.name,
    		type: "if",
    		source: "(35:4) {#if language === 'none'}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$r(ctx) {
    	let code0;
    	let t;
    	let pre;
    	let code1;
    	let code1_class_value;
    	let pre_class_value;
    	let current;
    	const default_slot_template = /*#slots*/ ctx[6].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[5], null);

    	function select_block_type(ctx, dirty) {
    		if (/*language*/ ctx[0] === 'none') return create_if_block$e;
    		return create_else_block$d;
    	}

    	let current_block_type = select_block_type(ctx);
    	let if_block = current_block_type(ctx);

    	const block = {
    		c: function create() {
    			code0 = element("code");
    			if (default_slot) default_slot.c();
    			t = space();
    			pre = element("pre");
    			code1 = element("code");
    			if_block.c();
    			set_style(code0, "display", "none");
    			add_location(code0, file$r, 28, 0, 766);
    			attr_dev(code1, "class", code1_class_value = "language-" + /*language*/ ctx[0]);
    			add_location(code1, file$r, 33, 2, 902);
    			attr_dev(pre, "class", pre_class_value = "language-" + /*language*/ ctx[0]);
    			attr_dev(pre, "command-line", "");
    			attr_dev(pre, "data-output", "2-17");
    			add_location(pre, file$r, 32, 0, 834);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, code0, anchor);

    			if (default_slot) {
    				default_slot.m(code0, null);
    			}

    			/*code0_binding*/ ctx[7](code0);
    			insert_dev(target, t, anchor);
    			insert_dev(target, pre, anchor);
    			append_dev(pre, code1);
    			if_block.m(code1, null);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 32)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[5],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[5])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[5], dirty, null),
    						null
    					);
    				}
    			}

    			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block) {
    				if_block.p(ctx, dirty);
    			} else {
    				if_block.d(1);
    				if_block = current_block_type(ctx);

    				if (if_block) {
    					if_block.c();
    					if_block.m(code1, null);
    				}
    			}

    			if (!current || dirty & /*language*/ 1 && code1_class_value !== (code1_class_value = "language-" + /*language*/ ctx[0])) {
    				attr_dev(code1, "class", code1_class_value);
    			}

    			if (!current || dirty & /*language*/ 1 && pre_class_value !== (pre_class_value = "language-" + /*language*/ ctx[0])) {
    				attr_dev(pre, "class", pre_class_value);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(code0);
    			if (default_slot) default_slot.d(detaching);
    			/*code0_binding*/ ctx[7](null);
    			if (detaching) detach_dev(t);
    			if (detaching) detach_dev(pre);
    			if_block.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$r.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    const prism = prism$1;
    const highlight = prism$1.highlightElement;
    const globalConfig = { transform: x => x };

    function instance$r($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Prism', slots, ['default']);
    	let { language = "javascript" } = $$props;
    	let { source = "" } = $$props;
    	let { transform = x => x } = $$props;
    	let element, formattedCode;

    	function highlightCode() {
    		const grammar = prism.languages[language];
    		let body = source || element.textContent;
    		body = globalConfig.transform(body);
    		body = transform(body);

    		$$invalidate(2, formattedCode = language === "none"
    		? body
    		: prism.highlight(body, grammar, language));
    	}

    	function code0_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			element = $$value;
    			$$invalidate(1, element);
    		});
    	}

    	$$self.$$set = $$new_props => {
    		$$invalidate(9, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    		if ('language' in $$new_props) $$invalidate(0, language = $$new_props.language);
    		if ('source' in $$new_props) $$invalidate(3, source = $$new_props.source);
    		if ('transform' in $$new_props) $$invalidate(4, transform = $$new_props.transform);
    		if ('$$scope' in $$new_props) $$invalidate(5, $$scope = $$new_props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		_prism: prism$1,
    		prism,
    		highlight,
    		globalConfig,
    		tick,
    		language,
    		source,
    		transform,
    		element,
    		formattedCode,
    		highlightCode
    	});

    	$$self.$inject_state = $$new_props => {
    		$$invalidate(9, $$props = assign(assign({}, $$props), $$new_props));
    		if ('language' in $$props) $$invalidate(0, language = $$new_props.language);
    		if ('source' in $$props) $$invalidate(3, source = $$new_props.source);
    		if ('transform' in $$props) $$invalidate(4, transform = $$new_props.transform);
    		if ('element' in $$props) $$invalidate(1, element = $$new_props.element);
    		if ('formattedCode' in $$props) $$invalidate(2, formattedCode = $$new_props.formattedCode);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		$$props && (source || element) && highlightCode();
    	};

    	$$props = exclude_internal_props($$props);

    	return [
    		language,
    		element,
    		formattedCode,
    		source,
    		transform,
    		$$scope,
    		slots,
    		code0_binding
    	];
    }

    class Prism$1 extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$r, create_fragment$r, safe_not_equal, { language: 0, source: 3, transform: 4 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Prism",
    			options,
    			id: create_fragment$r.name
    		});
    	}

    	get language() {
    		throw new Error("<Prism>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set language(value) {
    		throw new Error("<Prism>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get source() {
    		throw new Error("<Prism>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set source(value) {
    		throw new Error("<Prism>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get transform() {
    		throw new Error("<Prism>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set transform(value) {
    		throw new Error("<Prism>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    var dist = {};

    var words = {};

    Object.defineProperty(words, "__esModule", {
      value: true
    });
    words.WORDS = void 0;
    var WORDS = ["ad", "adipisicing", "aliqua", "aliquip", "amet", "anim", "aute", "cillum", "commodo", "consectetur", "consequat", "culpa", "cupidatat", "deserunt", "do", "dolor", "dolore", "duis", "ea", "eiusmod", "elit", "enim", "esse", "est", "et", "eu", "ex", "excepteur", "exercitation", "fugiat", "id", "in", "incididunt", "ipsum", "irure", "labore", "laboris", "laborum", "Lorem", "magna", "minim", "mollit", "nisi", "non", "nostrud", "nulla", "occaecat", "officia", "pariatur", "proident", "qui", "quis", "reprehenderit", "sint", "sit", "sunt", "tempor", "ullamco", "ut", "velit", "veniam", "voluptate"];
    words.WORDS = WORDS;

    var LoremIpsum$1 = {};

    var formats = {};

    Object.defineProperty(formats, "__esModule", {
      value: true
    });
    formats.FORMATS = formats.FORMAT_PLAIN = formats.FORMAT_HTML = void 0;
    var FORMAT_HTML = "html";
    formats.FORMAT_HTML = FORMAT_HTML;
    var FORMAT_PLAIN = "plain";
    formats.FORMAT_PLAIN = FORMAT_PLAIN;
    var FORMATS = [FORMAT_HTML, FORMAT_PLAIN];
    formats.FORMATS = FORMATS;

    var lineEndings = {};

    Object.defineProperty(lineEndings, "__esModule", {
      value: true
    });
    lineEndings.LINE_ENDINGS = void 0;
    var LINE_ENDINGS = {
      POSIX: "\n",
      WIN32: "\r\n"
    };
    lineEndings.LINE_ENDINGS = LINE_ENDINGS;

    var generator = {};

    var util = {};

    var capitalize$1 = {};

    Object.defineProperty(capitalize$1, "__esModule", {
      value: true
    });
    capitalize$1.default = void 0;

    /**
     * @param str  A string that may or may not be capitalized.
     * @returns    A capitalized string.
     */
    var capitalize = function capitalize(str) {
      var trimmed = str.trim();
      return trimmed.charAt(0).toUpperCase() + trimmed.slice(1);
    };

    var _default$6 = capitalize;
    capitalize$1.default = _default$6;

    var isNode = {exports: {}};

    (function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    /**
     * @returns  True if the runtime is NodeJS.
     */
    var isNode = function isNode() {
      return !!module.exports;
    };

    var _default = isNode;
    exports.default = _default;

    }(isNode, isNode.exports));

    var isReactNative$1 = {};

    Object.defineProperty(isReactNative$1, "__esModule", {
      value: true
    });
    isReactNative$1.default = void 0;

    /**
     * @returns  True if runtime is ReactNative.
     */
    var isReactNative = function isReactNative() {
      return typeof navigator !== "undefined" && navigator.product === "ReactNative";
    };

    var _default$5 = isReactNative;
    isReactNative$1.default = _default$5;

    var isWindows$1 = {};

    var platforms = {};

    Object.defineProperty(platforms, "__esModule", {
      value: true
    });
    platforms.SUPPORTED_PLATFORMS = void 0;
    var SUPPORTED_PLATFORMS = {
      DARWIN: "darwin",
      LINUX: "linux",
      WIN32: "win32"
    };
    platforms.SUPPORTED_PLATFORMS = SUPPORTED_PLATFORMS;

    Object.defineProperty(isWindows$1, "__esModule", {
      value: true
    });
    isWindows$1.default = void 0;

    var _platforms = platforms;

    /**
     * @returns True if process is windows.
     */
    var isWindows = function isWindows() {
      return typeof process !== "undefined" && process.platform === _platforms.SUPPORTED_PLATFORMS.WIN32;
    };

    var _default$4 = isWindows;
    isWindows$1.default = _default$4;

    var makeArrayOfLength$1 = {};

    Object.defineProperty(makeArrayOfLength$1, "__esModule", {
      value: true
    });
    makeArrayOfLength$1.default = void 0;

    /**
     * @param length Length "x".
     * @returns      An array of indexes of length "x".
     */
    var makeArrayOfLength = function makeArrayOfLength() {
      var length = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
      return Array.apply(null, Array(length)).map(function (item, index) {
        return index;
      });
    };

    var _default$3 = makeArrayOfLength;
    makeArrayOfLength$1.default = _default$3;

    var makeArrayOfStrings$1 = {};

    Object.defineProperty(makeArrayOfStrings$1, "__esModule", {
      value: true
    });
    makeArrayOfStrings$1.default = void 0;

    var _ = util;

    /**
     * @param length  Length "x".
     * @returns       An array of strings of length "x".
     */
    var makeArrayOfStrings = function makeArrayOfStrings(length, makeString) {
      var arr = (0, _.makeArrayOfLength)(length);
      return arr.map(function () {
        return makeString();
      });
    };

    var _default$2 = makeArrayOfStrings;
    makeArrayOfStrings$1.default = _default$2;

    (function (exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    Object.defineProperty(exports, "capitalize", {
      enumerable: true,
      get: function get() {
        return _capitalize.default;
      }
    });
    Object.defineProperty(exports, "isNode", {
      enumerable: true,
      get: function get() {
        return _isNode.default;
      }
    });
    Object.defineProperty(exports, "isReactNative", {
      enumerable: true,
      get: function get() {
        return _isReactNative.default;
      }
    });
    Object.defineProperty(exports, "isWindows", {
      enumerable: true,
      get: function get() {
        return _isWindows.default;
      }
    });
    Object.defineProperty(exports, "makeArrayOfLength", {
      enumerable: true,
      get: function get() {
        return _makeArrayOfLength.default;
      }
    });
    Object.defineProperty(exports, "makeArrayOfStrings", {
      enumerable: true,
      get: function get() {
        return _makeArrayOfStrings.default;
      }
    });

    var _capitalize = _interopRequireDefault(capitalize$1);

    var _isNode = _interopRequireDefault(isNode.exports);

    var _isReactNative = _interopRequireDefault(isReactNative$1);

    var _isWindows = _interopRequireDefault(isWindows$1);

    var _makeArrayOfLength = _interopRequireDefault(makeArrayOfLength$1);

    var _makeArrayOfStrings = _interopRequireDefault(makeArrayOfStrings$1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    }(util));

    Object.defineProperty(generator, "__esModule", {
      value: true
    });
    generator.default = void 0;

    var _words = words;

    var _util$1 = util;

    function _classCallCheck$1(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    function _defineProperties$1(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

    function _createClass$1(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties$1(Constructor.prototype, protoProps); if (staticProps) _defineProperties$1(Constructor, staticProps); return Constructor; }

    function _defineProperty$1(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

    var Generator =
    /*#__PURE__*/
    function () {
      function Generator() {
        var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
            _ref$sentencesPerPara = _ref.sentencesPerParagraph,
            sentencesPerParagraph = _ref$sentencesPerPara === void 0 ? {
          max: 7,
          min: 3
        } : _ref$sentencesPerPara,
            _ref$wordsPerSentence = _ref.wordsPerSentence,
            wordsPerSentence = _ref$wordsPerSentence === void 0 ? {
          max: 15,
          min: 5
        } : _ref$wordsPerSentence,
            random = _ref.random;
            _ref.seed;
            var _ref$words = _ref.words,
            words = _ref$words === void 0 ? _words.WORDS : _ref$words;

        _classCallCheck$1(this, Generator);

        _defineProperty$1(this, "sentencesPerParagraph", void 0);

        _defineProperty$1(this, "wordsPerSentence", void 0);

        _defineProperty$1(this, "random", void 0);

        _defineProperty$1(this, "words", void 0);

        if (sentencesPerParagraph.min > sentencesPerParagraph.max) {
          throw new Error("Minimum number of sentences per paragraph (".concat(sentencesPerParagraph.min, ") cannot exceed maximum (").concat(sentencesPerParagraph.max, ")."));
        }

        if (wordsPerSentence.min > wordsPerSentence.max) {
          throw new Error("Minimum number of words per sentence (".concat(wordsPerSentence.min, ") cannot exceed maximum (").concat(wordsPerSentence.max, ")."));
        }

        this.sentencesPerParagraph = sentencesPerParagraph;
        this.words = words;
        this.wordsPerSentence = wordsPerSentence;
        this.random = random || Math.random;
      }

      _createClass$1(Generator, [{
        key: "generateRandomInteger",
        value: function generateRandomInteger(min, max) {
          return Math.floor(this.random() * (max - min + 1) + min);
        }
      }, {
        key: "generateRandomWords",
        value: function generateRandomWords(num) {
          var _this = this;

          var _this$wordsPerSentenc = this.wordsPerSentence,
              min = _this$wordsPerSentenc.min,
              max = _this$wordsPerSentenc.max;
          var length = num || this.generateRandomInteger(min, max);
          return (0, _util$1.makeArrayOfLength)(length).reduce(function (accumulator, index) {
            return "".concat(_this.pluckRandomWord(), " ").concat(accumulator);
          }, "").trim();
        }
      }, {
        key: "generateRandomSentence",
        value: function generateRandomSentence(num) {
          return "".concat((0, _util$1.capitalize)(this.generateRandomWords(num)), ".");
        }
      }, {
        key: "generateRandomParagraph",
        value: function generateRandomParagraph(num) {
          var _this2 = this;

          var _this$sentencesPerPar = this.sentencesPerParagraph,
              min = _this$sentencesPerPar.min,
              max = _this$sentencesPerPar.max;
          var length = num || this.generateRandomInteger(min, max);
          return (0, _util$1.makeArrayOfLength)(length).reduce(function (accumulator, index) {
            return "".concat(_this2.generateRandomSentence(), " ").concat(accumulator);
          }, "").trim();
        }
      }, {
        key: "pluckRandomWord",
        value: function pluckRandomWord() {
          var min = 0;
          var max = this.words.length - 1;
          var index = this.generateRandomInteger(min, max);
          return this.words[index];
        }
      }]);

      return Generator;
    }();

    var _default$1 = Generator;
    generator.default = _default$1;

    Object.defineProperty(LoremIpsum$1, "__esModule", {
      value: true
    });
    LoremIpsum$1.default = void 0;

    var _formats = formats;

    var _lineEndings = lineEndings;

    var _generator = _interopRequireDefault(generator);

    var _util = util;

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

    function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

    function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

    var LoremIpsum =
    /*#__PURE__*/
    function () {
      function LoremIpsum() {
        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        var format = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _formats.FORMAT_PLAIN;
        var suffix = arguments.length > 2 ? arguments[2] : undefined;

        _classCallCheck(this, LoremIpsum);

        _defineProperty(this, "generator", void 0);

        _defineProperty(this, "format", void 0);

        _defineProperty(this, "suffix", void 0);

        if (_formats.FORMATS.indexOf(format.toLowerCase()) === -1) {
          throw new Error("".concat(format, " is an invalid format. Please use ").concat(_formats.FORMATS.join(" or "), "."));
        }

        this.format = format.toLowerCase();
        this.suffix = suffix;
        this.generator = new _generator.default(options);
      }

      _createClass(LoremIpsum, [{
        key: "getLineEnding",
        value: function getLineEnding() {
          if (this.suffix) {
            return this.suffix;
          }

          if (!(0, _util.isReactNative)() && (0, _util.isNode)() && (0, _util.isWindows)()) {
            return _lineEndings.LINE_ENDINGS.WIN32;
          }

          return _lineEndings.LINE_ENDINGS.POSIX;
        }
      }, {
        key: "formatString",
        value: function formatString(str) {
          if (this.format === _formats.FORMAT_HTML) {
            return "<p>".concat(str, "</p>");
          }

          return str;
        }
      }, {
        key: "formatStrings",
        value: function formatStrings(strings) {
          var _this = this;

          return strings.map(function (str) {
            return _this.formatString(str);
          });
        }
      }, {
        key: "generateWords",
        value: function generateWords(num) {
          return this.formatString(this.generator.generateRandomWords(num));
        }
      }, {
        key: "generateSentences",
        value: function generateSentences(num) {
          return this.formatString(this.generator.generateRandomParagraph(num));
        }
      }, {
        key: "generateParagraphs",
        value: function generateParagraphs(num) {
          var makeString = this.generator.generateRandomParagraph.bind(this.generator);
          return this.formatStrings((0, _util.makeArrayOfStrings)(num, makeString)).join(this.getLineEnding());
        }
      }]);

      return LoremIpsum;
    }();

    var _default = LoremIpsum;
    LoremIpsum$1.default = _default;

    (function (exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    Object.defineProperty(exports, "LoremIpsum", {
      enumerable: true,
      get: function get() {
        return _LoremIpsum.default;
      }
    });
    exports.loremIpsum = void 0;

    var _words = words;

    var _LoremIpsum = _interopRequireDefault(LoremIpsum$1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var loremIpsum = function loremIpsum() {
      var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          _ref$count = _ref.count,
          count = _ref$count === void 0 ? 1 : _ref$count,
          _ref$format = _ref.format,
          format = _ref$format === void 0 ? "plain" : _ref$format,
          _ref$paragraphLowerBo = _ref.paragraphLowerBound,
          paragraphLowerBound = _ref$paragraphLowerBo === void 0 ? 3 : _ref$paragraphLowerBo,
          _ref$paragraphUpperBo = _ref.paragraphUpperBound,
          paragraphUpperBound = _ref$paragraphUpperBo === void 0 ? 7 : _ref$paragraphUpperBo,
          random = _ref.random,
          _ref$sentenceLowerBou = _ref.sentenceLowerBound,
          sentenceLowerBound = _ref$sentenceLowerBou === void 0 ? 5 : _ref$sentenceLowerBou,
          _ref$sentenceUpperBou = _ref.sentenceUpperBound,
          sentenceUpperBound = _ref$sentenceUpperBou === void 0 ? 15 : _ref$sentenceUpperBou,
          _ref$units = _ref.units,
          units = _ref$units === void 0 ? "sentences" : _ref$units,
          _ref$words = _ref.words,
          words = _ref$words === void 0 ? _words.WORDS : _ref$words,
          _ref$suffix = _ref.suffix,
          suffix = _ref$suffix === void 0 ? "" : _ref$suffix;

      var options = {
        random: random,
        sentencesPerParagraph: {
          max: paragraphUpperBound,
          min: paragraphLowerBound
        },
        words: words,
        wordsPerSentence: {
          max: sentenceUpperBound,
          min: sentenceLowerBound
        }
      };
      var lorem = new _LoremIpsum.default(options, format, suffix);

      switch (units) {
        case "paragraphs":
        case "paragraph":
          return lorem.generateParagraphs(count);

        case "sentences":
        case "sentence":
          return lorem.generateSentences(count);

        case "words":
        case "word":
          return lorem.generateWords(count);

        default:
          return "";
      }
    };

    exports.loremIpsum = loremIpsum;

    }(dist));

    function rdmParagraphs(num = 3) {
        const lorem = new dist.LoremIpsum({
            sentencesPerParagraph: {
                max: 8,
                min: 4,
            },
            wordsPerSentence: {
                max: 12,
                min: 4,
            },
        }, 'html');
        return lorem.generateParagraphs(num);
    }
    function rdmArticleData(mediaWidth = 640, mediaHeight = 360) {
        const lorem = new dist.LoremIpsum({
            wordsPerSentence: {
                max: 12,
                min: 4,
            },
        });
        const colorClasses = ['flash', 'forbrug', 'leder', 'nationen', 'nyheder', 'sex-samliv', 'sport', 'underholdning'];
        const article = {
            breaking: Math.random() < 0.1,
            premium: Math.random() < 0.3,
            src: '#',
            colorClass: colorClasses[Math.floor(Math.random() * colorClasses.length)],
            media: {
                src: `https://loremflickr.com/${mediaWidth}/${mediaHeight}/city,people,nature,animal?random=${Math.random()}`,
            },
            published: randomDate().toString(),
            saved: Math.random() < 0.5,
            section: lorem.generateWords(1),
            title: lorem.generateSentences(1),
            truncateTitle: false,
            update: Math.random() < 0.5,
        };
        return article;
    }
    function randomDate() {
        const start = new Date(2019, 0, 1);
        const end = new Date();
        return new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()));
    }

    const localeSourceType = localStorage.getItem('sourceType');
    const sourceType = writable(localeSourceType || 'html');
    sourceType.subscribe((value) => {
        localStorage.setItem('sourceType', value);
    });

    /* docs_src/components/Accordion.svelte generated by Svelte v3.42.1 */
    const file$q = "docs_src/components/Accordion.svelte";

    // (16:0) {#if $sourceType === 'svelte'}
    function create_if_block_1$a(ctx) {
    	let prism;
    	let t0;
    	let table;
    	let thead;
    	let tr0;
    	let th0;
    	let t2;
    	let th1;
    	let t4;
    	let th2;
    	let t6;
    	let th3;
    	let t8;
    	let tbody;
    	let tr1;
    	let td0;
    	let t10;
    	let td1;
    	let t12;
    	let td2;
    	let t13;
    	let td3;
    	let t14;
    	let a;
    	let t16;
    	let t17;
    	let tr2;
    	let td4;
    	let t19;
    	let td5;
    	let t21;
    	let td6;
    	let t22;
    	let td7;
    	let t23;
    	let badge;
    	let t24;
    	let t25;
    	let tr3;
    	let th4;
    	let t27;
    	let tr4;
    	let td8;
    	let t29;
    	let td9;
    	let t31;
    	let td10;
    	let t32;
    	let td11;
    	let t33;
    	let tr5;
    	let td12;
    	let t35;
    	let td13;
    	let t37;
    	let td14;
    	let t38;
    	let td15;
    	let current;

    	prism = new Prism$1({
    			props: {
    				language: "js",
    				$$slots: { default: [create_default_slot_4$h] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	badge = new dist$1.Badge({
    			props: {
    				type: "secondary",
    				extension: "small",
    				$$slots: { default: [create_default_slot_3$i] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(prism.$$.fragment);
    			t0 = space();
    			table = element("table");
    			thead = element("thead");
    			tr0 = element("tr");
    			th0 = element("th");
    			th0.textContent = "Prop name";
    			t2 = space();
    			th1 = element("th");
    			th1.textContent = "Type";
    			t4 = space();
    			th2 = element("th");
    			th2.textContent = "Default value";
    			t6 = space();
    			th3 = element("th");
    			th3.textContent = "Description";
    			t8 = space();
    			tbody = element("tbody");
    			tr1 = element("tr");
    			td0 = element("td");
    			td0.textContent = "dataTheme";
    			t10 = space();
    			td1 = element("td");
    			td1.textContent = "'darkmode' | 'lightmode'";
    			t12 = space();
    			td2 = element("td");
    			t13 = space();
    			td3 = element("td");
    			t14 = text("See ");
    			a = element("a");
    			a.textContent = "Data Theme";
    			t16 = text(" for doc");
    			t17 = space();
    			tr2 = element("tr");
    			td4 = element("td");
    			td4.textContent = "tabs";
    			t19 = space();
    			td5 = element("td");
    			td5.textContent = "ITabsConfig[]";
    			t21 = space();
    			td6 = element("td");
    			t22 = space();
    			td7 = element("td");
    			t23 = text("Array of tab data. See ");
    			create_component(badge.$$.fragment);
    			t24 = text(" props below for details");
    			t25 = space();
    			tr3 = element("tr");
    			th4 = element("th");
    			th4.textContent = "Tab";
    			t27 = space();
    			tr4 = element("tr");
    			td8 = element("td");
    			td8.textContent = "content";
    			t29 = space();
    			td9 = element("td");
    			td9.textContent = "string / html";
    			t31 = space();
    			td10 = element("td");
    			t32 = space();
    			td11 = element("td");
    			t33 = space();
    			tr5 = element("tr");
    			td12 = element("td");
    			td12.textContent = "title";
    			t35 = space();
    			td13 = element("td");
    			td13.textContent = "string";
    			t37 = space();
    			td14 = element("td");
    			t38 = space();
    			td15 = element("td");
    			add_location(th0, file$q, 23, 8, 578);
    			add_location(th1, file$q, 24, 8, 605);
    			add_location(th2, file$q, 25, 8, 627);
    			add_location(th3, file$q, 26, 8, 658);
    			add_location(tr0, file$q, 22, 6, 565);
    			add_location(thead, file$q, 21, 4, 551);
    			add_location(td0, file$q, 31, 8, 735);
    			add_location(td1, file$q, 32, 8, 762);
    			add_location(td2, file$q, 33, 8, 804);
    			attr_dev(a, "href", "/#/utilities/datatheme");
    			add_location(a, file$q, 34, 16, 827);
    			add_location(td3, file$q, 34, 8, 819);
    			add_location(tr1, file$q, 30, 6, 722);
    			add_location(td4, file$q, 37, 8, 919);
    			add_location(td5, file$q, 38, 8, 941);
    			add_location(td6, file$q, 39, 8, 972);
    			add_location(td7, file$q, 40, 8, 987);
    			add_location(tr2, file$q, 36, 6, 906);
    			attr_dev(th4, "colspan", "4");
    			add_location(th4, file$q, 43, 8, 1128);
    			add_location(tr3, file$q, 42, 6, 1115);
    			add_location(td8, file$q, 46, 8, 1184);
    			add_location(td9, file$q, 47, 8, 1209);
    			add_location(td10, file$q, 48, 8, 1240);
    			add_location(td11, file$q, 49, 8, 1255);
    			add_location(tr4, file$q, 45, 6, 1171);
    			add_location(td12, file$q, 52, 8, 1293);
    			add_location(td13, file$q, 53, 8, 1316);
    			add_location(td14, file$q, 54, 8, 1340);
    			add_location(td15, file$q, 55, 8, 1355);
    			add_location(tr5, file$q, 51, 6, 1280);
    			add_location(tbody, file$q, 29, 4, 708);
    			attr_dev(table, "class", "table");
    			add_location(table, file$q, 20, 2, 525);
    		},
    		m: function mount(target, anchor) {
    			mount_component(prism, target, anchor);
    			insert_dev(target, t0, anchor);
    			insert_dev(target, table, anchor);
    			append_dev(table, thead);
    			append_dev(thead, tr0);
    			append_dev(tr0, th0);
    			append_dev(tr0, t2);
    			append_dev(tr0, th1);
    			append_dev(tr0, t4);
    			append_dev(tr0, th2);
    			append_dev(tr0, t6);
    			append_dev(tr0, th3);
    			append_dev(table, t8);
    			append_dev(table, tbody);
    			append_dev(tbody, tr1);
    			append_dev(tr1, td0);
    			append_dev(tr1, t10);
    			append_dev(tr1, td1);
    			append_dev(tr1, t12);
    			append_dev(tr1, td2);
    			append_dev(tr1, t13);
    			append_dev(tr1, td3);
    			append_dev(td3, t14);
    			append_dev(td3, a);
    			append_dev(td3, t16);
    			append_dev(tbody, t17);
    			append_dev(tbody, tr2);
    			append_dev(tr2, td4);
    			append_dev(tr2, t19);
    			append_dev(tr2, td5);
    			append_dev(tr2, t21);
    			append_dev(tr2, td6);
    			append_dev(tr2, t22);
    			append_dev(tr2, td7);
    			append_dev(td7, t23);
    			mount_component(badge, td7, null);
    			append_dev(td7, t24);
    			append_dev(tbody, t25);
    			append_dev(tbody, tr3);
    			append_dev(tr3, th4);
    			append_dev(tbody, t27);
    			append_dev(tbody, tr4);
    			append_dev(tr4, td8);
    			append_dev(tr4, t29);
    			append_dev(tr4, td9);
    			append_dev(tr4, t31);
    			append_dev(tr4, td10);
    			append_dev(tr4, t32);
    			append_dev(tr4, td11);
    			append_dev(tbody, t33);
    			append_dev(tbody, tr5);
    			append_dev(tr5, td12);
    			append_dev(tr5, t35);
    			append_dev(tr5, td13);
    			append_dev(tr5, t37);
    			append_dev(tr5, td14);
    			append_dev(tr5, t38);
    			append_dev(tr5, td15);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(prism.$$.fragment, local);
    			transition_in(badge.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(prism.$$.fragment, local);
    			transition_out(badge.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(prism, detaching);
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(table);
    			destroy_component(badge);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$a.name,
    		type: "if",
    		source: "(16:0) {#if $sourceType === 'svelte'}",
    		ctx
    	});

    	return block;
    }

    // (17:2) <Prism language="js">
    function create_default_slot_4$h(ctx) {
    	let t_value = `import { Accordion } from '@ekstra-bladet/designsystem';` + "";
    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_4$h.name,
    		type: "slot",
    		source: "(17:2) <Prism language=\\\"js\\\">",
    		ctx
    	});

    	return block;
    }

    // (41:35) <Badge type="secondary" extension="small">
    function create_default_slot_3$i(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Tab");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_3$i.name,
    		type: "slot",
    		source: "(41:35) <Badge type=\\\"secondary\\\" extension=\\\"small\\\">",
    		ctx
    	});

    	return block;
    }

    // (68:0) {:else}
    function create_else_block$c(ctx) {
    	let prism0;
    	let t;
    	let prism1;
    	let current;

    	prism0 = new Prism$1({
    			props: {
    				language: "html",
    				$$slots: { default: [create_default_slot_2$m] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	prism1 = new Prism$1({
    			props: {
    				language: "js",
    				$$slots: { default: [create_default_slot_1$n] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(prism0.$$.fragment);
    			t = space();
    			create_component(prism1.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(prism0, target, anchor);
    			insert_dev(target, t, anchor);
    			mount_component(prism1, target, anchor);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(prism0.$$.fragment, local);
    			transition_in(prism1.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(prism0.$$.fragment, local);
    			transition_out(prism1.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(prism0, detaching);
    			if (detaching) detach_dev(t);
    			destroy_component(prism1, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$c.name,
    		type: "else",
    		source: "(68:0) {:else}",
    		ctx
    	});

    	return block;
    }

    // (64:0) {#if $sourceType === 'svelte'}
    function create_if_block$d(ctx) {
    	let prism;
    	let current;

    	prism = new Prism$1({
    			props: {
    				language: "html",
    				$$slots: { default: [create_default_slot$o] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(prism.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(prism, target, anchor);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(prism.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(prism.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(prism, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$d.name,
    		type: "if",
    		source: "(64:0) {#if $sourceType === 'svelte'}",
    		ctx
    	});

    	return block;
    }

    // (69:2) <Prism language="html">
    function create_default_slot_2$m(ctx) {
    	let t_value = `<div class="accordion card-mode padding-l ff-secondary width-1of1">
  <div class="accordion-tab margin-m--b">
    <div class="accordion-header flex flex-justify--between flex-align--center padding-m">
      <span class="fontweight-bold fontsize-medium">Tab 1</span>
      <i class="fas fa-chevron-down" />
    </div>
    <div class="accordion-body padding-m padding-l--rl fontsize-small">
      Content 1
    </div>
  </div>
  <div class="accordion-tab margin-m--b">
    <div class="accordion-header flex flex-justify--between flex-align--center padding-m">
      <span class="fontweight-bold fontsize-medium">Tab 2</span>
      <i class="fas fa-chevron-down" />
    </div>
    <div class="accordion-body padding-m padding-l--rl fontsize-small">
      Content 2
    </div>
  </div>
  <div class="accordion-tab margin-m--b">
    <div class="accordion-header flex flex-justify--between flex-align--center padding-m">
      <span class="fontweight-bold fontsize-medium">Tab 3</span>
      <i class="fas fa-chevron-down" />
    </div>
    <div class="accordion-body padding-m padding-l--rl fontsize-small">
      Content 3
    </div>
  </div>
</div>` + "";

    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_2$m.name,
    		type: "slot",
    		source: "(69:2) <Prism language=\\\"html\\\">",
    		ctx
    	});

    	return block;
    }

    // (101:2) <Prism language="js">
    function create_default_slot_1$n(ctx) {
    	let t_value = `const accordions = document.querySelectorAll(".accordion");
for (const accordion of accordions) {
  const tabs = accordion.querySelectorAll(".accordion-tab");
  for (const tab of tabs) {
    const head = tab.querySelector(".accordion-header");
    head.addEventListener('click', () => {
      for (const othertab of tabs) {
        if (othertab !== tab) {
          othertab.classList.remove('accordion-expanded');
        }
      }
      tab.classList.toggle('accordion-expanded');
    });
  }
}` + "";

    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_1$n.name,
    		type: "slot",
    		source: "(101:2) <Prism language=\\\"js\\\">",
    		ctx
    	});

    	return block;
    }

    // (65:2) <Prism language="html">
    function create_default_slot$o(ctx) {
    	let t_value = `<Accordion {tabs} />` + "";
    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$o.name,
    		type: "slot",
    		source: "(65:2) <Prism language=\\\"html\\\">",
    		ctx
    	});

    	return block;
    }

    function create_fragment$q(ctx) {
    	let h1;
    	let t1;
    	let t2;
    	let accordion;
    	let t3;
    	let current_block_type_index;
    	let if_block1;
    	let if_block1_anchor;
    	let current;
    	let if_block0 = /*$sourceType*/ ctx[0] === 'svelte' && create_if_block_1$a(ctx);

    	accordion = new dist$1.Accordion({
    			props: { tabs: /*tabs*/ ctx[1] },
    			$$inline: true
    		});

    	const if_block_creators = [create_if_block$d, create_else_block$c];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (/*$sourceType*/ ctx[0] === 'svelte') return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type(ctx);
    	if_block1 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

    	const block = {
    		c: function create() {
    			h1 = element("h1");
    			h1.textContent = "Accordion";
    			t1 = space();
    			if (if_block0) if_block0.c();
    			t2 = space();
    			create_component(accordion.$$.fragment);
    			t3 = space();
    			if_block1.c();
    			if_block1_anchor = empty();
    			attr_dev(h1, "class", "color--eb");
    			add_location(h1, file$q, 13, 0, 353);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, h1, anchor);
    			insert_dev(target, t1, anchor);
    			if (if_block0) if_block0.m(target, anchor);
    			insert_dev(target, t2, anchor);
    			mount_component(accordion, target, anchor);
    			insert_dev(target, t3, anchor);
    			if_blocks[current_block_type_index].m(target, anchor);
    			insert_dev(target, if_block1_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (/*$sourceType*/ ctx[0] === 'svelte') {
    				if (if_block0) {
    					if (dirty & /*$sourceType*/ 1) {
    						transition_in(if_block0, 1);
    					}
    				} else {
    					if_block0 = create_if_block_1$a(ctx);
    					if_block0.c();
    					transition_in(if_block0, 1);
    					if_block0.m(t2.parentNode, t2);
    				}
    			} else if (if_block0) {
    				group_outros();

    				transition_out(if_block0, 1, 1, () => {
    					if_block0 = null;
    				});

    				check_outros();
    			}

    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(ctx);

    			if (current_block_type_index !== previous_block_index) {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block1 = if_blocks[current_block_type_index];

    				if (!if_block1) {
    					if_block1 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block1.c();
    				}

    				transition_in(if_block1, 1);
    				if_block1.m(if_block1_anchor.parentNode, if_block1_anchor);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block0);
    			transition_in(accordion.$$.fragment, local);
    			transition_in(if_block1);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block0);
    			transition_out(accordion.$$.fragment, local);
    			transition_out(if_block1);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(h1);
    			if (detaching) detach_dev(t1);
    			if (if_block0) if_block0.d(detaching);
    			if (detaching) detach_dev(t2);
    			destroy_component(accordion, detaching);
    			if (detaching) detach_dev(t3);
    			if_blocks[current_block_type_index].d(detaching);
    			if (detaching) detach_dev(if_block1_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$q.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$q($$self, $$props, $$invalidate) {
    	let $sourceType;
    	validate_store(sourceType, 'sourceType');
    	component_subscribe($$self, sourceType, $$value => $$invalidate(0, $sourceType = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Accordion', slots, []);
    	const tabs = [];

    	for (let i = 0; i < 3; i++) {
    		tabs.push({
    			title: `Tab ${i + 1}`,
    			content: '<h2>Test af h2</h2>' + rdmParagraphs()
    		});
    	}

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Accordion> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({
    		Prism: Prism$1,
    		rdmParagraphs,
    		sourceType,
    		Accordion: dist$1.Accordion,
    		Badge: dist$1.Badge,
    		tabs,
    		$sourceType
    	});

    	return [$sourceType, tabs];
    }

    class Accordion_1 extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$q, create_fragment$q, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Accordion_1",
    			options,
    			id: create_fragment$q.name
    		});
    	}
    }

    /* docs_src/components/ArticleCard.svelte generated by Svelte v3.42.1 */
    const file$p = "docs_src/components/ArticleCard.svelte";

    // (165:0) {:else}
    function create_else_block$b(ctx) {
    	let p;

    	const block = {
    		c: function create() {
    			p = element("p");
    			p.textContent = "ArticleCard er en ren Svelte component.";
    			add_location(p, file$p, 165, 2, 3961);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, p, anchor);
    		},
    		p: noop,
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(p);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$b.name,
    		type: "else",
    		source: "(165:0) {:else}",
    		ctx
    	});

    	return block;
    }

    // (9:0) {#if $sourceType === 'svelte'}
    function create_if_block$c(ctx) {
    	let prism0;
    	let t0;
    	let table;
    	let thead;
    	let tr0;
    	let th0;
    	let t2;
    	let th1;
    	let t4;
    	let th2;
    	let t6;
    	let th3;
    	let t8;
    	let tbody;
    	let tr1;
    	let td0;
    	let t10;
    	let td1;
    	let t12;
    	let td2;
    	let t13;
    	let td3;
    	let t14;
    	let tr2;
    	let td4;
    	let t16;
    	let td5;
    	let t18;
    	let td6;
    	let t19;
    	let td7;
    	let t20;
    	let em;
    	let t22;
    	let tr3;
    	let td8;
    	let t24;
    	let td9;
    	let t26;
    	let td10;
    	let t27;
    	let td11;
    	let t29;
    	let tr4;
    	let td12;
    	let t31;
    	let td13;
    	let t33;
    	let td14;
    	let t35;
    	let td15;
    	let t37;
    	let tr5;
    	let td16;
    	let t39;
    	let td17;
    	let t41;
    	let td18;
    	let t43;
    	let td19;
    	let t45;
    	let tr6;
    	let td20;
    	let t47;
    	let td21;
    	let t49;
    	let td22;
    	let t51;
    	let td23;
    	let t52;
    	let tr7;
    	let td24;
    	let t54;
    	let td25;
    	let t56;
    	let td26;
    	let t58;
    	let td27;
    	let t60;
    	let tr8;
    	let td28;
    	let t62;
    	let td29;
    	let t64;
    	let td30;
    	let t66;
    	let td31;
    	let t67;
    	let code;
    	let t69;
    	let t70;
    	let tr9;
    	let td32;
    	let t72;
    	let td33;
    	let t74;
    	let td34;
    	let t75;
    	let td35;
    	let t76;
    	let badge0;
    	let t77;
    	let t78;
    	let tr10;
    	let td36;
    	let t80;
    	let td37;
    	let t82;
    	let td38;
    	let t83;
    	let td39;
    	let t85;
    	let tr11;
    	let td40;
    	let t87;
    	let td41;
    	let t89;
    	let td42;
    	let t90;
    	let td43;
    	let t91;
    	let tr12;
    	let td44;
    	let t93;
    	let td45;
    	let t95;
    	let td46;
    	let t96;
    	let td47;
    	let t98;
    	let tr13;
    	let td48;
    	let t100;
    	let td49;
    	let t102;
    	let td50;
    	let t104;
    	let td51;
    	let t105;
    	let tr14;
    	let td52;
    	let t107;
    	let td53;
    	let t109;
    	let td54;
    	let t110;
    	let td55;
    	let t112;
    	let tr15;
    	let th4;
    	let t114;
    	let tr16;
    	let td56;
    	let t116;
    	let td57;
    	let t118;
    	let td58;
    	let t119;
    	let td59;
    	let t120;
    	let tr17;
    	let td60;
    	let t122;
    	let td61;
    	let t124;
    	let td62;
    	let t125;
    	let td63;
    	let t126;
    	let tr18;
    	let td64;
    	let t127;
    	let badge1;
    	let t128;
    	let td65;
    	let t130;
    	let td66;
    	let t131;
    	let td67;
    	let t132;
    	let tr19;
    	let td68;
    	let t134;
    	let td69;
    	let t136;
    	let td70;
    	let t137;
    	let td71;
    	let t138;
    	let articlecard0;
    	let t139;
    	let prism1;
    	let t140;
    	let h30;
    	let t142;
    	let articlecard1;
    	let t143;
    	let articlecard2;
    	let t144;
    	let prism2;
    	let t145;
    	let h31;
    	let t147;
    	let articlecard3;
    	let t148;
    	let articlecard4;
    	let t149;
    	let articlecard5;
    	let t150;
    	let prism3;
    	let current;

    	prism0 = new Prism$1({
    			props: {
    				language: "js",
    				$$slots: { default: [create_default_slot_5$d] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	badge0 = new dist$1.Badge({
    			props: {
    				type: "secondary",
    				extension: "small",
    				$$slots: { default: [create_default_slot_4$g] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	badge1 = new dist$1.Badge({
    			props: {
    				type: "primary",
    				extension: "small",
    				$$slots: { default: [create_default_slot_3$h] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const articlecard0_spread_levels = [rdmArticleData()];
    	let articlecard0_props = {};

    	for (let i = 0; i < articlecard0_spread_levels.length; i += 1) {
    		articlecard0_props = assign(articlecard0_props, articlecard0_spread_levels[i]);
    	}

    	articlecard0 = new dist$1.ArticleCard({
    			props: articlecard0_props,
    			$$inline: true
    		});

    	prism1 = new Prism$1({
    			props: {
    				language: "html",
    				$$slots: { default: [create_default_slot_2$l] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const articlecard1_spread_levels = [
    		{ className: "margin-m--b" },
    		{ type: "small-media" },
    		rdmArticleData(250, 120)
    	];

    	let articlecard1_props = {};

    	for (let i = 0; i < articlecard1_spread_levels.length; i += 1) {
    		articlecard1_props = assign(articlecard1_props, articlecard1_spread_levels[i]);
    	}

    	articlecard1 = new dist$1.ArticleCard({
    			props: articlecard1_props,
    			$$inline: true
    		});

    	const articlecard2_spread_levels = [{ type: "small-media--reverse" }, rdmArticleData(250, 120)];
    	let articlecard2_props = {};

    	for (let i = 0; i < articlecard2_spread_levels.length; i += 1) {
    		articlecard2_props = assign(articlecard2_props, articlecard2_spread_levels[i]);
    	}

    	articlecard2 = new dist$1.ArticleCard({
    			props: articlecard2_props,
    			$$inline: true
    		});

    	prism2 = new Prism$1({
    			props: {
    				language: "html",
    				$$slots: { default: [create_default_slot_1$m] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	articlecard3 = new dist$1.ArticleCard({ props: { loading: true }, $$inline: true });

    	articlecard4 = new dist$1.ArticleCard({
    			props: { loading: true, type: "small-media" },
    			$$inline: true
    		});

    	articlecard5 = new dist$1.ArticleCard({
    			props: {
    				loading: true,
    				type: "small-media--reverse"
    			},
    			$$inline: true
    		});

    	prism3 = new Prism$1({
    			props: {
    				language: "html",
    				$$slots: { default: [create_default_slot$n] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(prism0.$$.fragment);
    			t0 = space();
    			table = element("table");
    			thead = element("thead");
    			tr0 = element("tr");
    			th0 = element("th");
    			th0.textContent = "Prop name";
    			t2 = space();
    			th1 = element("th");
    			th1.textContent = "Type";
    			t4 = space();
    			th2 = element("th");
    			th2.textContent = "Default value";
    			t6 = space();
    			th3 = element("th");
    			th3.textContent = "Description";
    			t8 = space();
    			tbody = element("tbody");
    			tr1 = element("tr");
    			td0 = element("td");
    			td0.textContent = "className";
    			t10 = space();
    			td1 = element("td");
    			td1.textContent = "string";
    			t12 = space();
    			td2 = element("td");
    			t13 = space();
    			td3 = element("td");
    			t14 = space();
    			tr2 = element("tr");
    			td4 = element("td");
    			td4.textContent = "colorClass";
    			t16 = space();
    			td5 = element("td");
    			td5.textContent = "string";
    			t18 = space();
    			td6 = element("td");
    			t19 = space();
    			td7 = element("td");
    			t20 = text("EB color ");
    			em = element("em");
    			em.textContent = "(e.g. sport)";
    			t22 = space();
    			tr3 = element("tr");
    			td8 = element("td");
    			td8.textContent = "src";
    			t24 = space();
    			td9 = element("td");
    			td9.textContent = "string";
    			t26 = space();
    			td10 = element("td");
    			t27 = space();
    			td11 = element("td");
    			td11.textContent = "Converts the ArticleCard into a clickable link";
    			t29 = space();
    			tr4 = element("tr");
    			td12 = element("td");
    			td12.textContent = "breaking";
    			t31 = space();
    			td13 = element("td");
    			td13.textContent = "boolean";
    			t33 = space();
    			td14 = element("td");
    			td14.textContent = "false";
    			t35 = space();
    			td15 = element("td");
    			td15.textContent = "Force breaking color";
    			t37 = space();
    			tr5 = element("tr");
    			td16 = element("td");
    			td16.textContent = "update";
    			t39 = space();
    			td17 = element("td");
    			td17.textContent = "boolean";
    			t41 = space();
    			td18 = element("td");
    			td18.textContent = "false";
    			t43 = space();
    			td19 = element("td");
    			td19.textContent = "Add update icon to media";
    			t45 = space();
    			tr6 = element("tr");
    			td20 = element("td");
    			td20.textContent = "premium";
    			t47 = space();
    			td21 = element("td");
    			td21.textContent = "boolean";
    			t49 = space();
    			td22 = element("td");
    			td22.textContent = "false";
    			t51 = space();
    			td23 = element("td");
    			t52 = space();
    			tr7 = element("tr");
    			td24 = element("td");
    			td24.textContent = "loading";
    			t54 = space();
    			td25 = element("td");
    			td25.textContent = "boolean";
    			t56 = space();
    			td26 = element("td");
    			td26.textContent = "false";
    			t58 = space();
    			td27 = element("td");
    			td27.textContent = "Converts the ArticleCard into a loading placeholder";
    			t60 = space();
    			tr8 = element("tr");
    			td28 = element("td");
    			td28.textContent = "maxLines";
    			t62 = space();
    			td29 = element("td");
    			td29.textContent = "number";
    			t64 = space();
    			td30 = element("td");
    			td30.textContent = "4";
    			t66 = space();
    			td31 = element("td");
    			t67 = text("Sets the value of ");
    			code = element("code");
    			code.textContent = "--max-lines";
    			t69 = text(" if truncate is enabled");
    			t70 = space();
    			tr9 = element("tr");
    			td32 = element("td");
    			td32.textContent = "media";
    			t72 = space();
    			td33 = element("td");
    			td33.textContent = "IMediaOptions";
    			t74 = space();
    			td34 = element("td");
    			t75 = space();
    			td35 = element("td");
    			t76 = text("Adds a image, see ");
    			create_component(badge0.$$.fragment);
    			t77 = text(" props below for details");
    			t78 = space();
    			tr10 = element("tr");
    			td36 = element("td");
    			td36.textContent = "section";
    			t80 = space();
    			td37 = element("td");
    			td37.textContent = "string";
    			t82 = space();
    			td38 = element("td");
    			t83 = space();
    			td39 = element("td");
    			td39.textContent = "Displays the section meta with a tag icon";
    			t85 = space();
    			tr11 = element("tr");
    			td40 = element("td");
    			td40.textContent = "style";
    			t87 = space();
    			td41 = element("td");
    			td41.textContent = "string";
    			t89 = space();
    			td42 = element("td");
    			t90 = space();
    			td43 = element("td");
    			t91 = space();
    			tr12 = element("tr");
    			td44 = element("td");
    			td44.textContent = "published";
    			t93 = space();
    			td45 = element("td");
    			td45.textContent = "date string";
    			t95 = space();
    			td46 = element("td");
    			t96 = space();
    			td47 = element("td");
    			td47.textContent = "Displays relative time meta with a icon";
    			t98 = space();
    			tr13 = element("tr");
    			td48 = element("td");
    			td48.textContent = "truncateTitle";
    			t100 = space();
    			td49 = element("td");
    			td49.textContent = "boolean";
    			t102 = space();
    			td50 = element("td");
    			td50.textContent = "false";
    			t104 = space();
    			td51 = element("td");
    			t105 = space();
    			tr14 = element("tr");
    			td52 = element("td");
    			td52.textContent = "cardType";
    			t107 = space();
    			td53 = element("td");
    			td53.textContent = "'mode' | 'small-media' | 'small-media--reverse'";
    			t109 = space();
    			td54 = element("td");
    			t110 = space();
    			td55 = element("td");
    			td55.textContent = "Display types. See examples below";
    			t112 = space();
    			tr15 = element("tr");
    			th4 = element("th");
    			th4.textContent = "Media";
    			t114 = space();
    			tr16 = element("tr");
    			td56 = element("td");
    			td56.textContent = "className";
    			t116 = space();
    			td57 = element("td");
    			td57.textContent = "string";
    			t118 = space();
    			td58 = element("td");
    			t119 = space();
    			td59 = element("td");
    			t120 = space();
    			tr17 = element("tr");
    			td60 = element("td");
    			td60.textContent = "height";
    			t122 = space();
    			td61 = element("td");
    			td61.textContent = "string";
    			t124 = space();
    			td62 = element("td");
    			t125 = space();
    			td63 = element("td");
    			t126 = space();
    			tr18 = element("tr");
    			td64 = element("td");
    			t127 = text("src ");
    			create_component(badge1.$$.fragment);
    			t128 = space();
    			td65 = element("td");
    			td65.textContent = "string";
    			t130 = space();
    			td66 = element("td");
    			t131 = space();
    			td67 = element("td");
    			t132 = space();
    			tr19 = element("tr");
    			td68 = element("td");
    			td68.textContent = "width";
    			t134 = space();
    			td69 = element("td");
    			td69.textContent = "string";
    			t136 = space();
    			td70 = element("td");
    			t137 = space();
    			td71 = element("td");
    			t138 = space();
    			create_component(articlecard0.$$.fragment);
    			t139 = space();
    			create_component(prism1.$$.fragment);
    			t140 = space();
    			h30 = element("h3");
    			h30.textContent = "Small-media";
    			t142 = space();
    			create_component(articlecard1.$$.fragment);
    			t143 = space();
    			create_component(articlecard2.$$.fragment);
    			t144 = space();
    			create_component(prism2.$$.fragment);
    			t145 = space();
    			h31 = element("h3");
    			h31.textContent = "Loading placeholder";
    			t147 = space();
    			create_component(articlecard3.$$.fragment);
    			t148 = space();
    			create_component(articlecard4.$$.fragment);
    			t149 = space();
    			create_component(articlecard5.$$.fragment);
    			t150 = space();
    			create_component(prism3.$$.fragment);
    			add_location(th0, file$p, 16, 8, 424);
    			add_location(th1, file$p, 17, 8, 451);
    			add_location(th2, file$p, 18, 8, 473);
    			add_location(th3, file$p, 19, 8, 504);
    			add_location(tr0, file$p, 15, 6, 411);
    			add_location(thead, file$p, 14, 4, 397);
    			add_location(td0, file$p, 24, 8, 581);
    			add_location(td1, file$p, 25, 8, 608);
    			add_location(td2, file$p, 26, 8, 632);
    			add_location(td3, file$p, 27, 8, 647);
    			add_location(tr1, file$p, 23, 6, 568);
    			add_location(td4, file$p, 30, 8, 685);
    			add_location(td5, file$p, 31, 8, 713);
    			add_location(td6, file$p, 32, 8, 737);
    			add_location(em, file$p, 33, 21, 765);
    			add_location(td7, file$p, 33, 8, 752);
    			add_location(tr2, file$p, 29, 6, 672);
    			add_location(td8, file$p, 36, 8, 823);
    			add_location(td9, file$p, 37, 8, 844);
    			add_location(td10, file$p, 38, 8, 868);
    			add_location(td11, file$p, 39, 8, 883);
    			add_location(tr3, file$p, 35, 6, 810);
    			add_location(td12, file$p, 42, 8, 970);
    			add_location(td13, file$p, 43, 8, 996);
    			add_location(td14, file$p, 44, 8, 1021);
    			add_location(td15, file$p, 45, 8, 1044);
    			add_location(tr4, file$p, 41, 6, 957);
    			add_location(td16, file$p, 48, 8, 1105);
    			add_location(td17, file$p, 49, 8, 1129);
    			add_location(td18, file$p, 50, 8, 1154);
    			add_location(td19, file$p, 51, 8, 1177);
    			add_location(tr5, file$p, 47, 6, 1092);
    			add_location(td20, file$p, 54, 8, 1242);
    			add_location(td21, file$p, 55, 8, 1267);
    			add_location(td22, file$p, 56, 8, 1292);
    			add_location(td23, file$p, 57, 8, 1315);
    			add_location(tr6, file$p, 53, 6, 1229);
    			add_location(td24, file$p, 60, 8, 1353);
    			add_location(td25, file$p, 61, 8, 1378);
    			add_location(td26, file$p, 62, 8, 1403);
    			add_location(td27, file$p, 63, 8, 1426);
    			add_location(tr7, file$p, 59, 6, 1340);
    			add_location(td28, file$p, 66, 8, 1518);
    			add_location(td29, file$p, 67, 8, 1544);
    			add_location(td30, file$p, 68, 8, 1568);
    			add_location(code, file$p, 69, 30, 1609);
    			add_location(td31, file$p, 69, 8, 1587);
    			add_location(tr8, file$p, 65, 6, 1505);
    			add_location(td32, file$p, 72, 8, 1693);
    			add_location(td33, file$p, 73, 8, 1716);
    			add_location(td34, file$p, 74, 8, 1747);
    			add_location(td35, file$p, 75, 8, 1762);
    			add_location(tr9, file$p, 71, 6, 1680);
    			add_location(td36, file$p, 78, 8, 1900);
    			add_location(td37, file$p, 79, 8, 1925);
    			add_location(td38, file$p, 80, 8, 1949);
    			add_location(td39, file$p, 81, 8, 1964);
    			add_location(tr10, file$p, 77, 6, 1887);
    			add_location(td40, file$p, 84, 8, 2046);
    			add_location(td41, file$p, 85, 8, 2069);
    			add_location(td42, file$p, 86, 8, 2093);
    			add_location(td43, file$p, 87, 8, 2108);
    			add_location(tr11, file$p, 83, 6, 2033);
    			add_location(td44, file$p, 90, 8, 2146);
    			add_location(td45, file$p, 91, 8, 2173);
    			add_location(td46, file$p, 92, 8, 2202);
    			add_location(td47, file$p, 93, 8, 2217);
    			add_location(tr12, file$p, 89, 6, 2133);
    			add_location(td48, file$p, 96, 8, 2297);
    			add_location(td49, file$p, 97, 8, 2328);
    			add_location(td50, file$p, 98, 8, 2353);
    			add_location(td51, file$p, 99, 8, 2376);
    			add_location(tr13, file$p, 95, 6, 2284);
    			add_location(td52, file$p, 102, 8, 2414);
    			add_location(td53, file$p, 103, 8, 2440);
    			add_location(td54, file$p, 104, 8, 2505);
    			add_location(td55, file$p, 105, 8, 2520);
    			add_location(tr14, file$p, 101, 6, 2401);
    			attr_dev(th4, "colspan", "4");
    			add_location(th4, file$p, 108, 8, 2594);
    			add_location(tr15, file$p, 107, 6, 2581);
    			add_location(td56, file$p, 111, 8, 2652);
    			add_location(td57, file$p, 112, 8, 2679);
    			add_location(td58, file$p, 113, 8, 2703);
    			add_location(td59, file$p, 114, 8, 2718);
    			add_location(tr16, file$p, 110, 6, 2639);
    			add_location(td60, file$p, 117, 8, 2756);
    			add_location(td61, file$p, 118, 8, 2780);
    			add_location(td62, file$p, 119, 8, 2804);
    			add_location(td63, file$p, 120, 8, 2819);
    			add_location(tr17, file$p, 116, 6, 2743);
    			add_location(td64, file$p, 123, 8, 2857);
    			add_location(td65, file$p, 124, 8, 2935);
    			add_location(td66, file$p, 125, 8, 2959);
    			add_location(td67, file$p, 126, 8, 2974);
    			add_location(tr18, file$p, 122, 6, 2844);
    			add_location(td68, file$p, 129, 8, 3012);
    			add_location(td69, file$p, 130, 8, 3035);
    			add_location(td70, file$p, 131, 8, 3059);
    			add_location(td71, file$p, 132, 8, 3074);
    			add_location(tr19, file$p, 128, 6, 2999);
    			add_location(tbody, file$p, 22, 4, 554);
    			attr_dev(table, "class", "table");
    			add_location(table, file$p, 13, 2, 371);
    			add_location(h30, file$p, 143, 2, 3236);
    			add_location(h31, file$p, 153, 2, 3589);
    		},
    		m: function mount(target, anchor) {
    			mount_component(prism0, target, anchor);
    			insert_dev(target, t0, anchor);
    			insert_dev(target, table, anchor);
    			append_dev(table, thead);
    			append_dev(thead, tr0);
    			append_dev(tr0, th0);
    			append_dev(tr0, t2);
    			append_dev(tr0, th1);
    			append_dev(tr0, t4);
    			append_dev(tr0, th2);
    			append_dev(tr0, t6);
    			append_dev(tr0, th3);
    			append_dev(table, t8);
    			append_dev(table, tbody);
    			append_dev(tbody, tr1);
    			append_dev(tr1, td0);
    			append_dev(tr1, t10);
    			append_dev(tr1, td1);
    			append_dev(tr1, t12);
    			append_dev(tr1, td2);
    			append_dev(tr1, t13);
    			append_dev(tr1, td3);
    			append_dev(tbody, t14);
    			append_dev(tbody, tr2);
    			append_dev(tr2, td4);
    			append_dev(tr2, t16);
    			append_dev(tr2, td5);
    			append_dev(tr2, t18);
    			append_dev(tr2, td6);
    			append_dev(tr2, t19);
    			append_dev(tr2, td7);
    			append_dev(td7, t20);
    			append_dev(td7, em);
    			append_dev(tbody, t22);
    			append_dev(tbody, tr3);
    			append_dev(tr3, td8);
    			append_dev(tr3, t24);
    			append_dev(tr3, td9);
    			append_dev(tr3, t26);
    			append_dev(tr3, td10);
    			append_dev(tr3, t27);
    			append_dev(tr3, td11);
    			append_dev(tbody, t29);
    			append_dev(tbody, tr4);
    			append_dev(tr4, td12);
    			append_dev(tr4, t31);
    			append_dev(tr4, td13);
    			append_dev(tr4, t33);
    			append_dev(tr4, td14);
    			append_dev(tr4, t35);
    			append_dev(tr4, td15);
    			append_dev(tbody, t37);
    			append_dev(tbody, tr5);
    			append_dev(tr5, td16);
    			append_dev(tr5, t39);
    			append_dev(tr5, td17);
    			append_dev(tr5, t41);
    			append_dev(tr5, td18);
    			append_dev(tr5, t43);
    			append_dev(tr5, td19);
    			append_dev(tbody, t45);
    			append_dev(tbody, tr6);
    			append_dev(tr6, td20);
    			append_dev(tr6, t47);
    			append_dev(tr6, td21);
    			append_dev(tr6, t49);
    			append_dev(tr6, td22);
    			append_dev(tr6, t51);
    			append_dev(tr6, td23);
    			append_dev(tbody, t52);
    			append_dev(tbody, tr7);
    			append_dev(tr7, td24);
    			append_dev(tr7, t54);
    			append_dev(tr7, td25);
    			append_dev(tr7, t56);
    			append_dev(tr7, td26);
    			append_dev(tr7, t58);
    			append_dev(tr7, td27);
    			append_dev(tbody, t60);
    			append_dev(tbody, tr8);
    			append_dev(tr8, td28);
    			append_dev(tr8, t62);
    			append_dev(tr8, td29);
    			append_dev(tr8, t64);
    			append_dev(tr8, td30);
    			append_dev(tr8, t66);
    			append_dev(tr8, td31);
    			append_dev(td31, t67);
    			append_dev(td31, code);
    			append_dev(td31, t69);
    			append_dev(tbody, t70);
    			append_dev(tbody, tr9);
    			append_dev(tr9, td32);
    			append_dev(tr9, t72);
    			append_dev(tr9, td33);
    			append_dev(tr9, t74);
    			append_dev(tr9, td34);
    			append_dev(tr9, t75);
    			append_dev(tr9, td35);
    			append_dev(td35, t76);
    			mount_component(badge0, td35, null);
    			append_dev(td35, t77);
    			append_dev(tbody, t78);
    			append_dev(tbody, tr10);
    			append_dev(tr10, td36);
    			append_dev(tr10, t80);
    			append_dev(tr10, td37);
    			append_dev(tr10, t82);
    			append_dev(tr10, td38);
    			append_dev(tr10, t83);
    			append_dev(tr10, td39);
    			append_dev(tbody, t85);
    			append_dev(tbody, tr11);
    			append_dev(tr11, td40);
    			append_dev(tr11, t87);
    			append_dev(tr11, td41);
    			append_dev(tr11, t89);
    			append_dev(tr11, td42);
    			append_dev(tr11, t90);
    			append_dev(tr11, td43);
    			append_dev(tbody, t91);
    			append_dev(tbody, tr12);
    			append_dev(tr12, td44);
    			append_dev(tr12, t93);
    			append_dev(tr12, td45);
    			append_dev(tr12, t95);
    			append_dev(tr12, td46);
    			append_dev(tr12, t96);
    			append_dev(tr12, td47);
    			append_dev(tbody, t98);
    			append_dev(tbody, tr13);
    			append_dev(tr13, td48);
    			append_dev(tr13, t100);
    			append_dev(tr13, td49);
    			append_dev(tr13, t102);
    			append_dev(tr13, td50);
    			append_dev(tr13, t104);
    			append_dev(tr13, td51);
    			append_dev(tbody, t105);
    			append_dev(tbody, tr14);
    			append_dev(tr14, td52);
    			append_dev(tr14, t107);
    			append_dev(tr14, td53);
    			append_dev(tr14, t109);
    			append_dev(tr14, td54);
    			append_dev(tr14, t110);
    			append_dev(tr14, td55);
    			append_dev(tbody, t112);
    			append_dev(tbody, tr15);
    			append_dev(tr15, th4);
    			append_dev(tbody, t114);
    			append_dev(tbody, tr16);
    			append_dev(tr16, td56);
    			append_dev(tr16, t116);
    			append_dev(tr16, td57);
    			append_dev(tr16, t118);
    			append_dev(tr16, td58);
    			append_dev(tr16, t119);
    			append_dev(tr16, td59);
    			append_dev(tbody, t120);
    			append_dev(tbody, tr17);
    			append_dev(tr17, td60);
    			append_dev(tr17, t122);
    			append_dev(tr17, td61);
    			append_dev(tr17, t124);
    			append_dev(tr17, td62);
    			append_dev(tr17, t125);
    			append_dev(tr17, td63);
    			append_dev(tbody, t126);
    			append_dev(tbody, tr18);
    			append_dev(tr18, td64);
    			append_dev(td64, t127);
    			mount_component(badge1, td64, null);
    			append_dev(tr18, t128);
    			append_dev(tr18, td65);
    			append_dev(tr18, t130);
    			append_dev(tr18, td66);
    			append_dev(tr18, t131);
    			append_dev(tr18, td67);
    			append_dev(tbody, t132);
    			append_dev(tbody, tr19);
    			append_dev(tr19, td68);
    			append_dev(tr19, t134);
    			append_dev(tr19, td69);
    			append_dev(tr19, t136);
    			append_dev(tr19, td70);
    			append_dev(tr19, t137);
    			append_dev(tr19, td71);
    			insert_dev(target, t138, anchor);
    			mount_component(articlecard0, target, anchor);
    			insert_dev(target, t139, anchor);
    			mount_component(prism1, target, anchor);
    			insert_dev(target, t140, anchor);
    			insert_dev(target, h30, anchor);
    			insert_dev(target, t142, anchor);
    			mount_component(articlecard1, target, anchor);
    			insert_dev(target, t143, anchor);
    			mount_component(articlecard2, target, anchor);
    			insert_dev(target, t144, anchor);
    			mount_component(prism2, target, anchor);
    			insert_dev(target, t145, anchor);
    			insert_dev(target, h31, anchor);
    			insert_dev(target, t147, anchor);
    			mount_component(articlecard3, target, anchor);
    			insert_dev(target, t148, anchor);
    			mount_component(articlecard4, target, anchor);
    			insert_dev(target, t149, anchor);
    			mount_component(articlecard5, target, anchor);
    			insert_dev(target, t150, anchor);
    			mount_component(prism3, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const prism0_changes = {};

    			if (dirty & /*$$scope*/ 2) {
    				prism0_changes.$$scope = { dirty, ctx };
    			}

    			prism0.$set(prism0_changes);
    			const badge0_changes = {};

    			if (dirty & /*$$scope*/ 2) {
    				badge0_changes.$$scope = { dirty, ctx };
    			}

    			badge0.$set(badge0_changes);
    			const badge1_changes = {};

    			if (dirty & /*$$scope*/ 2) {
    				badge1_changes.$$scope = { dirty, ctx };
    			}

    			badge1.$set(badge1_changes);

    			const articlecard0_changes = (dirty & /*rdmArticleData*/ 0)
    			? get_spread_update(articlecard0_spread_levels, [get_spread_object(rdmArticleData())])
    			: {};

    			articlecard0.$set(articlecard0_changes);
    			const prism1_changes = {};

    			if (dirty & /*$$scope*/ 2) {
    				prism1_changes.$$scope = { dirty, ctx };
    			}

    			prism1.$set(prism1_changes);

    			const articlecard1_changes = (dirty & /*rdmArticleData*/ 0)
    			? get_spread_update(articlecard1_spread_levels, [
    					articlecard1_spread_levels[0],
    					articlecard1_spread_levels[1],
    					get_spread_object(rdmArticleData(250, 120))
    				])
    			: {};

    			articlecard1.$set(articlecard1_changes);

    			const articlecard2_changes = (dirty & /*rdmArticleData*/ 0)
    			? get_spread_update(articlecard2_spread_levels, [
    					articlecard2_spread_levels[0],
    					get_spread_object(rdmArticleData(250, 120))
    				])
    			: {};

    			articlecard2.$set(articlecard2_changes);
    			const prism2_changes = {};

    			if (dirty & /*$$scope*/ 2) {
    				prism2_changes.$$scope = { dirty, ctx };
    			}

    			prism2.$set(prism2_changes);
    			const prism3_changes = {};

    			if (dirty & /*$$scope*/ 2) {
    				prism3_changes.$$scope = { dirty, ctx };
    			}

    			prism3.$set(prism3_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(prism0.$$.fragment, local);
    			transition_in(badge0.$$.fragment, local);
    			transition_in(badge1.$$.fragment, local);
    			transition_in(articlecard0.$$.fragment, local);
    			transition_in(prism1.$$.fragment, local);
    			transition_in(articlecard1.$$.fragment, local);
    			transition_in(articlecard2.$$.fragment, local);
    			transition_in(prism2.$$.fragment, local);
    			transition_in(articlecard3.$$.fragment, local);
    			transition_in(articlecard4.$$.fragment, local);
    			transition_in(articlecard5.$$.fragment, local);
    			transition_in(prism3.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(prism0.$$.fragment, local);
    			transition_out(badge0.$$.fragment, local);
    			transition_out(badge1.$$.fragment, local);
    			transition_out(articlecard0.$$.fragment, local);
    			transition_out(prism1.$$.fragment, local);
    			transition_out(articlecard1.$$.fragment, local);
    			transition_out(articlecard2.$$.fragment, local);
    			transition_out(prism2.$$.fragment, local);
    			transition_out(articlecard3.$$.fragment, local);
    			transition_out(articlecard4.$$.fragment, local);
    			transition_out(articlecard5.$$.fragment, local);
    			transition_out(prism3.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(prism0, detaching);
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(table);
    			destroy_component(badge0);
    			destroy_component(badge1);
    			if (detaching) detach_dev(t138);
    			destroy_component(articlecard0, detaching);
    			if (detaching) detach_dev(t139);
    			destroy_component(prism1, detaching);
    			if (detaching) detach_dev(t140);
    			if (detaching) detach_dev(h30);
    			if (detaching) detach_dev(t142);
    			destroy_component(articlecard1, detaching);
    			if (detaching) detach_dev(t143);
    			destroy_component(articlecard2, detaching);
    			if (detaching) detach_dev(t144);
    			destroy_component(prism2, detaching);
    			if (detaching) detach_dev(t145);
    			if (detaching) detach_dev(h31);
    			if (detaching) detach_dev(t147);
    			destroy_component(articlecard3, detaching);
    			if (detaching) detach_dev(t148);
    			destroy_component(articlecard4, detaching);
    			if (detaching) detach_dev(t149);
    			destroy_component(articlecard5, detaching);
    			if (detaching) detach_dev(t150);
    			destroy_component(prism3, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$c.name,
    		type: "if",
    		source: "(9:0) {#if $sourceType === 'svelte'}",
    		ctx
    	});

    	return block;
    }

    // (10:2) <Prism language="js">
    function create_default_slot_5$d(ctx) {
    	let t_value = `import { ArticleCard } from '@ekstra-bladet/designsystem';` + "";
    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_5$d.name,
    		type: "slot",
    		source: "(10:2) <Prism language=\\\"js\\\">",
    		ctx
    	});

    	return block;
    }

    // (76:30) <Badge type="secondary" extension="small">
    function create_default_slot_4$g(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Media");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_4$g.name,
    		type: "slot",
    		source: "(76:30) <Badge type=\\\"secondary\\\" extension=\\\"small\\\">",
    		ctx
    	});

    	return block;
    }

    // (124:16) <Badge type="primary" extension="small">
    function create_default_slot_3$h(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("required");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_3$h.name,
    		type: "slot",
    		source: "(124:16) <Badge type=\\\"primary\\\" extension=\\\"small\\\">",
    		ctx
    	});

    	return block;
    }

    // (140:2) <Prism language="html">
    function create_default_slot_2$l(ctx) {
    	let t_value = `<ArticleCard {...article} />` + "";
    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_2$l.name,
    		type: "slot",
    		source: "(140:2) <Prism language=\\\"html\\\">",
    		ctx
    	});

    	return block;
    }

    // (149:2) <Prism language="html">
    function create_default_slot_1$m(ctx) {
    	let t_value = `<ArticleCard className="small-media" {...article} />
<ArticleCard className="small-media--reverse" {...article} />` + "";

    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_1$m.name,
    		type: "slot",
    		source: "(149:2) <Prism language=\\\"html\\\">",
    		ctx
    	});

    	return block;
    }

    // (160:2) <Prism language="html">
    function create_default_slot$n(ctx) {
    	let t_value = `<ArticleCard loading={true} />
<ArticleCard loading={true} type="small-media" />
<ArticleCard loading={true} type="small-media--reverse" />` + "";

    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$n.name,
    		type: "slot",
    		source: "(160:2) <Prism language=\\\"html\\\">",
    		ctx
    	});

    	return block;
    }

    function create_fragment$p(ctx) {
    	let h1;
    	let t1;
    	let current_block_type_index;
    	let if_block;
    	let if_block_anchor;
    	let current;
    	const if_block_creators = [create_if_block$c, create_else_block$b];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (/*$sourceType*/ ctx[0] === 'svelte') return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type(ctx);
    	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

    	const block = {
    		c: function create() {
    			h1 = element("h1");
    			h1.textContent = "Article Card";
    			t1 = space();
    			if_block.c();
    			if_block_anchor = empty();
    			attr_dev(h1, "class", "color--eb");
    			add_location(h1, file$p, 6, 0, 194);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, h1, anchor);
    			insert_dev(target, t1, anchor);
    			if_blocks[current_block_type_index].m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if_blocks[current_block_type_index].p(ctx, dirty);
    			} else {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block = if_blocks[current_block_type_index];

    				if (!if_block) {
    					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block.c();
    				} else {
    					if_block.p(ctx, dirty);
    				}

    				transition_in(if_block, 1);
    				if_block.m(if_block_anchor.parentNode, if_block_anchor);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(h1);
    			if (detaching) detach_dev(t1);
    			if_blocks[current_block_type_index].d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$p.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$p($$self, $$props, $$invalidate) {
    	let $sourceType;
    	validate_store(sourceType, 'sourceType');
    	component_subscribe($$self, sourceType, $$value => $$invalidate(0, $sourceType = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('ArticleCard', slots, []);
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<ArticleCard> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({
    		Prism: Prism$1,
    		rdmArticleData,
    		sourceType,
    		ArticleCard: dist$1.ArticleCard,
    		Badge: dist$1.Badge,
    		$sourceType
    	});

    	return [$sourceType];
    }

    class ArticleCard_1 extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$p, create_fragment$p, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "ArticleCard_1",
    			options,
    			id: create_fragment$p.name
    		});
    	}
    }

    /* docs_src/components/Badge.svelte generated by Svelte v3.42.1 */
    const file$o = "docs_src/components/Badge.svelte";

    // (11:0) {#if $sourceType === 'svelte'}
    function create_if_block_4$4(ctx) {
    	let prism;
    	let t0;
    	let table;
    	let thead;
    	let tr0;
    	let th0;
    	let t2;
    	let th1;
    	let t4;
    	let th2;
    	let t6;
    	let th3;
    	let t8;
    	let tbody;
    	let tr1;
    	let td0;
    	let t10;
    	let td1;
    	let t12;
    	let td2;
    	let t13;
    	let td3;
    	let t14;
    	let tr2;
    	let td4;
    	let t16;
    	let td5;
    	let t18;
    	let td6;
    	let t19;
    	let td7;
    	let t21;
    	let tr3;
    	let td8;
    	let t23;
    	let td9;
    	let t25;
    	let td10;
    	let t26;
    	let td11;
    	let t28;
    	let tr4;
    	let td12;
    	let t30;
    	let td13;
    	let t32;
    	let td14;
    	let t33;
    	let td15;
    	let t34;
    	let tr5;
    	let td16;
    	let t36;
    	let td17;
    	let t38;
    	let td18;
    	let t39;
    	let td19;
    	let current;

    	prism = new Prism$1({
    			props: {
    				language: "js",
    				$$slots: { default: [create_default_slot_17$3] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(prism.$$.fragment);
    			t0 = space();
    			table = element("table");
    			thead = element("thead");
    			tr0 = element("tr");
    			th0 = element("th");
    			th0.textContent = "Prop name";
    			t2 = space();
    			th1 = element("th");
    			th1.textContent = "Type";
    			t4 = space();
    			th2 = element("th");
    			th2.textContent = "Default value";
    			t6 = space();
    			th3 = element("th");
    			th3.textContent = "Description";
    			t8 = space();
    			tbody = element("tbody");
    			tr1 = element("tr");
    			td0 = element("td");
    			td0.textContent = "className";
    			t10 = space();
    			td1 = element("td");
    			td1.textContent = "string";
    			t12 = space();
    			td2 = element("td");
    			t13 = space();
    			td3 = element("td");
    			t14 = space();
    			tr2 = element("tr");
    			td4 = element("td");
    			td4.textContent = "extension";
    			t16 = space();
    			td5 = element("td");
    			td5.textContent = "'small'";
    			t18 = space();
    			td6 = element("td");
    			t19 = space();
    			td7 = element("td");
    			td7.textContent = "Make a smaller version of the badge";
    			t21 = space();
    			tr3 = element("tr");
    			td8 = element("td");
    			td8.textContent = "href";
    			t23 = space();
    			td9 = element("td");
    			td9.textContent = "string";
    			t25 = space();
    			td10 = element("td");
    			t26 = space();
    			td11 = element("td");
    			td11.textContent = "Coverts the Badge into a clickable link";
    			t28 = space();
    			tr4 = element("tr");
    			td12 = element("td");
    			td12.textContent = "style";
    			t30 = space();
    			td13 = element("td");
    			td13.textContent = "string";
    			t32 = space();
    			td14 = element("td");
    			t33 = space();
    			td15 = element("td");
    			t34 = space();
    			tr5 = element("tr");
    			td16 = element("td");
    			td16.textContent = "type";
    			t36 = space();
    			td17 = element("td");
    			td17.textContent = "'danger' | 'primary' | 'secondary' | 'success'";
    			t38 = space();
    			td18 = element("td");
    			t39 = space();
    			td19 = element("td");
    			add_location(th0, file$o, 18, 8, 576);
    			add_location(th1, file$o, 19, 8, 603);
    			add_location(th2, file$o, 20, 8, 625);
    			add_location(th3, file$o, 21, 8, 656);
    			add_location(tr0, file$o, 17, 6, 563);
    			add_location(thead, file$o, 16, 4, 549);
    			add_location(td0, file$o, 26, 8, 733);
    			add_location(td1, file$o, 27, 8, 760);
    			add_location(td2, file$o, 28, 8, 784);
    			add_location(td3, file$o, 29, 8, 799);
    			add_location(tr1, file$o, 25, 6, 720);
    			add_location(td4, file$o, 32, 8, 837);
    			add_location(td5, file$o, 33, 8, 864);
    			add_location(td6, file$o, 34, 8, 889);
    			add_location(td7, file$o, 35, 8, 904);
    			add_location(tr2, file$o, 31, 6, 824);
    			add_location(td8, file$o, 38, 8, 980);
    			add_location(td9, file$o, 39, 8, 1002);
    			add_location(td10, file$o, 40, 8, 1026);
    			add_location(td11, file$o, 41, 8, 1041);
    			add_location(tr3, file$o, 37, 6, 967);
    			add_location(td12, file$o, 44, 8, 1121);
    			add_location(td13, file$o, 45, 8, 1144);
    			add_location(td14, file$o, 46, 8, 1168);
    			add_location(td15, file$o, 47, 8, 1183);
    			add_location(tr4, file$o, 43, 6, 1108);
    			add_location(td16, file$o, 50, 8, 1221);
    			add_location(td17, file$o, 51, 8, 1243);
    			add_location(td18, file$o, 52, 8, 1307);
    			add_location(td19, file$o, 53, 8, 1322);
    			add_location(tr5, file$o, 49, 6, 1208);
    			add_location(tbody, file$o, 24, 4, 706);
    			attr_dev(table, "class", "table");
    			add_location(table, file$o, 15, 2, 523);
    		},
    		m: function mount(target, anchor) {
    			mount_component(prism, target, anchor);
    			insert_dev(target, t0, anchor);
    			insert_dev(target, table, anchor);
    			append_dev(table, thead);
    			append_dev(thead, tr0);
    			append_dev(tr0, th0);
    			append_dev(tr0, t2);
    			append_dev(tr0, th1);
    			append_dev(tr0, t4);
    			append_dev(tr0, th2);
    			append_dev(tr0, t6);
    			append_dev(tr0, th3);
    			append_dev(table, t8);
    			append_dev(table, tbody);
    			append_dev(tbody, tr1);
    			append_dev(tr1, td0);
    			append_dev(tr1, t10);
    			append_dev(tr1, td1);
    			append_dev(tr1, t12);
    			append_dev(tr1, td2);
    			append_dev(tr1, t13);
    			append_dev(tr1, td3);
    			append_dev(tbody, t14);
    			append_dev(tbody, tr2);
    			append_dev(tr2, td4);
    			append_dev(tr2, t16);
    			append_dev(tr2, td5);
    			append_dev(tr2, t18);
    			append_dev(tr2, td6);
    			append_dev(tr2, t19);
    			append_dev(tr2, td7);
    			append_dev(tbody, t21);
    			append_dev(tbody, tr3);
    			append_dev(tr3, td8);
    			append_dev(tr3, t23);
    			append_dev(tr3, td9);
    			append_dev(tr3, t25);
    			append_dev(tr3, td10);
    			append_dev(tr3, t26);
    			append_dev(tr3, td11);
    			append_dev(tbody, t28);
    			append_dev(tbody, tr4);
    			append_dev(tr4, td12);
    			append_dev(tr4, t30);
    			append_dev(tr4, td13);
    			append_dev(tr4, t32);
    			append_dev(tr4, td14);
    			append_dev(tr4, t33);
    			append_dev(tr4, td15);
    			append_dev(tbody, t34);
    			append_dev(tbody, tr5);
    			append_dev(tr5, td16);
    			append_dev(tr5, t36);
    			append_dev(tr5, td17);
    			append_dev(tr5, t38);
    			append_dev(tr5, td18);
    			append_dev(tr5, t39);
    			append_dev(tr5, td19);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(prism.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(prism.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(prism, detaching);
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(table);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_4$4.name,
    		type: "if",
    		source: "(11:0) {#if $sourceType === 'svelte'}",
    		ctx
    	});

    	return block;
    }

    // (12:2) <Prism language="js">
    function create_default_slot_17$3(ctx) {
    	let t_value = `import { Badge } from '@ekstra-bladet/designsystem';` + "";
    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_17$3.name,
    		type: "slot",
    		source: "(12:2) <Prism language=\\\"js\\\">",
    		ctx
    	});

    	return block;
    }

    // (63:2) <Badge>
    function create_default_slot_16$3(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Badge");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_16$3.name,
    		type: "slot",
    		source: "(63:2) <Badge>",
    		ctx
    	});

    	return block;
    }

    // (70:0) {:else}
    function create_else_block_3$4(ctx) {
    	let prism;
    	let current;

    	prism = new Prism$1({
    			props: {
    				language: "html",
    				$$slots: { default: [create_default_slot_15$3] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(prism.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(prism, target, anchor);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(prism.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(prism.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(prism, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block_3$4.name,
    		type: "else",
    		source: "(70:0) {:else}",
    		ctx
    	});

    	return block;
    }

    // (66:0) {#if $sourceType === 'svelte'}
    function create_if_block_3$5(ctx) {
    	let prism;
    	let current;

    	prism = new Prism$1({
    			props: {
    				language: "html",
    				$$slots: { default: [create_default_slot_14$4] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(prism.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(prism, target, anchor);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(prism.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(prism.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(prism, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_3$5.name,
    		type: "if",
    		source: "(66:0) {#if $sourceType === 'svelte'}",
    		ctx
    	});

    	return block;
    }

    // (71:2) <Prism language="html">
    function create_default_slot_15$3(ctx) {
    	let t_value = `<span class="badge"></span>` + "";
    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_15$3.name,
    		type: "slot",
    		source: "(71:2) <Prism language=\\\"html\\\">",
    		ctx
    	});

    	return block;
    }

    // (67:2) <Prism language="html">
    function create_default_slot_14$4(ctx) {
    	let t_value = `<Badge></Badge>` + "";
    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_14$4.name,
    		type: "slot",
    		source: "(67:2) <Prism language=\\\"html\\\">",
    		ctx
    	});

    	return block;
    }

    // (79:2) <Badge className="margin-s" type="primary">
    function create_default_slot_13$4(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Primary");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_13$4.name,
    		type: "slot",
    		source: "(79:2) <Badge className=\\\"margin-s\\\" type=\\\"primary\\\">",
    		ctx
    	});

    	return block;
    }

    // (80:2) <Badge className="margin-s" type="secondary">
    function create_default_slot_12$4(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Secondary");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_12$4.name,
    		type: "slot",
    		source: "(80:2) <Badge className=\\\"margin-s\\\" type=\\\"secondary\\\">",
    		ctx
    	});

    	return block;
    }

    // (81:2) <Badge className="margin-s" type="success">
    function create_default_slot_11$5(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Success");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_11$5.name,
    		type: "slot",
    		source: "(81:2) <Badge className=\\\"margin-s\\\" type=\\\"success\\\">",
    		ctx
    	});

    	return block;
    }

    // (82:2) <Badge className="margin-s" type="danger">
    function create_default_slot_10$6(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Danger");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_10$6.name,
    		type: "slot",
    		source: "(82:2) <Badge className=\\\"margin-s\\\" type=\\\"danger\\\">",
    		ctx
    	});

    	return block;
    }

    // (92:0) {:else}
    function create_else_block_2$5(ctx) {
    	let prism;
    	let current;

    	prism = new Prism$1({
    			props: {
    				language: "html",
    				$$slots: { default: [create_default_slot_9$7] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(prism.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(prism, target, anchor);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(prism.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(prism.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(prism, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block_2$5.name,
    		type: "else",
    		source: "(92:0) {:else}",
    		ctx
    	});

    	return block;
    }

    // (85:0) {#if $sourceType === 'svelte'}
    function create_if_block_2$7(ctx) {
    	let prism;
    	let current;

    	prism = new Prism$1({
    			props: {
    				language: "html",
    				$$slots: { default: [create_default_slot_8$9] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(prism.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(prism, target, anchor);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(prism.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(prism.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(prism, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2$7.name,
    		type: "if",
    		source: "(85:0) {#if $sourceType === 'svelte'}",
    		ctx
    	});

    	return block;
    }

    // (93:2) <Prism language="html">
    function create_default_slot_9$7(ctx) {
    	let t_value = `<span class="badge" data-type="primary"></span>
<span class="badge" data-type="secondary"></span>
<span class="badge" data-type="success"></span>
<span class="badge" data-type="danger"></span>` + "";

    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_9$7.name,
    		type: "slot",
    		source: "(93:2) <Prism language=\\\"html\\\">",
    		ctx
    	});

    	return block;
    }

    // (86:2) <Prism language="html">
    function create_default_slot_8$9(ctx) {
    	let t_value = `<Badge type="primary"></Badge>
<Badge type="secondary"></Badge>
<Badge type="success"></Badge>
<Badge type="danger"></Badge>` + "";

    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_8$9.name,
    		type: "slot",
    		source: "(86:2) <Prism language=\\\"html\\\">",
    		ctx
    	});

    	return block;
    }

    // (104:2) <Badge className="margin-s {bluedarkBGClass}">
    function create_default_slot_7$9(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("bluedarkBGClass");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_7$9.name,
    		type: "slot",
    		source: "(104:2) <Badge className=\\\"margin-s {bluedarkBGClass}\\\">",
    		ctx
    	});

    	return block;
    }

    // (105:2) <Badge className="margin-s {greenBGClass}">
    function create_default_slot_6$b(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("greenBGClass");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_6$b.name,
    		type: "slot",
    		source: "(105:2) <Badge className=\\\"margin-s {greenBGClass}\\\">",
    		ctx
    	});

    	return block;
    }

    // (106:2) <Badge className="margin-s {greendarkBGClass}">
    function create_default_slot_5$c(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("greendarkBGClass");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_5$c.name,
    		type: "slot",
    		source: "(106:2) <Badge className=\\\"margin-s {greendarkBGClass}\\\">",
    		ctx
    	});

    	return block;
    }

    // (117:0) {:else}
    function create_else_block_1$8(ctx) {
    	let prism;
    	let current;

    	prism = new Prism$1({
    			props: {
    				language: "html",
    				$$slots: { default: [create_default_slot_4$f] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(prism.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(prism, target, anchor);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(prism.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(prism.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(prism, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block_1$8.name,
    		type: "else",
    		source: "(117:0) {:else}",
    		ctx
    	});

    	return block;
    }

    // (109:0) {#if $sourceType === 'svelte'}
    function create_if_block_1$9(ctx) {
    	let prism;
    	let current;

    	prism = new Prism$1({
    			props: {
    				language: "html",
    				$$slots: { default: [create_default_slot_3$g] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(prism.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(prism, target, anchor);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(prism.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(prism.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(prism, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$9.name,
    		type: "if",
    		source: "(109:0) {#if $sourceType === 'svelte'}",
    		ctx
    	});

    	return block;
    }

    // (118:2) <Prism language="html">
    function create_default_slot_4$f(ctx) {
    	let t_value = `<span class="badge bg--bluedark"></span>
<span class="badge bg--green"></span>
<span class="badge bg--greendark"></span>` + "";

    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_4$f.name,
    		type: "slot",
    		source: "(118:2) <Prism language=\\\"html\\\">",
    		ctx
    	});

    	return block;
    }

    // (110:2) <Prism language="html">
    function create_default_slot_3$g(ctx) {
    	let t_value = `import { bluedarkBGClass, greenBGClass, greendarkBGClass } from '@ekstra-bladet/eb-colors';

<Badge {bluedarkBGClass}">bluedarkBGClass</Badge>
<Badge {greenBGClass}">greenBGClass</Badge>
<Badge {greendarkBGClass}">greendarkBGClass</Badge>` + "";

    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_3$g.name,
    		type: "slot",
    		source: "(110:2) <Prism language=\\\"html\\\">",
    		ctx
    	});

    	return block;
    }

    // (128:2) <Badge className="margin-s padding-none padding-s--r card--shadow bg--black fontsize-small">
    function create_default_slot_2$k(ctx) {
    	let icon;
    	let t;
    	let current;

    	icon = new dist$1.Icon({
    			props: {
    				name: "lightning",
    				className: "bg--white color--flash border-radius-s padding-s margin-s--r",
    				style: "margin-left: -1px;",
    				width: "15"
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(icon.$$.fragment);
    			t = text("\n    UPDATE");
    		},
    		m: function mount(target, anchor) {
    			mount_component(icon, target, anchor);
    			insert_dev(target, t, anchor);
    			current = true;
    		},
    		p: noop,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(icon.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(icon.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(icon, detaching);
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_2$k.name,
    		type: "slot",
    		source: "(128:2) <Badge className=\\\"margin-s padding-none padding-s--r card--shadow bg--black fontsize-small\\\">",
    		ctx
    	});

    	return block;
    }

    // (150:0) {:else}
    function create_else_block$a(ctx) {
    	let prism;
    	let current;

    	prism = new Prism$1({
    			props: {
    				language: "html",
    				$$slots: { default: [create_default_slot_1$l] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(prism.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(prism, target, anchor);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(prism.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(prism.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(prism, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$a.name,
    		type: "else",
    		source: "(150:0) {:else}",
    		ctx
    	});

    	return block;
    }

    // (139:0) {#if $sourceType === 'svelte'}
    function create_if_block$b(ctx) {
    	let prism;
    	let current;

    	prism = new Prism$1({
    			props: {
    				language: "html",
    				$$slots: { default: [create_default_slot$m] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(prism.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(prism, target, anchor);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(prism.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(prism.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(prism, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$b.name,
    		type: "if",
    		source: "(139:0) {#if $sourceType === 'svelte'}",
    		ctx
    	});

    	return block;
    }

    // (151:2) <Prism language="html">
    function create_default_slot_1$l(ctx) {
    	let t_value = `<span class="badge margin-s padding-none padding-s--r card--shadow bg--black fontsize-small">
  <svg viewBox="0 0 10 16"
    className="icon-svg bg--white color--flash border-radius-s padding-s margin-s--r"
    style="margin-left: -1px; width: 15px; height: 15px;"/>
    <use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="#lightning"></use>
  </svg>
  UPDATE
</span>` + "";

    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_1$l.name,
    		type: "slot",
    		source: "(151:2) <Prism language=\\\"html\\\">",
    		ctx
    	});

    	return block;
    }

    // (140:2) <Prism language="html">
    function create_default_slot$m(ctx) {
    	let t_value = `<Badge className="margin-s padding-none padding-s--r card--shadow bg--black fontsize-small">
  <Icon
    name="lightning"
    className="icon-svg bg--white color--flash border-radius-s padding-s margin-s--r"
    style="margin-left: -1px;"
    width="15"/>
  UPDATE
</Badge>` + "";

    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$m.name,
    		type: "slot",
    		source: "(140:2) <Prism language=\\\"html\\\">",
    		ctx
    	});

    	return block;
    }

    function create_fragment$o(ctx) {
    	let h1;
    	let t1;
    	let p;
    	let t3;
    	let t4;
    	let h30;
    	let t6;
    	let div0;
    	let badge0;
    	let t7;
    	let current_block_type_index;
    	let if_block1;
    	let t8;
    	let h31;
    	let t10;
    	let div1;
    	let badge1;
    	let t11;
    	let badge2;
    	let t12;
    	let badge3;
    	let t13;
    	let badge4;
    	let t14;
    	let current_block_type_index_1;
    	let if_block2;
    	let t15;
    	let h32;
    	let t17;
    	let div2;
    	let badge5;
    	let t18;
    	let badge6;
    	let t19;
    	let badge7;
    	let t20;
    	let current_block_type_index_2;
    	let if_block3;
    	let t21;
    	let h33;
    	let t23;
    	let div3;
    	let badge8;
    	let t24;
    	let current_block_type_index_3;
    	let if_block4;
    	let if_block4_anchor;
    	let current;
    	let if_block0 = /*$sourceType*/ ctx[0] === 'svelte' && create_if_block_4$4(ctx);

    	badge0 = new dist$1.Badge({
    			props: {
    				$$slots: { default: [create_default_slot_16$3] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const if_block_creators = [create_if_block_3$5, create_else_block_3$4];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (/*$sourceType*/ ctx[0] === 'svelte') return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type(ctx);
    	if_block1 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

    	badge1 = new dist$1.Badge({
    			props: {
    				className: "margin-s",
    				type: "primary",
    				$$slots: { default: [create_default_slot_13$4] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	badge2 = new dist$1.Badge({
    			props: {
    				className: "margin-s",
    				type: "secondary",
    				$$slots: { default: [create_default_slot_12$4] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	badge3 = new dist$1.Badge({
    			props: {
    				className: "margin-s",
    				type: "success",
    				$$slots: { default: [create_default_slot_11$5] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	badge4 = new dist$1.Badge({
    			props: {
    				className: "margin-s",
    				type: "danger",
    				$$slots: { default: [create_default_slot_10$6] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const if_block_creators_1 = [create_if_block_2$7, create_else_block_2$5];
    	const if_blocks_1 = [];

    	function select_block_type_1(ctx, dirty) {
    		if (/*$sourceType*/ ctx[0] === 'svelte') return 0;
    		return 1;
    	}

    	current_block_type_index_1 = select_block_type_1(ctx);
    	if_block2 = if_blocks_1[current_block_type_index_1] = if_block_creators_1[current_block_type_index_1](ctx);

    	badge5 = new dist$1.Badge({
    			props: {
    				className: "margin-s " + bluedarkBGClass,
    				$$slots: { default: [create_default_slot_7$9] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	badge6 = new dist$1.Badge({
    			props: {
    				className: "margin-s " + greenBGClass,
    				$$slots: { default: [create_default_slot_6$b] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	badge7 = new dist$1.Badge({
    			props: {
    				className: "margin-s " + greendarkBGClass,
    				$$slots: { default: [create_default_slot_5$c] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const if_block_creators_2 = [create_if_block_1$9, create_else_block_1$8];
    	const if_blocks_2 = [];

    	function select_block_type_2(ctx, dirty) {
    		if (/*$sourceType*/ ctx[0] === 'svelte') return 0;
    		return 1;
    	}

    	current_block_type_index_2 = select_block_type_2(ctx);
    	if_block3 = if_blocks_2[current_block_type_index_2] = if_block_creators_2[current_block_type_index_2](ctx);

    	badge8 = new dist$1.Badge({
    			props: {
    				className: "margin-s padding-none padding-s--r card--shadow bg--black fontsize-small",
    				$$slots: { default: [create_default_slot_2$k] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const if_block_creators_3 = [create_if_block$b, create_else_block$a];
    	const if_blocks_3 = [];

    	function select_block_type_3(ctx, dirty) {
    		if (/*$sourceType*/ ctx[0] === 'svelte') return 0;
    		return 1;
    	}

    	current_block_type_index_3 = select_block_type_3(ctx);
    	if_block4 = if_blocks_3[current_block_type_index_3] = if_block_creators_3[current_block_type_index_3](ctx);

    	const block = {
    		c: function create() {
    			h1 = element("h1");
    			h1.textContent = "Badge";
    			t1 = space();
    			p = element("p");
    			p.textContent = "Badges kan benyttes som mærkater eller som indikation af tags. Størrelsen af et badge kan styres vha. font-sizes.";
    			t3 = space();
    			if (if_block0) if_block0.c();
    			t4 = space();
    			h30 = element("h3");
    			h30.textContent = "Default";
    			t6 = space();
    			div0 = element("div");
    			create_component(badge0.$$.fragment);
    			t7 = space();
    			if_block1.c();
    			t8 = space();
    			h31 = element("h3");
    			h31.textContent = "Variations";
    			t10 = space();
    			div1 = element("div");
    			create_component(badge1.$$.fragment);
    			t11 = space();
    			create_component(badge2.$$.fragment);
    			t12 = space();
    			create_component(badge3.$$.fragment);
    			t13 = space();
    			create_component(badge4.$$.fragment);
    			t14 = space();
    			if_block2.c();
    			t15 = space();
    			h32 = element("h3");
    			h32.textContent = "Farve muligheder fra eb-colors";
    			t17 = space();
    			div2 = element("div");
    			create_component(badge5.$$.fragment);
    			t18 = space();
    			create_component(badge6.$$.fragment);
    			t19 = space();
    			create_component(badge7.$$.fragment);
    			t20 = space();
    			if_block3.c();
    			t21 = space();
    			h33 = element("h3");
    			h33.textContent = "Advanced examples";
    			t23 = space();
    			div3 = element("div");
    			create_component(badge8.$$.fragment);
    			t24 = space();
    			if_block4.c();
    			if_block4_anchor = empty();
    			attr_dev(h1, "class", "color--eb");
    			add_location(h1, file$o, 6, 0, 237);
    			add_location(p, file$o, 8, 0, 271);
    			add_location(h30, file$o, 59, 0, 1372);
    			attr_dev(div0, "class", "flex");
    			add_location(div0, file$o, 61, 0, 1390);
    			add_location(h31, file$o, 75, 0, 1620);
    			attr_dev(div1, "class", "flex");
    			add_location(div1, file$o, 77, 0, 1641);
    			add_location(h32, file$o, 100, 0, 2368);
    			attr_dev(div2, "class", "flex");
    			add_location(div2, file$o, 102, 0, 2409);
    			add_location(h33, file$o, 124, 0, 3144);
    			attr_dev(div3, "class", "flex");
    			add_location(div3, file$o, 126, 0, 3172);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, h1, anchor);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, p, anchor);
    			insert_dev(target, t3, anchor);
    			if (if_block0) if_block0.m(target, anchor);
    			insert_dev(target, t4, anchor);
    			insert_dev(target, h30, anchor);
    			insert_dev(target, t6, anchor);
    			insert_dev(target, div0, anchor);
    			mount_component(badge0, div0, null);
    			insert_dev(target, t7, anchor);
    			if_blocks[current_block_type_index].m(target, anchor);
    			insert_dev(target, t8, anchor);
    			insert_dev(target, h31, anchor);
    			insert_dev(target, t10, anchor);
    			insert_dev(target, div1, anchor);
    			mount_component(badge1, div1, null);
    			append_dev(div1, t11);
    			mount_component(badge2, div1, null);
    			append_dev(div1, t12);
    			mount_component(badge3, div1, null);
    			append_dev(div1, t13);
    			mount_component(badge4, div1, null);
    			insert_dev(target, t14, anchor);
    			if_blocks_1[current_block_type_index_1].m(target, anchor);
    			insert_dev(target, t15, anchor);
    			insert_dev(target, h32, anchor);
    			insert_dev(target, t17, anchor);
    			insert_dev(target, div2, anchor);
    			mount_component(badge5, div2, null);
    			append_dev(div2, t18);
    			mount_component(badge6, div2, null);
    			append_dev(div2, t19);
    			mount_component(badge7, div2, null);
    			insert_dev(target, t20, anchor);
    			if_blocks_2[current_block_type_index_2].m(target, anchor);
    			insert_dev(target, t21, anchor);
    			insert_dev(target, h33, anchor);
    			insert_dev(target, t23, anchor);
    			insert_dev(target, div3, anchor);
    			mount_component(badge8, div3, null);
    			insert_dev(target, t24, anchor);
    			if_blocks_3[current_block_type_index_3].m(target, anchor);
    			insert_dev(target, if_block4_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (/*$sourceType*/ ctx[0] === 'svelte') {
    				if (if_block0) {
    					if (dirty & /*$sourceType*/ 1) {
    						transition_in(if_block0, 1);
    					}
    				} else {
    					if_block0 = create_if_block_4$4(ctx);
    					if_block0.c();
    					transition_in(if_block0, 1);
    					if_block0.m(t4.parentNode, t4);
    				}
    			} else if (if_block0) {
    				group_outros();

    				transition_out(if_block0, 1, 1, () => {
    					if_block0 = null;
    				});

    				check_outros();
    			}

    			const badge0_changes = {};

    			if (dirty & /*$$scope*/ 2) {
    				badge0_changes.$$scope = { dirty, ctx };
    			}

    			badge0.$set(badge0_changes);
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(ctx);

    			if (current_block_type_index !== previous_block_index) {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block1 = if_blocks[current_block_type_index];

    				if (!if_block1) {
    					if_block1 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block1.c();
    				}

    				transition_in(if_block1, 1);
    				if_block1.m(t8.parentNode, t8);
    			}

    			const badge1_changes = {};

    			if (dirty & /*$$scope*/ 2) {
    				badge1_changes.$$scope = { dirty, ctx };
    			}

    			badge1.$set(badge1_changes);
    			const badge2_changes = {};

    			if (dirty & /*$$scope*/ 2) {
    				badge2_changes.$$scope = { dirty, ctx };
    			}

    			badge2.$set(badge2_changes);
    			const badge3_changes = {};

    			if (dirty & /*$$scope*/ 2) {
    				badge3_changes.$$scope = { dirty, ctx };
    			}

    			badge3.$set(badge3_changes);
    			const badge4_changes = {};

    			if (dirty & /*$$scope*/ 2) {
    				badge4_changes.$$scope = { dirty, ctx };
    			}

    			badge4.$set(badge4_changes);
    			let previous_block_index_1 = current_block_type_index_1;
    			current_block_type_index_1 = select_block_type_1(ctx);

    			if (current_block_type_index_1 !== previous_block_index_1) {
    				group_outros();

    				transition_out(if_blocks_1[previous_block_index_1], 1, 1, () => {
    					if_blocks_1[previous_block_index_1] = null;
    				});

    				check_outros();
    				if_block2 = if_blocks_1[current_block_type_index_1];

    				if (!if_block2) {
    					if_block2 = if_blocks_1[current_block_type_index_1] = if_block_creators_1[current_block_type_index_1](ctx);
    					if_block2.c();
    				}

    				transition_in(if_block2, 1);
    				if_block2.m(t15.parentNode, t15);
    			}

    			const badge5_changes = {};

    			if (dirty & /*$$scope*/ 2) {
    				badge5_changes.$$scope = { dirty, ctx };
    			}

    			badge5.$set(badge5_changes);
    			const badge6_changes = {};

    			if (dirty & /*$$scope*/ 2) {
    				badge6_changes.$$scope = { dirty, ctx };
    			}

    			badge6.$set(badge6_changes);
    			const badge7_changes = {};

    			if (dirty & /*$$scope*/ 2) {
    				badge7_changes.$$scope = { dirty, ctx };
    			}

    			badge7.$set(badge7_changes);
    			let previous_block_index_2 = current_block_type_index_2;
    			current_block_type_index_2 = select_block_type_2(ctx);

    			if (current_block_type_index_2 !== previous_block_index_2) {
    				group_outros();

    				transition_out(if_blocks_2[previous_block_index_2], 1, 1, () => {
    					if_blocks_2[previous_block_index_2] = null;
    				});

    				check_outros();
    				if_block3 = if_blocks_2[current_block_type_index_2];

    				if (!if_block3) {
    					if_block3 = if_blocks_2[current_block_type_index_2] = if_block_creators_2[current_block_type_index_2](ctx);
    					if_block3.c();
    				}

    				transition_in(if_block3, 1);
    				if_block3.m(t21.parentNode, t21);
    			}

    			const badge8_changes = {};

    			if (dirty & /*$$scope*/ 2) {
    				badge8_changes.$$scope = { dirty, ctx };
    			}

    			badge8.$set(badge8_changes);
    			let previous_block_index_3 = current_block_type_index_3;
    			current_block_type_index_3 = select_block_type_3(ctx);

    			if (current_block_type_index_3 !== previous_block_index_3) {
    				group_outros();

    				transition_out(if_blocks_3[previous_block_index_3], 1, 1, () => {
    					if_blocks_3[previous_block_index_3] = null;
    				});

    				check_outros();
    				if_block4 = if_blocks_3[current_block_type_index_3];

    				if (!if_block4) {
    					if_block4 = if_blocks_3[current_block_type_index_3] = if_block_creators_3[current_block_type_index_3](ctx);
    					if_block4.c();
    				}

    				transition_in(if_block4, 1);
    				if_block4.m(if_block4_anchor.parentNode, if_block4_anchor);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block0);
    			transition_in(badge0.$$.fragment, local);
    			transition_in(if_block1);
    			transition_in(badge1.$$.fragment, local);
    			transition_in(badge2.$$.fragment, local);
    			transition_in(badge3.$$.fragment, local);
    			transition_in(badge4.$$.fragment, local);
    			transition_in(if_block2);
    			transition_in(badge5.$$.fragment, local);
    			transition_in(badge6.$$.fragment, local);
    			transition_in(badge7.$$.fragment, local);
    			transition_in(if_block3);
    			transition_in(badge8.$$.fragment, local);
    			transition_in(if_block4);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block0);
    			transition_out(badge0.$$.fragment, local);
    			transition_out(if_block1);
    			transition_out(badge1.$$.fragment, local);
    			transition_out(badge2.$$.fragment, local);
    			transition_out(badge3.$$.fragment, local);
    			transition_out(badge4.$$.fragment, local);
    			transition_out(if_block2);
    			transition_out(badge5.$$.fragment, local);
    			transition_out(badge6.$$.fragment, local);
    			transition_out(badge7.$$.fragment, local);
    			transition_out(if_block3);
    			transition_out(badge8.$$.fragment, local);
    			transition_out(if_block4);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(h1);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(p);
    			if (detaching) detach_dev(t3);
    			if (if_block0) if_block0.d(detaching);
    			if (detaching) detach_dev(t4);
    			if (detaching) detach_dev(h30);
    			if (detaching) detach_dev(t6);
    			if (detaching) detach_dev(div0);
    			destroy_component(badge0);
    			if (detaching) detach_dev(t7);
    			if_blocks[current_block_type_index].d(detaching);
    			if (detaching) detach_dev(t8);
    			if (detaching) detach_dev(h31);
    			if (detaching) detach_dev(t10);
    			if (detaching) detach_dev(div1);
    			destroy_component(badge1);
    			destroy_component(badge2);
    			destroy_component(badge3);
    			destroy_component(badge4);
    			if (detaching) detach_dev(t14);
    			if_blocks_1[current_block_type_index_1].d(detaching);
    			if (detaching) detach_dev(t15);
    			if (detaching) detach_dev(h32);
    			if (detaching) detach_dev(t17);
    			if (detaching) detach_dev(div2);
    			destroy_component(badge5);
    			destroy_component(badge6);
    			destroy_component(badge7);
    			if (detaching) detach_dev(t20);
    			if_blocks_2[current_block_type_index_2].d(detaching);
    			if (detaching) detach_dev(t21);
    			if (detaching) detach_dev(h33);
    			if (detaching) detach_dev(t23);
    			if (detaching) detach_dev(div3);
    			destroy_component(badge8);
    			if (detaching) detach_dev(t24);
    			if_blocks_3[current_block_type_index_3].d(detaching);
    			if (detaching) detach_dev(if_block4_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$o.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$o($$self, $$props, $$invalidate) {
    	let $sourceType;
    	validate_store(sourceType, 'sourceType');
    	component_subscribe($$self, sourceType, $$value => $$invalidate(0, $sourceType = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Badge', slots, []);
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Badge> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({
    		Prism: Prism$1,
    		sourceType,
    		bluedarkBGClass,
    		greenBGClass,
    		greendarkBGClass,
    		Badge: dist$1.Badge,
    		Icon: dist$1.Icon,
    		$sourceType
    	});

    	return [$sourceType];
    }

    class Badge_1 extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$o, create_fragment$o, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Badge_1",
    			options,
    			id: create_fragment$o.name
    		});
    	}
    }

    /* docs_src/components/Button.svelte generated by Svelte v3.42.1 */
    const file$n = "docs_src/components/Button.svelte";

    // (8:0) {#if $sourceType === 'svelte'}
    function create_if_block_5$1(ctx) {
    	let prism;
    	let t0;
    	let table;
    	let thead;
    	let tr0;
    	let th0;
    	let t2;
    	let th1;
    	let t4;
    	let th2;
    	let t6;
    	let th3;
    	let t8;
    	let tbody;
    	let tr1;
    	let td0;
    	let t10;
    	let td1;
    	let t12;
    	let td2;
    	let t13;
    	let td3;
    	let t14;
    	let tr2;
    	let td4;
    	let t16;
    	let td5;
    	let t18;
    	let td6;
    	let t20;
    	let td7;
    	let t21;
    	let tr3;
    	let td8;
    	let t23;
    	let td9;
    	let t25;
    	let td10;
    	let t26;
    	let td11;
    	let t27;
    	let tr4;
    	let td12;
    	let t29;
    	let td13;
    	let t31;
    	let td14;
    	let t32;
    	let td15;
    	let t34;
    	let tr5;
    	let td16;
    	let t36;
    	let td17;
    	let t38;
    	let td18;
    	let t39;
    	let td19;
    	let t40;
    	let tr6;
    	let td20;
    	let t42;
    	let td21;
    	let t44;
    	let td22;
    	let t45;
    	let td23;
    	let current;

    	prism = new Prism$1({
    			props: {
    				language: "js",
    				$$slots: { default: [create_default_slot_22$1] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(prism.$$.fragment);
    			t0 = space();
    			table = element("table");
    			thead = element("thead");
    			tr0 = element("tr");
    			th0 = element("th");
    			th0.textContent = "Prop name";
    			t2 = space();
    			th1 = element("th");
    			th1.textContent = "Type";
    			t4 = space();
    			th2 = element("th");
    			th2.textContent = "Default value";
    			t6 = space();
    			th3 = element("th");
    			th3.textContent = "Description";
    			t8 = space();
    			tbody = element("tbody");
    			tr1 = element("tr");
    			td0 = element("td");
    			td0.textContent = "className";
    			t10 = space();
    			td1 = element("td");
    			td1.textContent = "string";
    			t12 = space();
    			td2 = element("td");
    			t13 = space();
    			td3 = element("td");
    			t14 = space();
    			tr2 = element("tr");
    			td4 = element("td");
    			td4.textContent = "disabled";
    			t16 = space();
    			td5 = element("td");
    			td5.textContent = "boolean";
    			t18 = space();
    			td6 = element("td");
    			td6.textContent = "false";
    			t20 = space();
    			td7 = element("td");
    			t21 = space();
    			tr3 = element("tr");
    			td8 = element("td");
    			td8.textContent = "extension";
    			t23 = space();
    			td9 = element("td");
    			td9.textContent = "'icon' | 'link' | 'solid' | 'icon link' | 'icon solid'";
    			t25 = space();
    			td10 = element("td");
    			t26 = space();
    			td11 = element("td");
    			t27 = space();
    			tr4 = element("tr");
    			td12 = element("td");
    			td12.textContent = "href";
    			t29 = space();
    			td13 = element("td");
    			td13.textContent = "string";
    			t31 = space();
    			td14 = element("td");
    			t32 = space();
    			td15 = element("td");
    			td15.textContent = "Coverts the Button into a clickable link";
    			t34 = space();
    			tr5 = element("tr");
    			td16 = element("td");
    			td16.textContent = "size";
    			t36 = space();
    			td17 = element("td");
    			td17.textContent = "'big' | 'small'";
    			t38 = space();
    			td18 = element("td");
    			t39 = space();
    			td19 = element("td");
    			t40 = space();
    			tr6 = element("tr");
    			td20 = element("td");
    			td20.textContent = "type";
    			t42 = space();
    			td21 = element("td");
    			td21.textContent = "'accept' | 'cancel' | 'primary' | 'secondary'";
    			t44 = space();
    			td22 = element("td");
    			t45 = space();
    			td23 = element("td");
    			add_location(th0, file$n, 15, 8, 366);
    			add_location(th1, file$n, 16, 8, 393);
    			add_location(th2, file$n, 17, 8, 415);
    			add_location(th3, file$n, 18, 8, 446);
    			add_location(tr0, file$n, 14, 6, 353);
    			add_location(thead, file$n, 13, 4, 339);
    			add_location(td0, file$n, 23, 8, 523);
    			add_location(td1, file$n, 24, 8, 550);
    			add_location(td2, file$n, 25, 8, 574);
    			add_location(td3, file$n, 26, 8, 589);
    			add_location(tr1, file$n, 22, 6, 510);
    			add_location(td4, file$n, 29, 8, 627);
    			add_location(td5, file$n, 30, 8, 653);
    			add_location(td6, file$n, 31, 8, 678);
    			add_location(td7, file$n, 32, 8, 701);
    			add_location(tr2, file$n, 28, 6, 614);
    			add_location(td8, file$n, 35, 8, 739);
    			add_location(td9, file$n, 36, 8, 766);
    			add_location(td10, file$n, 37, 8, 838);
    			add_location(td11, file$n, 38, 8, 853);
    			add_location(tr3, file$n, 34, 6, 726);
    			add_location(td12, file$n, 41, 8, 891);
    			add_location(td13, file$n, 42, 8, 913);
    			add_location(td14, file$n, 43, 8, 937);
    			add_location(td15, file$n, 44, 8, 952);
    			add_location(tr4, file$n, 40, 6, 878);
    			add_location(td16, file$n, 47, 8, 1033);
    			add_location(td17, file$n, 48, 8, 1055);
    			add_location(td18, file$n, 49, 8, 1088);
    			add_location(td19, file$n, 50, 8, 1103);
    			add_location(tr5, file$n, 46, 6, 1020);
    			add_location(td20, file$n, 53, 8, 1141);
    			add_location(td21, file$n, 54, 8, 1163);
    			add_location(td22, file$n, 55, 8, 1226);
    			add_location(td23, file$n, 56, 8, 1241);
    			add_location(tr6, file$n, 52, 6, 1128);
    			add_location(tbody, file$n, 21, 4, 496);
    			attr_dev(table, "class", "table");
    			add_location(table, file$n, 12, 2, 313);
    		},
    		m: function mount(target, anchor) {
    			mount_component(prism, target, anchor);
    			insert_dev(target, t0, anchor);
    			insert_dev(target, table, anchor);
    			append_dev(table, thead);
    			append_dev(thead, tr0);
    			append_dev(tr0, th0);
    			append_dev(tr0, t2);
    			append_dev(tr0, th1);
    			append_dev(tr0, t4);
    			append_dev(tr0, th2);
    			append_dev(tr0, t6);
    			append_dev(tr0, th3);
    			append_dev(table, t8);
    			append_dev(table, tbody);
    			append_dev(tbody, tr1);
    			append_dev(tr1, td0);
    			append_dev(tr1, t10);
    			append_dev(tr1, td1);
    			append_dev(tr1, t12);
    			append_dev(tr1, td2);
    			append_dev(tr1, t13);
    			append_dev(tr1, td3);
    			append_dev(tbody, t14);
    			append_dev(tbody, tr2);
    			append_dev(tr2, td4);
    			append_dev(tr2, t16);
    			append_dev(tr2, td5);
    			append_dev(tr2, t18);
    			append_dev(tr2, td6);
    			append_dev(tr2, t20);
    			append_dev(tr2, td7);
    			append_dev(tbody, t21);
    			append_dev(tbody, tr3);
    			append_dev(tr3, td8);
    			append_dev(tr3, t23);
    			append_dev(tr3, td9);
    			append_dev(tr3, t25);
    			append_dev(tr3, td10);
    			append_dev(tr3, t26);
    			append_dev(tr3, td11);
    			append_dev(tbody, t27);
    			append_dev(tbody, tr4);
    			append_dev(tr4, td12);
    			append_dev(tr4, t29);
    			append_dev(tr4, td13);
    			append_dev(tr4, t31);
    			append_dev(tr4, td14);
    			append_dev(tr4, t32);
    			append_dev(tr4, td15);
    			append_dev(tbody, t34);
    			append_dev(tbody, tr5);
    			append_dev(tr5, td16);
    			append_dev(tr5, t36);
    			append_dev(tr5, td17);
    			append_dev(tr5, t38);
    			append_dev(tr5, td18);
    			append_dev(tr5, t39);
    			append_dev(tr5, td19);
    			append_dev(tbody, t40);
    			append_dev(tbody, tr6);
    			append_dev(tr6, td20);
    			append_dev(tr6, t42);
    			append_dev(tr6, td21);
    			append_dev(tr6, t44);
    			append_dev(tr6, td22);
    			append_dev(tr6, t45);
    			append_dev(tr6, td23);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(prism.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(prism.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(prism, detaching);
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(table);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_5$1.name,
    		type: "if",
    		source: "(8:0) {#if $sourceType === 'svelte'}",
    		ctx
    	});

    	return block;
    }

    // (9:2) <Prism language="js">
    function create_default_slot_22$1(ctx) {
    	let t_value = `import { Button } from '@ekstra-bladet/designsystem';` + "";
    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_22$1.name,
    		type: "slot",
    		source: "(9:2) <Prism language=\\\"js\\\">",
    		ctx
    	});

    	return block;
    }

    // (65:0) <Button>
    function create_default_slot_21$2(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Button");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_21$2.name,
    		type: "slot",
    		source: "(65:0) <Button>",
    		ctx
    	});

    	return block;
    }

    // (71:0) {:else}
    function create_else_block_4$1(ctx) {
    	let prism;
    	let current;

    	prism = new Prism$1({
    			props: {
    				language: "html",
    				$$slots: { default: [create_default_slot_20$2] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(prism.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(prism, target, anchor);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(prism.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(prism.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(prism, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block_4$1.name,
    		type: "else",
    		source: "(71:0) {:else}",
    		ctx
    	});

    	return block;
    }

    // (67:0) {#if $sourceType === 'svelte'}
    function create_if_block_4$3(ctx) {
    	let prism;
    	let current;

    	prism = new Prism$1({
    			props: {
    				language: "html",
    				$$slots: { default: [create_default_slot_19$2] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(prism.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(prism, target, anchor);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(prism.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(prism.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(prism, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_4$3.name,
    		type: "if",
    		source: "(67:0) {#if $sourceType === 'svelte'}",
    		ctx
    	});

    	return block;
    }

    // (72:2) <Prism language="html">
    function create_default_slot_20$2(ctx) {
    	let t_value = `<button class="button"></button>` + "";
    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_20$2.name,
    		type: "slot",
    		source: "(72:2) <Prism language=\\\"html\\\">",
    		ctx
    	});

    	return block;
    }

    // (68:2) <Prism language="html">
    function create_default_slot_19$2(ctx) {
    	let t_value = `<Button></Button>` + "";
    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_19$2.name,
    		type: "slot",
    		source: "(68:2) <Prism language=\\\"html\\\">",
    		ctx
    	});

    	return block;
    }

    // (79:0) <Button className="margin-m" extension="solid">
    function create_default_slot_18$2(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Solid");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_18$2.name,
    		type: "slot",
    		source: "(79:0) <Button className=\\\"margin-m\\\" extension=\\\"solid\\\">",
    		ctx
    	});

    	return block;
    }

    // (80:0) <Button className="margin-m" extension="link">
    function create_default_slot_17$2(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Link");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_17$2.name,
    		type: "slot",
    		source: "(80:0) <Button className=\\\"margin-m\\\" extension=\\\"link\\\">",
    		ctx
    	});

    	return block;
    }

    // (81:0) <Button className="margin-m" extension="icon">
    function create_default_slot_16$2(ctx) {
    	let span;

    	const block = {
    		c: function create() {
    			span = element("span");
    			span.textContent = "×";
    			set_style(span, "font-size", "30px");
    			add_location(span, file$n, 81, 2, 1722);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_16$2.name,
    		type: "slot",
    		source: "(81:0) <Button className=\\\"margin-m\\\" extension=\\\"icon\\\">",
    		ctx
    	});

    	return block;
    }

    // (93:0) {:else}
    function create_else_block_3$3(ctx) {
    	let prism;
    	let current;

    	prism = new Prism$1({
    			props: {
    				language: "html",
    				$$slots: { default: [create_default_slot_15$2] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(prism.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(prism, target, anchor);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(prism.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(prism.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(prism, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block_3$3.name,
    		type: "else",
    		source: "(93:0) {:else}",
    		ctx
    	});

    	return block;
    }

    // (85:0) {#if $sourceType === 'svelte'}
    function create_if_block_3$4(ctx) {
    	let prism;
    	let current;

    	prism = new Prism$1({
    			props: {
    				language: "html",
    				$$slots: { default: [create_default_slot_14$3] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(prism.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(prism, target, anchor);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(prism.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(prism.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(prism, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_3$4.name,
    		type: "if",
    		source: "(85:0) {#if $sourceType === 'svelte'}",
    		ctx
    	});

    	return block;
    }

    // (94:2) <Prism language="html">
    function create_default_slot_15$2(ctx) {
    	let t_value = `<button class="button button--solid"></button>
<button class="button button--link"></button>
<button class="button button--icon">
  <span style="font-size: 30px;">&times;</span>
</button>` + "";

    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_15$2.name,
    		type: "slot",
    		source: "(94:2) <Prism language=\\\"html\\\">",
    		ctx
    	});

    	return block;
    }

    // (86:2) <Prism language="html">
    function create_default_slot_14$3(ctx) {
    	let t_value = `<Button extension="solid"></Button>
<Button extension="link"></Button>
<Button extension="icon">
  <span style="font-size: 30px">&times;</span>
</Button>` + "";

    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_14$3.name,
    		type: "slot",
    		source: "(86:2) <Prism language=\\\"html\\\">",
    		ctx
    	});

    	return block;
    }

    // (106:0) <Button className="margin-m" size="big">
    function create_default_slot_13$3(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Big");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_13$3.name,
    		type: "slot",
    		source: "(106:0) <Button className=\\\"margin-m\\\" size=\\\"big\\\">",
    		ctx
    	});

    	return block;
    }

    // (107:0) <Button className="margin-m" size="small">
    function create_default_slot_12$3(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Small");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_12$3.name,
    		type: "slot",
    		source: "(107:0) <Button className=\\\"margin-m\\\" size=\\\"small\\\">",
    		ctx
    	});

    	return block;
    }

    // (114:0) {:else}
    function create_else_block_2$4(ctx) {
    	let prism;
    	let current;

    	prism = new Prism$1({
    			props: {
    				language: "html",
    				$$slots: { default: [create_default_slot_11$4] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(prism.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(prism, target, anchor);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(prism.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(prism.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(prism, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block_2$4.name,
    		type: "else",
    		source: "(114:0) {:else}",
    		ctx
    	});

    	return block;
    }

    // (109:0) {#if $sourceType === 'svelte'}
    function create_if_block_2$6(ctx) {
    	let prism;
    	let current;

    	prism = new Prism$1({
    			props: {
    				language: "html",
    				$$slots: { default: [create_default_slot_10$5] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(prism.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(prism, target, anchor);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(prism.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(prism.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(prism, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2$6.name,
    		type: "if",
    		source: "(109:0) {#if $sourceType === 'svelte'}",
    		ctx
    	});

    	return block;
    }

    // (115:2) <Prism language="html">
    function create_default_slot_11$4(ctx) {
    	let t_value = `<button class="button button--big"></button>
<button class="button button--small"></button>` + "";

    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_11$4.name,
    		type: "slot",
    		source: "(115:2) <Prism language=\\\"html\\\">",
    		ctx
    	});

    	return block;
    }

    // (110:2) <Prism language="html">
    function create_default_slot_10$5(ctx) {
    	let t_value = `<Button size="big"></Button>
<Button size="small"></Button>` + "";

    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_10$5.name,
    		type: "slot",
    		source: "(110:2) <Prism language=\\\"html\\\">",
    		ctx
    	});

    	return block;
    }

    // (123:0) <Button className="margin-m" type="primary">
    function create_default_slot_9$6(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Primary");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_9$6.name,
    		type: "slot",
    		source: "(123:0) <Button className=\\\"margin-m\\\" type=\\\"primary\\\">",
    		ctx
    	});

    	return block;
    }

    // (124:0) <Button className="margin-m" type="secondary">
    function create_default_slot_8$8(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Secondary");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_8$8.name,
    		type: "slot",
    		source: "(124:0) <Button className=\\\"margin-m\\\" type=\\\"secondary\\\">",
    		ctx
    	});

    	return block;
    }

    // (125:0) <Button className="margin-m" type="accept">
    function create_default_slot_7$8(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Accept");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_7$8.name,
    		type: "slot",
    		source: "(125:0) <Button className=\\\"margin-m\\\" type=\\\"accept\\\">",
    		ctx
    	});

    	return block;
    }

    // (126:0) <Button className="margin-m" type="cancel">
    function create_default_slot_6$a(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Cancel");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_6$a.name,
    		type: "slot",
    		source: "(126:0) <Button className=\\\"margin-m\\\" type=\\\"cancel\\\">",
    		ctx
    	});

    	return block;
    }

    // (135:0) {:else}
    function create_else_block_1$7(ctx) {
    	let prism;
    	let current;

    	prism = new Prism$1({
    			props: {
    				language: "html",
    				$$slots: { default: [create_default_slot_5$b] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(prism.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(prism, target, anchor);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(prism.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(prism.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(prism, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block_1$7.name,
    		type: "else",
    		source: "(135:0) {:else}",
    		ctx
    	});

    	return block;
    }

    // (128:0) {#if $sourceType === 'svelte'}
    function create_if_block_1$8(ctx) {
    	let prism;
    	let current;

    	prism = new Prism$1({
    			props: {
    				language: "html",
    				$$slots: { default: [create_default_slot_4$e] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(prism.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(prism, target, anchor);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(prism.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(prism.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(prism, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$8.name,
    		type: "if",
    		source: "(128:0) {#if $sourceType === 'svelte'}",
    		ctx
    	});

    	return block;
    }

    // (136:2) <Prism language="html">
    function create_default_slot_5$b(ctx) {
    	let t_value = `<button class="button button--primary"></button>
<button class="button button--secondary"></button>
<button class="button button--accept"></button>
<button class="button button--cancel"></button>` + "";

    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_5$b.name,
    		type: "slot",
    		source: "(136:2) <Prism language=\\\"html\\\">",
    		ctx
    	});

    	return block;
    }

    // (129:2) <Prism language="html">
    function create_default_slot_4$e(ctx) {
    	let t_value = `<Button type="primary"></Button>
<Button type="secondary"></Button>
<Button type="accept"></Button>
<Button type="cancel"></Button>` + "";

    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_4$e.name,
    		type: "slot",
    		source: "(129:2) <Prism language=\\\"html\\\">",
    		ctx
    	});

    	return block;
    }

    // (146:0) <Button className="margin-m">
    function create_default_slot_3$f(ctx) {
    	let span;
    	let t1;
    	let icon;
    	let current;

    	icon = new dist$1.Icon({
    			props: {
    				className: "icon",
    				name: "angle-right",
    				width: "20"
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			span = element("span");
    			span.textContent = "Icon to the right";
    			t1 = space();
    			create_component(icon.$$.fragment);
    			add_location(span, file$n, 146, 2, 3545);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    			insert_dev(target, t1, anchor);
    			mount_component(icon, target, anchor);
    			current = true;
    		},
    		p: noop,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(icon.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(icon.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    			if (detaching) detach_dev(t1);
    			destroy_component(icon, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_3$f.name,
    		type: "slot",
    		source: "(146:0) <Button className=\\\"margin-m\\\">",
    		ctx
    	});

    	return block;
    }

    // (150:0) <Button className="margin-m">
    function create_default_slot_2$j(ctx) {
    	let icon;
    	let t0;
    	let span;
    	let current;

    	icon = new dist$1.Icon({
    			props: {
    				className: "icon",
    				name: "angle-left",
    				width: "20"
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(icon.$$.fragment);
    			t0 = space();
    			span = element("span");
    			span.textContent = "Icon to the left";
    			add_location(span, file$n, 151, 2, 3733);
    		},
    		m: function mount(target, anchor) {
    			mount_component(icon, target, anchor);
    			insert_dev(target, t0, anchor);
    			insert_dev(target, span, anchor);
    			current = true;
    		},
    		p: noop,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(icon.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(icon.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(icon, detaching);
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(span);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_2$j.name,
    		type: "slot",
    		source: "(150:0) <Button className=\\\"margin-m\\\">",
    		ctx
    	});

    	return block;
    }

    // (166:0) {:else}
    function create_else_block$9(ctx) {
    	let prism;
    	let current;

    	prism = new Prism$1({
    			props: {
    				language: "html",
    				$$slots: { default: [create_default_slot_1$k] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(prism.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(prism, target, anchor);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(prism.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(prism.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(prism, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$9.name,
    		type: "else",
    		source: "(166:0) {:else}",
    		ctx
    	});

    	return block;
    }

    // (155:0) {#if $sourceType === 'svelte'}
    function create_if_block$a(ctx) {
    	let prism;
    	let current;

    	prism = new Prism$1({
    			props: {
    				language: "html",
    				$$slots: { default: [create_default_slot$l] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(prism.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(prism, target, anchor);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(prism.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(prism.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(prism, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$a.name,
    		type: "if",
    		source: "(155:0) {#if $sourceType === 'svelte'}",
    		ctx
    	});

    	return block;
    }

    // (167:2) <Prism language="html">
    function create_default_slot_1$k(ctx) {
    	let t_value = `<button class="button">
  <span></span>
  <svg viewBox="0 0 50 50">
    <use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="#angle_right"></use>
  </svg>
</button>
<button class="button">
  <svg viewBox="0 0 50 50">
    <use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="#angle_left"></use>
  </svg>
  <span></span>
</button>` + "";

    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_1$k.name,
    		type: "slot",
    		source: "(167:2) <Prism language=\\\"html\\\">",
    		ctx
    	});

    	return block;
    }

    // (156:2) <Prism language="html">
    function create_default_slot$l(ctx) {
    	let t_value = `<Button>
  <span></span>
  <Icon className="icon" name="angle-right" width="20" />
</Button>
<Button>
  <Icon className="icon" name="angle-left" width="20" />
  <span></span>
</Button>` + "";

    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$l.name,
    		type: "slot",
    		source: "(156:2) <Prism language=\\\"html\\\">",
    		ctx
    	});

    	return block;
    }

    function create_fragment$n(ctx) {
    	let h1;
    	let t1;
    	let t2;
    	let h30;
    	let t4;
    	let button0;
    	let t5;
    	let current_block_type_index;
    	let if_block1;
    	let t6;
    	let h31;
    	let t8;
    	let button1;
    	let t9;
    	let button2;
    	let t10;
    	let button3;
    	let t11;
    	let current_block_type_index_1;
    	let if_block2;
    	let t12;
    	let h32;
    	let t14;
    	let p;
    	let b0;
    	let t16;
    	let b1;
    	let t18;
    	let t19;
    	let button4;
    	let t20;
    	let button5;
    	let t21;
    	let current_block_type_index_2;
    	let if_block3;
    	let t22;
    	let h33;
    	let t24;
    	let button6;
    	let t25;
    	let button7;
    	let t26;
    	let button8;
    	let t27;
    	let button9;
    	let t28;
    	let current_block_type_index_3;
    	let if_block4;
    	let t29;
    	let h34;
    	let t31;
    	let button10;
    	let t32;
    	let button11;
    	let t33;
    	let current_block_type_index_4;
    	let if_block5;
    	let if_block5_anchor;
    	let current;
    	let if_block0 = /*$sourceType*/ ctx[0] === 'svelte' && create_if_block_5$1(ctx);

    	button0 = new dist$1.Button({
    			props: {
    				$$slots: { default: [create_default_slot_21$2] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const if_block_creators = [create_if_block_4$3, create_else_block_4$1];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (/*$sourceType*/ ctx[0] === 'svelte') return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type(ctx);
    	if_block1 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

    	button1 = new dist$1.Button({
    			props: {
    				className: "margin-m",
    				extension: "solid",
    				$$slots: { default: [create_default_slot_18$2] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	button2 = new dist$1.Button({
    			props: {
    				className: "margin-m",
    				extension: "link",
    				$$slots: { default: [create_default_slot_17$2] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	button3 = new dist$1.Button({
    			props: {
    				className: "margin-m",
    				extension: "icon",
    				$$slots: { default: [create_default_slot_16$2] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const if_block_creators_1 = [create_if_block_3$4, create_else_block_3$3];
    	const if_blocks_1 = [];

    	function select_block_type_1(ctx, dirty) {
    		if (/*$sourceType*/ ctx[0] === 'svelte') return 0;
    		return 1;
    	}

    	current_block_type_index_1 = select_block_type_1(ctx);
    	if_block2 = if_blocks_1[current_block_type_index_1] = if_block_creators_1[current_block_type_index_1](ctx);

    	button4 = new dist$1.Button({
    			props: {
    				className: "margin-m",
    				size: "big",
    				$$slots: { default: [create_default_slot_13$3] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	button5 = new dist$1.Button({
    			props: {
    				className: "margin-m",
    				size: "small",
    				$$slots: { default: [create_default_slot_12$3] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const if_block_creators_2 = [create_if_block_2$6, create_else_block_2$4];
    	const if_blocks_2 = [];

    	function select_block_type_2(ctx, dirty) {
    		if (/*$sourceType*/ ctx[0] === 'svelte') return 0;
    		return 1;
    	}

    	current_block_type_index_2 = select_block_type_2(ctx);
    	if_block3 = if_blocks_2[current_block_type_index_2] = if_block_creators_2[current_block_type_index_2](ctx);

    	button6 = new dist$1.Button({
    			props: {
    				className: "margin-m",
    				type: "primary",
    				$$slots: { default: [create_default_slot_9$6] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	button7 = new dist$1.Button({
    			props: {
    				className: "margin-m",
    				type: "secondary",
    				$$slots: { default: [create_default_slot_8$8] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	button8 = new dist$1.Button({
    			props: {
    				className: "margin-m",
    				type: "accept",
    				$$slots: { default: [create_default_slot_7$8] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	button9 = new dist$1.Button({
    			props: {
    				className: "margin-m",
    				type: "cancel",
    				$$slots: { default: [create_default_slot_6$a] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const if_block_creators_3 = [create_if_block_1$8, create_else_block_1$7];
    	const if_blocks_3 = [];

    	function select_block_type_3(ctx, dirty) {
    		if (/*$sourceType*/ ctx[0] === 'svelte') return 0;
    		return 1;
    	}

    	current_block_type_index_3 = select_block_type_3(ctx);
    	if_block4 = if_blocks_3[current_block_type_index_3] = if_block_creators_3[current_block_type_index_3](ctx);

    	button10 = new dist$1.Button({
    			props: {
    				className: "margin-m",
    				$$slots: { default: [create_default_slot_3$f] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	button11 = new dist$1.Button({
    			props: {
    				className: "margin-m",
    				$$slots: { default: [create_default_slot_2$j] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const if_block_creators_4 = [create_if_block$a, create_else_block$9];
    	const if_blocks_4 = [];

    	function select_block_type_4(ctx, dirty) {
    		if (/*$sourceType*/ ctx[0] === 'svelte') return 0;
    		return 1;
    	}

    	current_block_type_index_4 = select_block_type_4(ctx);
    	if_block5 = if_blocks_4[current_block_type_index_4] = if_block_creators_4[current_block_type_index_4](ctx);

    	const block = {
    		c: function create() {
    			h1 = element("h1");
    			h1.textContent = "Buttons";
    			t1 = space();
    			if (if_block0) if_block0.c();
    			t2 = space();
    			h30 = element("h3");
    			h30.textContent = "Default";
    			t4 = space();
    			create_component(button0.$$.fragment);
    			t5 = space();
    			if_block1.c();
    			t6 = space();
    			h31 = element("h3");
    			h31.textContent = "Extension attribute";
    			t8 = space();
    			create_component(button1.$$.fragment);
    			t9 = space();
    			create_component(button2.$$.fragment);
    			t10 = space();
    			create_component(button3.$$.fragment);
    			t11 = space();
    			if_block2.c();
    			t12 = space();
    			h32 = element("h3");
    			h32.textContent = "Size attribute";
    			t14 = space();
    			p = element("p");
    			b0 = element("b");
    			b0.textContent = "big";
    			t16 = text(" and ");
    			b1 = element("b");
    			b1.textContent = "small";
    			t18 = text(" can be combined with the other three extensions");
    			t19 = space();
    			create_component(button4.$$.fragment);
    			t20 = space();
    			create_component(button5.$$.fragment);
    			t21 = space();
    			if_block3.c();
    			t22 = space();
    			h33 = element("h3");
    			h33.textContent = "Variations";
    			t24 = space();
    			create_component(button6.$$.fragment);
    			t25 = space();
    			create_component(button7.$$.fragment);
    			t26 = space();
    			create_component(button8.$$.fragment);
    			t27 = space();
    			create_component(button9.$$.fragment);
    			t28 = space();
    			if_block4.c();
    			t29 = space();
    			h34 = element("h3");
    			h34.textContent = "With Icon";
    			t31 = space();
    			create_component(button10.$$.fragment);
    			t32 = space();
    			create_component(button11.$$.fragment);
    			t33 = space();
    			if_block5.c();
    			if_block5_anchor = empty();
    			attr_dev(h1, "class", "color--eb");
    			add_location(h1, file$n, 5, 0, 146);
    			add_location(h30, file$n, 62, 0, 1291);
    			add_location(h31, file$n, 76, 0, 1521);
    			add_location(h32, file$n, 102, 0, 2256);
    			add_location(b0, file$n, 103, 3, 2283);
    			add_location(b1, file$n, 103, 18, 2298);
    			add_location(p, file$n, 103, 0, 2280);
    			add_location(h33, file$n, 120, 0, 2763);
    			add_location(h34, file$n, 143, 0, 3493);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, h1, anchor);
    			insert_dev(target, t1, anchor);
    			if (if_block0) if_block0.m(target, anchor);
    			insert_dev(target, t2, anchor);
    			insert_dev(target, h30, anchor);
    			insert_dev(target, t4, anchor);
    			mount_component(button0, target, anchor);
    			insert_dev(target, t5, anchor);
    			if_blocks[current_block_type_index].m(target, anchor);
    			insert_dev(target, t6, anchor);
    			insert_dev(target, h31, anchor);
    			insert_dev(target, t8, anchor);
    			mount_component(button1, target, anchor);
    			insert_dev(target, t9, anchor);
    			mount_component(button2, target, anchor);
    			insert_dev(target, t10, anchor);
    			mount_component(button3, target, anchor);
    			insert_dev(target, t11, anchor);
    			if_blocks_1[current_block_type_index_1].m(target, anchor);
    			insert_dev(target, t12, anchor);
    			insert_dev(target, h32, anchor);
    			insert_dev(target, t14, anchor);
    			insert_dev(target, p, anchor);
    			append_dev(p, b0);
    			append_dev(p, t16);
    			append_dev(p, b1);
    			append_dev(p, t18);
    			insert_dev(target, t19, anchor);
    			mount_component(button4, target, anchor);
    			insert_dev(target, t20, anchor);
    			mount_component(button5, target, anchor);
    			insert_dev(target, t21, anchor);
    			if_blocks_2[current_block_type_index_2].m(target, anchor);
    			insert_dev(target, t22, anchor);
    			insert_dev(target, h33, anchor);
    			insert_dev(target, t24, anchor);
    			mount_component(button6, target, anchor);
    			insert_dev(target, t25, anchor);
    			mount_component(button7, target, anchor);
    			insert_dev(target, t26, anchor);
    			mount_component(button8, target, anchor);
    			insert_dev(target, t27, anchor);
    			mount_component(button9, target, anchor);
    			insert_dev(target, t28, anchor);
    			if_blocks_3[current_block_type_index_3].m(target, anchor);
    			insert_dev(target, t29, anchor);
    			insert_dev(target, h34, anchor);
    			insert_dev(target, t31, anchor);
    			mount_component(button10, target, anchor);
    			insert_dev(target, t32, anchor);
    			mount_component(button11, target, anchor);
    			insert_dev(target, t33, anchor);
    			if_blocks_4[current_block_type_index_4].m(target, anchor);
    			insert_dev(target, if_block5_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (/*$sourceType*/ ctx[0] === 'svelte') {
    				if (if_block0) {
    					if (dirty & /*$sourceType*/ 1) {
    						transition_in(if_block0, 1);
    					}
    				} else {
    					if_block0 = create_if_block_5$1(ctx);
    					if_block0.c();
    					transition_in(if_block0, 1);
    					if_block0.m(t2.parentNode, t2);
    				}
    			} else if (if_block0) {
    				group_outros();

    				transition_out(if_block0, 1, 1, () => {
    					if_block0 = null;
    				});

    				check_outros();
    			}

    			const button0_changes = {};

    			if (dirty & /*$$scope*/ 2) {
    				button0_changes.$$scope = { dirty, ctx };
    			}

    			button0.$set(button0_changes);
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(ctx);

    			if (current_block_type_index !== previous_block_index) {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block1 = if_blocks[current_block_type_index];

    				if (!if_block1) {
    					if_block1 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block1.c();
    				}

    				transition_in(if_block1, 1);
    				if_block1.m(t6.parentNode, t6);
    			}

    			const button1_changes = {};

    			if (dirty & /*$$scope*/ 2) {
    				button1_changes.$$scope = { dirty, ctx };
    			}

    			button1.$set(button1_changes);
    			const button2_changes = {};

    			if (dirty & /*$$scope*/ 2) {
    				button2_changes.$$scope = { dirty, ctx };
    			}

    			button2.$set(button2_changes);
    			const button3_changes = {};

    			if (dirty & /*$$scope*/ 2) {
    				button3_changes.$$scope = { dirty, ctx };
    			}

    			button3.$set(button3_changes);
    			let previous_block_index_1 = current_block_type_index_1;
    			current_block_type_index_1 = select_block_type_1(ctx);

    			if (current_block_type_index_1 !== previous_block_index_1) {
    				group_outros();

    				transition_out(if_blocks_1[previous_block_index_1], 1, 1, () => {
    					if_blocks_1[previous_block_index_1] = null;
    				});

    				check_outros();
    				if_block2 = if_blocks_1[current_block_type_index_1];

    				if (!if_block2) {
    					if_block2 = if_blocks_1[current_block_type_index_1] = if_block_creators_1[current_block_type_index_1](ctx);
    					if_block2.c();
    				}

    				transition_in(if_block2, 1);
    				if_block2.m(t12.parentNode, t12);
    			}

    			const button4_changes = {};

    			if (dirty & /*$$scope*/ 2) {
    				button4_changes.$$scope = { dirty, ctx };
    			}

    			button4.$set(button4_changes);
    			const button5_changes = {};

    			if (dirty & /*$$scope*/ 2) {
    				button5_changes.$$scope = { dirty, ctx };
    			}

    			button5.$set(button5_changes);
    			let previous_block_index_2 = current_block_type_index_2;
    			current_block_type_index_2 = select_block_type_2(ctx);

    			if (current_block_type_index_2 !== previous_block_index_2) {
    				group_outros();

    				transition_out(if_blocks_2[previous_block_index_2], 1, 1, () => {
    					if_blocks_2[previous_block_index_2] = null;
    				});

    				check_outros();
    				if_block3 = if_blocks_2[current_block_type_index_2];

    				if (!if_block3) {
    					if_block3 = if_blocks_2[current_block_type_index_2] = if_block_creators_2[current_block_type_index_2](ctx);
    					if_block3.c();
    				}

    				transition_in(if_block3, 1);
    				if_block3.m(t22.parentNode, t22);
    			}

    			const button6_changes = {};

    			if (dirty & /*$$scope*/ 2) {
    				button6_changes.$$scope = { dirty, ctx };
    			}

    			button6.$set(button6_changes);
    			const button7_changes = {};

    			if (dirty & /*$$scope*/ 2) {
    				button7_changes.$$scope = { dirty, ctx };
    			}

    			button7.$set(button7_changes);
    			const button8_changes = {};

    			if (dirty & /*$$scope*/ 2) {
    				button8_changes.$$scope = { dirty, ctx };
    			}

    			button8.$set(button8_changes);
    			const button9_changes = {};

    			if (dirty & /*$$scope*/ 2) {
    				button9_changes.$$scope = { dirty, ctx };
    			}

    			button9.$set(button9_changes);
    			let previous_block_index_3 = current_block_type_index_3;
    			current_block_type_index_3 = select_block_type_3(ctx);

    			if (current_block_type_index_3 !== previous_block_index_3) {
    				group_outros();

    				transition_out(if_blocks_3[previous_block_index_3], 1, 1, () => {
    					if_blocks_3[previous_block_index_3] = null;
    				});

    				check_outros();
    				if_block4 = if_blocks_3[current_block_type_index_3];

    				if (!if_block4) {
    					if_block4 = if_blocks_3[current_block_type_index_3] = if_block_creators_3[current_block_type_index_3](ctx);
    					if_block4.c();
    				}

    				transition_in(if_block4, 1);
    				if_block4.m(t29.parentNode, t29);
    			}

    			const button10_changes = {};

    			if (dirty & /*$$scope*/ 2) {
    				button10_changes.$$scope = { dirty, ctx };
    			}

    			button10.$set(button10_changes);
    			const button11_changes = {};

    			if (dirty & /*$$scope*/ 2) {
    				button11_changes.$$scope = { dirty, ctx };
    			}

    			button11.$set(button11_changes);
    			let previous_block_index_4 = current_block_type_index_4;
    			current_block_type_index_4 = select_block_type_4(ctx);

    			if (current_block_type_index_4 !== previous_block_index_4) {
    				group_outros();

    				transition_out(if_blocks_4[previous_block_index_4], 1, 1, () => {
    					if_blocks_4[previous_block_index_4] = null;
    				});

    				check_outros();
    				if_block5 = if_blocks_4[current_block_type_index_4];

    				if (!if_block5) {
    					if_block5 = if_blocks_4[current_block_type_index_4] = if_block_creators_4[current_block_type_index_4](ctx);
    					if_block5.c();
    				}

    				transition_in(if_block5, 1);
    				if_block5.m(if_block5_anchor.parentNode, if_block5_anchor);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block0);
    			transition_in(button0.$$.fragment, local);
    			transition_in(if_block1);
    			transition_in(button1.$$.fragment, local);
    			transition_in(button2.$$.fragment, local);
    			transition_in(button3.$$.fragment, local);
    			transition_in(if_block2);
    			transition_in(button4.$$.fragment, local);
    			transition_in(button5.$$.fragment, local);
    			transition_in(if_block3);
    			transition_in(button6.$$.fragment, local);
    			transition_in(button7.$$.fragment, local);
    			transition_in(button8.$$.fragment, local);
    			transition_in(button9.$$.fragment, local);
    			transition_in(if_block4);
    			transition_in(button10.$$.fragment, local);
    			transition_in(button11.$$.fragment, local);
    			transition_in(if_block5);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block0);
    			transition_out(button0.$$.fragment, local);
    			transition_out(if_block1);
    			transition_out(button1.$$.fragment, local);
    			transition_out(button2.$$.fragment, local);
    			transition_out(button3.$$.fragment, local);
    			transition_out(if_block2);
    			transition_out(button4.$$.fragment, local);
    			transition_out(button5.$$.fragment, local);
    			transition_out(if_block3);
    			transition_out(button6.$$.fragment, local);
    			transition_out(button7.$$.fragment, local);
    			transition_out(button8.$$.fragment, local);
    			transition_out(button9.$$.fragment, local);
    			transition_out(if_block4);
    			transition_out(button10.$$.fragment, local);
    			transition_out(button11.$$.fragment, local);
    			transition_out(if_block5);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(h1);
    			if (detaching) detach_dev(t1);
    			if (if_block0) if_block0.d(detaching);
    			if (detaching) detach_dev(t2);
    			if (detaching) detach_dev(h30);
    			if (detaching) detach_dev(t4);
    			destroy_component(button0, detaching);
    			if (detaching) detach_dev(t5);
    			if_blocks[current_block_type_index].d(detaching);
    			if (detaching) detach_dev(t6);
    			if (detaching) detach_dev(h31);
    			if (detaching) detach_dev(t8);
    			destroy_component(button1, detaching);
    			if (detaching) detach_dev(t9);
    			destroy_component(button2, detaching);
    			if (detaching) detach_dev(t10);
    			destroy_component(button3, detaching);
    			if (detaching) detach_dev(t11);
    			if_blocks_1[current_block_type_index_1].d(detaching);
    			if (detaching) detach_dev(t12);
    			if (detaching) detach_dev(h32);
    			if (detaching) detach_dev(t14);
    			if (detaching) detach_dev(p);
    			if (detaching) detach_dev(t19);
    			destroy_component(button4, detaching);
    			if (detaching) detach_dev(t20);
    			destroy_component(button5, detaching);
    			if (detaching) detach_dev(t21);
    			if_blocks_2[current_block_type_index_2].d(detaching);
    			if (detaching) detach_dev(t22);
    			if (detaching) detach_dev(h33);
    			if (detaching) detach_dev(t24);
    			destroy_component(button6, detaching);
    			if (detaching) detach_dev(t25);
    			destroy_component(button7, detaching);
    			if (detaching) detach_dev(t26);
    			destroy_component(button8, detaching);
    			if (detaching) detach_dev(t27);
    			destroy_component(button9, detaching);
    			if (detaching) detach_dev(t28);
    			if_blocks_3[current_block_type_index_3].d(detaching);
    			if (detaching) detach_dev(t29);
    			if (detaching) detach_dev(h34);
    			if (detaching) detach_dev(t31);
    			destroy_component(button10, detaching);
    			if (detaching) detach_dev(t32);
    			destroy_component(button11, detaching);
    			if (detaching) detach_dev(t33);
    			if_blocks_4[current_block_type_index_4].d(detaching);
    			if (detaching) detach_dev(if_block5_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$n.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$n($$self, $$props, $$invalidate) {
    	let $sourceType;
    	validate_store(sourceType, 'sourceType');
    	component_subscribe($$self, sourceType, $$value => $$invalidate(0, $sourceType = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Button', slots, []);
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Button> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({
    		Prism: Prism$1,
    		sourceType,
    		Button: dist$1.Button,
    		Icon: dist$1.Icon,
    		$sourceType
    	});

    	return [$sourceType];
    }

    class Button_1 extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$n, create_fragment$n, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Button_1",
    			options,
    			id: create_fragment$n.name
    		});
    	}
    }

    /* docs_src/components/ButtonGroup.svelte generated by Svelte v3.42.1 */
    const file$m = "docs_src/components/ButtonGroup.svelte";

    // (10:0) {#if $sourceType === 'svelte'}
    function create_if_block_4$2(ctx) {
    	let prism;
    	let t0;
    	let table;
    	let thead;
    	let tr0;
    	let th0;
    	let t2;
    	let th1;
    	let t4;
    	let th2;
    	let t6;
    	let th3;
    	let t8;
    	let tbody;
    	let tr1;
    	let td0;
    	let t10;
    	let td1;
    	let t12;
    	let td2;
    	let t13;
    	let td3;
    	let t14;
    	let tr2;
    	let td4;
    	let t16;
    	let td5;
    	let t18;
    	let td6;
    	let t19;
    	let td7;
    	let t20;
    	let tr3;
    	let td8;
    	let t22;
    	let td9;
    	let t24;
    	let td10;
    	let t25;
    	let td11;
    	let t26;
    	let tr4;
    	let td12;
    	let t28;
    	let td13;
    	let t30;
    	let td14;
    	let t31;
    	let td15;
    	let t32;
    	let tr5;
    	let td16;
    	let t34;
    	let td17;
    	let t36;
    	let td18;
    	let t38;
    	let td19;
    	let t39;
    	let tr6;
    	let td20;
    	let t41;
    	let td21;
    	let t43;
    	let td22;
    	let t45;
    	let td23;
    	let current;

    	prism = new Prism$1({
    			props: {
    				language: "js",
    				$$slots: { default: [create_default_slot_36] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(prism.$$.fragment);
    			t0 = space();
    			table = element("table");
    			thead = element("thead");
    			tr0 = element("tr");
    			th0 = element("th");
    			th0.textContent = "Prop name";
    			t2 = space();
    			th1 = element("th");
    			th1.textContent = "Type";
    			t4 = space();
    			th2 = element("th");
    			th2.textContent = "Default value";
    			t6 = space();
    			th3 = element("th");
    			th3.textContent = "Description";
    			t8 = space();
    			tbody = element("tbody");
    			tr1 = element("tr");
    			td0 = element("td");
    			td0.textContent = "className";
    			t10 = space();
    			td1 = element("td");
    			td1.textContent = "string";
    			t12 = space();
    			td2 = element("td");
    			t13 = space();
    			td3 = element("td");
    			t14 = space();
    			tr2 = element("tr");
    			td4 = element("td");
    			td4.textContent = "type";
    			t16 = space();
    			td5 = element("td");
    			td5.textContent = "'accept' | 'cancel' | 'primary' | 'secondary'";
    			t18 = space();
    			td6 = element("td");
    			t19 = space();
    			td7 = element("td");
    			t20 = space();
    			tr3 = element("tr");
    			td8 = element("td");
    			td8.textContent = "color";
    			t22 = space();
    			td9 = element("td");
    			td9.textContent = "EB Background color variable";
    			t24 = space();
    			td10 = element("td");
    			t25 = space();
    			td11 = element("td");
    			t26 = space();
    			tr4 = element("tr");
    			td12 = element("td");
    			td12.textContent = "colorHover";
    			t28 = space();
    			td13 = element("td");
    			td13.textContent = "EB Background color variable";
    			t30 = space();
    			td14 = element("td");
    			t31 = space();
    			td15 = element("td");
    			t32 = space();
    			tr5 = element("tr");
    			td16 = element("td");
    			td16.textContent = "solid";
    			t34 = space();
    			td17 = element("td");
    			td17.textContent = "boolean";
    			t36 = space();
    			td18 = element("td");
    			td18.textContent = "false";
    			t38 = space();
    			td19 = element("td");
    			t39 = space();
    			tr6 = element("tr");
    			td20 = element("td");
    			td20.textContent = "selectedId";
    			t41 = space();
    			td21 = element("td");
    			td21.textContent = "Writable - number";
    			t43 = space();
    			td22 = element("td");
    			td22.textContent = "0 (first button)";
    			t45 = space();
    			td23 = element("td");
    			td23.textContent = "Can be set onMount";
    			add_location(th0, file$m, 17, 8, 410);
    			add_location(th1, file$m, 18, 8, 437);
    			add_location(th2, file$m, 19, 8, 459);
    			add_location(th3, file$m, 20, 8, 490);
    			add_location(tr0, file$m, 16, 6, 397);
    			add_location(thead, file$m, 15, 4, 383);
    			add_location(td0, file$m, 25, 8, 567);
    			add_location(td1, file$m, 26, 8, 594);
    			add_location(td2, file$m, 27, 8, 618);
    			add_location(td3, file$m, 28, 8, 633);
    			add_location(tr1, file$m, 24, 6, 554);
    			add_location(td4, file$m, 31, 8, 671);
    			add_location(td5, file$m, 32, 8, 693);
    			add_location(td6, file$m, 33, 8, 756);
    			add_location(td7, file$m, 34, 8, 771);
    			add_location(tr2, file$m, 30, 6, 658);
    			add_location(td8, file$m, 37, 8, 809);
    			add_location(td9, file$m, 38, 8, 832);
    			add_location(td10, file$m, 39, 8, 878);
    			add_location(td11, file$m, 40, 8, 893);
    			add_location(tr3, file$m, 36, 6, 796);
    			add_location(td12, file$m, 43, 8, 931);
    			add_location(td13, file$m, 44, 8, 959);
    			add_location(td14, file$m, 45, 8, 1005);
    			add_location(td15, file$m, 46, 8, 1020);
    			add_location(tr4, file$m, 42, 6, 918);
    			add_location(td16, file$m, 49, 8, 1058);
    			add_location(td17, file$m, 50, 8, 1081);
    			add_location(td18, file$m, 51, 8, 1106);
    			add_location(td19, file$m, 52, 8, 1129);
    			add_location(tr5, file$m, 48, 6, 1045);
    			add_location(td20, file$m, 55, 8, 1167);
    			add_location(td21, file$m, 56, 8, 1195);
    			add_location(td22, file$m, 57, 8, 1230);
    			add_location(td23, file$m, 58, 8, 1264);
    			add_location(tr6, file$m, 54, 6, 1154);
    			add_location(tbody, file$m, 23, 4, 540);
    			attr_dev(table, "class", "table");
    			add_location(table, file$m, 14, 2, 357);
    		},
    		m: function mount(target, anchor) {
    			mount_component(prism, target, anchor);
    			insert_dev(target, t0, anchor);
    			insert_dev(target, table, anchor);
    			append_dev(table, thead);
    			append_dev(thead, tr0);
    			append_dev(tr0, th0);
    			append_dev(tr0, t2);
    			append_dev(tr0, th1);
    			append_dev(tr0, t4);
    			append_dev(tr0, th2);
    			append_dev(tr0, t6);
    			append_dev(tr0, th3);
    			append_dev(table, t8);
    			append_dev(table, tbody);
    			append_dev(tbody, tr1);
    			append_dev(tr1, td0);
    			append_dev(tr1, t10);
    			append_dev(tr1, td1);
    			append_dev(tr1, t12);
    			append_dev(tr1, td2);
    			append_dev(tr1, t13);
    			append_dev(tr1, td3);
    			append_dev(tbody, t14);
    			append_dev(tbody, tr2);
    			append_dev(tr2, td4);
    			append_dev(tr2, t16);
    			append_dev(tr2, td5);
    			append_dev(tr2, t18);
    			append_dev(tr2, td6);
    			append_dev(tr2, t19);
    			append_dev(tr2, td7);
    			append_dev(tbody, t20);
    			append_dev(tbody, tr3);
    			append_dev(tr3, td8);
    			append_dev(tr3, t22);
    			append_dev(tr3, td9);
    			append_dev(tr3, t24);
    			append_dev(tr3, td10);
    			append_dev(tr3, t25);
    			append_dev(tr3, td11);
    			append_dev(tbody, t26);
    			append_dev(tbody, tr4);
    			append_dev(tr4, td12);
    			append_dev(tr4, t28);
    			append_dev(tr4, td13);
    			append_dev(tr4, t30);
    			append_dev(tr4, td14);
    			append_dev(tr4, t31);
    			append_dev(tr4, td15);
    			append_dev(tbody, t32);
    			append_dev(tbody, tr5);
    			append_dev(tr5, td16);
    			append_dev(tr5, t34);
    			append_dev(tr5, td17);
    			append_dev(tr5, t36);
    			append_dev(tr5, td18);
    			append_dev(tr5, t38);
    			append_dev(tr5, td19);
    			append_dev(tbody, t39);
    			append_dev(tbody, tr6);
    			append_dev(tr6, td20);
    			append_dev(tr6, t41);
    			append_dev(tr6, td21);
    			append_dev(tr6, t43);
    			append_dev(tr6, td22);
    			append_dev(tr6, t45);
    			append_dev(tr6, td23);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(prism.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(prism.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(prism, detaching);
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(table);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_4$2.name,
    		type: "if",
    		source: "(10:0) {#if $sourceType === 'svelte'}",
    		ctx
    	});

    	return block;
    }

    // (11:2) <Prism language="js">
    function create_default_slot_36(ctx) {
    	let t_value = `import { Button, ButtonGroup } from '@ekstra-bladet/designsystem';` + "";
    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_36.name,
    		type: "slot",
    		source: "(11:2) <Prism language=\\\"js\\\">",
    		ctx
    	});

    	return block;
    }

    // (69:2) <Button>
    function create_default_slot_35(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Button 1");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_35.name,
    		type: "slot",
    		source: "(69:2) <Button>",
    		ctx
    	});

    	return block;
    }

    // (70:2) <Button>
    function create_default_slot_34(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Button 2");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_34.name,
    		type: "slot",
    		source: "(70:2) <Button>",
    		ctx
    	});

    	return block;
    }

    // (71:2) <Button>
    function create_default_slot_33(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Button 3");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_33.name,
    		type: "slot",
    		source: "(71:2) <Button>",
    		ctx
    	});

    	return block;
    }

    // (68:0) <ButtonGroup className="margin-l--b" bind:selectedId>
    function create_default_slot_32(ctx) {
    	let button0;
    	let t0;
    	let button1;
    	let t1;
    	let button2;
    	let current;

    	button0 = new dist$1.Button({
    			props: {
    				$$slots: { default: [create_default_slot_35] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	button1 = new dist$1.Button({
    			props: {
    				$$slots: { default: [create_default_slot_34] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	button2 = new dist$1.Button({
    			props: {
    				$$slots: { default: [create_default_slot_33] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(button0.$$.fragment);
    			t0 = space();
    			create_component(button1.$$.fragment);
    			t1 = space();
    			create_component(button2.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(button0, target, anchor);
    			insert_dev(target, t0, anchor);
    			mount_component(button1, target, anchor);
    			insert_dev(target, t1, anchor);
    			mount_component(button2, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const button0_changes = {};

    			if (dirty & /*$$scope*/ 16) {
    				button0_changes.$$scope = { dirty, ctx };
    			}

    			button0.$set(button0_changes);
    			const button1_changes = {};

    			if (dirty & /*$$scope*/ 16) {
    				button1_changes.$$scope = { dirty, ctx };
    			}

    			button1.$set(button1_changes);
    			const button2_changes = {};

    			if (dirty & /*$$scope*/ 16) {
    				button2_changes.$$scope = { dirty, ctx };
    			}

    			button2.$set(button2_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(button0.$$.fragment, local);
    			transition_in(button1.$$.fragment, local);
    			transition_in(button2.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(button0.$$.fragment, local);
    			transition_out(button1.$$.fragment, local);
    			transition_out(button2.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(button0, detaching);
    			if (detaching) detach_dev(t0);
    			destroy_component(button1, detaching);
    			if (detaching) detach_dev(t1);
    			destroy_component(button2, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_32.name,
    		type: "slot",
    		source: "(68:0) <ButtonGroup className=\\\"margin-l--b\\\" bind:selectedId>",
    		ctx
    	});

    	return block;
    }

    // (82:0) {:else}
    function create_else_block_3$2(ctx) {
    	let prism;
    	let current;

    	prism = new Prism$1({
    			props: {
    				language: "html",
    				$$slots: { default: [create_default_slot_31] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(prism.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(prism, target, anchor);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(prism.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(prism.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(prism, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block_3$2.name,
    		type: "else",
    		source: "(82:0) {:else}",
    		ctx
    	});

    	return block;
    }

    // (74:0) {#if $sourceType === 'svelte'}
    function create_if_block_3$3(ctx) {
    	let prism;
    	let current;

    	prism = new Prism$1({
    			props: {
    				language: "html",
    				$$slots: { default: [create_default_slot_30] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(prism.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(prism, target, anchor);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(prism.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(prism.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(prism, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_3$3.name,
    		type: "if",
    		source: "(74:0) {#if $sourceType === 'svelte'}",
    		ctx
    	});

    	return block;
    }

    // (83:2) <Prism language="html">
    function create_default_slot_31(ctx) {
    	let t_value = `<div class="buttongroup">
  <button class="button"></button>
  <button class="button"></button>
  <button class="button"></button>
</div>` + "";

    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_31.name,
    		type: "slot",
    		source: "(83:2) <Prism language=\\\"html\\\">",
    		ctx
    	});

    	return block;
    }

    // (75:2) <Prism language="html">
    function create_default_slot_30(ctx) {
    	let t_value = `<ButtonGroup bind:selectedId>
  <Button></Button>
  <Button></Button>
  <Button></Button>
</ButtonGroup>` + "";

    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_30.name,
    		type: "slot",
    		source: "(75:2) <Prism language=\\\"html\\\">",
    		ctx
    	});

    	return block;
    }

    // (95:2) <Button>
    function create_default_slot_29(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Primary");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_29.name,
    		type: "slot",
    		source: "(95:2) <Button>",
    		ctx
    	});

    	return block;
    }

    // (96:2) <Button>
    function create_default_slot_28(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Button 2");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_28.name,
    		type: "slot",
    		source: "(96:2) <Button>",
    		ctx
    	});

    	return block;
    }

    // (97:2) <Button>
    function create_default_slot_27(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Button 3");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_27.name,
    		type: "slot",
    		source: "(97:2) <Button>",
    		ctx
    	});

    	return block;
    }

    // (94:0) <ButtonGroup type="primary" className="margin-m--b">
    function create_default_slot_26(ctx) {
    	let button0;
    	let t0;
    	let button1;
    	let t1;
    	let button2;
    	let current;

    	button0 = new dist$1.Button({
    			props: {
    				$$slots: { default: [create_default_slot_29] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	button1 = new dist$1.Button({
    			props: {
    				$$slots: { default: [create_default_slot_28] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	button2 = new dist$1.Button({
    			props: {
    				$$slots: { default: [create_default_slot_27] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(button0.$$.fragment);
    			t0 = space();
    			create_component(button1.$$.fragment);
    			t1 = space();
    			create_component(button2.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(button0, target, anchor);
    			insert_dev(target, t0, anchor);
    			mount_component(button1, target, anchor);
    			insert_dev(target, t1, anchor);
    			mount_component(button2, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const button0_changes = {};

    			if (dirty & /*$$scope*/ 16) {
    				button0_changes.$$scope = { dirty, ctx };
    			}

    			button0.$set(button0_changes);
    			const button1_changes = {};

    			if (dirty & /*$$scope*/ 16) {
    				button1_changes.$$scope = { dirty, ctx };
    			}

    			button1.$set(button1_changes);
    			const button2_changes = {};

    			if (dirty & /*$$scope*/ 16) {
    				button2_changes.$$scope = { dirty, ctx };
    			}

    			button2.$set(button2_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(button0.$$.fragment, local);
    			transition_in(button1.$$.fragment, local);
    			transition_in(button2.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(button0.$$.fragment, local);
    			transition_out(button1.$$.fragment, local);
    			transition_out(button2.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(button0, detaching);
    			if (detaching) detach_dev(t0);
    			destroy_component(button1, detaching);
    			if (detaching) detach_dev(t1);
    			destroy_component(button2, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_26.name,
    		type: "slot",
    		source: "(94:0) <ButtonGroup type=\\\"primary\\\" className=\\\"margin-m--b\\\">",
    		ctx
    	});

    	return block;
    }

    // (101:2) <Button>
    function create_default_slot_25(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Secondary");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_25.name,
    		type: "slot",
    		source: "(101:2) <Button>",
    		ctx
    	});

    	return block;
    }

    // (102:2) <Button>
    function create_default_slot_24(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Button 2");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_24.name,
    		type: "slot",
    		source: "(102:2) <Button>",
    		ctx
    	});

    	return block;
    }

    // (103:2) <Button>
    function create_default_slot_23(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Button 3");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_23.name,
    		type: "slot",
    		source: "(103:2) <Button>",
    		ctx
    	});

    	return block;
    }

    // (100:0) <ButtonGroup type="secondary" className="margin-m--b">
    function create_default_slot_22(ctx) {
    	let button0;
    	let t0;
    	let button1;
    	let t1;
    	let button2;
    	let current;

    	button0 = new dist$1.Button({
    			props: {
    				$$slots: { default: [create_default_slot_25] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	button1 = new dist$1.Button({
    			props: {
    				$$slots: { default: [create_default_slot_24] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	button2 = new dist$1.Button({
    			props: {
    				$$slots: { default: [create_default_slot_23] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(button0.$$.fragment);
    			t0 = space();
    			create_component(button1.$$.fragment);
    			t1 = space();
    			create_component(button2.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(button0, target, anchor);
    			insert_dev(target, t0, anchor);
    			mount_component(button1, target, anchor);
    			insert_dev(target, t1, anchor);
    			mount_component(button2, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const button0_changes = {};

    			if (dirty & /*$$scope*/ 16) {
    				button0_changes.$$scope = { dirty, ctx };
    			}

    			button0.$set(button0_changes);
    			const button1_changes = {};

    			if (dirty & /*$$scope*/ 16) {
    				button1_changes.$$scope = { dirty, ctx };
    			}

    			button1.$set(button1_changes);
    			const button2_changes = {};

    			if (dirty & /*$$scope*/ 16) {
    				button2_changes.$$scope = { dirty, ctx };
    			}

    			button2.$set(button2_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(button0.$$.fragment, local);
    			transition_in(button1.$$.fragment, local);
    			transition_in(button2.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(button0.$$.fragment, local);
    			transition_out(button1.$$.fragment, local);
    			transition_out(button2.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(button0, detaching);
    			if (detaching) detach_dev(t0);
    			destroy_component(button1, detaching);
    			if (detaching) detach_dev(t1);
    			destroy_component(button2, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_22.name,
    		type: "slot",
    		source: "(100:0) <ButtonGroup type=\\\"secondary\\\" className=\\\"margin-m--b\\\">",
    		ctx
    	});

    	return block;
    }

    // (107:2) <Button>
    function create_default_slot_21$1(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Accept");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_21$1.name,
    		type: "slot",
    		source: "(107:2) <Button>",
    		ctx
    	});

    	return block;
    }

    // (108:2) <Button>
    function create_default_slot_20$1(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Button 2");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_20$1.name,
    		type: "slot",
    		source: "(108:2) <Button>",
    		ctx
    	});

    	return block;
    }

    // (109:2) <Button>
    function create_default_slot_19$1(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Button 3");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_19$1.name,
    		type: "slot",
    		source: "(109:2) <Button>",
    		ctx
    	});

    	return block;
    }

    // (106:0) <ButtonGroup type="accept" className="margin-m--b">
    function create_default_slot_18$1(ctx) {
    	let button0;
    	let t0;
    	let button1;
    	let t1;
    	let button2;
    	let current;

    	button0 = new dist$1.Button({
    			props: {
    				$$slots: { default: [create_default_slot_21$1] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	button1 = new dist$1.Button({
    			props: {
    				$$slots: { default: [create_default_slot_20$1] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	button2 = new dist$1.Button({
    			props: {
    				$$slots: { default: [create_default_slot_19$1] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(button0.$$.fragment);
    			t0 = space();
    			create_component(button1.$$.fragment);
    			t1 = space();
    			create_component(button2.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(button0, target, anchor);
    			insert_dev(target, t0, anchor);
    			mount_component(button1, target, anchor);
    			insert_dev(target, t1, anchor);
    			mount_component(button2, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const button0_changes = {};

    			if (dirty & /*$$scope*/ 16) {
    				button0_changes.$$scope = { dirty, ctx };
    			}

    			button0.$set(button0_changes);
    			const button1_changes = {};

    			if (dirty & /*$$scope*/ 16) {
    				button1_changes.$$scope = { dirty, ctx };
    			}

    			button1.$set(button1_changes);
    			const button2_changes = {};

    			if (dirty & /*$$scope*/ 16) {
    				button2_changes.$$scope = { dirty, ctx };
    			}

    			button2.$set(button2_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(button0.$$.fragment, local);
    			transition_in(button1.$$.fragment, local);
    			transition_in(button2.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(button0.$$.fragment, local);
    			transition_out(button1.$$.fragment, local);
    			transition_out(button2.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(button0, detaching);
    			if (detaching) detach_dev(t0);
    			destroy_component(button1, detaching);
    			if (detaching) detach_dev(t1);
    			destroy_component(button2, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_18$1.name,
    		type: "slot",
    		source: "(106:0) <ButtonGroup type=\\\"accept\\\" className=\\\"margin-m--b\\\">",
    		ctx
    	});

    	return block;
    }

    // (113:2) <Button>
    function create_default_slot_17$1(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Cancel");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_17$1.name,
    		type: "slot",
    		source: "(113:2) <Button>",
    		ctx
    	});

    	return block;
    }

    // (114:2) <Button>
    function create_default_slot_16$1(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Button 2");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_16$1.name,
    		type: "slot",
    		source: "(114:2) <Button>",
    		ctx
    	});

    	return block;
    }

    // (115:2) <Button>
    function create_default_slot_15$1(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Button 3");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_15$1.name,
    		type: "slot",
    		source: "(115:2) <Button>",
    		ctx
    	});

    	return block;
    }

    // (112:0) <ButtonGroup type="cancel" className="margin-l--b">
    function create_default_slot_14$2(ctx) {
    	let button0;
    	let t0;
    	let button1;
    	let t1;
    	let button2;
    	let current;

    	button0 = new dist$1.Button({
    			props: {
    				$$slots: { default: [create_default_slot_17$1] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	button1 = new dist$1.Button({
    			props: {
    				$$slots: { default: [create_default_slot_16$1] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	button2 = new dist$1.Button({
    			props: {
    				$$slots: { default: [create_default_slot_15$1] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(button0.$$.fragment);
    			t0 = space();
    			create_component(button1.$$.fragment);
    			t1 = space();
    			create_component(button2.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(button0, target, anchor);
    			insert_dev(target, t0, anchor);
    			mount_component(button1, target, anchor);
    			insert_dev(target, t1, anchor);
    			mount_component(button2, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const button0_changes = {};

    			if (dirty & /*$$scope*/ 16) {
    				button0_changes.$$scope = { dirty, ctx };
    			}

    			button0.$set(button0_changes);
    			const button1_changes = {};

    			if (dirty & /*$$scope*/ 16) {
    				button1_changes.$$scope = { dirty, ctx };
    			}

    			button1.$set(button1_changes);
    			const button2_changes = {};

    			if (dirty & /*$$scope*/ 16) {
    				button2_changes.$$scope = { dirty, ctx };
    			}

    			button2.$set(button2_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(button0.$$.fragment, local);
    			transition_in(button1.$$.fragment, local);
    			transition_in(button2.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(button0.$$.fragment, local);
    			transition_out(button1.$$.fragment, local);
    			transition_out(button2.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(button0, detaching);
    			if (detaching) detach_dev(t0);
    			destroy_component(button1, detaching);
    			if (detaching) detach_dev(t1);
    			destroy_component(button2, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_14$2.name,
    		type: "slot",
    		source: "(112:0) <ButtonGroup type=\\\"cancel\\\" className=\\\"margin-l--b\\\">",
    		ctx
    	});

    	return block;
    }

    // (125:0) {:else}
    function create_else_block_2$3(ctx) {
    	let prism;
    	let current;

    	prism = new Prism$1({
    			props: {
    				language: "html",
    				$$slots: { default: [create_default_slot_13$2] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(prism.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(prism, target, anchor);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(prism.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(prism.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(prism, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block_2$3.name,
    		type: "else",
    		source: "(125:0) {:else}",
    		ctx
    	});

    	return block;
    }

    // (118:0) {#if $sourceType === 'svelte'}
    function create_if_block_2$5(ctx) {
    	let prism;
    	let current;

    	prism = new Prism$1({
    			props: {
    				language: "html",
    				$$slots: { default: [create_default_slot_12$2] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(prism.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(prism, target, anchor);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(prism.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(prism.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(prism, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2$5.name,
    		type: "if",
    		source: "(118:0) {#if $sourceType === 'svelte'}",
    		ctx
    	});

    	return block;
    }

    // (126:2) <Prism language="html">
    function create_default_slot_13$2(ctx) {
    	let t_value = `<div class="buttongroup buttongroup--primary">...</div>
<div class="buttongroup buttongroup--secondary">...</div>
<div class="buttongroup buttongroup--accept">...</div>
<div class="buttongroup buttongroup--cancel">...</div>` + "";

    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_13$2.name,
    		type: "slot",
    		source: "(126:2) <Prism language=\\\"html\\\">",
    		ctx
    	});

    	return block;
    }

    // (119:2) <Prism language="html">
    function create_default_slot_12$2(ctx) {
    	let t_value = `<ButtonGroup type="primary">...</ButtonGroup>
<ButtonGroup type="secondary">...</ButtonGroup>
<ButtonGroup type="accept">...</ButtonGroup>
<ButtonGroup type="cancel">...</ButtonGroup>` + "";

    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_12$2.name,
    		type: "slot",
    		source: "(119:2) <Prism language=\\\"html\\\">",
    		ctx
    	});

    	return block;
    }

    // (137:2) <Button>
    function create_default_slot_11$3(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Button 1");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_11$3.name,
    		type: "slot",
    		source: "(137:2) <Button>",
    		ctx
    	});

    	return block;
    }

    // (138:2) <Button>
    function create_default_slot_10$4(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Button 2");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_10$4.name,
    		type: "slot",
    		source: "(138:2) <Button>",
    		ctx
    	});

    	return block;
    }

    // (139:2) <Button>
    function create_default_slot_9$5(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Button 3");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_9$5.name,
    		type: "slot",
    		source: "(139:2) <Button>",
    		ctx
    	});

    	return block;
    }

    // (136:0) <ButtonGroup color="Bordeaux" className="margin-l--b">
    function create_default_slot_8$7(ctx) {
    	let button0;
    	let t0;
    	let button1;
    	let t1;
    	let button2;
    	let current;

    	button0 = new dist$1.Button({
    			props: {
    				$$slots: { default: [create_default_slot_11$3] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	button1 = new dist$1.Button({
    			props: {
    				$$slots: { default: [create_default_slot_10$4] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	button2 = new dist$1.Button({
    			props: {
    				$$slots: { default: [create_default_slot_9$5] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(button0.$$.fragment);
    			t0 = space();
    			create_component(button1.$$.fragment);
    			t1 = space();
    			create_component(button2.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(button0, target, anchor);
    			insert_dev(target, t0, anchor);
    			mount_component(button1, target, anchor);
    			insert_dev(target, t1, anchor);
    			mount_component(button2, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const button0_changes = {};

    			if (dirty & /*$$scope*/ 16) {
    				button0_changes.$$scope = { dirty, ctx };
    			}

    			button0.$set(button0_changes);
    			const button1_changes = {};

    			if (dirty & /*$$scope*/ 16) {
    				button1_changes.$$scope = { dirty, ctx };
    			}

    			button1.$set(button1_changes);
    			const button2_changes = {};

    			if (dirty & /*$$scope*/ 16) {
    				button2_changes.$$scope = { dirty, ctx };
    			}

    			button2.$set(button2_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(button0.$$.fragment, local);
    			transition_in(button1.$$.fragment, local);
    			transition_in(button2.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(button0.$$.fragment, local);
    			transition_out(button1.$$.fragment, local);
    			transition_out(button2.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(button0, detaching);
    			if (detaching) detach_dev(t0);
    			destroy_component(button1, detaching);
    			if (detaching) detach_dev(t1);
    			destroy_component(button2, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_8$7.name,
    		type: "slot",
    		source: "(136:0) <ButtonGroup color=\\\"Bordeaux\\\" className=\\\"margin-l--b\\\">",
    		ctx
    	});

    	return block;
    }

    // (146:0) {:else}
    function create_else_block_1$6(ctx) {
    	let prism;
    	let current;

    	prism = new Prism$1({
    			props: {
    				language: "html",
    				$$slots: { default: [create_default_slot_7$7] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(prism.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(prism, target, anchor);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(prism.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(prism.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(prism, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block_1$6.name,
    		type: "else",
    		source: "(146:0) {:else}",
    		ctx
    	});

    	return block;
    }

    // (142:0) {#if $sourceType === 'svelte'}
    function create_if_block_1$7(ctx) {
    	let prism;
    	let current;

    	prism = new Prism$1({
    			props: {
    				language: "html",
    				$$slots: { default: [create_default_slot_6$9] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(prism.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(prism, target, anchor);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(prism.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(prism.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(prism, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$7.name,
    		type: "if",
    		source: "(142:0) {#if $sourceType === 'svelte'}",
    		ctx
    	});

    	return block;
    }

    // (147:2) <Prism language="html">
    function create_default_slot_7$7(ctx) {
    	let t_value = `<div class="buttongroup" style="
  --buttongroup-color: #8a0c36;
  --buttongroup-fgcolor: #fff;
  --buttongroup-color--hover: #8a0c36;
  --buttongroup-fgcolor--hover: #fff;
">...</div>` + "";

    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_7$7.name,
    		type: "slot",
    		source: "(147:2) <Prism language=\\\"html\\\">",
    		ctx
    	});

    	return block;
    }

    // (143:2) <Prism language="html">
    function create_default_slot_6$9(ctx) {
    	let t_value = `<ButtonGroup color="Bordeaux">...</ButtonGroup>` + "";
    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_6$9.name,
    		type: "slot",
    		source: "(143:2) <Prism language=\\\"html\\\">",
    		ctx
    	});

    	return block;
    }

    // (160:2) <Button>
    function create_default_slot_5$a(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Button 1");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_5$a.name,
    		type: "slot",
    		source: "(160:2) <Button>",
    		ctx
    	});

    	return block;
    }

    // (161:2) <Button>
    function create_default_slot_4$d(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Button 2");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_4$d.name,
    		type: "slot",
    		source: "(161:2) <Button>",
    		ctx
    	});

    	return block;
    }

    // (162:2) <Button>
    function create_default_slot_3$e(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Button 3");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_3$e.name,
    		type: "slot",
    		source: "(162:2) <Button>",
    		ctx
    	});

    	return block;
    }

    // (159:0) <ButtonGroup solid={true} color="Black" colorHover="Red" className="margin-l--b">
    function create_default_slot_2$i(ctx) {
    	let button0;
    	let t0;
    	let button1;
    	let t1;
    	let button2;
    	let current;

    	button0 = new dist$1.Button({
    			props: {
    				$$slots: { default: [create_default_slot_5$a] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	button1 = new dist$1.Button({
    			props: {
    				$$slots: { default: [create_default_slot_4$d] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	button2 = new dist$1.Button({
    			props: {
    				$$slots: { default: [create_default_slot_3$e] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(button0.$$.fragment);
    			t0 = space();
    			create_component(button1.$$.fragment);
    			t1 = space();
    			create_component(button2.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(button0, target, anchor);
    			insert_dev(target, t0, anchor);
    			mount_component(button1, target, anchor);
    			insert_dev(target, t1, anchor);
    			mount_component(button2, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const button0_changes = {};

    			if (dirty & /*$$scope*/ 16) {
    				button0_changes.$$scope = { dirty, ctx };
    			}

    			button0.$set(button0_changes);
    			const button1_changes = {};

    			if (dirty & /*$$scope*/ 16) {
    				button1_changes.$$scope = { dirty, ctx };
    			}

    			button1.$set(button1_changes);
    			const button2_changes = {};

    			if (dirty & /*$$scope*/ 16) {
    				button2_changes.$$scope = { dirty, ctx };
    			}

    			button2.$set(button2_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(button0.$$.fragment, local);
    			transition_in(button1.$$.fragment, local);
    			transition_in(button2.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(button0.$$.fragment, local);
    			transition_out(button1.$$.fragment, local);
    			transition_out(button2.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(button0, detaching);
    			if (detaching) detach_dev(t0);
    			destroy_component(button1, detaching);
    			if (detaching) detach_dev(t1);
    			destroy_component(button2, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_2$i.name,
    		type: "slot",
    		source: "(159:0) <ButtonGroup solid={true} color=\\\"Black\\\" colorHover=\\\"Red\\\" className=\\\"margin-l--b\\\">",
    		ctx
    	});

    	return block;
    }

    // (169:0) {:else}
    function create_else_block$8(ctx) {
    	let prism;
    	let current;

    	prism = new Prism$1({
    			props: {
    				language: "html",
    				$$slots: { default: [create_default_slot_1$j] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(prism.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(prism, target, anchor);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(prism.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(prism.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(prism, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$8.name,
    		type: "else",
    		source: "(169:0) {:else}",
    		ctx
    	});

    	return block;
    }

    // (165:0) {#if $sourceType === 'svelte'}
    function create_if_block$9(ctx) {
    	let prism;
    	let current;

    	prism = new Prism$1({
    			props: {
    				language: "html",
    				$$slots: { default: [create_default_slot$k] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(prism.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(prism, target, anchor);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(prism.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(prism.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(prism, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$9.name,
    		type: "if",
    		source: "(165:0) {#if $sourceType === 'svelte'}",
    		ctx
    	});

    	return block;
    }

    // (170:2) <Prism language="html">
    function create_default_slot_1$j(ctx) {
    	let t_value = `<div class="buttongroup buttongroup--solid" style="
  --buttongroup-color: #000;
  --buttongroup-fgcolor: #fff;
  --buttongroup-color--hover: #bd1118;
  --buttongroup-fgcolor--hover: #fff;
">...</div>` + "";

    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_1$j.name,
    		type: "slot",
    		source: "(170:2) <Prism language=\\\"html\\\">",
    		ctx
    	});

    	return block;
    }

    // (166:2) <Prism language="html">
    function create_default_slot$k(ctx) {
    	let t_value = `<ButtonGroup solid={true} color="Black" colorHover="Red">...</ButtonGroup>` + "";
    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$k.name,
    		type: "slot",
    		source: "(166:2) <Prism language=\\\"html\\\">",
    		ctx
    	});

    	return block;
    }

    function create_fragment$m(ctx) {
    	let h1;
    	let t1;
    	let t2;
    	let h30;
    	let t4;
    	let p;
    	let t5;
    	let t6;
    	let t7;
    	let buttongroup0;
    	let updating_selectedId;
    	let t8;
    	let current_block_type_index;
    	let if_block1;
    	let t9;
    	let h31;
    	let t11;
    	let buttongroup1;
    	let t12;
    	let buttongroup2;
    	let t13;
    	let buttongroup3;
    	let t14;
    	let buttongroup4;
    	let t15;
    	let current_block_type_index_1;
    	let if_block2;
    	let t16;
    	let h32;
    	let t18;
    	let buttongroup5;
    	let t19;
    	let current_block_type_index_2;
    	let if_block3;
    	let t20;
    	let h33;
    	let t22;
    	let buttongroup6;
    	let t23;
    	let current_block_type_index_3;
    	let if_block4;
    	let if_block4_anchor;
    	let current;
    	let if_block0 = /*$sourceType*/ ctx[1] === 'svelte' && create_if_block_4$2(ctx);

    	function buttongroup0_selectedId_binding(value) {
    		/*buttongroup0_selectedId_binding*/ ctx[3](value);
    	}

    	let buttongroup0_props = {
    		className: "margin-l--b",
    		$$slots: { default: [create_default_slot_32] },
    		$$scope: { ctx }
    	};

    	if (/*selectedId*/ ctx[0] !== void 0) {
    		buttongroup0_props.selectedId = /*selectedId*/ ctx[0];
    	}

    	buttongroup0 = new dist$1.ButtonGroup({
    			props: buttongroup0_props,
    			$$inline: true
    		});

    	binding_callbacks.push(() => bind(buttongroup0, 'selectedId', buttongroup0_selectedId_binding));
    	const if_block_creators = [create_if_block_3$3, create_else_block_3$2];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (/*$sourceType*/ ctx[1] === 'svelte') return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type(ctx);
    	if_block1 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

    	buttongroup1 = new dist$1.ButtonGroup({
    			props: {
    				type: "primary",
    				className: "margin-m--b",
    				$$slots: { default: [create_default_slot_26] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	buttongroup2 = new dist$1.ButtonGroup({
    			props: {
    				type: "secondary",
    				className: "margin-m--b",
    				$$slots: { default: [create_default_slot_22] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	buttongroup3 = new dist$1.ButtonGroup({
    			props: {
    				type: "accept",
    				className: "margin-m--b",
    				$$slots: { default: [create_default_slot_18$1] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	buttongroup4 = new dist$1.ButtonGroup({
    			props: {
    				type: "cancel",
    				className: "margin-l--b",
    				$$slots: { default: [create_default_slot_14$2] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const if_block_creators_1 = [create_if_block_2$5, create_else_block_2$3];
    	const if_blocks_1 = [];

    	function select_block_type_1(ctx, dirty) {
    		if (/*$sourceType*/ ctx[1] === 'svelte') return 0;
    		return 1;
    	}

    	current_block_type_index_1 = select_block_type_1(ctx);
    	if_block2 = if_blocks_1[current_block_type_index_1] = if_block_creators_1[current_block_type_index_1](ctx);

    	buttongroup5 = new dist$1.ButtonGroup({
    			props: {
    				color: "Bordeaux",
    				className: "margin-l--b",
    				$$slots: { default: [create_default_slot_8$7] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const if_block_creators_2 = [create_if_block_1$7, create_else_block_1$6];
    	const if_blocks_2 = [];

    	function select_block_type_2(ctx, dirty) {
    		if (/*$sourceType*/ ctx[1] === 'svelte') return 0;
    		return 1;
    	}

    	current_block_type_index_2 = select_block_type_2(ctx);
    	if_block3 = if_blocks_2[current_block_type_index_2] = if_block_creators_2[current_block_type_index_2](ctx);

    	buttongroup6 = new dist$1.ButtonGroup({
    			props: {
    				solid: true,
    				color: "Black",
    				colorHover: "Red",
    				className: "margin-l--b",
    				$$slots: { default: [create_default_slot_2$i] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const if_block_creators_3 = [create_if_block$9, create_else_block$8];
    	const if_blocks_3 = [];

    	function select_block_type_3(ctx, dirty) {
    		if (/*$sourceType*/ ctx[1] === 'svelte') return 0;
    		return 1;
    	}

    	current_block_type_index_3 = select_block_type_3(ctx);
    	if_block4 = if_blocks_3[current_block_type_index_3] = if_block_creators_3[current_block_type_index_3](ctx);

    	const block = {
    		c: function create() {
    			h1 = element("h1");
    			h1.textContent = "Button groups";
    			t1 = space();
    			if (if_block0) if_block0.c();
    			t2 = space();
    			h30 = element("h3");
    			h30.textContent = "Default";
    			t4 = space();
    			p = element("p");
    			t5 = text("Button-index selected: ");
    			t6 = text(/*$selectedId*/ ctx[2]);
    			t7 = space();
    			create_component(buttongroup0.$$.fragment);
    			t8 = space();
    			if_block1.c();
    			t9 = space();
    			h31 = element("h3");
    			h31.textContent = "Variations";
    			t11 = space();
    			create_component(buttongroup1.$$.fragment);
    			t12 = space();
    			create_component(buttongroup2.$$.fragment);
    			t13 = space();
    			create_component(buttongroup3.$$.fragment);
    			t14 = space();
    			create_component(buttongroup4.$$.fragment);
    			t15 = space();
    			if_block2.c();
    			t16 = space();
    			h32 = element("h3");
    			h32.textContent = "Farve muligheder fra eb-colors";
    			t18 = space();
    			create_component(buttongroup5.$$.fragment);
    			t19 = space();
    			if_block3.c();
    			t20 = space();
    			h33 = element("h3");
    			h33.textContent = "Solid button group";
    			t22 = space();
    			create_component(buttongroup6.$$.fragment);
    			t23 = space();
    			if_block4.c();
    			if_block4_anchor = empty();
    			attr_dev(h1, "class", "color--eb");
    			add_location(h1, file$m, 7, 0, 171);
    			add_location(h30, file$m, 64, 0, 1335);
    			add_location(p, file$m, 65, 0, 1352);
    			add_location(h31, file$m, 91, 0, 1930);
    			add_location(h32, file$m, 133, 0, 3103);
    			add_location(h33, file$m, 156, 0, 3668);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, h1, anchor);
    			insert_dev(target, t1, anchor);
    			if (if_block0) if_block0.m(target, anchor);
    			insert_dev(target, t2, anchor);
    			insert_dev(target, h30, anchor);
    			insert_dev(target, t4, anchor);
    			insert_dev(target, p, anchor);
    			append_dev(p, t5);
    			append_dev(p, t6);
    			insert_dev(target, t7, anchor);
    			mount_component(buttongroup0, target, anchor);
    			insert_dev(target, t8, anchor);
    			if_blocks[current_block_type_index].m(target, anchor);
    			insert_dev(target, t9, anchor);
    			insert_dev(target, h31, anchor);
    			insert_dev(target, t11, anchor);
    			mount_component(buttongroup1, target, anchor);
    			insert_dev(target, t12, anchor);
    			mount_component(buttongroup2, target, anchor);
    			insert_dev(target, t13, anchor);
    			mount_component(buttongroup3, target, anchor);
    			insert_dev(target, t14, anchor);
    			mount_component(buttongroup4, target, anchor);
    			insert_dev(target, t15, anchor);
    			if_blocks_1[current_block_type_index_1].m(target, anchor);
    			insert_dev(target, t16, anchor);
    			insert_dev(target, h32, anchor);
    			insert_dev(target, t18, anchor);
    			mount_component(buttongroup5, target, anchor);
    			insert_dev(target, t19, anchor);
    			if_blocks_2[current_block_type_index_2].m(target, anchor);
    			insert_dev(target, t20, anchor);
    			insert_dev(target, h33, anchor);
    			insert_dev(target, t22, anchor);
    			mount_component(buttongroup6, target, anchor);
    			insert_dev(target, t23, anchor);
    			if_blocks_3[current_block_type_index_3].m(target, anchor);
    			insert_dev(target, if_block4_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (/*$sourceType*/ ctx[1] === 'svelte') {
    				if (if_block0) {
    					if (dirty & /*$sourceType*/ 2) {
    						transition_in(if_block0, 1);
    					}
    				} else {
    					if_block0 = create_if_block_4$2(ctx);
    					if_block0.c();
    					transition_in(if_block0, 1);
    					if_block0.m(t2.parentNode, t2);
    				}
    			} else if (if_block0) {
    				group_outros();

    				transition_out(if_block0, 1, 1, () => {
    					if_block0 = null;
    				});

    				check_outros();
    			}

    			if (!current || dirty & /*$selectedId*/ 4) set_data_dev(t6, /*$selectedId*/ ctx[2]);
    			const buttongroup0_changes = {};

    			if (dirty & /*$$scope*/ 16) {
    				buttongroup0_changes.$$scope = { dirty, ctx };
    			}

    			if (!updating_selectedId && dirty & /*selectedId*/ 1) {
    				updating_selectedId = true;
    				buttongroup0_changes.selectedId = /*selectedId*/ ctx[0];
    				add_flush_callback(() => updating_selectedId = false);
    			}

    			buttongroup0.$set(buttongroup0_changes);
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(ctx);

    			if (current_block_type_index !== previous_block_index) {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block1 = if_blocks[current_block_type_index];

    				if (!if_block1) {
    					if_block1 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block1.c();
    				}

    				transition_in(if_block1, 1);
    				if_block1.m(t9.parentNode, t9);
    			}

    			const buttongroup1_changes = {};

    			if (dirty & /*$$scope*/ 16) {
    				buttongroup1_changes.$$scope = { dirty, ctx };
    			}

    			buttongroup1.$set(buttongroup1_changes);
    			const buttongroup2_changes = {};

    			if (dirty & /*$$scope*/ 16) {
    				buttongroup2_changes.$$scope = { dirty, ctx };
    			}

    			buttongroup2.$set(buttongroup2_changes);
    			const buttongroup3_changes = {};

    			if (dirty & /*$$scope*/ 16) {
    				buttongroup3_changes.$$scope = { dirty, ctx };
    			}

    			buttongroup3.$set(buttongroup3_changes);
    			const buttongroup4_changes = {};

    			if (dirty & /*$$scope*/ 16) {
    				buttongroup4_changes.$$scope = { dirty, ctx };
    			}

    			buttongroup4.$set(buttongroup4_changes);
    			let previous_block_index_1 = current_block_type_index_1;
    			current_block_type_index_1 = select_block_type_1(ctx);

    			if (current_block_type_index_1 !== previous_block_index_1) {
    				group_outros();

    				transition_out(if_blocks_1[previous_block_index_1], 1, 1, () => {
    					if_blocks_1[previous_block_index_1] = null;
    				});

    				check_outros();
    				if_block2 = if_blocks_1[current_block_type_index_1];

    				if (!if_block2) {
    					if_block2 = if_blocks_1[current_block_type_index_1] = if_block_creators_1[current_block_type_index_1](ctx);
    					if_block2.c();
    				}

    				transition_in(if_block2, 1);
    				if_block2.m(t16.parentNode, t16);
    			}

    			const buttongroup5_changes = {};

    			if (dirty & /*$$scope*/ 16) {
    				buttongroup5_changes.$$scope = { dirty, ctx };
    			}

    			buttongroup5.$set(buttongroup5_changes);
    			let previous_block_index_2 = current_block_type_index_2;
    			current_block_type_index_2 = select_block_type_2(ctx);

    			if (current_block_type_index_2 !== previous_block_index_2) {
    				group_outros();

    				transition_out(if_blocks_2[previous_block_index_2], 1, 1, () => {
    					if_blocks_2[previous_block_index_2] = null;
    				});

    				check_outros();
    				if_block3 = if_blocks_2[current_block_type_index_2];

    				if (!if_block3) {
    					if_block3 = if_blocks_2[current_block_type_index_2] = if_block_creators_2[current_block_type_index_2](ctx);
    					if_block3.c();
    				}

    				transition_in(if_block3, 1);
    				if_block3.m(t20.parentNode, t20);
    			}

    			const buttongroup6_changes = {};

    			if (dirty & /*$$scope*/ 16) {
    				buttongroup6_changes.$$scope = { dirty, ctx };
    			}

    			buttongroup6.$set(buttongroup6_changes);
    			let previous_block_index_3 = current_block_type_index_3;
    			current_block_type_index_3 = select_block_type_3(ctx);

    			if (current_block_type_index_3 !== previous_block_index_3) {
    				group_outros();

    				transition_out(if_blocks_3[previous_block_index_3], 1, 1, () => {
    					if_blocks_3[previous_block_index_3] = null;
    				});

    				check_outros();
    				if_block4 = if_blocks_3[current_block_type_index_3];

    				if (!if_block4) {
    					if_block4 = if_blocks_3[current_block_type_index_3] = if_block_creators_3[current_block_type_index_3](ctx);
    					if_block4.c();
    				}

    				transition_in(if_block4, 1);
    				if_block4.m(if_block4_anchor.parentNode, if_block4_anchor);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block0);
    			transition_in(buttongroup0.$$.fragment, local);
    			transition_in(if_block1);
    			transition_in(buttongroup1.$$.fragment, local);
    			transition_in(buttongroup2.$$.fragment, local);
    			transition_in(buttongroup3.$$.fragment, local);
    			transition_in(buttongroup4.$$.fragment, local);
    			transition_in(if_block2);
    			transition_in(buttongroup5.$$.fragment, local);
    			transition_in(if_block3);
    			transition_in(buttongroup6.$$.fragment, local);
    			transition_in(if_block4);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block0);
    			transition_out(buttongroup0.$$.fragment, local);
    			transition_out(if_block1);
    			transition_out(buttongroup1.$$.fragment, local);
    			transition_out(buttongroup2.$$.fragment, local);
    			transition_out(buttongroup3.$$.fragment, local);
    			transition_out(buttongroup4.$$.fragment, local);
    			transition_out(if_block2);
    			transition_out(buttongroup5.$$.fragment, local);
    			transition_out(if_block3);
    			transition_out(buttongroup6.$$.fragment, local);
    			transition_out(if_block4);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(h1);
    			if (detaching) detach_dev(t1);
    			if (if_block0) if_block0.d(detaching);
    			if (detaching) detach_dev(t2);
    			if (detaching) detach_dev(h30);
    			if (detaching) detach_dev(t4);
    			if (detaching) detach_dev(p);
    			if (detaching) detach_dev(t7);
    			destroy_component(buttongroup0, detaching);
    			if (detaching) detach_dev(t8);
    			if_blocks[current_block_type_index].d(detaching);
    			if (detaching) detach_dev(t9);
    			if (detaching) detach_dev(h31);
    			if (detaching) detach_dev(t11);
    			destroy_component(buttongroup1, detaching);
    			if (detaching) detach_dev(t12);
    			destroy_component(buttongroup2, detaching);
    			if (detaching) detach_dev(t13);
    			destroy_component(buttongroup3, detaching);
    			if (detaching) detach_dev(t14);
    			destroy_component(buttongroup4, detaching);
    			if (detaching) detach_dev(t15);
    			if_blocks_1[current_block_type_index_1].d(detaching);
    			if (detaching) detach_dev(t16);
    			if (detaching) detach_dev(h32);
    			if (detaching) detach_dev(t18);
    			destroy_component(buttongroup5, detaching);
    			if (detaching) detach_dev(t19);
    			if_blocks_2[current_block_type_index_2].d(detaching);
    			if (detaching) detach_dev(t20);
    			if (detaching) detach_dev(h33);
    			if (detaching) detach_dev(t22);
    			destroy_component(buttongroup6, detaching);
    			if (detaching) detach_dev(t23);
    			if_blocks_3[current_block_type_index_3].d(detaching);
    			if (detaching) detach_dev(if_block4_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$m.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$m($$self, $$props, $$invalidate) {
    	let $sourceType;

    	let $selectedId,
    		$$unsubscribe_selectedId = noop,
    		$$subscribe_selectedId = () => ($$unsubscribe_selectedId(), $$unsubscribe_selectedId = subscribe(selectedId, $$value => $$invalidate(2, $selectedId = $$value)), selectedId);

    	validate_store(sourceType, 'sourceType');
    	component_subscribe($$self, sourceType, $$value => $$invalidate(1, $sourceType = $$value));
    	$$self.$$.on_destroy.push(() => $$unsubscribe_selectedId());
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('ButtonGroup', slots, []);
    	
    	let selectedId;
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<ButtonGroup> was created with unknown prop '${key}'`);
    	});

    	function buttongroup0_selectedId_binding(value) {
    		selectedId = value;
    		$$subscribe_selectedId($$invalidate(0, selectedId));
    	}

    	$$self.$capture_state = () => ({
    		Prism: Prism$1,
    		sourceType,
    		Button: dist$1.Button,
    		ButtonGroup: dist$1.ButtonGroup,
    		selectedId,
    		$sourceType,
    		$selectedId
    	});

    	$$self.$inject_state = $$props => {
    		if ('selectedId' in $$props) $$subscribe_selectedId($$invalidate(0, selectedId = $$props.selectedId));
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [selectedId, $sourceType, $selectedId, buttongroup0_selectedId_binding];
    }

    class ButtonGroup_1 extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$m, create_fragment$m, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "ButtonGroup_1",
    			options,
    			id: create_fragment$m.name
    		});
    	}
    }

    /* docs_src/components/Card.svelte generated by Svelte v3.42.1 */
    const file$l = "docs_src/components/Card.svelte";

    // (8:0) {#if $sourceType === 'svelte'}
    function create_if_block_2$4(ctx) {
    	let prism;
    	let t0;
    	let table;
    	let thead;
    	let tr0;
    	let th0;
    	let t2;
    	let th1;
    	let t4;
    	let th2;
    	let t6;
    	let th3;
    	let t8;
    	let tbody;
    	let tr1;
    	let td0;
    	let t10;
    	let td1;
    	let t12;
    	let td2;
    	let t13;
    	let td3;
    	let t15;
    	let tr2;
    	let td4;
    	let t17;
    	let td5;
    	let t19;
    	let td6;
    	let t20;
    	let td7;
    	let t22;
    	let tr3;
    	let td8;
    	let t24;
    	let td9;
    	let t26;
    	let td10;
    	let t27;
    	let td11;
    	let t28;
    	let tr4;
    	let td12;
    	let t30;
    	let td13;
    	let t32;
    	let td14;
    	let t33;
    	let td15;
    	let t34;
    	let a;
    	let t36;
    	let t37;
    	let tr5;
    	let current;

    	prism = new Prism$1({
    			props: {
    				language: "js",
    				$$slots: { default: [create_default_slot_4$c] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(prism.$$.fragment);
    			t0 = space();
    			table = element("table");
    			thead = element("thead");
    			tr0 = element("tr");
    			th0 = element("th");
    			th0.textContent = "Prop name";
    			t2 = space();
    			th1 = element("th");
    			th1.textContent = "Type";
    			t4 = space();
    			th2 = element("th");
    			th2.textContent = "Default value";
    			t6 = space();
    			th3 = element("th");
    			th3.textContent = "Description";
    			t8 = space();
    			tbody = element("tbody");
    			tr1 = element("tr");
    			td0 = element("td");
    			td0.textContent = "className";
    			t10 = space();
    			td1 = element("td");
    			td1.textContent = "string";
    			t12 = space();
    			td2 = element("td");
    			t13 = space();
    			td3 = element("td");
    			td3.textContent = "Card specific classes: card--small-media & card--small-media--reverse";
    			t15 = space();
    			tr2 = element("tr");
    			td4 = element("td");
    			td4.textContent = "url";
    			t17 = space();
    			td5 = element("td");
    			td5.textContent = "string";
    			t19 = space();
    			td6 = element("td");
    			t20 = space();
    			td7 = element("td");
    			td7.textContent = "Converts the Card into a clickable link";
    			t22 = space();
    			tr3 = element("tr");
    			td8 = element("td");
    			td8.textContent = "style";
    			t24 = space();
    			td9 = element("td");
    			td9.textContent = "string";
    			t26 = space();
    			td10 = element("td");
    			t27 = space();
    			td11 = element("td");
    			t28 = space();
    			tr4 = element("tr");
    			td12 = element("td");
    			td12.textContent = "theme";
    			t30 = space();
    			td13 = element("td");
    			td13.textContent = "'darkmode' | 'lightmode'";
    			t32 = space();
    			td14 = element("td");
    			t33 = space();
    			td15 = element("td");
    			t34 = text("See ");
    			a = element("a");
    			a.textContent = "Data Theme";
    			t36 = text(" for doc");
    			t37 = space();
    			tr5 = element("tr");
    			add_location(th0, file$l, 15, 8, 353);
    			add_location(th1, file$l, 16, 8, 380);
    			add_location(th2, file$l, 17, 8, 402);
    			add_location(th3, file$l, 18, 8, 433);
    			add_location(tr0, file$l, 14, 6, 340);
    			add_location(thead, file$l, 13, 4, 326);
    			add_location(td0, file$l, 23, 8, 510);
    			add_location(td1, file$l, 24, 8, 537);
    			add_location(td2, file$l, 25, 8, 561);
    			add_location(td3, file$l, 26, 8, 576);
    			add_location(tr1, file$l, 22, 6, 497);
    			add_location(td4, file$l, 29, 8, 686);
    			add_location(td5, file$l, 30, 8, 707);
    			add_location(td6, file$l, 31, 8, 731);
    			add_location(td7, file$l, 32, 8, 746);
    			add_location(tr2, file$l, 28, 6, 673);
    			add_location(td8, file$l, 35, 8, 826);
    			add_location(td9, file$l, 36, 8, 849);
    			add_location(td10, file$l, 37, 8, 873);
    			add_location(td11, file$l, 38, 8, 888);
    			add_location(tr3, file$l, 34, 6, 813);
    			add_location(td12, file$l, 41, 8, 926);
    			add_location(td13, file$l, 42, 8, 949);
    			add_location(td14, file$l, 43, 8, 991);
    			attr_dev(a, "href", "/#/utilities/datatheme");
    			add_location(a, file$l, 44, 16, 1014);
    			add_location(td15, file$l, 44, 8, 1006);
    			add_location(tr4, file$l, 40, 6, 913);
    			add_location(tr5, file$l, 46, 6, 1093);
    			add_location(tbody, file$l, 21, 4, 483);
    			attr_dev(table, "class", "table");
    			add_location(table, file$l, 12, 2, 300);
    		},
    		m: function mount(target, anchor) {
    			mount_component(prism, target, anchor);
    			insert_dev(target, t0, anchor);
    			insert_dev(target, table, anchor);
    			append_dev(table, thead);
    			append_dev(thead, tr0);
    			append_dev(tr0, th0);
    			append_dev(tr0, t2);
    			append_dev(tr0, th1);
    			append_dev(tr0, t4);
    			append_dev(tr0, th2);
    			append_dev(tr0, t6);
    			append_dev(tr0, th3);
    			append_dev(table, t8);
    			append_dev(table, tbody);
    			append_dev(tbody, tr1);
    			append_dev(tr1, td0);
    			append_dev(tr1, t10);
    			append_dev(tr1, td1);
    			append_dev(tr1, t12);
    			append_dev(tr1, td2);
    			append_dev(tr1, t13);
    			append_dev(tr1, td3);
    			append_dev(tbody, t15);
    			append_dev(tbody, tr2);
    			append_dev(tr2, td4);
    			append_dev(tr2, t17);
    			append_dev(tr2, td5);
    			append_dev(tr2, t19);
    			append_dev(tr2, td6);
    			append_dev(tr2, t20);
    			append_dev(tr2, td7);
    			append_dev(tbody, t22);
    			append_dev(tbody, tr3);
    			append_dev(tr3, td8);
    			append_dev(tr3, t24);
    			append_dev(tr3, td9);
    			append_dev(tr3, t26);
    			append_dev(tr3, td10);
    			append_dev(tr3, t27);
    			append_dev(tr3, td11);
    			append_dev(tbody, t28);
    			append_dev(tbody, tr4);
    			append_dev(tr4, td12);
    			append_dev(tr4, t30);
    			append_dev(tr4, td13);
    			append_dev(tr4, t32);
    			append_dev(tr4, td14);
    			append_dev(tr4, t33);
    			append_dev(tr4, td15);
    			append_dev(td15, t34);
    			append_dev(td15, a);
    			append_dev(td15, t36);
    			append_dev(tbody, t37);
    			append_dev(tbody, tr5);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(prism.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(prism.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(prism, detaching);
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(table);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2$4.name,
    		type: "if",
    		source: "(8:0) {#if $sourceType === 'svelte'}",
    		ctx
    	});

    	return block;
    }

    // (9:2) <Prism language="js">
    function create_default_slot_4$c(ctx) {
    	let t_value = `import { Card } from '@ekstra-bladet/designsystem';` + "";
    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_4$c.name,
    		type: "slot",
    		source: "(9:2) <Prism language=\\\"js\\\">",
    		ctx
    	});

    	return block;
    }

    // (55:2) 
    function create_header_slot$1(ctx) {
    	let div;

    	const block = {
    		c: function create() {
    			div = element("div");
    			div.textContent = "Header";
    			attr_dev(div, "slot", "header");
    			add_location(div, file$l, 54, 2, 1185);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_header_slot$1.name,
    		type: "slot",
    		source: "(55:2) ",
    		ctx
    	});

    	return block;
    }

    // (56:2) 
    function create_media_slot_1(ctx) {
    	let div;
    	let img;
    	let img_src_value;

    	const block = {
    		c: function create() {
    			div = element("div");
    			img = element("img");
    			if (!src_url_equal(img.src, img_src_value = "https://loremflickr.com/1280/400/cat")) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "alt", "");
    			add_location(img, file$l, 56, 4, 1242);
    			attr_dev(div, "slot", "media");
    			add_location(div, file$l, 55, 2, 1219);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, img);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_media_slot_1.name,
    		type: "slot",
    		source: "(56:2) ",
    		ctx
    	});

    	return block;
    }

    // (59:2) 
    function create_content_slot_1$3(ctx) {
    	let div;

    	const block = {
    		c: function create() {
    			div = element("div");
    			div.textContent = "Content";
    			attr_dev(div, "slot", "content");
    			add_location(div, file$l, 58, 2, 1311);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_content_slot_1$3.name,
    		type: "slot",
    		source: "(59:2) ",
    		ctx
    	});

    	return block;
    }

    // (60:2) 
    function create_footer_slot$1(ctx) {
    	let div;

    	const block = {
    		c: function create() {
    			div = element("div");
    			div.textContent = "Footer";
    			attr_dev(div, "slot", "footer");
    			add_location(div, file$l, 59, 2, 1347);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_footer_slot$1.name,
    		type: "slot",
    		source: "(60:2) ",
    		ctx
    	});

    	return block;
    }

    // (74:0) {:else}
    function create_else_block_1$5(ctx) {
    	let prism;
    	let current;

    	prism = new Prism$1({
    			props: {
    				language: "html",
    				$$slots: { default: [create_default_slot_3$d] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(prism.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(prism, target, anchor);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(prism.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(prism.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(prism, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block_1$5.name,
    		type: "else",
    		source: "(74:0) {:else}",
    		ctx
    	});

    	return block;
    }

    // (63:0) {#if $sourceType === 'svelte'}
    function create_if_block_1$6(ctx) {
    	let prism;
    	let current;

    	prism = new Prism$1({
    			props: {
    				language: "html",
    				$$slots: { default: [create_default_slot_2$h] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(prism.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(prism, target, anchor);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(prism.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(prism.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(prism, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$6.name,
    		type: "if",
    		source: "(63:0) {#if $sourceType === 'svelte'}",
    		ctx
    	});

    	return block;
    }

    // (75:2) <Prism language="html">
    function create_default_slot_3$d(ctx) {
    	let t_value = `<div class="card">
  <div class="card-header"></div>
  <div class="card-media">
    <img src="" alt="">
  </div>
  <div class="card-content"></div>
  <div class="card-footer"></div>
</div>` + "";

    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_3$d.name,
    		type: "slot",
    		source: "(75:2) <Prism language=\\\"html\\\">",
    		ctx
    	});

    	return block;
    }

    // (64:2) <Prism language="html">
    function create_default_slot_2$h(ctx) {
    	let t_value = `<Card>
  <div slot="header"></div>
  <div slot="media">
    <img src="" alt="" />
  </div>
  <div slot="content"></div>
  <div slot="footer"></div>
</Card>` + "";

    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_2$h.name,
    		type: "slot",
    		source: "(64:2) <Prism language=\\\"html\\\">",
    		ctx
    	});

    	return block;
    }

    // (90:2) 
    function create_media_slot(ctx) {
    	let div;
    	let img;
    	let img_src_value;

    	const block = {
    		c: function create() {
    			div = element("div");
    			img = element("img");
    			if (!src_url_equal(img.src, img_src_value = "https://loremflickr.com/250/120/dog")) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "alt", "");
    			add_location(img, file$l, 90, 4, 1970);
    			attr_dev(div, "slot", "media");
    			add_location(div, file$l, 89, 2, 1947);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, img);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_media_slot.name,
    		type: "slot",
    		source: "(90:2) ",
    		ctx
    	});

    	return block;
    }

    // (93:2) 
    function create_content_slot$5(ctx) {
    	let div;

    	const block = {
    		c: function create() {
    			div = element("div");
    			div.textContent = "Content";
    			attr_dev(div, "slot", "content");
    			add_location(div, file$l, 92, 2, 2038);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_content_slot$5.name,
    		type: "slot",
    		source: "(93:2) ",
    		ctx
    	});

    	return block;
    }

    // (105:0) {:else}
    function create_else_block$7(ctx) {
    	let prism;
    	let current;

    	prism = new Prism$1({
    			props: {
    				language: "html",
    				$$slots: { default: [create_default_slot_1$i] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(prism.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(prism, target, anchor);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(prism.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(prism.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(prism, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$7.name,
    		type: "else",
    		source: "(105:0) {:else}",
    		ctx
    	});

    	return block;
    }

    // (96:0) {#if $sourceType === 'svelte'}
    function create_if_block$8(ctx) {
    	let prism;
    	let current;

    	prism = new Prism$1({
    			props: {
    				language: "html",
    				$$slots: { default: [create_default_slot$j] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(prism.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(prism, target, anchor);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(prism.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(prism.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(prism, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$8.name,
    		type: "if",
    		source: "(96:0) {#if $sourceType === 'svelte'}",
    		ctx
    	});

    	return block;
    }

    // (106:2) <Prism language="html">
    function create_default_slot_1$i(ctx) {
    	let t_value = `<div class="card card--small-media">
  <div class="card-media">
    <img src="" alt="" />
  </div>
  <div class="card-content"></div>
</div>` + "";

    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_1$i.name,
    		type: "slot",
    		source: "(106:2) <Prism language=\\\"html\\\">",
    		ctx
    	});

    	return block;
    }

    // (97:2) <Prism language="html">
    function create_default_slot$j(ctx) {
    	let t_value = `<Card className="card--small-media">
  <div slot="media">
    <img src="" alt="" />
  </div>
  <div slot="content"></div>
</Card>` + "";

    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$j.name,
    		type: "slot",
    		source: "(97:2) <Prism language=\\\"html\\\">",
    		ctx
    	});

    	return block;
    }

    function create_fragment$l(ctx) {
    	let h1;
    	let t1;
    	let t2;
    	let h30;
    	let t4;
    	let card0;
    	let t5;
    	let current_block_type_index;
    	let if_block1;
    	let t6;
    	let h31;
    	let t8;
    	let card1;
    	let t9;
    	let current_block_type_index_1;
    	let if_block2;
    	let if_block2_anchor;
    	let current;
    	let if_block0 = /*$sourceType*/ ctx[0] === 'svelte' && create_if_block_2$4(ctx);

    	card0 = new dist$1.Card({
    			props: {
    				className: "margin-l--b",
    				$$slots: {
    					footer: [create_footer_slot$1],
    					content: [create_content_slot_1$3],
    					media: [create_media_slot_1],
    					header: [create_header_slot$1]
    				},
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const if_block_creators = [create_if_block_1$6, create_else_block_1$5];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (/*$sourceType*/ ctx[0] === 'svelte') return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type(ctx);
    	if_block1 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

    	card1 = new dist$1.Card({
    			props: {
    				className: "card--small-media margin-l--b",
    				$$slots: {
    					content: [create_content_slot$5],
    					media: [create_media_slot]
    				},
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const if_block_creators_1 = [create_if_block$8, create_else_block$7];
    	const if_blocks_1 = [];

    	function select_block_type_1(ctx, dirty) {
    		if (/*$sourceType*/ ctx[0] === 'svelte') return 0;
    		return 1;
    	}

    	current_block_type_index_1 = select_block_type_1(ctx);
    	if_block2 = if_blocks_1[current_block_type_index_1] = if_block_creators_1[current_block_type_index_1](ctx);

    	const block = {
    		c: function create() {
    			h1 = element("h1");
    			h1.textContent = "Card";
    			t1 = space();
    			if (if_block0) if_block0.c();
    			t2 = space();
    			h30 = element("h3");
    			h30.textContent = "Card slots";
    			t4 = space();
    			create_component(card0.$$.fragment);
    			t5 = space();
    			if_block1.c();
    			t6 = space();
    			h31 = element("h3");
    			h31.textContent = "Small media card";
    			t8 = space();
    			create_component(card1.$$.fragment);
    			t9 = space();
    			if_block2.c();
    			if_block2_anchor = empty();
    			attr_dev(h1, "class", "color--eb");
    			add_location(h1, file$l, 5, 0, 138);
    			add_location(h30, file$l, 51, 0, 1131);
    			add_location(h31, file$l, 86, 0, 1869);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, h1, anchor);
    			insert_dev(target, t1, anchor);
    			if (if_block0) if_block0.m(target, anchor);
    			insert_dev(target, t2, anchor);
    			insert_dev(target, h30, anchor);
    			insert_dev(target, t4, anchor);
    			mount_component(card0, target, anchor);
    			insert_dev(target, t5, anchor);
    			if_blocks[current_block_type_index].m(target, anchor);
    			insert_dev(target, t6, anchor);
    			insert_dev(target, h31, anchor);
    			insert_dev(target, t8, anchor);
    			mount_component(card1, target, anchor);
    			insert_dev(target, t9, anchor);
    			if_blocks_1[current_block_type_index_1].m(target, anchor);
    			insert_dev(target, if_block2_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (/*$sourceType*/ ctx[0] === 'svelte') {
    				if (if_block0) {
    					if (dirty & /*$sourceType*/ 1) {
    						transition_in(if_block0, 1);
    					}
    				} else {
    					if_block0 = create_if_block_2$4(ctx);
    					if_block0.c();
    					transition_in(if_block0, 1);
    					if_block0.m(t2.parentNode, t2);
    				}
    			} else if (if_block0) {
    				group_outros();

    				transition_out(if_block0, 1, 1, () => {
    					if_block0 = null;
    				});

    				check_outros();
    			}

    			const card0_changes = {};

    			if (dirty & /*$$scope*/ 2) {
    				card0_changes.$$scope = { dirty, ctx };
    			}

    			card0.$set(card0_changes);
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(ctx);

    			if (current_block_type_index !== previous_block_index) {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block1 = if_blocks[current_block_type_index];

    				if (!if_block1) {
    					if_block1 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block1.c();
    				}

    				transition_in(if_block1, 1);
    				if_block1.m(t6.parentNode, t6);
    			}

    			const card1_changes = {};

    			if (dirty & /*$$scope*/ 2) {
    				card1_changes.$$scope = { dirty, ctx };
    			}

    			card1.$set(card1_changes);
    			let previous_block_index_1 = current_block_type_index_1;
    			current_block_type_index_1 = select_block_type_1(ctx);

    			if (current_block_type_index_1 !== previous_block_index_1) {
    				group_outros();

    				transition_out(if_blocks_1[previous_block_index_1], 1, 1, () => {
    					if_blocks_1[previous_block_index_1] = null;
    				});

    				check_outros();
    				if_block2 = if_blocks_1[current_block_type_index_1];

    				if (!if_block2) {
    					if_block2 = if_blocks_1[current_block_type_index_1] = if_block_creators_1[current_block_type_index_1](ctx);
    					if_block2.c();
    				}

    				transition_in(if_block2, 1);
    				if_block2.m(if_block2_anchor.parentNode, if_block2_anchor);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block0);
    			transition_in(card0.$$.fragment, local);
    			transition_in(if_block1);
    			transition_in(card1.$$.fragment, local);
    			transition_in(if_block2);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block0);
    			transition_out(card0.$$.fragment, local);
    			transition_out(if_block1);
    			transition_out(card1.$$.fragment, local);
    			transition_out(if_block2);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(h1);
    			if (detaching) detach_dev(t1);
    			if (if_block0) if_block0.d(detaching);
    			if (detaching) detach_dev(t2);
    			if (detaching) detach_dev(h30);
    			if (detaching) detach_dev(t4);
    			destroy_component(card0, detaching);
    			if (detaching) detach_dev(t5);
    			if_blocks[current_block_type_index].d(detaching);
    			if (detaching) detach_dev(t6);
    			if (detaching) detach_dev(h31);
    			if (detaching) detach_dev(t8);
    			destroy_component(card1, detaching);
    			if (detaching) detach_dev(t9);
    			if_blocks_1[current_block_type_index_1].d(detaching);
    			if (detaching) detach_dev(if_block2_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$l.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$l($$self, $$props, $$invalidate) {
    	let $sourceType;
    	validate_store(sourceType, 'sourceType');
    	component_subscribe($$self, sourceType, $$value => $$invalidate(0, $sourceType = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Card', slots, []);
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Card> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({ Prism: Prism$1, sourceType, Card: dist$1.Card, $sourceType });
    	return [$sourceType];
    }

    class Card_1 extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$l, create_fragment$l, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Card_1",
    			options,
    			id: create_fragment$l.name
    		});
    	}
    }

    /* docs_src/components/FormElement.svelte generated by Svelte v3.42.1 */
    const file$k = "docs_src/components/FormElement.svelte";

    // (8:0) {#if $sourceType === 'svelte'}
    function create_if_block_5(ctx) {
    	let prism;
    	let current;

    	prism = new Prism$1({
    			props: {
    				language: "js",
    				$$slots: { default: [create_default_slot_11$2] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(prism.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(prism, target, anchor);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(prism.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(prism.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(prism, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_5.name,
    		type: "if",
    		source: "(8:0) {#if $sourceType === 'svelte'}",
    		ctx
    	});

    	return block;
    }

    // (9:2) <Prism language="js">
    function create_default_slot_11$2(ctx) {
    	let t_value = `import { FormElement } from '@ekstra-bladet/designsystem';` + "";
    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_11$2.name,
    		type: "slot",
    		source: "(9:2) <Prism language=\\\"js\\\">",
    		ctx
    	});

    	return block;
    }

    // (26:0) {:else}
    function create_else_block_4(ctx) {
    	let prism;
    	let current;

    	prism = new Prism$1({
    			props: {
    				language: "html",
    				$$slots: { default: [create_default_slot_10$3] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(prism.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(prism, target, anchor);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(prism.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(prism.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(prism, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block_4.name,
    		type: "else",
    		source: "(26:0) {:else}",
    		ctx
    	});

    	return block;
    }

    // (20:0) {#if $sourceType === 'svelte'}
    function create_if_block_4$1(ctx) {
    	let prism;
    	let current;

    	prism = new Prism$1({
    			props: {
    				language: "html",
    				$$slots: { default: [create_default_slot_9$4] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(prism.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(prism, target, anchor);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(prism.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(prism.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(prism, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_4$1.name,
    		type: "if",
    		source: "(20:0) {#if $sourceType === 'svelte'}",
    		ctx
    	});

    	return block;
    }

    // (27:2) <Prism language="html">
    function create_default_slot_10$3(ctx) {
    	let t_value = `FormElement er ikke blevet opdateret til HTML endnu` + "";
    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_10$3.name,
    		type: "slot",
    		source: "(27:2) <Prism language=\\\"html\\\">",
    		ctx
    	});

    	return block;
    }

    // (21:2) <Prism language="html">
    function create_default_slot_9$4(ctx) {
    	let t_value = `<FormElement inputtype="text" size="small" label="" />
<FormElement inputtype="text" label="" />
<FormElement inputtype="text" size="large" label="" />` + "";

    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_9$4.name,
    		type: "slot",
    		source: "(21:2) <Prism language=\\\"html\\\">",
    		ctx
    	});

    	return block;
    }

    // (40:0) {:else}
    function create_else_block_3$1(ctx) {
    	let prism;
    	let current;

    	prism = new Prism$1({
    			props: {
    				language: "html",
    				$$slots: { default: [create_default_slot_8$6] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(prism.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(prism, target, anchor);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(prism.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(prism.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(prism, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block_3$1.name,
    		type: "else",
    		source: "(40:0) {:else}",
    		ctx
    	});

    	return block;
    }

    // (36:0) {#if $sourceType === 'svelte'}
    function create_if_block_3$2(ctx) {
    	let prism;
    	let current;

    	prism = new Prism$1({
    			props: {
    				language: "html",
    				$$slots: { default: [create_default_slot_7$6] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(prism.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(prism, target, anchor);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(prism.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(prism.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(prism, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_3$2.name,
    		type: "if",
    		source: "(36:0) {#if $sourceType === 'svelte'}",
    		ctx
    	});

    	return block;
    }

    // (41:2) <Prism language="html">
    function create_default_slot_8$6(ctx) {
    	let t_value = `FormElement er ikke blevet opdateret til HTML endnu` + "";
    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_8$6.name,
    		type: "slot",
    		source: "(41:2) <Prism language=\\\"html\\\">",
    		ctx
    	});

    	return block;
    }

    // (37:2) <Prism language="html">
    function create_default_slot_7$6(ctx) {
    	let t_value = `<FormElement inputtype="number" label="" />` + "";
    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_7$6.name,
    		type: "slot",
    		source: "(37:2) <Prism language=\\\"html\\\">",
    		ctx
    	});

    	return block;
    }

    // (48:0) <FormElement inputtype="select" label="Select">
    function create_default_slot_6$8(ctx) {
    	let option0;
    	let t1;
    	let option1;

    	const block = {
    		c: function create() {
    			option0 = element("option");
    			option0.textContent = "Option 1";
    			t1 = space();
    			option1 = element("option");
    			option1.textContent = "Option 2";
    			option0.__value = "option1";
    			option0.value = option0.__value;
    			add_location(option0, file$k, 48, 2, 1288);
    			option1.__value = "option2";
    			option1.value = option1.__value;
    			add_location(option1, file$k, 49, 2, 1332);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, option0, anchor);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, option1, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(option0);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(option1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_6$8.name,
    		type: "slot",
    		source: "(48:0) <FormElement inputtype=\\\"select\\\" label=\\\"Select\\\">",
    		ctx
    	});

    	return block;
    }

    // (60:0) {:else}
    function create_else_block_2$2(ctx) {
    	let prism;
    	let current;

    	prism = new Prism$1({
    			props: {
    				language: "html",
    				$$slots: { default: [create_default_slot_5$9] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(prism.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(prism, target, anchor);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(prism.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(prism.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(prism, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block_2$2.name,
    		type: "else",
    		source: "(60:0) {:else}",
    		ctx
    	});

    	return block;
    }

    // (53:0) {#if $sourceType === 'svelte'}
    function create_if_block_2$3(ctx) {
    	let prism;
    	let current;

    	prism = new Prism$1({
    			props: {
    				language: "html",
    				$$slots: { default: [create_default_slot_4$b] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(prism.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(prism, target, anchor);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(prism.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(prism.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(prism, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2$3.name,
    		type: "if",
    		source: "(53:0) {#if $sourceType === 'svelte'}",
    		ctx
    	});

    	return block;
    }

    // (61:2) <Prism language="html">
    function create_default_slot_5$9(ctx) {
    	let t_value = `FormElement er ikke blevet opdateret til HTML endnu` + "";
    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_5$9.name,
    		type: "slot",
    		source: "(61:2) <Prism language=\\\"html\\\">",
    		ctx
    	});

    	return block;
    }

    // (54:2) <Prism language="html">
    function create_default_slot_4$b(ctx) {
    	let t_value = `<FormElement inputtype="select" label="">
  <option value="option1"></option>
  <option value="option2"></option>
</FormElement>` + "";

    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_4$b.name,
    		type: "slot",
    		source: "(54:2) <Prism language=\\\"html\\\">",
    		ctx
    	});

    	return block;
    }

    // (76:0) {:else}
    function create_else_block_1$4(ctx) {
    	let prism;
    	let current;

    	prism = new Prism$1({
    			props: {
    				language: "html",
    				$$slots: { default: [create_default_slot_3$c] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(prism.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(prism, target, anchor);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(prism.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(prism.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(prism, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block_1$4.name,
    		type: "else",
    		source: "(76:0) {:else}",
    		ctx
    	});

    	return block;
    }

    // (71:0) {#if $sourceType === 'svelte'}
    function create_if_block_1$5(ctx) {
    	let prism;
    	let current;

    	prism = new Prism$1({
    			props: {
    				language: "html",
    				$$slots: { default: [create_default_slot_2$g] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(prism.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(prism, target, anchor);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(prism.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(prism.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(prism, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$5.name,
    		type: "if",
    		source: "(71:0) {#if $sourceType === 'svelte'}",
    		ctx
    	});

    	return block;
    }

    // (77:2) <Prism language="html">
    function create_default_slot_3$c(ctx) {
    	let t_value = `FormElement er ikke blevet opdateret til HTML endnu` + "";
    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_3$c.name,
    		type: "slot",
    		source: "(77:2) <Prism language=\\\"html\\\">",
    		ctx
    	});

    	return block;
    }

    // (72:2) <Prism language="html">
    function create_default_slot_2$g(ctx) {
    	let t_value = `<FormElement inputtype="checkbox" label="" />
<FormElement inputtype="radio" label="" bind:group={group} value={1} />` + "";

    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_2$g.name,
    		type: "slot",
    		source: "(72:2) <Prism language=\\\"html\\\">",
    		ctx
    	});

    	return block;
    }

    // (90:0) {:else}
    function create_else_block$6(ctx) {
    	let prism;
    	let current;

    	prism = new Prism$1({
    			props: {
    				language: "html",
    				$$slots: { default: [create_default_slot_1$h] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(prism.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(prism, target, anchor);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(prism.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(prism.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(prism, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$6.name,
    		type: "else",
    		source: "(90:0) {:else}",
    		ctx
    	});

    	return block;
    }

    // (86:0) {#if $sourceType === 'svelte'}
    function create_if_block$7(ctx) {
    	let prism;
    	let current;

    	prism = new Prism$1({
    			props: {
    				language: "html",
    				$$slots: { default: [create_default_slot$i] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(prism.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(prism, target, anchor);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(prism.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(prism.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(prism, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$7.name,
    		type: "if",
    		source: "(86:0) {#if $sourceType === 'svelte'}",
    		ctx
    	});

    	return block;
    }

    // (91:2) <Prism language="html">
    function create_default_slot_1$h(ctx) {
    	let t_value = `FormElement er ikke blevet opdateret til HTML endnu` + "";
    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_1$h.name,
    		type: "slot",
    		source: "(91:2) <Prism language=\\\"html\\\">",
    		ctx
    	});

    	return block;
    }

    // (87:2) <Prism language="html">
    function create_default_slot$i(ctx) {
    	let t_value = `<FormElement inputtype="textarea" label="" />` + "";
    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$i.name,
    		type: "slot",
    		source: "(87:2) <Prism language=\\\"html\\\">",
    		ctx
    	});

    	return block;
    }

    function create_fragment$k(ctx) {
    	let h1;
    	let t1;
    	let t2;
    	let h30;
    	let t4;
    	let formelement0;
    	let t5;
    	let formelement1;
    	let t6;
    	let formelement2;
    	let t7;
    	let current_block_type_index;
    	let if_block1;
    	let t8;
    	let h31;
    	let t10;
    	let formelement3;
    	let t11;
    	let current_block_type_index_1;
    	let if_block2;
    	let t12;
    	let h32;
    	let t14;
    	let formelement4;
    	let t15;
    	let current_block_type_index_2;
    	let if_block3;
    	let t16;
    	let h33;
    	let t18;
    	let formelement5;
    	let t19;
    	let formelement6;
    	let t20;
    	let current_block_type_index_3;
    	let if_block4;
    	let t21;
    	let h34;
    	let t23;
    	let formelement7;
    	let t24;
    	let current_block_type_index_4;
    	let if_block5;
    	let if_block5_anchor;
    	let current;
    	let if_block0 = /*$sourceType*/ ctx[0] === 'svelte' && create_if_block_5(ctx);

    	formelement0 = new dist$1.FormElement({
    			props: {
    				inputtype: "text",
    				size: "small",
    				label: "input size small"
    			},
    			$$inline: true
    		});

    	formelement1 = new dist$1.FormElement({
    			props: {
    				inputtype: "text",
    				label: "input size medium (standard)"
    			},
    			$$inline: true
    		});

    	formelement2 = new dist$1.FormElement({
    			props: {
    				inputtype: "text",
    				size: "large",
    				label: "input size large"
    			},
    			$$inline: true
    		});

    	const if_block_creators = [create_if_block_4$1, create_else_block_4];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (/*$sourceType*/ ctx[0] === 'svelte') return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type(ctx);
    	if_block1 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

    	formelement3 = new dist$1.FormElement({
    			props: {
    				inputtype: "number",
    				label: "Noget tal indhold her"
    			},
    			$$inline: true
    		});

    	const if_block_creators_1 = [create_if_block_3$2, create_else_block_3$1];
    	const if_blocks_1 = [];

    	function select_block_type_1(ctx, dirty) {
    		if (/*$sourceType*/ ctx[0] === 'svelte') return 0;
    		return 1;
    	}

    	current_block_type_index_1 = select_block_type_1(ctx);
    	if_block2 = if_blocks_1[current_block_type_index_1] = if_block_creators_1[current_block_type_index_1](ctx);

    	formelement4 = new dist$1.FormElement({
    			props: {
    				inputtype: "select",
    				label: "Select",
    				$$slots: { default: [create_default_slot_6$8] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const if_block_creators_2 = [create_if_block_2$3, create_else_block_2$2];
    	const if_blocks_2 = [];

    	function select_block_type_2(ctx, dirty) {
    		if (/*$sourceType*/ ctx[0] === 'svelte') return 0;
    		return 1;
    	}

    	current_block_type_index_2 = select_block_type_2(ctx);
    	if_block3 = if_blocks_2[current_block_type_index_2] = if_block_creators_2[current_block_type_index_2](ctx);

    	formelement5 = new dist$1.FormElement({
    			props: { inputtype: "checkbox", label: "Checkox" },
    			$$inline: true
    		});

    	formelement6 = new dist$1.FormElement({
    			props: {
    				inputtype: "radio",
    				label: "Radio",
    				value: 1
    			},
    			$$inline: true
    		});

    	const if_block_creators_3 = [create_if_block_1$5, create_else_block_1$4];
    	const if_blocks_3 = [];

    	function select_block_type_3(ctx, dirty) {
    		if (/*$sourceType*/ ctx[0] === 'svelte') return 0;
    		return 1;
    	}

    	current_block_type_index_3 = select_block_type_3(ctx);
    	if_block4 = if_blocks_3[current_block_type_index_3] = if_block_creators_3[current_block_type_index_3](ctx);

    	formelement7 = new dist$1.FormElement({
    			props: { inputtype: "textarea", label: "Textarea" },
    			$$inline: true
    		});

    	const if_block_creators_4 = [create_if_block$7, create_else_block$6];
    	const if_blocks_4 = [];

    	function select_block_type_4(ctx, dirty) {
    		if (/*$sourceType*/ ctx[0] === 'svelte') return 0;
    		return 1;
    	}

    	current_block_type_index_4 = select_block_type_4(ctx);
    	if_block5 = if_blocks_4[current_block_type_index_4] = if_block_creators_4[current_block_type_index_4](ctx);

    	const block = {
    		c: function create() {
    			h1 = element("h1");
    			h1.textContent = "Form Element";
    			t1 = space();
    			if (if_block0) if_block0.c();
    			t2 = space();
    			h30 = element("h3");
    			h30.textContent = "Text input";
    			t4 = space();
    			create_component(formelement0.$$.fragment);
    			t5 = space();
    			create_component(formelement1.$$.fragment);
    			t6 = space();
    			create_component(formelement2.$$.fragment);
    			t7 = space();
    			if_block1.c();
    			t8 = space();
    			h31 = element("h3");
    			h31.textContent = "Number input";
    			t10 = space();
    			create_component(formelement3.$$.fragment);
    			t11 = space();
    			if_block2.c();
    			t12 = space();
    			h32 = element("h3");
    			h32.textContent = "Select";
    			t14 = space();
    			create_component(formelement4.$$.fragment);
    			t15 = space();
    			if_block3.c();
    			t16 = space();
    			h33 = element("h3");
    			h33.textContent = "Checkbox and radio";
    			t18 = space();
    			create_component(formelement5.$$.fragment);
    			t19 = space();
    			create_component(formelement6.$$.fragment);
    			t20 = space();
    			if_block4.c();
    			t21 = space();
    			h34 = element("h3");
    			h34.textContent = "Textarea";
    			t23 = space();
    			create_component(formelement7.$$.fragment);
    			t24 = space();
    			if_block5.c();
    			if_block5_anchor = empty();
    			attr_dev(h1, "class", "color--eb");
    			add_location(h1, file$k, 5, 0, 145);
    			add_location(h30, file$k, 13, 0, 326);
    			add_location(h31, file$k, 31, 0, 900);
    			add_location(h32, file$k, 45, 0, 1221);
    			add_location(h33, file$k, 65, 0, 1707);
    			add_location(h34, file$k, 81, 0, 2154);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, h1, anchor);
    			insert_dev(target, t1, anchor);
    			if (if_block0) if_block0.m(target, anchor);
    			insert_dev(target, t2, anchor);
    			insert_dev(target, h30, anchor);
    			insert_dev(target, t4, anchor);
    			mount_component(formelement0, target, anchor);
    			insert_dev(target, t5, anchor);
    			mount_component(formelement1, target, anchor);
    			insert_dev(target, t6, anchor);
    			mount_component(formelement2, target, anchor);
    			insert_dev(target, t7, anchor);
    			if_blocks[current_block_type_index].m(target, anchor);
    			insert_dev(target, t8, anchor);
    			insert_dev(target, h31, anchor);
    			insert_dev(target, t10, anchor);
    			mount_component(formelement3, target, anchor);
    			insert_dev(target, t11, anchor);
    			if_blocks_1[current_block_type_index_1].m(target, anchor);
    			insert_dev(target, t12, anchor);
    			insert_dev(target, h32, anchor);
    			insert_dev(target, t14, anchor);
    			mount_component(formelement4, target, anchor);
    			insert_dev(target, t15, anchor);
    			if_blocks_2[current_block_type_index_2].m(target, anchor);
    			insert_dev(target, t16, anchor);
    			insert_dev(target, h33, anchor);
    			insert_dev(target, t18, anchor);
    			mount_component(formelement5, target, anchor);
    			insert_dev(target, t19, anchor);
    			mount_component(formelement6, target, anchor);
    			insert_dev(target, t20, anchor);
    			if_blocks_3[current_block_type_index_3].m(target, anchor);
    			insert_dev(target, t21, anchor);
    			insert_dev(target, h34, anchor);
    			insert_dev(target, t23, anchor);
    			mount_component(formelement7, target, anchor);
    			insert_dev(target, t24, anchor);
    			if_blocks_4[current_block_type_index_4].m(target, anchor);
    			insert_dev(target, if_block5_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (/*$sourceType*/ ctx[0] === 'svelte') {
    				if (if_block0) {
    					if (dirty & /*$sourceType*/ 1) {
    						transition_in(if_block0, 1);
    					}
    				} else {
    					if_block0 = create_if_block_5(ctx);
    					if_block0.c();
    					transition_in(if_block0, 1);
    					if_block0.m(t2.parentNode, t2);
    				}
    			} else if (if_block0) {
    				group_outros();

    				transition_out(if_block0, 1, 1, () => {
    					if_block0 = null;
    				});

    				check_outros();
    			}

    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(ctx);

    			if (current_block_type_index !== previous_block_index) {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block1 = if_blocks[current_block_type_index];

    				if (!if_block1) {
    					if_block1 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block1.c();
    				}

    				transition_in(if_block1, 1);
    				if_block1.m(t8.parentNode, t8);
    			}

    			let previous_block_index_1 = current_block_type_index_1;
    			current_block_type_index_1 = select_block_type_1(ctx);

    			if (current_block_type_index_1 !== previous_block_index_1) {
    				group_outros();

    				transition_out(if_blocks_1[previous_block_index_1], 1, 1, () => {
    					if_blocks_1[previous_block_index_1] = null;
    				});

    				check_outros();
    				if_block2 = if_blocks_1[current_block_type_index_1];

    				if (!if_block2) {
    					if_block2 = if_blocks_1[current_block_type_index_1] = if_block_creators_1[current_block_type_index_1](ctx);
    					if_block2.c();
    				}

    				transition_in(if_block2, 1);
    				if_block2.m(t12.parentNode, t12);
    			}

    			const formelement4_changes = {};

    			if (dirty & /*$$scope*/ 2) {
    				formelement4_changes.$$scope = { dirty, ctx };
    			}

    			formelement4.$set(formelement4_changes);
    			let previous_block_index_2 = current_block_type_index_2;
    			current_block_type_index_2 = select_block_type_2(ctx);

    			if (current_block_type_index_2 !== previous_block_index_2) {
    				group_outros();

    				transition_out(if_blocks_2[previous_block_index_2], 1, 1, () => {
    					if_blocks_2[previous_block_index_2] = null;
    				});

    				check_outros();
    				if_block3 = if_blocks_2[current_block_type_index_2];

    				if (!if_block3) {
    					if_block3 = if_blocks_2[current_block_type_index_2] = if_block_creators_2[current_block_type_index_2](ctx);
    					if_block3.c();
    				}

    				transition_in(if_block3, 1);
    				if_block3.m(t16.parentNode, t16);
    			}

    			let previous_block_index_3 = current_block_type_index_3;
    			current_block_type_index_3 = select_block_type_3(ctx);

    			if (current_block_type_index_3 !== previous_block_index_3) {
    				group_outros();

    				transition_out(if_blocks_3[previous_block_index_3], 1, 1, () => {
    					if_blocks_3[previous_block_index_3] = null;
    				});

    				check_outros();
    				if_block4 = if_blocks_3[current_block_type_index_3];

    				if (!if_block4) {
    					if_block4 = if_blocks_3[current_block_type_index_3] = if_block_creators_3[current_block_type_index_3](ctx);
    					if_block4.c();
    				}

    				transition_in(if_block4, 1);
    				if_block4.m(t21.parentNode, t21);
    			}

    			let previous_block_index_4 = current_block_type_index_4;
    			current_block_type_index_4 = select_block_type_4(ctx);

    			if (current_block_type_index_4 !== previous_block_index_4) {
    				group_outros();

    				transition_out(if_blocks_4[previous_block_index_4], 1, 1, () => {
    					if_blocks_4[previous_block_index_4] = null;
    				});

    				check_outros();
    				if_block5 = if_blocks_4[current_block_type_index_4];

    				if (!if_block5) {
    					if_block5 = if_blocks_4[current_block_type_index_4] = if_block_creators_4[current_block_type_index_4](ctx);
    					if_block5.c();
    				}

    				transition_in(if_block5, 1);
    				if_block5.m(if_block5_anchor.parentNode, if_block5_anchor);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block0);
    			transition_in(formelement0.$$.fragment, local);
    			transition_in(formelement1.$$.fragment, local);
    			transition_in(formelement2.$$.fragment, local);
    			transition_in(if_block1);
    			transition_in(formelement3.$$.fragment, local);
    			transition_in(if_block2);
    			transition_in(formelement4.$$.fragment, local);
    			transition_in(if_block3);
    			transition_in(formelement5.$$.fragment, local);
    			transition_in(formelement6.$$.fragment, local);
    			transition_in(if_block4);
    			transition_in(formelement7.$$.fragment, local);
    			transition_in(if_block5);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block0);
    			transition_out(formelement0.$$.fragment, local);
    			transition_out(formelement1.$$.fragment, local);
    			transition_out(formelement2.$$.fragment, local);
    			transition_out(if_block1);
    			transition_out(formelement3.$$.fragment, local);
    			transition_out(if_block2);
    			transition_out(formelement4.$$.fragment, local);
    			transition_out(if_block3);
    			transition_out(formelement5.$$.fragment, local);
    			transition_out(formelement6.$$.fragment, local);
    			transition_out(if_block4);
    			transition_out(formelement7.$$.fragment, local);
    			transition_out(if_block5);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(h1);
    			if (detaching) detach_dev(t1);
    			if (if_block0) if_block0.d(detaching);
    			if (detaching) detach_dev(t2);
    			if (detaching) detach_dev(h30);
    			if (detaching) detach_dev(t4);
    			destroy_component(formelement0, detaching);
    			if (detaching) detach_dev(t5);
    			destroy_component(formelement1, detaching);
    			if (detaching) detach_dev(t6);
    			destroy_component(formelement2, detaching);
    			if (detaching) detach_dev(t7);
    			if_blocks[current_block_type_index].d(detaching);
    			if (detaching) detach_dev(t8);
    			if (detaching) detach_dev(h31);
    			if (detaching) detach_dev(t10);
    			destroy_component(formelement3, detaching);
    			if (detaching) detach_dev(t11);
    			if_blocks_1[current_block_type_index_1].d(detaching);
    			if (detaching) detach_dev(t12);
    			if (detaching) detach_dev(h32);
    			if (detaching) detach_dev(t14);
    			destroy_component(formelement4, detaching);
    			if (detaching) detach_dev(t15);
    			if_blocks_2[current_block_type_index_2].d(detaching);
    			if (detaching) detach_dev(t16);
    			if (detaching) detach_dev(h33);
    			if (detaching) detach_dev(t18);
    			destroy_component(formelement5, detaching);
    			if (detaching) detach_dev(t19);
    			destroy_component(formelement6, detaching);
    			if (detaching) detach_dev(t20);
    			if_blocks_3[current_block_type_index_3].d(detaching);
    			if (detaching) detach_dev(t21);
    			if (detaching) detach_dev(h34);
    			if (detaching) detach_dev(t23);
    			destroy_component(formelement7, detaching);
    			if (detaching) detach_dev(t24);
    			if_blocks_4[current_block_type_index_4].d(detaching);
    			if (detaching) detach_dev(if_block5_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$k.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$k($$self, $$props, $$invalidate) {
    	let $sourceType;
    	validate_store(sourceType, 'sourceType');
    	component_subscribe($$self, sourceType, $$value => $$invalidate(0, $sourceType = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('FormElement', slots, []);
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<FormElement> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({
    		Prism: Prism$1,
    		sourceType,
    		FormElement: dist$1.FormElement,
    		$sourceType
    	});

    	return [$sourceType];
    }

    class FormElement_1 extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$k, create_fragment$k, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "FormElement_1",
    			options,
    			id: create_fragment$k.name
    		});
    	}
    }

    var iconnames = {};

    Object.defineProperty(iconnames, "__esModule", { value: true });
    var iconnames_1 = iconnames.iconnames = void 0;
    iconnames_1 = iconnames.iconnames = ['angledown', 'angleleft', 'angleright', 'angleup', 'arrow', 'article', 'at', 'bookmark', 'calendar', 'checkcircle', 'check', 'clock', 'cog', 'creditcardsolid', 'creditcard', 'ebpluscirclesolid', 'ebplus', 'edit', 'entertainment', 'envelope', 'externallink', 'facebook', 'figcaptionpin', 'gallery', 'globe', 'gridsolid', 'grid', 'headphones', 'headset', 'heartsolid', 'heart', 'history', 'infocirclesolid', 'infocircle', 'laptop', 'lightning', 'linkedin', 'lock', 'mail', 'mappinsolid', 'mappin', 'medielogin', 'menubars', 'moneychecksolid', 'newspaper', 'phone', 'playcircle', 'questionmarkcirclesolid', 'questionmarkcircle', 'refresh', 'rsssolid', 'search', 'smartphone', 'speechbubblesolid', 'sport', 'starhalfsolid', 'starhalf', 'starsolid', 'star', 'tablet', 'tagsolid', 'tag', 'tagssolid', 'tags', 'timescircle', 'times', 'toggleoff', 'toggleon', 'twitter', 'usercirclesolid', 'usercircle', 'video', 'warningcirclesolid', 'warningcircle', 'warningtriangle'];

    var graphicnames = {};

    Object.defineProperty(graphicnames, "__esModule", { value: true });
    var graphicnames_1 = graphicnames.graphicnames = void 0;
    graphicnames_1 = graphicnames.graphicnames = ['ekstrabladet'];

    /* docs_src/components/Icon.svelte generated by Svelte v3.42.1 */
    const file$j = "docs_src/components/Icon.svelte";

    function get_each_context$2(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[1] = list[i];
    	return child_ctx;
    }

    function get_each_context_1$1(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[1] = list[i];
    	return child_ctx;
    }

    // (10:0) {#if $sourceType === 'svelte'}
    function create_if_block_3$1(ctx) {
    	let prism;
    	let t0;
    	let table;
    	let thead;
    	let tr0;
    	let th0;
    	let t2;
    	let th1;
    	let t4;
    	let th2;
    	let t6;
    	let th3;
    	let t8;
    	let tbody;
    	let tr1;
    	let td0;
    	let t10;
    	let td1;
    	let t12;
    	let td2;
    	let t13;
    	let td3;
    	let t15;
    	let tr2;
    	let td4;
    	let t16;
    	let badge;
    	let t17;
    	let td5;
    	let t19;
    	let td6;
    	let t20;
    	let td7;
    	let t22;
    	let tr3;
    	let td8;
    	let t24;
    	let td9;
    	let t26;
    	let td10;
    	let t28;
    	let td11;
    	let t30;
    	let tr4;
    	let td12;
    	let t32;
    	let td13;
    	let t34;
    	let td14;
    	let t36;
    	let td15;
    	let t38;
    	let tr5;
    	let td16;
    	let t40;
    	let td17;
    	let t42;
    	let td18;
    	let t43;
    	let td19;
    	let current;

    	prism = new Prism$1({
    			props: {
    				language: "js",
    				$$slots: { default: [create_default_slot_9$3] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	badge = new dist$1.Badge({
    			props: {
    				type: "primary",
    				extension: "small",
    				$$slots: { default: [create_default_slot_8$5] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(prism.$$.fragment);
    			t0 = space();
    			table = element("table");
    			thead = element("thead");
    			tr0 = element("tr");
    			th0 = element("th");
    			th0.textContent = "Prop name";
    			t2 = space();
    			th1 = element("th");
    			th1.textContent = "Type";
    			t4 = space();
    			th2 = element("th");
    			th2.textContent = "Default value";
    			t6 = space();
    			th3 = element("th");
    			th3.textContent = "Description";
    			t8 = space();
    			tbody = element("tbody");
    			tr1 = element("tr");
    			td0 = element("td");
    			td0.textContent = "className";
    			t10 = space();
    			td1 = element("td");
    			td1.textContent = "string";
    			t12 = space();
    			td2 = element("td");
    			t13 = space();
    			td3 = element("td");
    			td3.textContent = "Used to select icon if type is set to 'fa'";
    			t15 = space();
    			tr2 = element("tr");
    			td4 = element("td");
    			t16 = text("name ");
    			create_component(badge.$$.fragment);
    			t17 = space();
    			td5 = element("td");
    			td5.textContent = "IconTypes";
    			t19 = space();
    			td6 = element("td");
    			t20 = space();
    			td7 = element("td");
    			td7.textContent = "Only names listed beneath are valid";
    			t22 = space();
    			tr3 = element("tr");
    			td8 = element("td");
    			td8.textContent = "type";
    			t24 = space();
    			td9 = element("td");
    			td9.textContent = "'svg' | 'fa'";
    			t26 = space();
    			td10 = element("td");
    			td10.textContent = "svg";
    			t28 = space();
    			td11 = element("td");
    			td11.textContent = "Use EB svg icons or FontAwesome icons";
    			t30 = space();
    			tr4 = element("tr");
    			td12 = element("td");
    			td12.textContent = "width";
    			t32 = space();
    			td13 = element("td");
    			td13.textContent = "number";
    			t34 = space();
    			td14 = element("td");
    			td14.textContent = "36";
    			t36 = space();
    			td15 = element("td");
    			td15.textContent = "The widthof the icon in pixels. Only on 'svg' mode";
    			t38 = space();
    			tr5 = element("tr");
    			td16 = element("td");
    			td16.textContent = "style";
    			t40 = space();
    			td17 = element("td");
    			td17.textContent = "string";
    			t42 = space();
    			td18 = element("td");
    			t43 = space();
    			td19 = element("td");
    			td19.textContent = "Custom styling. Only on 'svg' mode";
    			add_location(th0, file$j, 17, 8, 526);
    			add_location(th1, file$j, 18, 8, 553);
    			add_location(th2, file$j, 19, 8, 575);
    			add_location(th3, file$j, 20, 8, 606);
    			add_location(tr0, file$j, 16, 6, 513);
    			add_location(thead, file$j, 15, 4, 499);
    			add_location(td0, file$j, 25, 8, 683);
    			add_location(td1, file$j, 26, 8, 710);
    			add_location(td2, file$j, 27, 8, 734);
    			add_location(td3, file$j, 28, 8, 749);
    			add_location(tr1, file$j, 24, 6, 670);
    			add_location(td4, file$j, 31, 8, 832);
    			add_location(td5, file$j, 32, 8, 911);
    			add_location(td6, file$j, 33, 8, 938);
    			add_location(td7, file$j, 34, 8, 953);
    			add_location(tr2, file$j, 30, 6, 819);
    			add_location(td8, file$j, 37, 8, 1029);
    			add_location(td9, file$j, 38, 8, 1051);
    			add_location(td10, file$j, 39, 8, 1081);
    			add_location(td11, file$j, 40, 8, 1102);
    			add_location(tr3, file$j, 36, 6, 1016);
    			add_location(td12, file$j, 43, 8, 1180);
    			add_location(td13, file$j, 44, 8, 1203);
    			add_location(td14, file$j, 45, 8, 1227);
    			add_location(td15, file$j, 46, 8, 1247);
    			add_location(tr4, file$j, 42, 6, 1167);
    			add_location(td16, file$j, 49, 8, 1338);
    			add_location(td17, file$j, 50, 8, 1361);
    			add_location(td18, file$j, 51, 8, 1385);
    			add_location(td19, file$j, 52, 8, 1400);
    			add_location(tr5, file$j, 48, 6, 1325);
    			add_location(tbody, file$j, 23, 4, 656);
    			attr_dev(table, "class", "table");
    			add_location(table, file$j, 14, 2, 473);
    		},
    		m: function mount(target, anchor) {
    			mount_component(prism, target, anchor);
    			insert_dev(target, t0, anchor);
    			insert_dev(target, table, anchor);
    			append_dev(table, thead);
    			append_dev(thead, tr0);
    			append_dev(tr0, th0);
    			append_dev(tr0, t2);
    			append_dev(tr0, th1);
    			append_dev(tr0, t4);
    			append_dev(tr0, th2);
    			append_dev(tr0, t6);
    			append_dev(tr0, th3);
    			append_dev(table, t8);
    			append_dev(table, tbody);
    			append_dev(tbody, tr1);
    			append_dev(tr1, td0);
    			append_dev(tr1, t10);
    			append_dev(tr1, td1);
    			append_dev(tr1, t12);
    			append_dev(tr1, td2);
    			append_dev(tr1, t13);
    			append_dev(tr1, td3);
    			append_dev(tbody, t15);
    			append_dev(tbody, tr2);
    			append_dev(tr2, td4);
    			append_dev(td4, t16);
    			mount_component(badge, td4, null);
    			append_dev(tr2, t17);
    			append_dev(tr2, td5);
    			append_dev(tr2, t19);
    			append_dev(tr2, td6);
    			append_dev(tr2, t20);
    			append_dev(tr2, td7);
    			append_dev(tbody, t22);
    			append_dev(tbody, tr3);
    			append_dev(tr3, td8);
    			append_dev(tr3, t24);
    			append_dev(tr3, td9);
    			append_dev(tr3, t26);
    			append_dev(tr3, td10);
    			append_dev(tr3, t28);
    			append_dev(tr3, td11);
    			append_dev(tbody, t30);
    			append_dev(tbody, tr4);
    			append_dev(tr4, td12);
    			append_dev(tr4, t32);
    			append_dev(tr4, td13);
    			append_dev(tr4, t34);
    			append_dev(tr4, td14);
    			append_dev(tr4, t36);
    			append_dev(tr4, td15);
    			append_dev(tbody, t38);
    			append_dev(tbody, tr5);
    			append_dev(tr5, td16);
    			append_dev(tr5, t40);
    			append_dev(tr5, td17);
    			append_dev(tr5, t42);
    			append_dev(tr5, td18);
    			append_dev(tr5, t43);
    			append_dev(tr5, td19);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(prism.$$.fragment, local);
    			transition_in(badge.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(prism.$$.fragment, local);
    			transition_out(badge.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(prism, detaching);
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(table);
    			destroy_component(badge);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_3$1.name,
    		type: "if",
    		source: "(10:0) {#if $sourceType === 'svelte'}",
    		ctx
    	});

    	return block;
    }

    // (11:2) <Prism language="js">
    function create_default_slot_9$3(ctx) {
    	let t_value = `import { Icon } from '@ekstra-bladet/designsystem';` + "";
    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_9$3.name,
    		type: "slot",
    		source: "(11:2) <Prism language=\\\"js\\\">",
    		ctx
    	});

    	return block;
    }

    // (32:17) <Badge type="primary" extension="small">
    function create_default_slot_8$5(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("required");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_8$5.name,
    		type: "slot",
    		source: "(32:17) <Badge type=\\\"primary\\\" extension=\\\"small\\\">",
    		ctx
    	});

    	return block;
    }

    // (66:4) <Card className="flex-align--center flex-justify--center margin-s padding-m">
    function create_default_slot_7$5(ctx) {
    	let icon;
    	let t0;
    	let small;
    	let t1_value = /*name*/ ctx[1] + "";
    	let t1;
    	let t2;
    	let current;

    	icon = new dist$1.Icon({
    			props: {
    				name: /*name*/ ctx[1],
    				className: "margin-s",
    				style: "width: 36px; height: 36px;"
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(icon.$$.fragment);
    			t0 = space();
    			small = element("small");
    			t1 = text(t1_value);
    			t2 = space();
    			add_location(small, file$j, 67, 6, 1886);
    		},
    		m: function mount(target, anchor) {
    			mount_component(icon, target, anchor);
    			insert_dev(target, t0, anchor);
    			insert_dev(target, small, anchor);
    			append_dev(small, t1);
    			insert_dev(target, t2, anchor);
    			current = true;
    		},
    		p: noop,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(icon.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(icon.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(icon, detaching);
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(small);
    			if (detaching) detach_dev(t2);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_7$5.name,
    		type: "slot",
    		source: "(66:4) <Card className=\\\"flex-align--center flex-justify--center margin-s padding-m\\\">",
    		ctx
    	});

    	return block;
    }

    // (65:2) {#each iconnames as name}
    function create_each_block_1$1(ctx) {
    	let card;
    	let current;

    	card = new dist$1.Card({
    			props: {
    				className: "flex-align--center flex-justify--center margin-s padding-m",
    				$$slots: { default: [create_default_slot_7$5] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(card.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(card, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const card_changes = {};

    			if (dirty & /*$$scope*/ 64) {
    				card_changes.$$scope = { dirty, ctx };
    			}

    			card.$set(card_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(card.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(card.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(card, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_1$1.name,
    		type: "each",
    		source: "(65:2) {#each iconnames as name}",
    		ctx
    	});

    	return block;
    }

    // (77:0) {:else}
    function create_else_block_2$1(ctx) {
    	let prism;
    	let current;

    	prism = new Prism$1({
    			props: {
    				language: "html",
    				$$slots: { default: [create_default_slot_6$7] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(prism.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(prism, target, anchor);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(prism.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(prism.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(prism, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block_2$1.name,
    		type: "else",
    		source: "(77:0) {:else}",
    		ctx
    	});

    	return block;
    }

    // (73:0) {#if $sourceType === 'svelte'}
    function create_if_block_2$2(ctx) {
    	let prism;
    	let current;

    	prism = new Prism$1({
    			props: {
    				language: "html",
    				$$slots: { default: [create_default_slot_5$8] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(prism.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(prism, target, anchor);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(prism.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(prism.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(prism, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2$2.name,
    		type: "if",
    		source: "(73:0) {#if $sourceType === 'svelte'}",
    		ctx
    	});

    	return block;
    }

    // (78:2) <Prism language="html">
    function create_default_slot_6$7(ctx) {
    	let t_value = `<svg viewBox="0 0 50 50">
  <use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="#icon_name"></use>
</svg>` + "";

    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_6$7.name,
    		type: "slot",
    		source: "(78:2) <Prism language=\\\"html\\\">",
    		ctx
    	});

    	return block;
    }

    // (74:2) <Prism language="html">
    function create_default_slot_5$8(ctx) {
    	let t_value = `<Icon name="icon_name" />` + "";
    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_5$8.name,
    		type: "slot",
    		source: "(74:2) <Prism language=\\\"html\\\">",
    		ctx
    	});

    	return block;
    }

    // (90:4) <Card className="flex-align--center flex-justify--center margin-s padding-m">
    function create_default_slot_4$a(ctx) {
    	let icon;
    	let t0;
    	let small;
    	let t1_value = /*name*/ ctx[1] + "";
    	let t1;
    	let t2;
    	let current;

    	icon = new dist$1.Icon({
    			props: {
    				name: /*name*/ ctx[1],
    				className: "margin-s",
    				style: "width: 36px; height: 36px;"
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(icon.$$.fragment);
    			t0 = space();
    			small = element("small");
    			t1 = text(t1_value);
    			t2 = space();
    			add_location(small, file$j, 91, 6, 2557);
    		},
    		m: function mount(target, anchor) {
    			mount_component(icon, target, anchor);
    			insert_dev(target, t0, anchor);
    			insert_dev(target, small, anchor);
    			append_dev(small, t1);
    			insert_dev(target, t2, anchor);
    			current = true;
    		},
    		p: noop,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(icon.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(icon.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(icon, detaching);
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(small);
    			if (detaching) detach_dev(t2);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_4$a.name,
    		type: "slot",
    		source: "(90:4) <Card className=\\\"flex-align--center flex-justify--center margin-s padding-m\\\">",
    		ctx
    	});

    	return block;
    }

    // (89:2) {#each graphicnames as name}
    function create_each_block$2(ctx) {
    	let card;
    	let current;

    	card = new dist$1.Card({
    			props: {
    				className: "flex-align--center flex-justify--center margin-s padding-m",
    				$$slots: { default: [create_default_slot_4$a] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(card.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(card, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const card_changes = {};

    			if (dirty & /*$$scope*/ 64) {
    				card_changes.$$scope = { dirty, ctx };
    			}

    			card.$set(card_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(card.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(card.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(card, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$2.name,
    		type: "each",
    		source: "(89:2) {#each graphicnames as name}",
    		ctx
    	});

    	return block;
    }

    // (101:0) {:else}
    function create_else_block_1$3(ctx) {
    	let prism;
    	let current;

    	prism = new Prism$1({
    			props: {
    				language: "html",
    				$$slots: { default: [create_default_slot_3$b] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(prism.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(prism, target, anchor);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(prism.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(prism.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(prism, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block_1$3.name,
    		type: "else",
    		source: "(101:0) {:else}",
    		ctx
    	});

    	return block;
    }

    // (97:0) {#if $sourceType === 'svelte'}
    function create_if_block_1$4(ctx) {
    	let prism;
    	let current;

    	prism = new Prism$1({
    			props: {
    				language: "html",
    				$$slots: { default: [create_default_slot_2$f] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(prism.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(prism, target, anchor);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(prism.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(prism.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(prism, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$4.name,
    		type: "if",
    		source: "(97:0) {#if $sourceType === 'svelte'}",
    		ctx
    	});

    	return block;
    }

    // (102:2) <Prism language="html">
    function create_default_slot_3$b(ctx) {
    	let t_value = `<svg viewBox="0 0 50 50">
  <use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="#icon_name"></use>
</svg>` + "";

    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_3$b.name,
    		type: "slot",
    		source: "(102:2) <Prism language=\\\"html\\\">",
    		ctx
    	});

    	return block;
    }

    // (98:2) <Prism language="html">
    function create_default_slot_2$f(ctx) {
    	let t_value = `<Icon name="icon_name" />` + "";
    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_2$f.name,
    		type: "slot",
    		source: "(98:2) <Prism language=\\\"html\\\">",
    		ctx
    	});

    	return block;
    }

    // (116:0) {:else}
    function create_else_block$5(ctx) {
    	let prism;
    	let current;

    	prism = new Prism$1({
    			props: {
    				language: "html",
    				$$slots: { default: [create_default_slot_1$g] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(prism.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(prism, target, anchor);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(prism.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(prism.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(prism, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$5.name,
    		type: "else",
    		source: "(116:0) {:else}",
    		ctx
    	});

    	return block;
    }

    // (112:0) {#if $sourceType === 'svelte'}
    function create_if_block$6(ctx) {
    	let prism;
    	let current;

    	prism = new Prism$1({
    			props: {
    				language: "html",
    				$$slots: { default: [create_default_slot$h] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(prism.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(prism, target, anchor);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(prism.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(prism.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(prism, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$6.name,
    		type: "if",
    		source: "(112:0) {#if $sourceType === 'svelte'}",
    		ctx
    	});

    	return block;
    }

    // (117:2) <Prism language="html">
    function create_default_slot_1$g(ctx) {
    	let t_value = `<i class="fas fa-snowplow"></i>` + "";
    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_1$g.name,
    		type: "slot",
    		source: "(117:2) <Prism language=\\\"html\\\">",
    		ctx
    	});

    	return block;
    }

    // (113:2) <Prism language="html">
    function create_default_slot$h(ctx) {
    	let t_value = `<Icon type="fa" className="fas fa-snowplow" />` + "";
    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$h.name,
    		type: "slot",
    		source: "(113:2) <Prism language=\\\"html\\\">",
    		ctx
    	});

    	return block;
    }

    function create_fragment$j(ctx) {
    	let h1;
    	let t1;
    	let t2;
    	let h30;
    	let t4;
    	let p0;
    	let t6;
    	let div0;
    	let t7;
    	let current_block_type_index;
    	let if_block1;
    	let t8;
    	let h31;
    	let t10;
    	let p1;
    	let t12;
    	let div1;
    	let t13;
    	let current_block_type_index_1;
    	let if_block2;
    	let t14;
    	let h32;
    	let a;
    	let t16;
    	let t17;
    	let icon;
    	let t18;
    	let current_block_type_index_2;
    	let if_block3;
    	let if_block3_anchor;
    	let current;
    	let if_block0 = /*$sourceType*/ ctx[0] === 'svelte' && create_if_block_3$1(ctx);
    	let each_value_1 = iconnames_1;
    	validate_each_argument(each_value_1);
    	let each_blocks_1 = [];

    	for (let i = 0; i < each_value_1.length; i += 1) {
    		each_blocks_1[i] = create_each_block_1$1(get_each_context_1$1(ctx, each_value_1, i));
    	}

    	const out = i => transition_out(each_blocks_1[i], 1, 1, () => {
    		each_blocks_1[i] = null;
    	});

    	const if_block_creators = [create_if_block_2$2, create_else_block_2$1];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (/*$sourceType*/ ctx[0] === 'svelte') return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type(ctx);
    	if_block1 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    	let each_value = graphicnames_1;
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$2(get_each_context$2(ctx, each_value, i));
    	}

    	const out_1 = i => transition_out(each_blocks[i], 1, 1, () => {
    		each_blocks[i] = null;
    	});

    	const if_block_creators_1 = [create_if_block_1$4, create_else_block_1$3];
    	const if_blocks_1 = [];

    	function select_block_type_1(ctx, dirty) {
    		if (/*$sourceType*/ ctx[0] === 'svelte') return 0;
    		return 1;
    	}

    	current_block_type_index_1 = select_block_type_1(ctx);
    	if_block2 = if_blocks_1[current_block_type_index_1] = if_block_creators_1[current_block_type_index_1](ctx);

    	icon = new dist$1.Icon({
    			props: { type: "fa", className: "fas fa-snowplow" },
    			$$inline: true
    		});

    	const if_block_creators_2 = [create_if_block$6, create_else_block$5];
    	const if_blocks_2 = [];

    	function select_block_type_2(ctx, dirty) {
    		if (/*$sourceType*/ ctx[0] === 'svelte') return 0;
    		return 1;
    	}

    	current_block_type_index_2 = select_block_type_2(ctx);
    	if_block3 = if_blocks_2[current_block_type_index_2] = if_block_creators_2[current_block_type_index_2](ctx);

    	const block = {
    		c: function create() {
    			h1 = element("h1");
    			h1.textContent = "Icon library";
    			t1 = space();
    			if (if_block0) if_block0.c();
    			t2 = space();
    			h30 = element("h3");
    			h30.textContent = "Icons";
    			t4 = space();
    			p0 = element("p");
    			p0.textContent = "Icons are simple and dynamic only made with fill. Fill has the value currentColor and makes it possible to add the\n  desired color to the icon.";
    			t6 = space();
    			div0 = element("div");

    			for (let i = 0; i < each_blocks_1.length; i += 1) {
    				each_blocks_1[i].c();
    			}

    			t7 = space();
    			if_block1.c();
    			t8 = space();
    			h31 = element("h3");
    			h31.textContent = "Graphics";
    			t10 = space();
    			p1 = element("p");
    			p1.textContent = "Graphics are capable of containing more layers i.e static colors on stroke and fill.";
    			t12 = space();
    			div1 = element("div");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			t13 = space();
    			if_block2.c();
    			t14 = space();
    			h32 = element("h3");
    			a = element("a");
    			a.textContent = "Font Awesome";
    			t16 = text(" icons");
    			t17 = space();
    			create_component(icon.$$.fragment);
    			t18 = space();
    			if_block3.c();
    			if_block3_anchor = empty();
    			attr_dev(h1, "class", "color--eb");
    			add_location(h1, file$j, 7, 0, 303);
    			add_location(h30, file$j, 58, 0, 1487);
    			add_location(p0, file$j, 59, 0, 1502);
    			attr_dev(div0, "class", "flex flex-wrap--wrap");
    			add_location(div0, file$j, 63, 0, 1657);
    			add_location(h31, file$j, 84, 0, 2214);
    			add_location(p1, file$j, 85, 0, 2232);
    			attr_dev(div1, "class", "flex flex-wrap--wrap");
    			add_location(div1, file$j, 87, 0, 2325);
    			attr_dev(a, "href", "https://fontawesome.com/");
    			attr_dev(a, "target", "_blank");
    			add_location(a, file$j, 108, 4, 2889);
    			add_location(h32, file$j, 108, 0, 2885);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, h1, anchor);
    			insert_dev(target, t1, anchor);
    			if (if_block0) if_block0.m(target, anchor);
    			insert_dev(target, t2, anchor);
    			insert_dev(target, h30, anchor);
    			insert_dev(target, t4, anchor);
    			insert_dev(target, p0, anchor);
    			insert_dev(target, t6, anchor);
    			insert_dev(target, div0, anchor);

    			for (let i = 0; i < each_blocks_1.length; i += 1) {
    				each_blocks_1[i].m(div0, null);
    			}

    			insert_dev(target, t7, anchor);
    			if_blocks[current_block_type_index].m(target, anchor);
    			insert_dev(target, t8, anchor);
    			insert_dev(target, h31, anchor);
    			insert_dev(target, t10, anchor);
    			insert_dev(target, p1, anchor);
    			insert_dev(target, t12, anchor);
    			insert_dev(target, div1, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div1, null);
    			}

    			insert_dev(target, t13, anchor);
    			if_blocks_1[current_block_type_index_1].m(target, anchor);
    			insert_dev(target, t14, anchor);
    			insert_dev(target, h32, anchor);
    			append_dev(h32, a);
    			append_dev(h32, t16);
    			insert_dev(target, t17, anchor);
    			mount_component(icon, target, anchor);
    			insert_dev(target, t18, anchor);
    			if_blocks_2[current_block_type_index_2].m(target, anchor);
    			insert_dev(target, if_block3_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (/*$sourceType*/ ctx[0] === 'svelte') {
    				if (if_block0) {
    					if (dirty & /*$sourceType*/ 1) {
    						transition_in(if_block0, 1);
    					}
    				} else {
    					if_block0 = create_if_block_3$1(ctx);
    					if_block0.c();
    					transition_in(if_block0, 1);
    					if_block0.m(t2.parentNode, t2);
    				}
    			} else if (if_block0) {
    				group_outros();

    				transition_out(if_block0, 1, 1, () => {
    					if_block0 = null;
    				});

    				check_outros();
    			}

    			if (dirty & /*iconnames*/ 0) {
    				each_value_1 = iconnames_1;
    				validate_each_argument(each_value_1);
    				let i;

    				for (i = 0; i < each_value_1.length; i += 1) {
    					const child_ctx = get_each_context_1$1(ctx, each_value_1, i);

    					if (each_blocks_1[i]) {
    						each_blocks_1[i].p(child_ctx, dirty);
    						transition_in(each_blocks_1[i], 1);
    					} else {
    						each_blocks_1[i] = create_each_block_1$1(child_ctx);
    						each_blocks_1[i].c();
    						transition_in(each_blocks_1[i], 1);
    						each_blocks_1[i].m(div0, null);
    					}
    				}

    				group_outros();

    				for (i = each_value_1.length; i < each_blocks_1.length; i += 1) {
    					out(i);
    				}

    				check_outros();
    			}

    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(ctx);

    			if (current_block_type_index !== previous_block_index) {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block1 = if_blocks[current_block_type_index];

    				if (!if_block1) {
    					if_block1 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block1.c();
    				}

    				transition_in(if_block1, 1);
    				if_block1.m(t8.parentNode, t8);
    			}

    			if (dirty & /*graphicnames*/ 0) {
    				each_value = graphicnames_1;
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$2(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    						transition_in(each_blocks[i], 1);
    					} else {
    						each_blocks[i] = create_each_block$2(child_ctx);
    						each_blocks[i].c();
    						transition_in(each_blocks[i], 1);
    						each_blocks[i].m(div1, null);
    					}
    				}

    				group_outros();

    				for (i = each_value.length; i < each_blocks.length; i += 1) {
    					out_1(i);
    				}

    				check_outros();
    			}

    			let previous_block_index_1 = current_block_type_index_1;
    			current_block_type_index_1 = select_block_type_1(ctx);

    			if (current_block_type_index_1 !== previous_block_index_1) {
    				group_outros();

    				transition_out(if_blocks_1[previous_block_index_1], 1, 1, () => {
    					if_blocks_1[previous_block_index_1] = null;
    				});

    				check_outros();
    				if_block2 = if_blocks_1[current_block_type_index_1];

    				if (!if_block2) {
    					if_block2 = if_blocks_1[current_block_type_index_1] = if_block_creators_1[current_block_type_index_1](ctx);
    					if_block2.c();
    				}

    				transition_in(if_block2, 1);
    				if_block2.m(t14.parentNode, t14);
    			}

    			let previous_block_index_2 = current_block_type_index_2;
    			current_block_type_index_2 = select_block_type_2(ctx);

    			if (current_block_type_index_2 !== previous_block_index_2) {
    				group_outros();

    				transition_out(if_blocks_2[previous_block_index_2], 1, 1, () => {
    					if_blocks_2[previous_block_index_2] = null;
    				});

    				check_outros();
    				if_block3 = if_blocks_2[current_block_type_index_2];

    				if (!if_block3) {
    					if_block3 = if_blocks_2[current_block_type_index_2] = if_block_creators_2[current_block_type_index_2](ctx);
    					if_block3.c();
    				}

    				transition_in(if_block3, 1);
    				if_block3.m(if_block3_anchor.parentNode, if_block3_anchor);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block0);

    			for (let i = 0; i < each_value_1.length; i += 1) {
    				transition_in(each_blocks_1[i]);
    			}

    			transition_in(if_block1);

    			for (let i = 0; i < each_value.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			transition_in(if_block2);
    			transition_in(icon.$$.fragment, local);
    			transition_in(if_block3);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block0);
    			each_blocks_1 = each_blocks_1.filter(Boolean);

    			for (let i = 0; i < each_blocks_1.length; i += 1) {
    				transition_out(each_blocks_1[i]);
    			}

    			transition_out(if_block1);
    			each_blocks = each_blocks.filter(Boolean);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			transition_out(if_block2);
    			transition_out(icon.$$.fragment, local);
    			transition_out(if_block3);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(h1);
    			if (detaching) detach_dev(t1);
    			if (if_block0) if_block0.d(detaching);
    			if (detaching) detach_dev(t2);
    			if (detaching) detach_dev(h30);
    			if (detaching) detach_dev(t4);
    			if (detaching) detach_dev(p0);
    			if (detaching) detach_dev(t6);
    			if (detaching) detach_dev(div0);
    			destroy_each(each_blocks_1, detaching);
    			if (detaching) detach_dev(t7);
    			if_blocks[current_block_type_index].d(detaching);
    			if (detaching) detach_dev(t8);
    			if (detaching) detach_dev(h31);
    			if (detaching) detach_dev(t10);
    			if (detaching) detach_dev(p1);
    			if (detaching) detach_dev(t12);
    			if (detaching) detach_dev(div1);
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(t13);
    			if_blocks_1[current_block_type_index_1].d(detaching);
    			if (detaching) detach_dev(t14);
    			if (detaching) detach_dev(h32);
    			if (detaching) detach_dev(t17);
    			destroy_component(icon, detaching);
    			if (detaching) detach_dev(t18);
    			if_blocks_2[current_block_type_index_2].d(detaching);
    			if (detaching) detach_dev(if_block3_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$j.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$j($$self, $$props, $$invalidate) {
    	let $sourceType;
    	validate_store(sourceType, 'sourceType');
    	component_subscribe($$self, sourceType, $$value => $$invalidate(0, $sourceType = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Icon', slots, []);
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Icon> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({
    		Prism: Prism$1,
    		sourceType,
    		Badge: dist$1.Badge,
    		Card: dist$1.Card,
    		Icon: dist$1.Icon,
    		iconnames: iconnames_1,
    		graphicnames: graphicnames_1,
    		$sourceType
    	});

    	return [$sourceType];
    }

    class Icon_1 extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$j, create_fragment$j, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Icon_1",
    			options,
    			id: create_fragment$j.name
    		});
    	}
    }

    /* docs_src/components/HorizontalScroll.svelte generated by Svelte v3.42.1 */
    const file$i = "docs_src/components/HorizontalScroll.svelte";

    function get_each_context$1(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[3] = list[i];
    	return child_ctx;
    }

    // (45:0) {:else}
    function create_else_block_1$2(ctx) {
    	let p;
    	let t1;
    	let prism;
    	let current;

    	prism = new Prism$1({
    			props: {
    				language: "html",
    				$$slots: { default: [create_default_slot_4$9] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			p = element("p");
    			p.textContent = "HorizontalScroll kræver javascript som findes under list-v2 på eb";
    			t1 = space();
    			create_component(prism.$$.fragment);
    			add_location(p, file$i, 45, 2, 1054);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, p, anchor);
    			insert_dev(target, t1, anchor);
    			mount_component(prism, target, anchor);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(prism.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(prism.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(p);
    			if (detaching) detach_dev(t1);
    			destroy_component(prism, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block_1$2.name,
    		type: "else",
    		source: "(45:0) {:else}",
    		ctx
    	});

    	return block;
    }

    // (22:0) {#if $sourceType === 'svelte'}
    function create_if_block_1$3(ctx) {
    	let prism;
    	let t0;
    	let table;
    	let thead;
    	let tr0;
    	let th0;
    	let t2;
    	let th1;
    	let t4;
    	let th2;
    	let t6;
    	let th3;
    	let t8;
    	let tbody;
    	let tr1;
    	let td0;
    	let t10;
    	let td1;
    	let t12;
    	let td2;
    	let t13;
    	let td3;
    	let current;

    	prism = new Prism$1({
    			props: {
    				language: "js",
    				$$slots: { default: [create_default_slot_3$a] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(prism.$$.fragment);
    			t0 = space();
    			table = element("table");
    			thead = element("thead");
    			tr0 = element("tr");
    			th0 = element("th");
    			th0.textContent = "Prop name";
    			t2 = space();
    			th1 = element("th");
    			th1.textContent = "Type";
    			t4 = space();
    			th2 = element("th");
    			th2.textContent = "Default value";
    			t6 = space();
    			th3 = element("th");
    			th3.textContent = "Description";
    			t8 = space();
    			tbody = element("tbody");
    			tr1 = element("tr");
    			td0 = element("td");
    			td0.textContent = "className";
    			t10 = space();
    			td1 = element("td");
    			td1.textContent = "string";
    			t12 = space();
    			td2 = element("td");
    			t13 = space();
    			td3 = element("td");
    			add_location(th0, file$i, 29, 8, 778);
    			add_location(th1, file$i, 30, 8, 805);
    			add_location(th2, file$i, 31, 8, 827);
    			add_location(th3, file$i, 32, 8, 858);
    			add_location(tr0, file$i, 28, 6, 765);
    			add_location(thead, file$i, 27, 4, 751);
    			add_location(td0, file$i, 37, 8, 935);
    			add_location(td1, file$i, 38, 8, 962);
    			add_location(td2, file$i, 39, 8, 986);
    			add_location(td3, file$i, 40, 8, 1001);
    			add_location(tr1, file$i, 36, 6, 922);
    			add_location(tbody, file$i, 35, 4, 908);
    			attr_dev(table, "class", "table");
    			add_location(table, file$i, 26, 2, 725);
    		},
    		m: function mount(target, anchor) {
    			mount_component(prism, target, anchor);
    			insert_dev(target, t0, anchor);
    			insert_dev(target, table, anchor);
    			append_dev(table, thead);
    			append_dev(thead, tr0);
    			append_dev(tr0, th0);
    			append_dev(tr0, t2);
    			append_dev(tr0, th1);
    			append_dev(tr0, t4);
    			append_dev(tr0, th2);
    			append_dev(tr0, t6);
    			append_dev(tr0, th3);
    			append_dev(table, t8);
    			append_dev(table, tbody);
    			append_dev(tbody, tr1);
    			append_dev(tr1, td0);
    			append_dev(tr1, t10);
    			append_dev(tr1, td1);
    			append_dev(tr1, t12);
    			append_dev(tr1, td2);
    			append_dev(tr1, t13);
    			append_dev(tr1, td3);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(prism.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(prism.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(prism, detaching);
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(table);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$3.name,
    		type: "if",
    		source: "(22:0) {#if $sourceType === 'svelte'}",
    		ctx
    	});

    	return block;
    }

    // (47:2) <Prism language="html">
    function create_default_slot_4$9(ctx) {
    	let t_value = `ekstrabladet/ekstrabladet-publication/dist/main/webapp/WEB-INF/jsp/components/list-v2/horizontalscroll.ts` + "";
    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_4$9.name,
    		type: "slot",
    		source: "(47:2) <Prism language=\\\"html\\\">",
    		ctx
    	});

    	return block;
    }

    // (23:2) <Prism language="js">
    function create_default_slot_3$a(ctx) {
    	let t_value = `import { HorizontalScroll } from '@ekstra-bladet/designsystem';` + "";
    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_3$a.name,
    		type: "slot",
    		source: "(23:2) <Prism language=\\\"js\\\">",
    		ctx
    	});

    	return block;
    }

    // (52:2) {#each $articles as article}
    function create_each_block$1(ctx) {
    	let articlecard;
    	let current;
    	const articlecard_spread_levels = [/*article*/ ctx[3], { className: "margin-s" }, { style: "width: 215px;" }];
    	let articlecard_props = {};

    	for (let i = 0; i < articlecard_spread_levels.length; i += 1) {
    		articlecard_props = assign(articlecard_props, articlecard_spread_levels[i]);
    	}

    	articlecard = new dist$1.ArticleCard({ props: articlecard_props, $$inline: true });

    	const block = {
    		c: function create() {
    			create_component(articlecard.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(articlecard, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const articlecard_changes = (dirty & /*$articles*/ 2)
    			? get_spread_update(articlecard_spread_levels, [
    					get_spread_object(/*article*/ ctx[3]),
    					articlecard_spread_levels[1],
    					articlecard_spread_levels[2]
    				])
    			: {};

    			articlecard.$set(articlecard_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(articlecard.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(articlecard.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(articlecard, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$1.name,
    		type: "each",
    		source: "(52:2) {#each $articles as article}",
    		ctx
    	});

    	return block;
    }

    // (51:0) <HorizontalScroll>
    function create_default_slot_2$e(ctx) {
    	let each_1_anchor;
    	let current;
    	let each_value = /*$articles*/ ctx[1];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$1(get_each_context$1(ctx, each_value, i));
    	}

    	const out = i => transition_out(each_blocks[i], 1, 1, () => {
    		each_blocks[i] = null;
    	});

    	const block = {
    		c: function create() {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			each_1_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(target, anchor);
    			}

    			insert_dev(target, each_1_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*$articles*/ 2) {
    				each_value = /*$articles*/ ctx[1];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$1(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    						transition_in(each_blocks[i], 1);
    					} else {
    						each_blocks[i] = create_each_block$1(child_ctx);
    						each_blocks[i].c();
    						transition_in(each_blocks[i], 1);
    						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
    					}
    				}

    				group_outros();

    				for (i = each_value.length; i < each_blocks.length; i += 1) {
    					out(i);
    				}

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;

    			for (let i = 0; i < each_value.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			each_blocks = each_blocks.filter(Boolean);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(each_1_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_2$e.name,
    		type: "slot",
    		source: "(51:0) <HorizontalScroll>",
    		ctx
    	});

    	return block;
    }

    // (63:0) {:else}
    function create_else_block$4(ctx) {
    	let prism;
    	let current;

    	prism = new Prism$1({
    			props: {
    				language: "html",
    				$$slots: { default: [create_default_slot_1$f] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(prism.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(prism, target, anchor);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(prism.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(prism.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(prism, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$4.name,
    		type: "else",
    		source: "(63:0) {:else}",
    		ctx
    	});

    	return block;
    }

    // (57:0) {#if $sourceType === 'svelte'}
    function create_if_block$5(ctx) {
    	let prism;
    	let current;

    	prism = new Prism$1({
    			props: {
    				language: "html",
    				$$slots: { default: [create_default_slot$g] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(prism.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(prism, target, anchor);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(prism.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(prism.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(prism, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$5.name,
    		type: "if",
    		source: "(57:0) {#if $sourceType === 'svelte'}",
    		ctx
    	});

    	return block;
    }

    // (64:2) <Prism language="html">
    function create_default_slot_1$f(ctx) {
    	let t_value = `<div id="example-id" class="horizontal-scroll-container position-relative">
  <button data-horizontallist="button-prev" class="horizontal-scroll-nav">
    <i class="fa fa-chevron-left"></i>
  </button>
  <button data-horizontallist="button-next" class="horizontal-scroll-nav">
    <i class="fa fa-chevron-right"></i>
  </button>
  <div data-horizontallist="itemcontainer" class="horizontal-scroll-items flex">
    ...
  </div>
</div>` + "";

    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_1$f.name,
    		type: "slot",
    		source: "(64:2) <Prism language=\\\"html\\\">",
    		ctx
    	});

    	return block;
    }

    // (58:2) <Prism language="html">
    function create_default_slot$g(ctx) {
    	let t_value = `<HorizontalScroll>
  ...
</HorizontalScroll>` + "";

    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$g.name,
    		type: "slot",
    		source: "(58:2) <Prism language=\\\"html\\\">",
    		ctx
    	});

    	return block;
    }

    function create_fragment$i(ctx) {
    	let h1;
    	let t1;
    	let current_block_type_index;
    	let if_block0;
    	let t2;
    	let horizontalscroll;
    	let t3;
    	let current_block_type_index_1;
    	let if_block1;
    	let if_block1_anchor;
    	let current;
    	const if_block_creators = [create_if_block_1$3, create_else_block_1$2];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (/*$sourceType*/ ctx[0] === 'svelte') return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type(ctx);
    	if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

    	horizontalscroll = new dist$1.HorizontalScroll({
    			props: {
    				$$slots: { default: [create_default_slot_2$e] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const if_block_creators_1 = [create_if_block$5, create_else_block$4];
    	const if_blocks_1 = [];

    	function select_block_type_1(ctx, dirty) {
    		if (/*$sourceType*/ ctx[0] === 'svelte') return 0;
    		return 1;
    	}

    	current_block_type_index_1 = select_block_type_1(ctx);
    	if_block1 = if_blocks_1[current_block_type_index_1] = if_block_creators_1[current_block_type_index_1](ctx);

    	const block = {
    		c: function create() {
    			h1 = element("h1");
    			h1.textContent = "Horizontal Scroll";
    			t1 = space();
    			if_block0.c();
    			t2 = space();
    			create_component(horizontalscroll.$$.fragment);
    			t3 = space();
    			if_block1.c();
    			if_block1_anchor = empty();
    			attr_dev(h1, "class", "color--eb");
    			add_location(h1, file$i, 20, 0, 539);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, h1, anchor);
    			insert_dev(target, t1, anchor);
    			if_blocks[current_block_type_index].m(target, anchor);
    			insert_dev(target, t2, anchor);
    			mount_component(horizontalscroll, target, anchor);
    			insert_dev(target, t3, anchor);
    			if_blocks_1[current_block_type_index_1].m(target, anchor);
    			insert_dev(target, if_block1_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(ctx);

    			if (current_block_type_index !== previous_block_index) {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block0 = if_blocks[current_block_type_index];

    				if (!if_block0) {
    					if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block0.c();
    				}

    				transition_in(if_block0, 1);
    				if_block0.m(t2.parentNode, t2);
    			}

    			const horizontalscroll_changes = {};

    			if (dirty & /*$$scope, $articles*/ 66) {
    				horizontalscroll_changes.$$scope = { dirty, ctx };
    			}

    			horizontalscroll.$set(horizontalscroll_changes);
    			let previous_block_index_1 = current_block_type_index_1;
    			current_block_type_index_1 = select_block_type_1(ctx);

    			if (current_block_type_index_1 !== previous_block_index_1) {
    				group_outros();

    				transition_out(if_blocks_1[previous_block_index_1], 1, 1, () => {
    					if_blocks_1[previous_block_index_1] = null;
    				});

    				check_outros();
    				if_block1 = if_blocks_1[current_block_type_index_1];

    				if (!if_block1) {
    					if_block1 = if_blocks_1[current_block_type_index_1] = if_block_creators_1[current_block_type_index_1](ctx);
    					if_block1.c();
    				}

    				transition_in(if_block1, 1);
    				if_block1.m(if_block1_anchor.parentNode, if_block1_anchor);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block0);
    			transition_in(horizontalscroll.$$.fragment, local);
    			transition_in(if_block1);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block0);
    			transition_out(horizontalscroll.$$.fragment, local);
    			transition_out(if_block1);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(h1);
    			if (detaching) detach_dev(t1);
    			if_blocks[current_block_type_index].d(detaching);
    			if (detaching) detach_dev(t2);
    			destroy_component(horizontalscroll, detaching);
    			if (detaching) detach_dev(t3);
    			if_blocks_1[current_block_type_index_1].d(detaching);
    			if (detaching) detach_dev(if_block1_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$i.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$i($$self, $$props, $$invalidate) {
    	let $sourceType;
    	let $articles;
    	validate_store(sourceType, 'sourceType');
    	component_subscribe($$self, sourceType, $$value => $$invalidate(0, $sourceType = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('HorizontalScroll', slots, []);
    	let articles = writable([]);
    	validate_store(articles, 'articles');
    	component_subscribe($$self, articles, value => $$invalidate(1, $articles = value));

    	articles.update(art => {
    		for (let i = 0; i < 2; i++) {
    			art.push(rdmArticleData(640, 360));
    		}

    		return art;
    	});

    	setInterval(
    		() => {
    			articles.update(art => {
    				art.push(rdmArticleData(640, 360));
    				return art;
    			});
    		},
    		3000
    	);

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<HorizontalScroll> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({
    		Prism: Prism$1,
    		rdmArticleData,
    		sourceType,
    		ArticleCard: dist$1.ArticleCard,
    		HorizontalScroll: dist$1.HorizontalScroll,
    		writable,
    		articles,
    		$sourceType,
    		$articles
    	});

    	$$self.$inject_state = $$props => {
    		if ('articles' in $$props) $$invalidate(2, articles = $$props.articles);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [$sourceType, $articles, articles];
    }

    class HorizontalScroll_1 extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$i, create_fragment$i, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "HorizontalScroll_1",
    			options,
    			id: create_fragment$i.name
    		});
    	}
    }

    /* docs_src/components/Spinner.svelte generated by Svelte v3.42.1 */
    const file$h = "docs_src/components/Spinner.svelte";

    // (8:0) {#if $sourceType === 'svelte'}
    function create_if_block_1$2(ctx) {
    	let prism;
    	let t0;
    	let table;
    	let thead;
    	let tr0;
    	let th0;
    	let t2;
    	let th1;
    	let t4;
    	let th2;
    	let t6;
    	let th3;
    	let t8;
    	let tbody;
    	let tr1;
    	let td0;
    	let t10;
    	let td1;
    	let t12;
    	let td2;
    	let t14;
    	let td3;
    	let current;

    	prism = new Prism$1({
    			props: {
    				language: "js",
    				$$slots: { default: [create_default_slot_2$d] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(prism.$$.fragment);
    			t0 = space();
    			table = element("table");
    			thead = element("thead");
    			tr0 = element("tr");
    			th0 = element("th");
    			th0.textContent = "Prop name";
    			t2 = space();
    			th1 = element("th");
    			th1.textContent = "Type";
    			t4 = space();
    			th2 = element("th");
    			th2.textContent = "Default value";
    			t6 = space();
    			th3 = element("th");
    			th3.textContent = "Description";
    			t8 = space();
    			tbody = element("tbody");
    			tr1 = element("tr");
    			td0 = element("td");
    			td0.textContent = "isLoading";
    			t10 = space();
    			td1 = element("td");
    			td1.textContent = "boolean";
    			t12 = space();
    			td2 = element("td");
    			td2.textContent = "false";
    			t14 = space();
    			td3 = element("td");
    			td3.textContent = "Will only show if set to 'true'";
    			add_location(th0, file$h, 15, 8, 362);
    			add_location(th1, file$h, 16, 8, 389);
    			add_location(th2, file$h, 17, 8, 411);
    			add_location(th3, file$h, 18, 8, 442);
    			add_location(tr0, file$h, 14, 6, 349);
    			add_location(thead, file$h, 13, 4, 335);
    			add_location(td0, file$h, 23, 8, 519);
    			add_location(td1, file$h, 24, 8, 546);
    			add_location(td2, file$h, 25, 8, 571);
    			add_location(td3, file$h, 26, 8, 594);
    			add_location(tr1, file$h, 22, 6, 506);
    			add_location(tbody, file$h, 21, 4, 492);
    			attr_dev(table, "class", "table");
    			add_location(table, file$h, 12, 2, 309);
    		},
    		m: function mount(target, anchor) {
    			mount_component(prism, target, anchor);
    			insert_dev(target, t0, anchor);
    			insert_dev(target, table, anchor);
    			append_dev(table, thead);
    			append_dev(thead, tr0);
    			append_dev(tr0, th0);
    			append_dev(tr0, t2);
    			append_dev(tr0, th1);
    			append_dev(tr0, t4);
    			append_dev(tr0, th2);
    			append_dev(tr0, t6);
    			append_dev(tr0, th3);
    			append_dev(table, t8);
    			append_dev(table, tbody);
    			append_dev(tbody, tr1);
    			append_dev(tr1, td0);
    			append_dev(tr1, t10);
    			append_dev(tr1, td1);
    			append_dev(tr1, t12);
    			append_dev(tr1, td2);
    			append_dev(tr1, t14);
    			append_dev(tr1, td3);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(prism.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(prism.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(prism, detaching);
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(table);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$2.name,
    		type: "if",
    		source: "(8:0) {#if $sourceType === 'svelte'}",
    		ctx
    	});

    	return block;
    }

    // (9:2) <Prism language="js">
    function create_default_slot_2$d(ctx) {
    	let t_value = `import { Spinner } from '@ekstra-bladet/designsystem';` + "";
    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_2$d.name,
    		type: "slot",
    		source: "(9:2) <Prism language=\\\"js\\\">",
    		ctx
    	});

    	return block;
    }

    // (41:0) {:else}
    function create_else_block$3(ctx) {
    	let prism;
    	let current;

    	prism = new Prism$1({
    			props: {
    				language: "html",
    				$$slots: { default: [create_default_slot_1$e] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(prism.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(prism, target, anchor);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(prism.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(prism.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(prism, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$3.name,
    		type: "else",
    		source: "(41:0) {:else}",
    		ctx
    	});

    	return block;
    }

    // (37:0) {#if $sourceType === 'svelte'}
    function create_if_block$4(ctx) {
    	let prism;
    	let current;

    	prism = new Prism$1({
    			props: {
    				language: "html",
    				$$slots: { default: [create_default_slot$f] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(prism.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(prism, target, anchor);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(prism.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(prism.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(prism, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$4.name,
    		type: "if",
    		source: "(37:0) {#if $sourceType === 'svelte'}",
    		ctx
    	});

    	return block;
    }

    // (42:2) <Prism language="html">
    function create_default_slot_1$e(ctx) {
    	let t_value = `<div class="loader flex flex--center">
  <i class="fas fa-circle bounce bounce1" />
  <i class="fas fa-circle bounce bounce2" />
  <i class="fas fa-circle bounce bounce3" />
</div>` + "";

    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_1$e.name,
    		type: "slot",
    		source: "(42:2) <Prism language=\\\"html\\\">",
    		ctx
    	});

    	return block;
    }

    // (38:2) <Prism language="html">
    function create_default_slot$f(ctx) {
    	let t_value = `<Spinner isLoading={true}/>` + "";
    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$f.name,
    		type: "slot",
    		source: "(38:2) <Prism language=\\\"html\\\">",
    		ctx
    	});

    	return block;
    }

    function create_fragment$h(ctx) {
    	let h1;
    	let t1;
    	let t2;
    	let div;
    	let spinner;
    	let t3;
    	let current_block_type_index;
    	let if_block1;
    	let if_block1_anchor;
    	let current;
    	let if_block0 = /*$sourceType*/ ctx[0] === 'svelte' && create_if_block_1$2(ctx);

    	spinner = new dist$1.Spinner({
    			props: { isLoading: true },
    			$$inline: true
    		});

    	const if_block_creators = [create_if_block$4, create_else_block$3];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (/*$sourceType*/ ctx[0] === 'svelte') return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type(ctx);
    	if_block1 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

    	const block = {
    		c: function create() {
    			h1 = element("h1");
    			h1.textContent = "Spinner";
    			t1 = space();
    			if (if_block0) if_block0.c();
    			t2 = space();
    			div = element("div");
    			create_component(spinner.$$.fragment);
    			t3 = space();
    			if_block1.c();
    			if_block1_anchor = empty();
    			attr_dev(h1, "class", "color--eb");
    			add_location(h1, file$h, 5, 0, 141);
    			attr_dev(div, "class", "padding-l");
    			add_location(div, file$h, 32, 0, 678);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, h1, anchor);
    			insert_dev(target, t1, anchor);
    			if (if_block0) if_block0.m(target, anchor);
    			insert_dev(target, t2, anchor);
    			insert_dev(target, div, anchor);
    			mount_component(spinner, div, null);
    			insert_dev(target, t3, anchor);
    			if_blocks[current_block_type_index].m(target, anchor);
    			insert_dev(target, if_block1_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (/*$sourceType*/ ctx[0] === 'svelte') {
    				if (if_block0) {
    					if (dirty & /*$sourceType*/ 1) {
    						transition_in(if_block0, 1);
    					}
    				} else {
    					if_block0 = create_if_block_1$2(ctx);
    					if_block0.c();
    					transition_in(if_block0, 1);
    					if_block0.m(t2.parentNode, t2);
    				}
    			} else if (if_block0) {
    				group_outros();

    				transition_out(if_block0, 1, 1, () => {
    					if_block0 = null;
    				});

    				check_outros();
    			}

    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(ctx);

    			if (current_block_type_index !== previous_block_index) {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block1 = if_blocks[current_block_type_index];

    				if (!if_block1) {
    					if_block1 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block1.c();
    				}

    				transition_in(if_block1, 1);
    				if_block1.m(if_block1_anchor.parentNode, if_block1_anchor);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block0);
    			transition_in(spinner.$$.fragment, local);
    			transition_in(if_block1);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block0);
    			transition_out(spinner.$$.fragment, local);
    			transition_out(if_block1);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(h1);
    			if (detaching) detach_dev(t1);
    			if (if_block0) if_block0.d(detaching);
    			if (detaching) detach_dev(t2);
    			if (detaching) detach_dev(div);
    			destroy_component(spinner);
    			if (detaching) detach_dev(t3);
    			if_blocks[current_block_type_index].d(detaching);
    			if (detaching) detach_dev(if_block1_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$h.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$h($$self, $$props, $$invalidate) {
    	let $sourceType;
    	validate_store(sourceType, 'sourceType');
    	component_subscribe($$self, sourceType, $$value => $$invalidate(0, $sourceType = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Spinner', slots, []);
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Spinner> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({ Prism: Prism$1, sourceType, Spinner: dist$1.Spinner, $sourceType });
    	return [$sourceType];
    }

    class Spinner_1 extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$h, create_fragment$h, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Spinner_1",
    			options,
    			id: create_fragment$h.name
    		});
    	}
    }

    /* docs_src/components/Tabs.svelte generated by Svelte v3.42.1 */
    const file$g = "docs_src/components/Tabs.svelte";

    // (110:0) {:else}
    function create_else_block$2(ctx) {
    	let p;

    	const block = {
    		c: function create() {
    			p = element("p");
    			p.textContent = "Tabs er en ren Svelte component.";
    			add_location(p, file$g, 110, 2, 2587);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, p, anchor);
    		},
    		p: noop,
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(p);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$2.name,
    		type: "else",
    		source: "(110:0) {:else}",
    		ctx
    	});

    	return block;
    }

    // (12:0) {#if $sourceType === 'svelte'}
    function create_if_block$3(ctx) {
    	let prism0;
    	let t0;
    	let h20;
    	let t2;
    	let tabs0;
    	let t3;
    	let prism1;
    	let t4;
    	let h21;
    	let t6;
    	let tabs1;
    	let t7;
    	let prism2;
    	let current;

    	prism0 = new Prism$1({
    			props: {
    				language: "js",
    				$$slots: { default: [create_default_slot_21] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	tabs0 = new dist$1.Tabs({
    			props: {
    				$$slots: { default: [create_default_slot_10$2] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	prism1 = new Prism$1({
    			props: {
    				language: "html",
    				$$slots: { default: [create_default_slot_9$2] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	tabs1 = new dist$1.Tabs({
    			props: {
    				$$slots: { default: [create_default_slot_1$d] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	prism2 = new Prism$1({
    			props: {
    				language: "html",
    				$$slots: { default: [create_default_slot$e] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(prism0.$$.fragment);
    			t0 = space();
    			h20 = element("h2");
    			h20.textContent = "Style: Tabs";
    			t2 = space();
    			create_component(tabs0.$$.fragment);
    			t3 = space();
    			create_component(prism1.$$.fragment);
    			t4 = space();
    			h21 = element("h2");
    			h21.textContent = "Style: Pillnavigation";
    			t6 = space();
    			create_component(tabs1.$$.fragment);
    			t7 = space();
    			create_component(prism2.$$.fragment);
    			attr_dev(h20, "class", "margin-xl--t margin-m--b");
    			add_location(h20, file$g, 16, 2, 495);
    			attr_dev(h21, "class", "margin-xl--t margin-m--b");
    			add_location(h21, file$g, 63, 2, 1446);
    		},
    		m: function mount(target, anchor) {
    			mount_component(prism0, target, anchor);
    			insert_dev(target, t0, anchor);
    			insert_dev(target, h20, anchor);
    			insert_dev(target, t2, anchor);
    			mount_component(tabs0, target, anchor);
    			insert_dev(target, t3, anchor);
    			mount_component(prism1, target, anchor);
    			insert_dev(target, t4, anchor);
    			insert_dev(target, h21, anchor);
    			insert_dev(target, t6, anchor);
    			mount_component(tabs1, target, anchor);
    			insert_dev(target, t7, anchor);
    			mount_component(prism2, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const prism0_changes = {};

    			if (dirty & /*$$scope*/ 128) {
    				prism0_changes.$$scope = { dirty, ctx };
    			}

    			prism0.$set(prism0_changes);
    			const tabs0_changes = {};

    			if (dirty & /*$$scope, content3, content2, content1*/ 135) {
    				tabs0_changes.$$scope = { dirty, ctx };
    			}

    			tabs0.$set(tabs0_changes);
    			const prism1_changes = {};

    			if (dirty & /*$$scope*/ 128) {
    				prism1_changes.$$scope = { dirty, ctx };
    			}

    			prism1.$set(prism1_changes);
    			const tabs1_changes = {};

    			if (dirty & /*$$scope, content3, content2, content1*/ 135) {
    				tabs1_changes.$$scope = { dirty, ctx };
    			}

    			tabs1.$set(tabs1_changes);
    			const prism2_changes = {};

    			if (dirty & /*$$scope*/ 128) {
    				prism2_changes.$$scope = { dirty, ctx };
    			}

    			prism2.$set(prism2_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(prism0.$$.fragment, local);
    			transition_in(tabs0.$$.fragment, local);
    			transition_in(prism1.$$.fragment, local);
    			transition_in(tabs1.$$.fragment, local);
    			transition_in(prism2.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(prism0.$$.fragment, local);
    			transition_out(tabs0.$$.fragment, local);
    			transition_out(prism1.$$.fragment, local);
    			transition_out(tabs1.$$.fragment, local);
    			transition_out(prism2.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(prism0, detaching);
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(h20);
    			if (detaching) detach_dev(t2);
    			destroy_component(tabs0, detaching);
    			if (detaching) detach_dev(t3);
    			destroy_component(prism1, detaching);
    			if (detaching) detach_dev(t4);
    			if (detaching) detach_dev(h21);
    			if (detaching) detach_dev(t6);
    			destroy_component(tabs1, detaching);
    			if (detaching) detach_dev(t7);
    			destroy_component(prism2, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$3.name,
    		type: "if",
    		source: "(12:0) {#if $sourceType === 'svelte'}",
    		ctx
    	});

    	return block;
    }

    // (13:2) <Prism language="js">
    function create_default_slot_21(ctx) {
    	let t_value = `import { Tabs, Tab, TabContent, TabList } from '@ekstra-bladet/designsystem';` + "";
    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_21.name,
    		type: "slot",
    		source: "(13:2) <Prism language=\\\"js\\\">",
    		ctx
    	});

    	return block;
    }

    // (21:6) <Tab>
    function create_default_slot_20(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Tab 1");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_20.name,
    		type: "slot",
    		source: "(21:6) <Tab>",
    		ctx
    	});

    	return block;
    }

    // (22:6) <Tab>
    function create_default_slot_19(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Tab 2 Long Text Bla Bla");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_19.name,
    		type: "slot",
    		source: "(22:6) <Tab>",
    		ctx
    	});

    	return block;
    }

    // (23:6) <Tab>
    function create_default_slot_18(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Tab 3 Long Text Bla Bla");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_18.name,
    		type: "slot",
    		source: "(23:6) <Tab>",
    		ctx
    	});

    	return block;
    }

    // (20:4) <TabList>
    function create_default_slot_17(ctx) {
    	let tab0;
    	let t0;
    	let tab1;
    	let t1;
    	let tab2;
    	let current;

    	tab0 = new dist$1.Tab({
    			props: {
    				$$slots: { default: [create_default_slot_20] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	tab1 = new dist$1.Tab({
    			props: {
    				$$slots: { default: [create_default_slot_19] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	tab2 = new dist$1.Tab({
    			props: {
    				$$slots: { default: [create_default_slot_18] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(tab0.$$.fragment);
    			t0 = space();
    			create_component(tab1.$$.fragment);
    			t1 = space();
    			create_component(tab2.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(tab0, target, anchor);
    			insert_dev(target, t0, anchor);
    			mount_component(tab1, target, anchor);
    			insert_dev(target, t1, anchor);
    			mount_component(tab2, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const tab0_changes = {};

    			if (dirty & /*$$scope*/ 128) {
    				tab0_changes.$$scope = { dirty, ctx };
    			}

    			tab0.$set(tab0_changes);
    			const tab1_changes = {};

    			if (dirty & /*$$scope*/ 128) {
    				tab1_changes.$$scope = { dirty, ctx };
    			}

    			tab1.$set(tab1_changes);
    			const tab2_changes = {};

    			if (dirty & /*$$scope*/ 128) {
    				tab2_changes.$$scope = { dirty, ctx };
    			}

    			tab2.$set(tab2_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(tab0.$$.fragment, local);
    			transition_in(tab1.$$.fragment, local);
    			transition_in(tab2.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(tab0.$$.fragment, local);
    			transition_out(tab1.$$.fragment, local);
    			transition_out(tab2.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(tab0, detaching);
    			if (detaching) detach_dev(t0);
    			destroy_component(tab1, detaching);
    			if (detaching) detach_dev(t1);
    			destroy_component(tab2, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_17.name,
    		type: "slot",
    		source: "(20:4) <TabList>",
    		ctx
    	});

    	return block;
    }

    // (26:6) <Card className="margin-m--t">
    function create_default_slot_16(ctx) {
    	let html_tag;
    	let html_anchor;

    	const block = {
    		c: function create() {
    			html_tag = new HtmlTag();
    			html_anchor = empty();
    			html_tag.a = html_anchor;
    		},
    		m: function mount(target, anchor) {
    			html_tag.m(/*content1*/ ctx[0], target, anchor);
    			insert_dev(target, html_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*content1*/ 1) html_tag.p(/*content1*/ ctx[0]);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(html_anchor);
    			if (detaching) html_tag.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_16.name,
    		type: "slot",
    		source: "(26:6) <Card className=\\\"margin-m--t\\\">",
    		ctx
    	});

    	return block;
    }

    // (27:8) 
    function create_header_slot_5(ctx) {
    	let h2;

    	const block = {
    		c: function create() {
    			h2 = element("h2");
    			h2.textContent = "Content 1";
    			attr_dev(h2, "slot", "header");
    			add_location(h2, file$g, 26, 8, 755);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, h2, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(h2);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_header_slot_5.name,
    		type: "slot",
    		source: "(27:8) ",
    		ctx
    	});

    	return block;
    }

    // (25:4) <TabContent>
    function create_default_slot_15(ctx) {
    	let card;
    	let current;

    	card = new dist$1.Card({
    			props: {
    				className: "margin-m--t",
    				$$slots: {
    					header: [create_header_slot_5],
    					default: [create_default_slot_16]
    				},
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(card.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(card, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const card_changes = {};

    			if (dirty & /*$$scope, content1*/ 129) {
    				card_changes.$$scope = { dirty, ctx };
    			}

    			card.$set(card_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(card.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(card.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(card, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_15.name,
    		type: "slot",
    		source: "(25:4) <TabContent>",
    		ctx
    	});

    	return block;
    }

    // (32:6) <Card className="margin-m--t">
    function create_default_slot_14$1(ctx) {
    	let html_tag;
    	let html_anchor;

    	const block = {
    		c: function create() {
    			html_tag = new HtmlTag();
    			html_anchor = empty();
    			html_tag.a = html_anchor;
    		},
    		m: function mount(target, anchor) {
    			html_tag.m(/*content2*/ ctx[1], target, anchor);
    			insert_dev(target, html_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*content2*/ 2) html_tag.p(/*content2*/ ctx[1]);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(html_anchor);
    			if (detaching) html_tag.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_14$1.name,
    		type: "slot",
    		source: "(32:6) <Card className=\\\"margin-m--t\\\">",
    		ctx
    	});

    	return block;
    }

    // (33:8) 
    function create_header_slot_4(ctx) {
    	let h2;

    	const block = {
    		c: function create() {
    			h2 = element("h2");
    			h2.textContent = "Content 2";
    			attr_dev(h2, "slot", "header");
    			add_location(h2, file$g, 32, 8, 907);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, h2, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(h2);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_header_slot_4.name,
    		type: "slot",
    		source: "(33:8) ",
    		ctx
    	});

    	return block;
    }

    // (31:4) <TabContent>
    function create_default_slot_13$1(ctx) {
    	let card;
    	let current;

    	card = new dist$1.Card({
    			props: {
    				className: "margin-m--t",
    				$$slots: {
    					header: [create_header_slot_4],
    					default: [create_default_slot_14$1]
    				},
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(card.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(card, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const card_changes = {};

    			if (dirty & /*$$scope, content2*/ 130) {
    				card_changes.$$scope = { dirty, ctx };
    			}

    			card.$set(card_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(card.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(card.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(card, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_13$1.name,
    		type: "slot",
    		source: "(31:4) <TabContent>",
    		ctx
    	});

    	return block;
    }

    // (38:6) <Card className="margin-m--t">
    function create_default_slot_12$1(ctx) {
    	let html_tag;
    	let html_anchor;

    	const block = {
    		c: function create() {
    			html_tag = new HtmlTag();
    			html_anchor = empty();
    			html_tag.a = html_anchor;
    		},
    		m: function mount(target, anchor) {
    			html_tag.m(/*content3*/ ctx[2], target, anchor);
    			insert_dev(target, html_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*content3*/ 4) html_tag.p(/*content3*/ ctx[2]);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(html_anchor);
    			if (detaching) html_tag.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_12$1.name,
    		type: "slot",
    		source: "(38:6) <Card className=\\\"margin-m--t\\\">",
    		ctx
    	});

    	return block;
    }

    // (39:8) 
    function create_header_slot_3(ctx) {
    	let h2;

    	const block = {
    		c: function create() {
    			h2 = element("h2");
    			h2.textContent = "Content 3";
    			attr_dev(h2, "slot", "header");
    			add_location(h2, file$g, 38, 8, 1059);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, h2, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(h2);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_header_slot_3.name,
    		type: "slot",
    		source: "(39:8) ",
    		ctx
    	});

    	return block;
    }

    // (37:4) <TabContent>
    function create_default_slot_11$1(ctx) {
    	let card;
    	let current;

    	card = new dist$1.Card({
    			props: {
    				className: "margin-m--t",
    				$$slots: {
    					header: [create_header_slot_3],
    					default: [create_default_slot_12$1]
    				},
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(card.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(card, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const card_changes = {};

    			if (dirty & /*$$scope, content3*/ 132) {
    				card_changes.$$scope = { dirty, ctx };
    			}

    			card.$set(card_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(card.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(card.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(card, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_11$1.name,
    		type: "slot",
    		source: "(37:4) <TabContent>",
    		ctx
    	});

    	return block;
    }

    // (19:2) <Tabs>
    function create_default_slot_10$2(ctx) {
    	let tablist;
    	let t0;
    	let tabcontent0;
    	let t1;
    	let tabcontent1;
    	let t2;
    	let tabcontent2;
    	let current;

    	tablist = new dist$1.TabList({
    			props: {
    				$$slots: { default: [create_default_slot_17] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	tabcontent0 = new dist$1.TabContent({
    			props: {
    				$$slots: { default: [create_default_slot_15] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	tabcontent1 = new dist$1.TabContent({
    			props: {
    				$$slots: { default: [create_default_slot_13$1] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	tabcontent2 = new dist$1.TabContent({
    			props: {
    				$$slots: { default: [create_default_slot_11$1] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(tablist.$$.fragment);
    			t0 = space();
    			create_component(tabcontent0.$$.fragment);
    			t1 = space();
    			create_component(tabcontent1.$$.fragment);
    			t2 = space();
    			create_component(tabcontent2.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(tablist, target, anchor);
    			insert_dev(target, t0, anchor);
    			mount_component(tabcontent0, target, anchor);
    			insert_dev(target, t1, anchor);
    			mount_component(tabcontent1, target, anchor);
    			insert_dev(target, t2, anchor);
    			mount_component(tabcontent2, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const tablist_changes = {};

    			if (dirty & /*$$scope*/ 128) {
    				tablist_changes.$$scope = { dirty, ctx };
    			}

    			tablist.$set(tablist_changes);
    			const tabcontent0_changes = {};

    			if (dirty & /*$$scope, content1*/ 129) {
    				tabcontent0_changes.$$scope = { dirty, ctx };
    			}

    			tabcontent0.$set(tabcontent0_changes);
    			const tabcontent1_changes = {};

    			if (dirty & /*$$scope, content2*/ 130) {
    				tabcontent1_changes.$$scope = { dirty, ctx };
    			}

    			tabcontent1.$set(tabcontent1_changes);
    			const tabcontent2_changes = {};

    			if (dirty & /*$$scope, content3*/ 132) {
    				tabcontent2_changes.$$scope = { dirty, ctx };
    			}

    			tabcontent2.$set(tabcontent2_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(tablist.$$.fragment, local);
    			transition_in(tabcontent0.$$.fragment, local);
    			transition_in(tabcontent1.$$.fragment, local);
    			transition_in(tabcontent2.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(tablist.$$.fragment, local);
    			transition_out(tabcontent0.$$.fragment, local);
    			transition_out(tabcontent1.$$.fragment, local);
    			transition_out(tabcontent2.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(tablist, detaching);
    			if (detaching) detach_dev(t0);
    			destroy_component(tabcontent0, detaching);
    			if (detaching) detach_dev(t1);
    			destroy_component(tabcontent1, detaching);
    			if (detaching) detach_dev(t2);
    			destroy_component(tabcontent2, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_10$2.name,
    		type: "slot",
    		source: "(19:2) <Tabs>",
    		ctx
    	});

    	return block;
    }

    // (45:2) <Prism language="html">
    function create_default_slot_9$2(ctx) {
    	let t_value = `<Tabs>
  <TabList>
    <Tab>Tab 1</Tab>
    <Tab>Tab 2</Tab>
    <Tab>Tab 3</Tab>
  </TabList>
  <TabContent>
    Content 1
  </TabContent>
  <TabContent>
    Content 2
  </TabContent>
  <TabContent>
    Content 3
  </TabContent>
</Tabs>` + "";

    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_9$2.name,
    		type: "slot",
    		source: "(45:2) <Prism language=\\\"html\\\">",
    		ctx
    	});

    	return block;
    }

    // (68:6) <Tab>
    function create_default_slot_8$4(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Tab 1");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_8$4.name,
    		type: "slot",
    		source: "(68:6) <Tab>",
    		ctx
    	});

    	return block;
    }

    // (69:6) <Tab>
    function create_default_slot_7$4(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Tab 2");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_7$4.name,
    		type: "slot",
    		source: "(69:6) <Tab>",
    		ctx
    	});

    	return block;
    }

    // (70:6) <Tab>
    function create_default_slot_6$6(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Tab 3");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_6$6.name,
    		type: "slot",
    		source: "(70:6) <Tab>",
    		ctx
    	});

    	return block;
    }

    // (67:4) <TabList type="pillnavigation">
    function create_default_slot_5$7(ctx) {
    	let tab0;
    	let t0;
    	let tab1;
    	let t1;
    	let tab2;
    	let current;

    	tab0 = new dist$1.Tab({
    			props: {
    				$$slots: { default: [create_default_slot_8$4] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	tab1 = new dist$1.Tab({
    			props: {
    				$$slots: { default: [create_default_slot_7$4] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	tab2 = new dist$1.Tab({
    			props: {
    				$$slots: { default: [create_default_slot_6$6] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(tab0.$$.fragment);
    			t0 = space();
    			create_component(tab1.$$.fragment);
    			t1 = space();
    			create_component(tab2.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(tab0, target, anchor);
    			insert_dev(target, t0, anchor);
    			mount_component(tab1, target, anchor);
    			insert_dev(target, t1, anchor);
    			mount_component(tab2, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const tab0_changes = {};

    			if (dirty & /*$$scope*/ 128) {
    				tab0_changes.$$scope = { dirty, ctx };
    			}

    			tab0.$set(tab0_changes);
    			const tab1_changes = {};

    			if (dirty & /*$$scope*/ 128) {
    				tab1_changes.$$scope = { dirty, ctx };
    			}

    			tab1.$set(tab1_changes);
    			const tab2_changes = {};

    			if (dirty & /*$$scope*/ 128) {
    				tab2_changes.$$scope = { dirty, ctx };
    			}

    			tab2.$set(tab2_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(tab0.$$.fragment, local);
    			transition_in(tab1.$$.fragment, local);
    			transition_in(tab2.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(tab0.$$.fragment, local);
    			transition_out(tab1.$$.fragment, local);
    			transition_out(tab2.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(tab0, detaching);
    			if (detaching) detach_dev(t0);
    			destroy_component(tab1, detaching);
    			if (detaching) detach_dev(t1);
    			destroy_component(tab2, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_5$7.name,
    		type: "slot",
    		source: "(67:4) <TabList type=\\\"pillnavigation\\\">",
    		ctx
    	});

    	return block;
    }

    // (74:8) 
    function create_header_slot_2(ctx) {
    	let h2;

    	const block = {
    		c: function create() {
    			h2 = element("h2");
    			h2.textContent = "Content 1";
    			attr_dev(h2, "slot", "header");
    			add_location(h2, file$g, 73, 8, 1702);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, h2, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(h2);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_header_slot_2.name,
    		type: "slot",
    		source: "(74:8) ",
    		ctx
    	});

    	return block;
    }

    // (75:8) 
    function create_content_slot_2$1(ctx) {
    	let div;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div = element("div");
    			attr_dev(div, "slot", "content");
    			attr_dev(div, "contenteditable", "true");
    			if (/*content1*/ ctx[0] === void 0) add_render_callback(() => /*div_input_handler*/ ctx[4].call(div));
    			add_location(div, file$g, 74, 8, 1743);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			if (/*content1*/ ctx[0] !== void 0) {
    				div.innerHTML = /*content1*/ ctx[0];
    			}

    			if (!mounted) {
    				dispose = listen_dev(div, "input", /*div_input_handler*/ ctx[4]);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*content1*/ 1 && /*content1*/ ctx[0] !== div.innerHTML) {
    				div.innerHTML = /*content1*/ ctx[0];
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_content_slot_2$1.name,
    		type: "slot",
    		source: "(75:8) ",
    		ctx
    	});

    	return block;
    }

    // (72:4) <TabContent>
    function create_default_slot_4$8(ctx) {
    	let card;
    	let current;

    	card = new dist$1.Card({
    			props: {
    				className: "margin-m--t",
    				$$slots: {
    					content: [create_content_slot_2$1],
    					header: [create_header_slot_2]
    				},
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(card.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(card, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const card_changes = {};

    			if (dirty & /*$$scope, content1*/ 129) {
    				card_changes.$$scope = { dirty, ctx };
    			}

    			card.$set(card_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(card.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(card.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(card, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_4$8.name,
    		type: "slot",
    		source: "(72:4) <TabContent>",
    		ctx
    	});

    	return block;
    }

    // (80:8) 
    function create_header_slot_1(ctx) {
    	let h2;

    	const block = {
    		c: function create() {
    			h2 = element("h2");
    			h2.textContent = "Content 2";
    			attr_dev(h2, "slot", "header");
    			add_location(h2, file$g, 79, 8, 1909);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, h2, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(h2);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_header_slot_1.name,
    		type: "slot",
    		source: "(80:8) ",
    		ctx
    	});

    	return block;
    }

    // (81:8) 
    function create_content_slot_1$2(ctx) {
    	let div;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div = element("div");
    			attr_dev(div, "slot", "content");
    			attr_dev(div, "contenteditable", "true");
    			if (/*content2*/ ctx[1] === void 0) add_render_callback(() => /*div_input_handler_1*/ ctx[5].call(div));
    			add_location(div, file$g, 80, 8, 1950);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			if (/*content2*/ ctx[1] !== void 0) {
    				div.innerHTML = /*content2*/ ctx[1];
    			}

    			if (!mounted) {
    				dispose = listen_dev(div, "input", /*div_input_handler_1*/ ctx[5]);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*content2*/ 2 && /*content2*/ ctx[1] !== div.innerHTML) {
    				div.innerHTML = /*content2*/ ctx[1];
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_content_slot_1$2.name,
    		type: "slot",
    		source: "(81:8) ",
    		ctx
    	});

    	return block;
    }

    // (78:4) <TabContent>
    function create_default_slot_3$9(ctx) {
    	let card;
    	let current;

    	card = new dist$1.Card({
    			props: {
    				className: "margin-m--t",
    				$$slots: {
    					content: [create_content_slot_1$2],
    					header: [create_header_slot_1]
    				},
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(card.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(card, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const card_changes = {};

    			if (dirty & /*$$scope, content2*/ 130) {
    				card_changes.$$scope = { dirty, ctx };
    			}

    			card.$set(card_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(card.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(card.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(card, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_3$9.name,
    		type: "slot",
    		source: "(78:4) <TabContent>",
    		ctx
    	});

    	return block;
    }

    // (86:8) 
    function create_header_slot(ctx) {
    	let h2;

    	const block = {
    		c: function create() {
    			h2 = element("h2");
    			h2.textContent = "Content 3";
    			attr_dev(h2, "slot", "header");
    			add_location(h2, file$g, 85, 8, 2116);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, h2, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(h2);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_header_slot.name,
    		type: "slot",
    		source: "(86:8) ",
    		ctx
    	});

    	return block;
    }

    // (87:8) 
    function create_content_slot$4(ctx) {
    	let div;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div = element("div");
    			attr_dev(div, "slot", "content");
    			attr_dev(div, "contenteditable", "true");
    			if (/*content3*/ ctx[2] === void 0) add_render_callback(() => /*div_input_handler_2*/ ctx[6].call(div));
    			add_location(div, file$g, 86, 8, 2157);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			if (/*content3*/ ctx[2] !== void 0) {
    				div.innerHTML = /*content3*/ ctx[2];
    			}

    			if (!mounted) {
    				dispose = listen_dev(div, "input", /*div_input_handler_2*/ ctx[6]);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*content3*/ 4 && /*content3*/ ctx[2] !== div.innerHTML) {
    				div.innerHTML = /*content3*/ ctx[2];
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_content_slot$4.name,
    		type: "slot",
    		source: "(87:8) ",
    		ctx
    	});

    	return block;
    }

    // (84:4) <TabContent>
    function create_default_slot_2$c(ctx) {
    	let card;
    	let current;

    	card = new dist$1.Card({
    			props: {
    				className: "margin-m--t",
    				$$slots: {
    					content: [create_content_slot$4],
    					header: [create_header_slot]
    				},
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(card.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(card, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const card_changes = {};

    			if (dirty & /*$$scope, content3*/ 132) {
    				card_changes.$$scope = { dirty, ctx };
    			}

    			card.$set(card_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(card.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(card.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(card, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_2$c.name,
    		type: "slot",
    		source: "(84:4) <TabContent>",
    		ctx
    	});

    	return block;
    }

    // (66:2) <Tabs>
    function create_default_slot_1$d(ctx) {
    	let tablist;
    	let t0;
    	let tabcontent0;
    	let t1;
    	let tabcontent1;
    	let t2;
    	let tabcontent2;
    	let current;

    	tablist = new dist$1.TabList({
    			props: {
    				type: "pillnavigation",
    				$$slots: { default: [create_default_slot_5$7] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	tabcontent0 = new dist$1.TabContent({
    			props: {
    				$$slots: { default: [create_default_slot_4$8] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	tabcontent1 = new dist$1.TabContent({
    			props: {
    				$$slots: { default: [create_default_slot_3$9] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	tabcontent2 = new dist$1.TabContent({
    			props: {
    				$$slots: { default: [create_default_slot_2$c] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(tablist.$$.fragment);
    			t0 = space();
    			create_component(tabcontent0.$$.fragment);
    			t1 = space();
    			create_component(tabcontent1.$$.fragment);
    			t2 = space();
    			create_component(tabcontent2.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(tablist, target, anchor);
    			insert_dev(target, t0, anchor);
    			mount_component(tabcontent0, target, anchor);
    			insert_dev(target, t1, anchor);
    			mount_component(tabcontent1, target, anchor);
    			insert_dev(target, t2, anchor);
    			mount_component(tabcontent2, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const tablist_changes = {};

    			if (dirty & /*$$scope*/ 128) {
    				tablist_changes.$$scope = { dirty, ctx };
    			}

    			tablist.$set(tablist_changes);
    			const tabcontent0_changes = {};

    			if (dirty & /*$$scope, content1*/ 129) {
    				tabcontent0_changes.$$scope = { dirty, ctx };
    			}

    			tabcontent0.$set(tabcontent0_changes);
    			const tabcontent1_changes = {};

    			if (dirty & /*$$scope, content2*/ 130) {
    				tabcontent1_changes.$$scope = { dirty, ctx };
    			}

    			tabcontent1.$set(tabcontent1_changes);
    			const tabcontent2_changes = {};

    			if (dirty & /*$$scope, content3*/ 132) {
    				tabcontent2_changes.$$scope = { dirty, ctx };
    			}

    			tabcontent2.$set(tabcontent2_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(tablist.$$.fragment, local);
    			transition_in(tabcontent0.$$.fragment, local);
    			transition_in(tabcontent1.$$.fragment, local);
    			transition_in(tabcontent2.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(tablist.$$.fragment, local);
    			transition_out(tabcontent0.$$.fragment, local);
    			transition_out(tabcontent1.$$.fragment, local);
    			transition_out(tabcontent2.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(tablist, detaching);
    			if (detaching) detach_dev(t0);
    			destroy_component(tabcontent0, detaching);
    			if (detaching) detach_dev(t1);
    			destroy_component(tabcontent1, detaching);
    			if (detaching) detach_dev(t2);
    			destroy_component(tabcontent2, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_1$d.name,
    		type: "slot",
    		source: "(66:2) <Tabs>",
    		ctx
    	});

    	return block;
    }

    // (92:2) <Prism language="html">
    function create_default_slot$e(ctx) {
    	let t_value = `<Tabs>
  <TabList type="pillnavigation">
    <Tab>Tab 1</Tab>
    <Tab>Tab 2</Tab>
    <Tab>Tab 3</Tab>
  </TabList>
  <TabContent>
    Content 1
  </TabContent>
  <TabContent>
    Content 2
  </TabContent>
  <TabContent>
    Content 3
  </TabContent>
</Tabs>` + "";

    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$e.name,
    		type: "slot",
    		source: "(92:2) <Prism language=\\\"html\\\">",
    		ctx
    	});

    	return block;
    }

    function create_fragment$g(ctx) {
    	let h1;
    	let t1;
    	let current_block_type_index;
    	let if_block;
    	let if_block_anchor;
    	let current;
    	const if_block_creators = [create_if_block$3, create_else_block$2];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (/*$sourceType*/ ctx[3] === 'svelte') return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type(ctx);
    	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

    	const block = {
    		c: function create() {
    			h1 = element("h1");
    			h1.textContent = "Tabs";
    			t1 = space();
    			if_block.c();
    			if_block_anchor = empty();
    			attr_dev(h1, "class", "color--eb");
    			add_location(h1, file$g, 9, 0, 307);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, h1, anchor);
    			insert_dev(target, t1, anchor);
    			if_blocks[current_block_type_index].m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if_blocks[current_block_type_index].p(ctx, dirty);
    			} else {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block = if_blocks[current_block_type_index];

    				if (!if_block) {
    					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block.c();
    				} else {
    					if_block.p(ctx, dirty);
    				}

    				transition_in(if_block, 1);
    				if_block.m(if_block_anchor.parentNode, if_block_anchor);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(h1);
    			if (detaching) detach_dev(t1);
    			if_blocks[current_block_type_index].d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$g.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$g($$self, $$props, $$invalidate) {
    	let $sourceType;
    	validate_store(sourceType, 'sourceType');
    	component_subscribe($$self, sourceType, $$value => $$invalidate(3, $sourceType = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Tabs', slots, []);
    	let content1 = rdmParagraphs();
    	let content2 = rdmParagraphs();
    	let content3 = rdmParagraphs();
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Tabs> was created with unknown prop '${key}'`);
    	});

    	function div_input_handler() {
    		content1 = this.innerHTML;
    		$$invalidate(0, content1);
    	}

    	function div_input_handler_1() {
    		content2 = this.innerHTML;
    		$$invalidate(1, content2);
    	}

    	function div_input_handler_2() {
    		content3 = this.innerHTML;
    		$$invalidate(2, content3);
    	}

    	$$self.$capture_state = () => ({
    		Prism: Prism$1,
    		rdmParagraphs,
    		sourceType,
    		Card: dist$1.Card,
    		Tabs: dist$1.Tabs,
    		Tab: dist$1.Tab,
    		TabContent: dist$1.TabContent,
    		TabList: dist$1.TabList,
    		content1,
    		content2,
    		content3,
    		$sourceType
    	});

    	$$self.$inject_state = $$props => {
    		if ('content1' in $$props) $$invalidate(0, content1 = $$props.content1);
    		if ('content2' in $$props) $$invalidate(1, content2 = $$props.content2);
    		if ('content3' in $$props) $$invalidate(2, content3 = $$props.content3);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		content1,
    		content2,
    		content3,
    		$sourceType,
    		div_input_handler,
    		div_input_handler_1,
    		div_input_handler_2
    	];
    }

    class Tabs_1 extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$g, create_fragment$g, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Tabs_1",
    			options,
    			id: create_fragment$g.name
    		});
    	}
    }

    /* docs_src/components/Toggler.svelte generated by Svelte v3.42.1 */
    const file$f = "docs_src/components/Toggler.svelte";
    const get_default_slot_changes_7 = dirty => ({});
    const get_default_slot_context_7 = ctx => ({ slot: "on" });
    const get_default_slot_changes_6 = dirty => ({});
    const get_default_slot_context_6 = ctx => ({ slot: "off" });
    const get_default_slot_changes_5 = dirty => ({});
    const get_default_slot_context_5 = ctx => ({ slot: "on" });
    const get_default_slot_changes_4 = dirty => ({});
    const get_default_slot_context_4 = ctx => ({ slot: "off" });
    const get_default_slot_changes_3 = dirty => ({});
    const get_default_slot_context_3 = ctx => ({ slot: "on" });
    const get_default_slot_changes_2 = dirty => ({});
    const get_default_slot_context_2 = ctx => ({ slot: "off" });
    const get_default_slot_changes_1 = dirty => ({});
    const get_default_slot_context_1 = ctx => ({ slot: "on" });
    const get_default_slot_changes = dirty => ({});
    const get_default_slot_context = ctx => ({ slot: "off" });

    // (8:0) {#if $sourceType === 'svelte'}
    function create_if_block_4(ctx) {
    	let prism;
    	let t0;
    	let table;
    	let thead;
    	let tr0;
    	let th0;
    	let t2;
    	let th1;
    	let t4;
    	let th2;
    	let t6;
    	let th3;
    	let t8;
    	let tbody;
    	let tr1;
    	let td0;
    	let t10;
    	let td1;
    	let t12;
    	let td2;
    	let t13;
    	let td3;
    	let t14;
    	let tr2;
    	let td4;
    	let t16;
    	let td5;
    	let t18;
    	let td6;
    	let t20;
    	let td7;
    	let t22;
    	let tr3;
    	let td8;
    	let t24;
    	let td9;
    	let t26;
    	let td10;
    	let t28;
    	let td11;
    	let current;

    	prism = new Prism$1({
    			props: {
    				language: "js",
    				$$slots: { default: [create_default_slot_8$3] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(prism.$$.fragment);
    			t0 = space();
    			table = element("table");
    			thead = element("thead");
    			tr0 = element("tr");
    			th0 = element("th");
    			th0.textContent = "Prop name";
    			t2 = space();
    			th1 = element("th");
    			th1.textContent = "Type";
    			t4 = space();
    			th2 = element("th");
    			th2.textContent = "Default value";
    			t6 = space();
    			th3 = element("th");
    			th3.textContent = "Description";
    			t8 = space();
    			tbody = element("tbody");
    			tr1 = element("tr");
    			td0 = element("td");
    			td0.textContent = "className";
    			t10 = space();
    			td1 = element("td");
    			td1.textContent = "string";
    			t12 = space();
    			td2 = element("td");
    			t13 = space();
    			td3 = element("td");
    			t14 = space();
    			tr2 = element("tr");
    			td4 = element("td");
    			td4.textContent = "defaultState";
    			t16 = space();
    			td5 = element("td");
    			td5.textContent = "boolean";
    			t18 = space();
    			td6 = element("td");
    			td6.textContent = "true";
    			t20 = space();
    			td7 = element("td");
    			td7.textContent = "Should the toggler be on or of on mount";
    			t22 = space();
    			tr3 = element("tr");
    			td8 = element("td");
    			td8.textContent = "isSwitch";
    			t24 = space();
    			td9 = element("td");
    			td9.textContent = "boolean";
    			t26 = space();
    			td10 = element("td");
    			td10.textContent = "false";
    			t28 = space();
    			td11 = element("td");
    			td11.textContent = "Convents into a swicth, see example further down";
    			add_location(th0, file$f, 15, 8, 368);
    			add_location(th1, file$f, 16, 8, 395);
    			add_location(th2, file$f, 17, 8, 417);
    			add_location(th3, file$f, 18, 8, 448);
    			add_location(tr0, file$f, 14, 6, 355);
    			add_location(thead, file$f, 13, 4, 341);
    			add_location(td0, file$f, 23, 8, 525);
    			add_location(td1, file$f, 24, 8, 552);
    			add_location(td2, file$f, 25, 8, 576);
    			add_location(td3, file$f, 26, 8, 591);
    			add_location(tr1, file$f, 22, 6, 512);
    			add_location(td4, file$f, 29, 8, 629);
    			add_location(td5, file$f, 30, 8, 659);
    			add_location(td6, file$f, 31, 8, 684);
    			add_location(td7, file$f, 32, 8, 706);
    			add_location(tr2, file$f, 28, 6, 616);
    			add_location(td8, file$f, 35, 8, 786);
    			add_location(td9, file$f, 36, 8, 812);
    			add_location(td10, file$f, 37, 8, 837);
    			add_location(td11, file$f, 38, 8, 860);
    			add_location(tr3, file$f, 34, 6, 773);
    			add_location(tbody, file$f, 21, 4, 498);
    			attr_dev(table, "class", "table");
    			add_location(table, file$f, 12, 2, 315);
    		},
    		m: function mount(target, anchor) {
    			mount_component(prism, target, anchor);
    			insert_dev(target, t0, anchor);
    			insert_dev(target, table, anchor);
    			append_dev(table, thead);
    			append_dev(thead, tr0);
    			append_dev(tr0, th0);
    			append_dev(tr0, t2);
    			append_dev(tr0, th1);
    			append_dev(tr0, t4);
    			append_dev(tr0, th2);
    			append_dev(tr0, t6);
    			append_dev(tr0, th3);
    			append_dev(table, t8);
    			append_dev(table, tbody);
    			append_dev(tbody, tr1);
    			append_dev(tr1, td0);
    			append_dev(tr1, t10);
    			append_dev(tr1, td1);
    			append_dev(tr1, t12);
    			append_dev(tr1, td2);
    			append_dev(tr1, t13);
    			append_dev(tr1, td3);
    			append_dev(tbody, t14);
    			append_dev(tbody, tr2);
    			append_dev(tr2, td4);
    			append_dev(tr2, t16);
    			append_dev(tr2, td5);
    			append_dev(tr2, t18);
    			append_dev(tr2, td6);
    			append_dev(tr2, t20);
    			append_dev(tr2, td7);
    			append_dev(tbody, t22);
    			append_dev(tbody, tr3);
    			append_dev(tr3, td8);
    			append_dev(tr3, t24);
    			append_dev(tr3, td9);
    			append_dev(tr3, t26);
    			append_dev(tr3, td10);
    			append_dev(tr3, t28);
    			append_dev(tr3, td11);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(prism.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(prism.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(prism, detaching);
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(table);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_4.name,
    		type: "if",
    		source: "(8:0) {#if $sourceType === 'svelte'}",
    		ctx
    	});

    	return block;
    }

    // (9:2) <Prism language="js">
    function create_default_slot_8$3(ctx) {
    	let t_value = `import { Toggler } from '@ekstra-bladet/designsystem';` + "";
    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_8$3.name,
    		type: "slot",
    		source: "(9:2) <Prism language=\\\"js\\\">",
    		ctx
    	});

    	return block;
    }

    // (48:18) on
    function fallback_block_7(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("on");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: fallback_block_7.name,
    		type: "fallback",
    		source: "(48:18) on",
    		ctx
    	});

    	return block;
    }

    // (48:2) 
    function create_on_slot_3(ctx) {
    	let current;
    	const default_slot_template = /*#slots*/ ctx[1].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[2], get_default_slot_context_1);
    	const default_slot_or_fallback = default_slot || fallback_block_7(ctx);

    	const block = {
    		c: function create() {
    			if (default_slot_or_fallback) default_slot_or_fallback.c();
    		},
    		m: function mount(target, anchor) {
    			if (default_slot_or_fallback) {
    				default_slot_or_fallback.m(target, anchor);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 4)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[2],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[2])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[2], dirty, get_default_slot_changes_1),
    						get_default_slot_context_1
    					);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot_or_fallback, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot_or_fallback, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (default_slot_or_fallback) default_slot_or_fallback.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_on_slot_3.name,
    		type: "slot",
    		source: "(48:2) ",
    		ctx
    	});

    	return block;
    }

    // (49:19) off
    function fallback_block_6(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("off");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: fallback_block_6.name,
    		type: "fallback",
    		source: "(49:19) off",
    		ctx
    	});

    	return block;
    }

    // (49:2) 
    function create_off_slot_3(ctx) {
    	let current;
    	const default_slot_template = /*#slots*/ ctx[1].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[2], get_default_slot_context);
    	const default_slot_or_fallback = default_slot || fallback_block_6(ctx);

    	const block = {
    		c: function create() {
    			if (default_slot_or_fallback) default_slot_or_fallback.c();
    		},
    		m: function mount(target, anchor) {
    			if (default_slot_or_fallback) {
    				default_slot_or_fallback.m(target, anchor);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 4)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[2],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[2])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[2], dirty, get_default_slot_changes),
    						get_default_slot_context
    					);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot_or_fallback, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot_or_fallback, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (default_slot_or_fallback) default_slot_or_fallback.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_off_slot_3.name,
    		type: "slot",
    		source: "(49:2) ",
    		ctx
    	});

    	return block;
    }

    // (59:0) {:else}
    function create_else_block_3(ctx) {
    	let prism;
    	let current;

    	prism = new Prism$1({
    			props: {
    				language: "html",
    				$$slots: { default: [create_default_slot_7$3] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(prism.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(prism, target, anchor);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(prism.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(prism.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(prism, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block_3.name,
    		type: "else",
    		source: "(59:0) {:else}",
    		ctx
    	});

    	return block;
    }

    // (52:0) {#if $sourceType === 'svelte'}
    function create_if_block_3(ctx) {
    	let prism;
    	let current;

    	prism = new Prism$1({
    			props: {
    				language: "html",
    				$$slots: { default: [create_default_slot_6$5] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(prism.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(prism, target, anchor);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(prism.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(prism.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(prism, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_3.name,
    		type: "if",
    		source: "(52:0) {#if $sourceType === 'svelte'}",
    		ctx
    	});

    	return block;
    }

    // (60:2) <Prism language="html">
    function create_default_slot_7$3(ctx) {
    	let t_value = `<label class="toggle">
  <input type="checkbox" hidden class="toggle-input" />
  <span class="toggle toggle-on">on</span>
  <span class="toggle toggle-off">off</span>
</label>` + "";

    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_7$3.name,
    		type: "slot",
    		source: "(60:2) <Prism language=\\\"html\\\">",
    		ctx
    	});

    	return block;
    }

    // (53:2) <Prism language="html">
    function create_default_slot_6$5(ctx) {
    	let t_value = `<Toggler>
  <slot slot="on">on</slot>
  <slot slot="off">off</slot>
</Toggler>` + "";

    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_6$5.name,
    		type: "slot",
    		source: "(53:2) <Prism language=\\\"html\\\">",
    		ctx
    	});

    	return block;
    }

    // (72:18)      
    function fallback_block_5(ctx) {
    	let icon;
    	let current;

    	icon = new dist$1.Icon({
    			props: {
    				name: "angle-down",
    				style: "width: 24px; height: 24px;"
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(icon.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(icon, target, anchor);
    			current = true;
    		},
    		p: noop,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(icon.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(icon.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(icon, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: fallback_block_5.name,
    		type: "fallback",
    		source: "(72:18)      ",
    		ctx
    	});

    	return block;
    }

    // (72:2) 
    function create_on_slot_2(ctx) {
    	let current;
    	const default_slot_template = /*#slots*/ ctx[1].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[2], get_default_slot_context_3);
    	const default_slot_or_fallback = default_slot || fallback_block_5(ctx);

    	const block = {
    		c: function create() {
    			if (default_slot_or_fallback) default_slot_or_fallback.c();
    		},
    		m: function mount(target, anchor) {
    			if (default_slot_or_fallback) {
    				default_slot_or_fallback.m(target, anchor);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 4)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[2],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[2])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[2], dirty, get_default_slot_changes_3),
    						get_default_slot_context_3
    					);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot_or_fallback, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot_or_fallback, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (default_slot_or_fallback) default_slot_or_fallback.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_on_slot_2.name,
    		type: "slot",
    		source: "(72:2) ",
    		ctx
    	});

    	return block;
    }

    // (75:19)      
    function fallback_block_4(ctx) {
    	let icon;
    	let current;

    	icon = new dist$1.Icon({
    			props: {
    				name: "angle-up",
    				style: "width: 24px; height: 24px;"
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(icon.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(icon, target, anchor);
    			current = true;
    		},
    		p: noop,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(icon.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(icon.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(icon, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: fallback_block_4.name,
    		type: "fallback",
    		source: "(75:19)      ",
    		ctx
    	});

    	return block;
    }

    // (75:2) 
    function create_off_slot_2(ctx) {
    	let current;
    	const default_slot_template = /*#slots*/ ctx[1].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[2], get_default_slot_context_2);
    	const default_slot_or_fallback = default_slot || fallback_block_4(ctx);

    	const block = {
    		c: function create() {
    			if (default_slot_or_fallback) default_slot_or_fallback.c();
    		},
    		m: function mount(target, anchor) {
    			if (default_slot_or_fallback) {
    				default_slot_or_fallback.m(target, anchor);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 4)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[2],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[2])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[2], dirty, get_default_slot_changes_2),
    						get_default_slot_context_2
    					);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot_or_fallback, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot_or_fallback, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (default_slot_or_fallback) default_slot_or_fallback.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_off_slot_2.name,
    		type: "slot",
    		source: "(75:2) ",
    		ctx
    	});

    	return block;
    }

    // (91:0) {:else}
    function create_else_block_2(ctx) {
    	let prism;
    	let current;

    	prism = new Prism$1({
    			props: {
    				language: "html",
    				$$slots: { default: [create_default_slot_5$6] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(prism.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(prism, target, anchor);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(prism.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(prism.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(prism, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block_2.name,
    		type: "else",
    		source: "(91:0) {:else}",
    		ctx
    	});

    	return block;
    }

    // (80:0) {#if $sourceType === 'svelte'}
    function create_if_block_2$1(ctx) {
    	let prism;
    	let current;

    	prism = new Prism$1({
    			props: {
    				language: "html",
    				$$slots: { default: [create_default_slot_4$7] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(prism.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(prism, target, anchor);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(prism.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(prism.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(prism, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2$1.name,
    		type: "if",
    		source: "(80:0) {#if $sourceType === 'svelte'}",
    		ctx
    	});

    	return block;
    }

    // (92:2) <Prism language="html">
    function create_default_slot_5$6(ctx) {
    	let t_value = `<label class="toggle">
  <input type="checkbox" hidden class="toggle-input" />
  <i class="toggle toggle-on fas fa-angle-down"></i>
  <i class="toggle toggle-off fas fa-angle-up"></i>
</label>` + "";

    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_5$6.name,
    		type: "slot",
    		source: "(92:2) <Prism language=\\\"html\\\">",
    		ctx
    	});

    	return block;
    }

    // (81:2) <Prism language="html">
    function create_default_slot_4$7(ctx) {
    	let t_value = `<Toggler>
  <slot slot="on">
    <Icon name="angle-down" style="width: 24px; height: 24px;" />
  </slot>
  <slot slot="off">
    <Icon name="angle-up" style="width: 24px; height: 24px;" />
  </slot>
</Toggler>` + "";

    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_4$7.name,
    		type: "slot",
    		source: "(81:2) <Prism language=\\\"html\\\">",
    		ctx
    	});

    	return block;
    }

    // (104:18) on
    function fallback_block_3(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("on");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: fallback_block_3.name,
    		type: "fallback",
    		source: "(104:18) on",
    		ctx
    	});

    	return block;
    }

    // (104:2) 
    function create_on_slot_1(ctx) {
    	let current;
    	const default_slot_template = /*#slots*/ ctx[1].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[2], get_default_slot_context_5);
    	const default_slot_or_fallback = default_slot || fallback_block_3(ctx);

    	const block = {
    		c: function create() {
    			if (default_slot_or_fallback) default_slot_or_fallback.c();
    		},
    		m: function mount(target, anchor) {
    			if (default_slot_or_fallback) {
    				default_slot_or_fallback.m(target, anchor);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 4)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[2],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[2])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[2], dirty, get_default_slot_changes_5),
    						get_default_slot_context_5
    					);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot_or_fallback, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot_or_fallback, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (default_slot_or_fallback) default_slot_or_fallback.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_on_slot_1.name,
    		type: "slot",
    		source: "(104:2) ",
    		ctx
    	});

    	return block;
    }

    // (105:19) off
    function fallback_block_2(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("off");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: fallback_block_2.name,
    		type: "fallback",
    		source: "(105:19) off",
    		ctx
    	});

    	return block;
    }

    // (105:2) 
    function create_off_slot_1(ctx) {
    	let current;
    	const default_slot_template = /*#slots*/ ctx[1].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[2], get_default_slot_context_4);
    	const default_slot_or_fallback = default_slot || fallback_block_2(ctx);

    	const block = {
    		c: function create() {
    			if (default_slot_or_fallback) default_slot_or_fallback.c();
    		},
    		m: function mount(target, anchor) {
    			if (default_slot_or_fallback) {
    				default_slot_or_fallback.m(target, anchor);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 4)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[2],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[2])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[2], dirty, get_default_slot_changes_4),
    						get_default_slot_context_4
    					);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot_or_fallback, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot_or_fallback, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (default_slot_or_fallback) default_slot_or_fallback.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_off_slot_1.name,
    		type: "slot",
    		source: "(105:2) ",
    		ctx
    	});

    	return block;
    }

    // (115:0) {:else}
    function create_else_block_1$1(ctx) {
    	let prism;
    	let current;

    	prism = new Prism$1({
    			props: {
    				language: "html",
    				$$slots: { default: [create_default_slot_3$8] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(prism.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(prism, target, anchor);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(prism.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(prism.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(prism, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block_1$1.name,
    		type: "else",
    		source: "(115:0) {:else}",
    		ctx
    	});

    	return block;
    }

    // (108:0) {#if $sourceType === 'svelte'}
    function create_if_block_1$1(ctx) {
    	let prism;
    	let current;

    	prism = new Prism$1({
    			props: {
    				language: "html",
    				$$slots: { default: [create_default_slot_2$b] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(prism.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(prism, target, anchor);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(prism.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(prism.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(prism, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$1.name,
    		type: "if",
    		source: "(108:0) {#if $sourceType === 'svelte'}",
    		ctx
    	});

    	return block;
    }

    // (116:2) <Prism language="html">
    function create_default_slot_3$8(ctx) {
    	let t_value = `Sadly, Svelte only` + "";
    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_3$8.name,
    		type: "slot",
    		source: "(116:2) <Prism language=\\\"html\\\">",
    		ctx
    	});

    	return block;
    }

    // (109:2) <Prism language="html">
    function create_default_slot_2$b(ctx) {
    	let t_value = `<Toggler isSwitch={true}>
  <slot slot="on">on</slot>
  <slot slot="off">off</slot>
</Toggler>` + "";

    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_2$b.name,
    		type: "slot",
    		source: "(109:2) <Prism language=\\\"html\\\">",
    		ctx
    	});

    	return block;
    }

    // (124:18) on
    function fallback_block_1(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("on");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: fallback_block_1.name,
    		type: "fallback",
    		source: "(124:18) on",
    		ctx
    	});

    	return block;
    }

    // (124:2) 
    function create_on_slot(ctx) {
    	let current;
    	const default_slot_template = /*#slots*/ ctx[1].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[2], get_default_slot_context_7);
    	const default_slot_or_fallback = default_slot || fallback_block_1(ctx);

    	const block = {
    		c: function create() {
    			if (default_slot_or_fallback) default_slot_or_fallback.c();
    		},
    		m: function mount(target, anchor) {
    			if (default_slot_or_fallback) {
    				default_slot_or_fallback.m(target, anchor);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 4)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[2],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[2])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[2], dirty, get_default_slot_changes_7),
    						get_default_slot_context_7
    					);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot_or_fallback, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot_or_fallback, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (default_slot_or_fallback) default_slot_or_fallback.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_on_slot.name,
    		type: "slot",
    		source: "(124:2) ",
    		ctx
    	});

    	return block;
    }

    // (125:19) off
    function fallback_block(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("off");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: fallback_block.name,
    		type: "fallback",
    		source: "(125:19) off",
    		ctx
    	});

    	return block;
    }

    // (125:2) 
    function create_off_slot(ctx) {
    	let current;
    	const default_slot_template = /*#slots*/ ctx[1].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[2], get_default_slot_context_6);
    	const default_slot_or_fallback = default_slot || fallback_block(ctx);

    	const block = {
    		c: function create() {
    			if (default_slot_or_fallback) default_slot_or_fallback.c();
    		},
    		m: function mount(target, anchor) {
    			if (default_slot_or_fallback) {
    				default_slot_or_fallback.m(target, anchor);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 4)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[2],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[2])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[2], dirty, get_default_slot_changes_6),
    						get_default_slot_context_6
    					);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot_or_fallback, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot_or_fallback, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (default_slot_or_fallback) default_slot_or_fallback.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_off_slot.name,
    		type: "slot",
    		source: "(125:2) ",
    		ctx
    	});

    	return block;
    }

    // (135:0) {:else}
    function create_else_block$1(ctx) {
    	let prism;
    	let current;

    	prism = new Prism$1({
    			props: {
    				language: "html",
    				$$slots: { default: [create_default_slot_1$c] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(prism.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(prism, target, anchor);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(prism.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(prism.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(prism, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$1.name,
    		type: "else",
    		source: "(135:0) {:else}",
    		ctx
    	});

    	return block;
    }

    // (128:0) {#if $sourceType === 'svelte'}
    function create_if_block$2(ctx) {
    	let prism;
    	let current;

    	prism = new Prism$1({
    			props: {
    				language: "html",
    				$$slots: { default: [create_default_slot$d] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(prism.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(prism, target, anchor);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(prism.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(prism.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(prism, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$2.name,
    		type: "if",
    		source: "(128:0) {#if $sourceType === 'svelte'}",
    		ctx
    	});

    	return block;
    }

    // (136:2) <Prism language="html">
    function create_default_slot_1$c(ctx) {
    	let t_value = `Sadly, Svelte only` + "";
    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_1$c.name,
    		type: "slot",
    		source: "(136:2) <Prism language=\\\"html\\\">",
    		ctx
    	});

    	return block;
    }

    // (129:2) <Prism language="html">
    function create_default_slot$d(ctx) {
    	let t_value = `<Toggler defaultState={false}>
  <slot slot="on">on</slot>
  <slot slot="off">off</slot>
</Toggler>` + "";

    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$d.name,
    		type: "slot",
    		source: "(129:2) <Prism language=\\\"html\\\">",
    		ctx
    	});

    	return block;
    }

    function create_fragment$f(ctx) {
    	let h1;
    	let t1;
    	let t2;
    	let h30;
    	let t4;
    	let toggler0;
    	let t5;
    	let current_block_type_index;
    	let if_block1;
    	let t6;
    	let h31;
    	let t8;
    	let toggler1;
    	let t9;
    	let current_block_type_index_1;
    	let if_block2;
    	let t10;
    	let h32;
    	let t12;
    	let toggler2;
    	let t13;
    	let current_block_type_index_2;
    	let if_block3;
    	let t14;
    	let h33;
    	let t16;
    	let toggler3;
    	let t17;
    	let current_block_type_index_3;
    	let if_block4;
    	let if_block4_anchor;
    	let current;
    	let if_block0 = /*$sourceType*/ ctx[0] === 'svelte' && create_if_block_4(ctx);

    	toggler0 = new dist$1.Toggler({
    			props: {
    				$$slots: {
    					off: [create_off_slot_3],
    					on: [create_on_slot_3]
    				},
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const if_block_creators = [create_if_block_3, create_else_block_3];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (/*$sourceType*/ ctx[0] === 'svelte') return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type(ctx);
    	if_block1 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

    	toggler1 = new dist$1.Toggler({
    			props: {
    				$$slots: {
    					off: [create_off_slot_2],
    					on: [create_on_slot_2]
    				},
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const if_block_creators_1 = [create_if_block_2$1, create_else_block_2];
    	const if_blocks_1 = [];

    	function select_block_type_1(ctx, dirty) {
    		if (/*$sourceType*/ ctx[0] === 'svelte') return 0;
    		return 1;
    	}

    	current_block_type_index_1 = select_block_type_1(ctx);
    	if_block2 = if_blocks_1[current_block_type_index_1] = if_block_creators_1[current_block_type_index_1](ctx);

    	toggler2 = new dist$1.Toggler({
    			props: {
    				isSwitch: true,
    				$$slots: {
    					off: [create_off_slot_1],
    					on: [create_on_slot_1]
    				},
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const if_block_creators_2 = [create_if_block_1$1, create_else_block_1$1];
    	const if_blocks_2 = [];

    	function select_block_type_2(ctx, dirty) {
    		if (/*$sourceType*/ ctx[0] === 'svelte') return 0;
    		return 1;
    	}

    	current_block_type_index_2 = select_block_type_2(ctx);
    	if_block3 = if_blocks_2[current_block_type_index_2] = if_block_creators_2[current_block_type_index_2](ctx);

    	toggler3 = new dist$1.Toggler({
    			props: {
    				defaultState: false,
    				$$slots: {
    					off: [create_off_slot],
    					on: [create_on_slot]
    				},
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const if_block_creators_3 = [create_if_block$2, create_else_block$1];
    	const if_blocks_3 = [];

    	function select_block_type_3(ctx, dirty) {
    		if (/*$sourceType*/ ctx[0] === 'svelte') return 0;
    		return 1;
    	}

    	current_block_type_index_3 = select_block_type_3(ctx);
    	if_block4 = if_blocks_3[current_block_type_index_3] = if_block_creators_3[current_block_type_index_3](ctx);

    	const block = {
    		c: function create() {
    			h1 = element("h1");
    			h1.textContent = "Toggler";
    			t1 = space();
    			if (if_block0) if_block0.c();
    			t2 = space();
    			h30 = element("h3");
    			h30.textContent = "Toggler with text";
    			t4 = space();
    			create_component(toggler0.$$.fragment);
    			t5 = space();
    			if_block1.c();
    			t6 = space();
    			h31 = element("h3");
    			h31.textContent = "Toggler with icon";
    			t8 = space();
    			create_component(toggler1.$$.fragment);
    			t9 = space();
    			if_block2.c();
    			t10 = space();
    			h32 = element("h3");
    			h32.textContent = "Toggle as switch";
    			t12 = space();
    			create_component(toggler2.$$.fragment);
    			t13 = space();
    			if_block3.c();
    			t14 = space();
    			h33 = element("h3");
    			h33.textContent = "Set default state to off";
    			t16 = space();
    			create_component(toggler3.$$.fragment);
    			t17 = space();
    			if_block4.c();
    			if_block4_anchor = empty();
    			attr_dev(h1, "class", "color--eb");
    			add_location(h1, file$f, 5, 0, 147);
    			add_location(h30, file$f, 44, 0, 961);
    			add_location(h31, file$f, 68, 0, 1460);
    			add_location(h32, file$f, 100, 0, 2238);
    			add_location(h33, file$f, 120, 0, 2611);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, h1, anchor);
    			insert_dev(target, t1, anchor);
    			if (if_block0) if_block0.m(target, anchor);
    			insert_dev(target, t2, anchor);
    			insert_dev(target, h30, anchor);
    			insert_dev(target, t4, anchor);
    			mount_component(toggler0, target, anchor);
    			insert_dev(target, t5, anchor);
    			if_blocks[current_block_type_index].m(target, anchor);
    			insert_dev(target, t6, anchor);
    			insert_dev(target, h31, anchor);
    			insert_dev(target, t8, anchor);
    			mount_component(toggler1, target, anchor);
    			insert_dev(target, t9, anchor);
    			if_blocks_1[current_block_type_index_1].m(target, anchor);
    			insert_dev(target, t10, anchor);
    			insert_dev(target, h32, anchor);
    			insert_dev(target, t12, anchor);
    			mount_component(toggler2, target, anchor);
    			insert_dev(target, t13, anchor);
    			if_blocks_2[current_block_type_index_2].m(target, anchor);
    			insert_dev(target, t14, anchor);
    			insert_dev(target, h33, anchor);
    			insert_dev(target, t16, anchor);
    			mount_component(toggler3, target, anchor);
    			insert_dev(target, t17, anchor);
    			if_blocks_3[current_block_type_index_3].m(target, anchor);
    			insert_dev(target, if_block4_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (/*$sourceType*/ ctx[0] === 'svelte') {
    				if (if_block0) {
    					if (dirty & /*$sourceType*/ 1) {
    						transition_in(if_block0, 1);
    					}
    				} else {
    					if_block0 = create_if_block_4(ctx);
    					if_block0.c();
    					transition_in(if_block0, 1);
    					if_block0.m(t2.parentNode, t2);
    				}
    			} else if (if_block0) {
    				group_outros();

    				transition_out(if_block0, 1, 1, () => {
    					if_block0 = null;
    				});

    				check_outros();
    			}

    			const toggler0_changes = {};

    			if (dirty & /*$$scope*/ 4) {
    				toggler0_changes.$$scope = { dirty, ctx };
    			}

    			toggler0.$set(toggler0_changes);
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(ctx);

    			if (current_block_type_index !== previous_block_index) {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block1 = if_blocks[current_block_type_index];

    				if (!if_block1) {
    					if_block1 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block1.c();
    				}

    				transition_in(if_block1, 1);
    				if_block1.m(t6.parentNode, t6);
    			}

    			const toggler1_changes = {};

    			if (dirty & /*$$scope*/ 4) {
    				toggler1_changes.$$scope = { dirty, ctx };
    			}

    			toggler1.$set(toggler1_changes);
    			let previous_block_index_1 = current_block_type_index_1;
    			current_block_type_index_1 = select_block_type_1(ctx);

    			if (current_block_type_index_1 !== previous_block_index_1) {
    				group_outros();

    				transition_out(if_blocks_1[previous_block_index_1], 1, 1, () => {
    					if_blocks_1[previous_block_index_1] = null;
    				});

    				check_outros();
    				if_block2 = if_blocks_1[current_block_type_index_1];

    				if (!if_block2) {
    					if_block2 = if_blocks_1[current_block_type_index_1] = if_block_creators_1[current_block_type_index_1](ctx);
    					if_block2.c();
    				}

    				transition_in(if_block2, 1);
    				if_block2.m(t10.parentNode, t10);
    			}

    			const toggler2_changes = {};

    			if (dirty & /*$$scope*/ 4) {
    				toggler2_changes.$$scope = { dirty, ctx };
    			}

    			toggler2.$set(toggler2_changes);
    			let previous_block_index_2 = current_block_type_index_2;
    			current_block_type_index_2 = select_block_type_2(ctx);

    			if (current_block_type_index_2 !== previous_block_index_2) {
    				group_outros();

    				transition_out(if_blocks_2[previous_block_index_2], 1, 1, () => {
    					if_blocks_2[previous_block_index_2] = null;
    				});

    				check_outros();
    				if_block3 = if_blocks_2[current_block_type_index_2];

    				if (!if_block3) {
    					if_block3 = if_blocks_2[current_block_type_index_2] = if_block_creators_2[current_block_type_index_2](ctx);
    					if_block3.c();
    				}

    				transition_in(if_block3, 1);
    				if_block3.m(t14.parentNode, t14);
    			}

    			const toggler3_changes = {};

    			if (dirty & /*$$scope*/ 4) {
    				toggler3_changes.$$scope = { dirty, ctx };
    			}

    			toggler3.$set(toggler3_changes);
    			let previous_block_index_3 = current_block_type_index_3;
    			current_block_type_index_3 = select_block_type_3(ctx);

    			if (current_block_type_index_3 !== previous_block_index_3) {
    				group_outros();

    				transition_out(if_blocks_3[previous_block_index_3], 1, 1, () => {
    					if_blocks_3[previous_block_index_3] = null;
    				});

    				check_outros();
    				if_block4 = if_blocks_3[current_block_type_index_3];

    				if (!if_block4) {
    					if_block4 = if_blocks_3[current_block_type_index_3] = if_block_creators_3[current_block_type_index_3](ctx);
    					if_block4.c();
    				}

    				transition_in(if_block4, 1);
    				if_block4.m(if_block4_anchor.parentNode, if_block4_anchor);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block0);
    			transition_in(toggler0.$$.fragment, local);
    			transition_in(if_block1);
    			transition_in(toggler1.$$.fragment, local);
    			transition_in(if_block2);
    			transition_in(toggler2.$$.fragment, local);
    			transition_in(if_block3);
    			transition_in(toggler3.$$.fragment, local);
    			transition_in(if_block4);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block0);
    			transition_out(toggler0.$$.fragment, local);
    			transition_out(if_block1);
    			transition_out(toggler1.$$.fragment, local);
    			transition_out(if_block2);
    			transition_out(toggler2.$$.fragment, local);
    			transition_out(if_block3);
    			transition_out(toggler3.$$.fragment, local);
    			transition_out(if_block4);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(h1);
    			if (detaching) detach_dev(t1);
    			if (if_block0) if_block0.d(detaching);
    			if (detaching) detach_dev(t2);
    			if (detaching) detach_dev(h30);
    			if (detaching) detach_dev(t4);
    			destroy_component(toggler0, detaching);
    			if (detaching) detach_dev(t5);
    			if_blocks[current_block_type_index].d(detaching);
    			if (detaching) detach_dev(t6);
    			if (detaching) detach_dev(h31);
    			if (detaching) detach_dev(t8);
    			destroy_component(toggler1, detaching);
    			if (detaching) detach_dev(t9);
    			if_blocks_1[current_block_type_index_1].d(detaching);
    			if (detaching) detach_dev(t10);
    			if (detaching) detach_dev(h32);
    			if (detaching) detach_dev(t12);
    			destroy_component(toggler2, detaching);
    			if (detaching) detach_dev(t13);
    			if_blocks_2[current_block_type_index_2].d(detaching);
    			if (detaching) detach_dev(t14);
    			if (detaching) detach_dev(h33);
    			if (detaching) detach_dev(t16);
    			destroy_component(toggler3, detaching);
    			if (detaching) detach_dev(t17);
    			if_blocks_3[current_block_type_index_3].d(detaching);
    			if (detaching) detach_dev(if_block4_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$f.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$f($$self, $$props, $$invalidate) {
    	let $sourceType;
    	validate_store(sourceType, 'sourceType');
    	component_subscribe($$self, sourceType, $$value => $$invalidate(0, $sourceType = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Toggler', slots, ['default']);
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Toggler> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('$$scope' in $$props) $$invalidate(2, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		Prism: Prism$1,
    		sourceType,
    		Icon: dist$1.Icon,
    		Toggler: dist$1.Toggler,
    		$sourceType
    	});

    	return [$sourceType, slots, $$scope];
    }

    class Toggler_1 extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$f, create_fragment$f, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Toggler_1",
    			options,
    			id: create_fragment$f.name
    		});
    	}
    }

    /* docs_src/components/Tooltip.svelte generated by Svelte v3.42.1 */
    const file$e = "docs_src/components/Tooltip.svelte";

    // (13:0) {#if $sourceType === 'svelte'}
    function create_if_block_2(ctx) {
    	let prism;
    	let t0;
    	let table;
    	let thead;
    	let tr0;
    	let th0;
    	let t2;
    	let th1;
    	let t4;
    	let th2;
    	let t6;
    	let th3;
    	let t8;
    	let tbody;
    	let tr1;
    	let td0;
    	let t10;
    	let td1;
    	let t12;
    	let td2;
    	let t13;
    	let td3;
    	let t14;
    	let tr2;
    	let td4;
    	let t16;
    	let td5;
    	let t18;
    	let td6;
    	let t20;
    	let td7;
    	let t22;
    	let tr3;
    	let td8;
    	let t24;
    	let td9;
    	let t26;
    	let td10;
    	let t28;
    	let td11;
    	let t30;
    	let tr4;
    	let td12;
    	let t32;
    	let td13;
    	let t34;
    	let td14;
    	let t36;
    	let td15;
    	let current;

    	prism = new Prism$1({
    			props: {
    				language: "js",
    				$$slots: { default: [create_default_slot_6$4] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(prism.$$.fragment);
    			t0 = space();
    			table = element("table");
    			thead = element("thead");
    			tr0 = element("tr");
    			th0 = element("th");
    			th0.textContent = "Prop name";
    			t2 = space();
    			th1 = element("th");
    			th1.textContent = "Type";
    			t4 = space();
    			th2 = element("th");
    			th2.textContent = "Default value";
    			t6 = space();
    			th3 = element("th");
    			th3.textContent = "Description";
    			t8 = space();
    			tbody = element("tbody");
    			tr1 = element("tr");
    			td0 = element("td");
    			td0.textContent = "className";
    			t10 = space();
    			td1 = element("td");
    			td1.textContent = "string";
    			t12 = space();
    			td2 = element("td");
    			t13 = space();
    			td3 = element("td");
    			t14 = space();
    			tr2 = element("tr");
    			td4 = element("td");
    			td4.textContent = "iconOn";
    			t16 = space();
    			td5 = element("td");
    			td5.textContent = "string";
    			t18 = space();
    			td6 = element("td");
    			td6.textContent = "'times'";
    			t20 = space();
    			td7 = element("td");
    			td7.textContent = "FontAwesome icon for when tooltip is open";
    			t22 = space();
    			tr3 = element("tr");
    			td8 = element("td");
    			td8.textContent = "iconOff";
    			t24 = space();
    			td9 = element("td");
    			td9.textContent = "string";
    			t26 = space();
    			td10 = element("td");
    			td10.textContent = "'question'";
    			t28 = space();
    			td11 = element("td");
    			td11.textContent = "FontAwesome icon for when tooltip is closed";
    			t30 = space();
    			tr4 = element("tr");
    			td12 = element("td");
    			td12.textContent = "position";
    			t32 = space();
    			td13 = element("td");
    			td13.textContent = "'left' | 'right'";
    			t34 = space();
    			td14 = element("td");
    			td14.textContent = "'left'";
    			t36 = space();
    			td15 = element("td");
    			add_location(th0, file$e, 20, 8, 473);
    			add_location(th1, file$e, 21, 8, 500);
    			add_location(th2, file$e, 22, 8, 522);
    			add_location(th3, file$e, 23, 8, 553);
    			add_location(tr0, file$e, 19, 6, 460);
    			add_location(thead, file$e, 18, 4, 446);
    			add_location(td0, file$e, 28, 8, 630);
    			add_location(td1, file$e, 29, 8, 657);
    			add_location(td2, file$e, 30, 8, 681);
    			add_location(td3, file$e, 31, 8, 696);
    			add_location(tr1, file$e, 27, 6, 617);
    			add_location(td4, file$e, 34, 8, 734);
    			add_location(td5, file$e, 35, 8, 758);
    			add_location(td6, file$e, 36, 8, 782);
    			add_location(td7, file$e, 37, 8, 807);
    			add_location(tr2, file$e, 33, 6, 721);
    			add_location(td8, file$e, 40, 8, 889);
    			add_location(td9, file$e, 41, 8, 914);
    			add_location(td10, file$e, 42, 8, 938);
    			add_location(td11, file$e, 43, 8, 966);
    			add_location(tr3, file$e, 39, 6, 876);
    			add_location(td12, file$e, 46, 8, 1050);
    			add_location(td13, file$e, 47, 8, 1076);
    			add_location(td14, file$e, 48, 8, 1110);
    			add_location(td15, file$e, 49, 8, 1134);
    			add_location(tr4, file$e, 45, 6, 1037);
    			add_location(tbody, file$e, 26, 4, 603);
    			attr_dev(table, "class", "table");
    			add_location(table, file$e, 17, 2, 420);
    		},
    		m: function mount(target, anchor) {
    			mount_component(prism, target, anchor);
    			insert_dev(target, t0, anchor);
    			insert_dev(target, table, anchor);
    			append_dev(table, thead);
    			append_dev(thead, tr0);
    			append_dev(tr0, th0);
    			append_dev(tr0, t2);
    			append_dev(tr0, th1);
    			append_dev(tr0, t4);
    			append_dev(tr0, th2);
    			append_dev(tr0, t6);
    			append_dev(tr0, th3);
    			append_dev(table, t8);
    			append_dev(table, tbody);
    			append_dev(tbody, tr1);
    			append_dev(tr1, td0);
    			append_dev(tr1, t10);
    			append_dev(tr1, td1);
    			append_dev(tr1, t12);
    			append_dev(tr1, td2);
    			append_dev(tr1, t13);
    			append_dev(tr1, td3);
    			append_dev(tbody, t14);
    			append_dev(tbody, tr2);
    			append_dev(tr2, td4);
    			append_dev(tr2, t16);
    			append_dev(tr2, td5);
    			append_dev(tr2, t18);
    			append_dev(tr2, td6);
    			append_dev(tr2, t20);
    			append_dev(tr2, td7);
    			append_dev(tbody, t22);
    			append_dev(tbody, tr3);
    			append_dev(tr3, td8);
    			append_dev(tr3, t24);
    			append_dev(tr3, td9);
    			append_dev(tr3, t26);
    			append_dev(tr3, td10);
    			append_dev(tr3, t28);
    			append_dev(tr3, td11);
    			append_dev(tbody, t30);
    			append_dev(tbody, tr4);
    			append_dev(tr4, td12);
    			append_dev(tr4, t32);
    			append_dev(tr4, td13);
    			append_dev(tr4, t34);
    			append_dev(tr4, td14);
    			append_dev(tr4, t36);
    			append_dev(tr4, td15);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(prism.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(prism.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(prism, detaching);
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(table);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2.name,
    		type: "if",
    		source: "(13:0) {#if $sourceType === 'svelte'}",
    		ctx
    	});

    	return block;
    }

    // (14:2) <Prism language="js">
    function create_default_slot_6$4(ctx) {
    	let t_value = `import { Tooltip } from '@ekstra-bladet/designsystem';` + "";
    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_6$4.name,
    		type: "slot",
    		source: "(14:2) <Prism language=\\\"js\\\">",
    		ctx
    	});

    	return block;
    }

    // (59:2) <Tooltip>
    function create_default_slot_5$5(ctx) {
    	let html_tag;
    	let html_anchor;

    	const block = {
    		c: function create() {
    			html_tag = new HtmlTag();
    			html_anchor = empty();
    			html_tag.a = html_anchor;
    		},
    		m: function mount(target, anchor) {
    			html_tag.m(/*Content1*/ ctx[1], target, anchor);
    			insert_dev(target, html_anchor, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(html_anchor);
    			if (detaching) html_tag.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_5$5.name,
    		type: "slot",
    		source: "(59:2) <Tooltip>",
    		ctx
    	});

    	return block;
    }

    // (68:0) {:else}
    function create_else_block_1(ctx) {
    	let prism;
    	let current;

    	prism = new Prism$1({
    			props: {
    				language: "html",
    				$$slots: { default: [create_default_slot_4$6] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(prism.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(prism, target, anchor);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(prism.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(prism.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(prism, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block_1.name,
    		type: "else",
    		source: "(68:0) {:else}",
    		ctx
    	});

    	return block;
    }

    // (64:0) {#if $sourceType === 'svelte'}
    function create_if_block_1(ctx) {
    	let prism;
    	let current;

    	prism = new Prism$1({
    			props: {
    				language: "html",
    				$$slots: { default: [create_default_slot_3$7] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(prism.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(prism, target, anchor);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(prism.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(prism.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(prism, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1.name,
    		type: "if",
    		source: "(64:0) {#if $sourceType === 'svelte'}",
    		ctx
    	});

    	return block;
    }

    // (69:2) <Prism language="html">
    function create_default_slot_4$6(ctx) {
    	let t_value = `<label class="tooltip">
  <input type="checkbox" hidden class="tooltip-input"/>
  <div class="tooltip-off">
    <i class="tooltip-toggle fas fa-question"/>
  </div>
  <div class="tooltip-on">
    <i class="tooltip-toggle fas fa-times"/>
    <div class="padding-s">
      Content
    </div>
  </div>
</label>` + "";

    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_4$6.name,
    		type: "slot",
    		source: "(69:2) <Prism language=\\\"html\\\">",
    		ctx
    	});

    	return block;
    }

    // (65:2) <Prism language="html">
    function create_default_slot_3$7(ctx) {
    	let t_value = `<Tooltip></Tooltip>` + "";
    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_3$7.name,
    		type: "slot",
    		source: "(65:2) <Prism language=\\\"html\\\">",
    		ctx
    	});

    	return block;
    }

    // (89:2) <Tooltip position="right" className="flex-item--center">
    function create_default_slot_2$a(ctx) {
    	let html_tag;
    	let html_anchor;

    	const block = {
    		c: function create() {
    			html_tag = new HtmlTag();
    			html_anchor = empty();
    			html_tag.a = html_anchor;
    		},
    		m: function mount(target, anchor) {
    			html_tag.m(/*Content2*/ ctx[2], target, anchor);
    			insert_dev(target, html_anchor, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(html_anchor);
    			if (detaching) html_tag.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_2$a.name,
    		type: "slot",
    		source: "(89:2) <Tooltip position=\\\"right\\\" className=\\\"flex-item--center\\\">",
    		ctx
    	});

    	return block;
    }

    // (101:0) {:else}
    function create_else_block(ctx) {
    	let prism;
    	let current;

    	prism = new Prism$1({
    			props: {
    				language: "html",
    				$$slots: { default: [create_default_slot_1$b] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(prism.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(prism, target, anchor);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(prism.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(prism.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(prism, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block.name,
    		type: "else",
    		source: "(101:0) {:else}",
    		ctx
    	});

    	return block;
    }

    // (94:0) {#if $sourceType === 'svelte'}
    function create_if_block$1(ctx) {
    	let prism;
    	let current;

    	prism = new Prism$1({
    			props: {
    				language: "html",
    				$$slots: { default: [create_default_slot$c] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(prism.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(prism, target, anchor);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(prism.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(prism.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(prism, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$1.name,
    		type: "if",
    		source: "(94:0) {#if $sourceType === 'svelte'}",
    		ctx
    	});

    	return block;
    }

    // (102:2) <Prism language="html">
    function create_default_slot_1$b(ctx) {
    	let t_value = `<div class="flex flex-justify--between">
  <h3>Header</h3>
  <label class="tooltip tooltip--right flex-item--center">
    <input type="checkbox" hidden class="tooltip-input"/>
    <div class="tooltip-off">
      <i class="tooltip-toggle fas fa-question"/>
    </div>
    <div class="tooltip-on">
      <i class="tooltip-toggle fas fa-times"/>
      <div class="padding-s">
        Content
      </div>
    </div>
  </label>
</div>` + "";

    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_1$b.name,
    		type: "slot",
    		source: "(102:2) <Prism language=\\\"html\\\">",
    		ctx
    	});

    	return block;
    }

    // (95:2) <Prism language="html">
    function create_default_slot$c(ctx) {
    	let t_value = `<div class="flex flex-justify--between">
  <h3>Header</h3>
  <Tooltip position="right" className="flex-item--center"></Tooltip>
</div>` + "";

    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$c.name,
    		type: "slot",
    		source: "(95:2) <Prism language=\\\"html\\\">",
    		ctx
    	});

    	return block;
    }

    function create_fragment$e(ctx) {
    	let h1;
    	let t1;
    	let t2;
    	let h30;
    	let t4;
    	let div0;
    	let tooltip0;
    	let t5;
    	let current_block_type_index;
    	let if_block1;
    	let t6;
    	let h31;
    	let t8;
    	let div1;
    	let h32;
    	let t10;
    	let tooltip1;
    	let t11;
    	let current_block_type_index_1;
    	let if_block2;
    	let if_block2_anchor;
    	let current;
    	let if_block0 = /*$sourceType*/ ctx[0] === 'svelte' && create_if_block_2(ctx);

    	tooltip0 = new dist$1.Tooltip({
    			props: {
    				$$slots: { default: [create_default_slot_5$5] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const if_block_creators = [create_if_block_1, create_else_block_1];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (/*$sourceType*/ ctx[0] === 'svelte') return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type(ctx);
    	if_block1 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

    	tooltip1 = new dist$1.Tooltip({
    			props: {
    				position: "right",
    				className: "flex-item--center",
    				$$slots: { default: [create_default_slot_2$a] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const if_block_creators_1 = [create_if_block$1, create_else_block];
    	const if_blocks_1 = [];

    	function select_block_type_1(ctx, dirty) {
    		if (/*$sourceType*/ ctx[0] === 'svelte') return 0;
    		return 1;
    	}

    	current_block_type_index_1 = select_block_type_1(ctx);
    	if_block2 = if_blocks_1[current_block_type_index_1] = if_block_creators_1[current_block_type_index_1](ctx);

    	const block = {
    		c: function create() {
    			h1 = element("h1");
    			h1.textContent = "Tooltip";
    			t1 = space();
    			if (if_block0) if_block0.c();
    			t2 = space();
    			h30 = element("h3");
    			h30.textContent = "Default tooltip";
    			t4 = space();
    			div0 = element("div");
    			create_component(tooltip0.$$.fragment);
    			t5 = space();
    			if_block1.c();
    			t6 = space();
    			h31 = element("h3");
    			h31.textContent = "Tooltip i højre side";
    			t8 = space();
    			div1 = element("div");
    			h32 = element("h3");
    			h32.textContent = "Header";
    			t10 = space();
    			create_component(tooltip1.$$.fragment);
    			t11 = space();
    			if_block2.c();
    			if_block2_anchor = empty();
    			attr_dev(h1, "class", "color--eb");
    			add_location(h1, file$e, 10, 0, 252);
    			add_location(h30, file$e, 55, 0, 1184);
    			attr_dev(div0, "class", "flex margin-l--tb");
    			add_location(div0, file$e, 57, 0, 1210);
    			add_location(h31, file$e, 84, 0, 1760);
    			add_location(h32, file$e, 87, 2, 1865);
    			attr_dev(div1, "class", "flex flex-justify--between grid-width--small margin-l--tb");
    			add_location(div1, file$e, 86, 0, 1791);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, h1, anchor);
    			insert_dev(target, t1, anchor);
    			if (if_block0) if_block0.m(target, anchor);
    			insert_dev(target, t2, anchor);
    			insert_dev(target, h30, anchor);
    			insert_dev(target, t4, anchor);
    			insert_dev(target, div0, anchor);
    			mount_component(tooltip0, div0, null);
    			insert_dev(target, t5, anchor);
    			if_blocks[current_block_type_index].m(target, anchor);
    			insert_dev(target, t6, anchor);
    			insert_dev(target, h31, anchor);
    			insert_dev(target, t8, anchor);
    			insert_dev(target, div1, anchor);
    			append_dev(div1, h32);
    			append_dev(div1, t10);
    			mount_component(tooltip1, div1, null);
    			insert_dev(target, t11, anchor);
    			if_blocks_1[current_block_type_index_1].m(target, anchor);
    			insert_dev(target, if_block2_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (/*$sourceType*/ ctx[0] === 'svelte') {
    				if (if_block0) {
    					if (dirty & /*$sourceType*/ 1) {
    						transition_in(if_block0, 1);
    					}
    				} else {
    					if_block0 = create_if_block_2(ctx);
    					if_block0.c();
    					transition_in(if_block0, 1);
    					if_block0.m(t2.parentNode, t2);
    				}
    			} else if (if_block0) {
    				group_outros();

    				transition_out(if_block0, 1, 1, () => {
    					if_block0 = null;
    				});

    				check_outros();
    			}

    			const tooltip0_changes = {};

    			if (dirty & /*$$scope*/ 8) {
    				tooltip0_changes.$$scope = { dirty, ctx };
    			}

    			tooltip0.$set(tooltip0_changes);
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(ctx);

    			if (current_block_type_index !== previous_block_index) {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block1 = if_blocks[current_block_type_index];

    				if (!if_block1) {
    					if_block1 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block1.c();
    				}

    				transition_in(if_block1, 1);
    				if_block1.m(t6.parentNode, t6);
    			}

    			const tooltip1_changes = {};

    			if (dirty & /*$$scope*/ 8) {
    				tooltip1_changes.$$scope = { dirty, ctx };
    			}

    			tooltip1.$set(tooltip1_changes);
    			let previous_block_index_1 = current_block_type_index_1;
    			current_block_type_index_1 = select_block_type_1(ctx);

    			if (current_block_type_index_1 !== previous_block_index_1) {
    				group_outros();

    				transition_out(if_blocks_1[previous_block_index_1], 1, 1, () => {
    					if_blocks_1[previous_block_index_1] = null;
    				});

    				check_outros();
    				if_block2 = if_blocks_1[current_block_type_index_1];

    				if (!if_block2) {
    					if_block2 = if_blocks_1[current_block_type_index_1] = if_block_creators_1[current_block_type_index_1](ctx);
    					if_block2.c();
    				}

    				transition_in(if_block2, 1);
    				if_block2.m(if_block2_anchor.parentNode, if_block2_anchor);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block0);
    			transition_in(tooltip0.$$.fragment, local);
    			transition_in(if_block1);
    			transition_in(tooltip1.$$.fragment, local);
    			transition_in(if_block2);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block0);
    			transition_out(tooltip0.$$.fragment, local);
    			transition_out(if_block1);
    			transition_out(tooltip1.$$.fragment, local);
    			transition_out(if_block2);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(h1);
    			if (detaching) detach_dev(t1);
    			if (if_block0) if_block0.d(detaching);
    			if (detaching) detach_dev(t2);
    			if (detaching) detach_dev(h30);
    			if (detaching) detach_dev(t4);
    			if (detaching) detach_dev(div0);
    			destroy_component(tooltip0);
    			if (detaching) detach_dev(t5);
    			if_blocks[current_block_type_index].d(detaching);
    			if (detaching) detach_dev(t6);
    			if (detaching) detach_dev(h31);
    			if (detaching) detach_dev(t8);
    			if (detaching) detach_dev(div1);
    			destroy_component(tooltip1);
    			if (detaching) detach_dev(t11);
    			if_blocks_1[current_block_type_index_1].d(detaching);
    			if (detaching) detach_dev(if_block2_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$e.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$e($$self, $$props, $$invalidate) {
    	let $sourceType;
    	validate_store(sourceType, 'sourceType');
    	component_subscribe($$self, sourceType, $$value => $$invalidate(0, $sourceType = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Tooltip', slots, []);
    	let Content1 = rdmParagraphs(2);
    	let Content2 = rdmParagraphs(2);
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Tooltip> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({
    		Prism: Prism$1,
    		rdmParagraphs,
    		sourceType,
    		Tooltip: dist$1.Tooltip,
    		Content1,
    		Content2,
    		$sourceType
    	});

    	$$self.$inject_state = $$props => {
    		if ('Content1' in $$props) $$invalidate(1, Content1 = $$props.Content1);
    		if ('Content2' in $$props) $$invalidate(2, Content2 = $$props.Content2);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [$sourceType, Content1, Content2];
    }

    class Tooltip_1 extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$e, create_fragment$e, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Tooltip_1",
    			options,
    			id: create_fragment$e.name
    		});
    	}
    }

    /* docs_src/utilities/Animation.svelte generated by Svelte v3.42.1 */
    const file$d = "docs_src/utilities/Animation.svelte";

    // (30:8) <Tab>
    function create_default_slot_8$2(ctx) {
    	let i;

    	const block = {
    		c: function create() {
    			i = element("i");
    			attr_dev(i, "class", "fas fa-cubes");
    			add_location(i, file$d, 29, 13, 913);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, i, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(i);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_8$2.name,
    		type: "slot",
    		source: "(30:8) <Tab>",
    		ctx
    	});

    	return block;
    }

    // (31:8) <Tab>
    function create_default_slot_7$2(ctx) {
    	let i;

    	const block = {
    		c: function create() {
    			i = element("i");
    			attr_dev(i, "class", "fas fa-code");
    			add_location(i, file$d, 30, 13, 959);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, i, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(i);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_7$2.name,
    		type: "slot",
    		source: "(31:8) <Tab>",
    		ctx
    	});

    	return block;
    }

    // (29:6) <TabList>
    function create_default_slot_6$3(ctx) {
    	let tab0;
    	let t;
    	let tab1;
    	let current;

    	tab0 = new dist$1.Tab({
    			props: {
    				$$slots: { default: [create_default_slot_8$2] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	tab1 = new dist$1.Tab({
    			props: {
    				$$slots: { default: [create_default_slot_7$2] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(tab0.$$.fragment);
    			t = space();
    			create_component(tab1.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(tab0, target, anchor);
    			insert_dev(target, t, anchor);
    			mount_component(tab1, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const tab0_changes = {};

    			if (dirty & /*$$scope*/ 2) {
    				tab0_changes.$$scope = { dirty, ctx };
    			}

    			tab0.$set(tab0_changes);
    			const tab1_changes = {};

    			if (dirty & /*$$scope*/ 2) {
    				tab1_changes.$$scope = { dirty, ctx };
    			}

    			tab1.$set(tab1_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(tab0.$$.fragment, local);
    			transition_in(tab1.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(tab0.$$.fragment, local);
    			transition_out(tab1.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(tab0, detaching);
    			if (detaching) detach_dev(t);
    			destroy_component(tab1, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_6$3.name,
    		type: "slot",
    		source: "(29:6) <TabList>",
    		ctx
    	});

    	return block;
    }

    // (46:8) <Badge href="#" className="margin-s bg--bluedark animation-fogwave">
    function create_default_slot_5$4(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Bandekriminialitet");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_5$4.name,
    		type: "slot",
    		source: "(46:8) <Badge href=\\\"#\\\" className=\\\"margin-s bg--bluedark animation-fogwave\\\">",
    		ctx
    	});

    	return block;
    }

    // (47:8) <Badge href="#" className="margin-s bg--green animation-fogwave">
    function create_default_slot_4$5(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Sport");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_4$5.name,
    		type: "slot",
    		source: "(47:8) <Badge href=\\\"#\\\" className=\\\"margin-s bg--green animation-fogwave\\\">",
    		ctx
    	});

    	return block;
    }

    // (48:8) <Badge href="#" className="margin-s bg--greendark animation-fogwave">
    function create_default_slot_3$6(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Nicklas Bendtner");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_3$6.name,
    		type: "slot",
    		source: "(48:8) <Badge href=\\\"#\\\" className=\\\"margin-s bg--greendark animation-fogwave\\\">",
    		ctx
    	});

    	return block;
    }

    // (34:4) <TabContent>
    function create_default_slot_2$9(ctx) {
    	let div0;
    	let articlecard;
    	let t0;
    	let div1;
    	let badge0;
    	let t1;
    	let badge1;
    	let t2;
    	let badge2;
    	let current;

    	articlecard = new dist$1.ArticleCard({
    			props: {
    				className: "animation-fogwave",
    				href: /*article*/ ctx[0].href,
    				media: {
    					src: 'https://via.placeholder.com/610x343&text=610x343'
    				},
    				section: /*article*/ ctx[0].section,
    				timestamp: /*article*/ ctx[0].timestamp,
    				title: /*article*/ ctx[0].title
    			},
    			$$inline: true
    		});

    	badge0 = new dist$1.Badge({
    			props: {
    				href: "#",
    				className: "margin-s bg--bluedark animation-fogwave",
    				$$slots: { default: [create_default_slot_5$4] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	badge1 = new dist$1.Badge({
    			props: {
    				href: "#",
    				className: "margin-s bg--green animation-fogwave",
    				$$slots: { default: [create_default_slot_4$5] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	badge2 = new dist$1.Badge({
    			props: {
    				href: "#",
    				className: "margin-s bg--greendark animation-fogwave",
    				$$slots: { default: [create_default_slot_3$6] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			create_component(articlecard.$$.fragment);
    			t0 = space();
    			div1 = element("div");
    			create_component(badge0.$$.fragment);
    			t1 = space();
    			create_component(badge1.$$.fragment);
    			t2 = space();
    			create_component(badge2.$$.fragment);
    			attr_dev(div0, "class", "flex grid-width--small");
    			add_location(div0, file$d, 34, 6, 1042);
    			attr_dev(div1, "class", "flex grid-width--small");
    			add_location(div1, file$d, 44, 6, 1386);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			mount_component(articlecard, div0, null);
    			insert_dev(target, t0, anchor);
    			insert_dev(target, div1, anchor);
    			mount_component(badge0, div1, null);
    			append_dev(div1, t1);
    			mount_component(badge1, div1, null);
    			append_dev(div1, t2);
    			mount_component(badge2, div1, null);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const badge0_changes = {};

    			if (dirty & /*$$scope*/ 2) {
    				badge0_changes.$$scope = { dirty, ctx };
    			}

    			badge0.$set(badge0_changes);
    			const badge1_changes = {};

    			if (dirty & /*$$scope*/ 2) {
    				badge1_changes.$$scope = { dirty, ctx };
    			}

    			badge1.$set(badge1_changes);
    			const badge2_changes = {};

    			if (dirty & /*$$scope*/ 2) {
    				badge2_changes.$$scope = { dirty, ctx };
    			}

    			badge2.$set(badge2_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(articlecard.$$.fragment, local);
    			transition_in(badge0.$$.fragment, local);
    			transition_in(badge1.$$.fragment, local);
    			transition_in(badge2.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(articlecard.$$.fragment, local);
    			transition_out(badge0.$$.fragment, local);
    			transition_out(badge1.$$.fragment, local);
    			transition_out(badge2.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			destroy_component(articlecard);
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(div1);
    			destroy_component(badge0);
    			destroy_component(badge1);
    			destroy_component(badge2);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_2$9.name,
    		type: "slot",
    		source: "(34:4) <TabContent>",
    		ctx
    	});

    	return block;
    }

    // (51:4) <TabContent>
    function create_default_slot_1$a(ctx) {
    	let prism0;
    	let t0;
    	let prism1;
    	let t1;
    	let prism2;
    	let current;

    	prism0 = new Prism$1({
    			props: {
    				language: "html",
    				source: `<ArticleCard
          className="animation-fogwave"
          href="{article.href}"
          media="{{src:'https://via.placeholder.com/610x343&text=610x343'}}"
          section="{article.section}"
          timestamp="{article.timestamp}"
          title="{article.title}"
          />`
    			},
    			$$inline: true
    		});

    	prism1 = new Prism$1({
    			props: {
    				language: "html",
    				source: `<Badge href="#" className="margin-s bg--greendark animation-fogwave">Nicklas Bendtner</Badge>`
    			},
    			$$inline: true
    		});

    	prism2 = new Prism$1({
    			props: {
    				language: "html",
    				source: `<a href="#" class="badge badge--primary animation-fogwave margin-s--r">Bandekriminialitet</a>`
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(prism0.$$.fragment);
    			t0 = space();
    			create_component(prism1.$$.fragment);
    			t1 = space();
    			create_component(prism2.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(prism0, target, anchor);
    			insert_dev(target, t0, anchor);
    			mount_component(prism1, target, anchor);
    			insert_dev(target, t1, anchor);
    			mount_component(prism2, target, anchor);
    			current = true;
    		},
    		p: noop,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(prism0.$$.fragment, local);
    			transition_in(prism1.$$.fragment, local);
    			transition_in(prism2.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(prism0.$$.fragment, local);
    			transition_out(prism1.$$.fragment, local);
    			transition_out(prism2.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(prism0, detaching);
    			if (detaching) detach_dev(t0);
    			destroy_component(prism1, detaching);
    			if (detaching) detach_dev(t1);
    			destroy_component(prism2, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_1$a.name,
    		type: "slot",
    		source: "(51:4) <TabContent>",
    		ctx
    	});

    	return block;
    }

    // (27:2) <Tabs>
    function create_default_slot$b(ctx) {
    	let div;
    	let tablist;
    	let t0;
    	let tabcontent0;
    	let t1;
    	let tabcontent1;
    	let current;

    	tablist = new dist$1.TabList({
    			props: {
    				$$slots: { default: [create_default_slot_6$3] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	tabcontent0 = new dist$1.TabContent({
    			props: {
    				$$slots: { default: [create_default_slot_2$9] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	tabcontent1 = new dist$1.TabContent({
    			props: {
    				$$slots: { default: [create_default_slot_1$a] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			div = element("div");
    			create_component(tablist.$$.fragment);
    			t0 = space();
    			create_component(tabcontent0.$$.fragment);
    			t1 = space();
    			create_component(tabcontent1.$$.fragment);
    			attr_dev(div, "class", "flex flex-justify--end width-1of1");
    			add_location(div, file$d, 27, 4, 836);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			mount_component(tablist, div, null);
    			insert_dev(target, t0, anchor);
    			mount_component(tabcontent0, target, anchor);
    			insert_dev(target, t1, anchor);
    			mount_component(tabcontent1, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const tablist_changes = {};

    			if (dirty & /*$$scope*/ 2) {
    				tablist_changes.$$scope = { dirty, ctx };
    			}

    			tablist.$set(tablist_changes);
    			const tabcontent0_changes = {};

    			if (dirty & /*$$scope*/ 2) {
    				tabcontent0_changes.$$scope = { dirty, ctx };
    			}

    			tabcontent0.$set(tabcontent0_changes);
    			const tabcontent1_changes = {};

    			if (dirty & /*$$scope*/ 2) {
    				tabcontent1_changes.$$scope = { dirty, ctx };
    			}

    			tabcontent1.$set(tabcontent1_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(tablist.$$.fragment, local);
    			transition_in(tabcontent0.$$.fragment, local);
    			transition_in(tabcontent1.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(tablist.$$.fragment, local);
    			transition_out(tabcontent0.$$.fragment, local);
    			transition_out(tabcontent1.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_component(tablist);
    			if (detaching) detach_dev(t0);
    			destroy_component(tabcontent0, detaching);
    			if (detaching) detach_dev(t1);
    			destroy_component(tabcontent1, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$b.name,
    		type: "slot",
    		source: "(27:2) <Tabs>",
    		ctx
    	});

    	return block;
    }

    function create_fragment$d(ctx) {
    	let div7;
    	let h1;
    	let t1;
    	let h30;
    	let t3;
    	let p0;
    	let t4;
    	let code0;
    	let t6;
    	let p1;
    	let t8;
    	let p2;
    	let b;
    	let t10;
    	let code1;
    	let t12;
    	let h31;
    	let t14;
    	let tabs;
    	let t15;
    	let h32;
    	let t17;
    	let div6;
    	let div2;
    	let div0;
    	let t19;
    	let div1;
    	let t21;
    	let div5;
    	let div3;
    	let t23;
    	let div4;
    	let prism;
    	let current;

    	tabs = new dist$1.Tabs({
    			props: {
    				$$slots: { default: [create_default_slot$b] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	prism = new Prism$1({
    			props: {
    				language: "html",
    				source: `<component className="animation-fogwave"/></component>`
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			div7 = element("div");
    			h1 = element("h1");
    			h1.textContent = "Animation";
    			t1 = space();
    			h30 = element("h3");
    			h30.textContent = "Anvendelse af animationer";
    			t3 = space();
    			p0 = element("p");
    			t4 = text("Animationer anvendes ved tilføjelse af class: ");
    			code0 = element("code");
    			code0.textContent = "className=\"animation-navnPåAnimation\"";
    			t6 = space();
    			p1 = element("p");
    			p1.textContent = "Denne class kan anvendes på tværs af vores komponenter";
    			t8 = space();
    			p2 = element("p");
    			b = element("b");
    			b.textContent = "OBS:";
    			t10 = text(" anvendes en animation direkte på et html-element skal det anvendes på følgende måde:\n    ");
    			code1 = element("code");
    			code1.textContent = "class=\"animation-navnPåAnimation\"";
    			t12 = space();
    			h31 = element("h3");
    			h31.textContent = "Eksempler på animationer";
    			t14 = space();
    			create_component(tabs.$$.fragment);
    			t15 = space();
    			h32 = element("h3");
    			h32.textContent = "Overblik over animationer";
    			t17 = space();
    			div6 = element("div");
    			div2 = element("div");
    			div0 = element("div");
    			div0.textContent = "Class";
    			t19 = space();
    			div1 = element("div");
    			div1.textContent = "Use case";
    			t21 = space();
    			div5 = element("div");
    			div3 = element("div");
    			div3.textContent = "animation-fogwave";
    			t23 = space();
    			div4 = element("div");
    			create_component(prism.$$.fragment);
    			attr_dev(h1, "class", "color--eb");
    			add_location(h1, file$d, 17, 2, 378);
    			add_location(h30, file$d, 18, 2, 417);
    			add_location(code0, file$d, 19, 51, 503);
    			add_location(p0, file$d, 19, 2, 454);
    			add_location(p1, file$d, 20, 2, 560);
    			add_location(b, file$d, 22, 4, 632);
    			add_location(code1, file$d, 23, 4, 733);
    			add_location(p2, file$d, 21, 2, 624);
    			add_location(h31, file$d, 25, 2, 789);
    			add_location(h32, file$d, 73, 2, 2466);
    			attr_dev(div0, "class", "width-1of3 padding-m fontweight-bold");
    			add_location(div0, file$d, 76, 6, 2644);
    			attr_dev(div1, "class", "width-1of3 padding-m fontweight-bold");
    			add_location(div1, file$d, 77, 6, 2712);
    			attr_dev(div2, "class", "flex flex-item--center bg--graa7");
    			set_style(div2, "border-bottom", "1px solid rgba(0, 0, 0, .1)");
    			add_location(div2, file$d, 75, 4, 2539);
    			attr_dev(div3, "class", "flex-item--center width-1of3 padding-m");
    			add_location(div3, file$d, 80, 6, 2879);
    			attr_dev(div4, "class", "flex-item--center width-2of3 padding-m");
    			add_location(div4, file$d, 81, 6, 2961);
    			attr_dev(div5, "class", "flex bg--graa7");
    			set_style(div5, "border-bottom", "1px solid rgba(0, 0, 0, .1)");
    			add_location(div5, file$d, 79, 4, 2792);
    			attr_dev(div6, "class", "grid-width--large");
    			add_location(div6, file$d, 74, 2, 2503);
    			attr_dev(div7, "class", "grid-width--large");
    			add_location(div7, file$d, 16, 0, 344);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div7, anchor);
    			append_dev(div7, h1);
    			append_dev(div7, t1);
    			append_dev(div7, h30);
    			append_dev(div7, t3);
    			append_dev(div7, p0);
    			append_dev(p0, t4);
    			append_dev(p0, code0);
    			append_dev(div7, t6);
    			append_dev(div7, p1);
    			append_dev(div7, t8);
    			append_dev(div7, p2);
    			append_dev(p2, b);
    			append_dev(p2, t10);
    			append_dev(p2, code1);
    			append_dev(div7, t12);
    			append_dev(div7, h31);
    			append_dev(div7, t14);
    			mount_component(tabs, div7, null);
    			append_dev(div7, t15);
    			append_dev(div7, h32);
    			append_dev(div7, t17);
    			append_dev(div7, div6);
    			append_dev(div6, div2);
    			append_dev(div2, div0);
    			append_dev(div2, t19);
    			append_dev(div2, div1);
    			append_dev(div6, t21);
    			append_dev(div6, div5);
    			append_dev(div5, div3);
    			append_dev(div5, t23);
    			append_dev(div5, div4);
    			mount_component(prism, div4, null);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const tabs_changes = {};

    			if (dirty & /*$$scope*/ 2) {
    				tabs_changes.$$scope = { dirty, ctx };
    			}

    			tabs.$set(tabs_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(tabs.$$.fragment, local);
    			transition_in(prism.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(tabs.$$.fragment, local);
    			transition_out(prism.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div7);
    			destroy_component(tabs);
    			destroy_component(prism);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$d.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$d($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Animation', slots, []);

    	let article = {
    		href: '#',
    		media: {
    			src: 'https://via.placeholder.com/610x343&text=610x343'
    		},
    		section: 'Sport',
    		timestamp: '2 timer siden',
    		title: 'List element'
    	};

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Animation> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({
    		Prism: Prism$1,
    		ArticleCard: dist$1.ArticleCard,
    		Badge: dist$1.Badge,
    		Tabs: dist$1.Tabs,
    		Tab: dist$1.Tab,
    		TabContent: dist$1.TabContent,
    		TabList: dist$1.TabList,
    		article
    	});

    	$$self.$inject_state = $$props => {
    		if ('article' in $$props) $$invalidate(0, article = $$props.article);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [article];
    }

    class Animation extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$d, create_fragment$d, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Animation",
    			options,
    			id: create_fragment$d.name
    		});
    	}
    }

    /* docs_src/utilities/Border.svelte generated by Svelte v3.42.1 */
    const file$c = "docs_src/utilities/Border.svelte";

    // (11:2) 
    function create_content_slot_2(ctx) {
    	let div5;
    	let div0;
    	let t1;
    	let div1;
    	let t3;
    	let div2;
    	let t5;
    	let div3;
    	let t7;
    	let div4;

    	const block = {
    		c: function create() {
    			div5 = element("div");
    			div0 = element("div");
    			div0.textContent = "border";
    			t1 = space();
    			div1 = element("div");
    			div1.textContent = "border--t";
    			t3 = space();
    			div2 = element("div");
    			div2.textContent = "border--b";
    			t5 = space();
    			div3 = element("div");
    			div3.textContent = "border--l";
    			t7 = space();
    			div4 = element("div");
    			div4.textContent = "border--r";
    			attr_dev(div0, "class", "border border--black width-1of3 padding-xl margin-l bg--eb");
    			add_location(div0, file$c, 11, 4, 252);
    			attr_dev(div1, "class", "border--t border--black width-1of3 padding-xl margin-l bg--eb");
    			add_location(div1, file$c, 12, 4, 341);
    			attr_dev(div2, "class", "border--b border--black width-1of3 padding-xl margin-l bg--eb");
    			add_location(div2, file$c, 13, 4, 436);
    			attr_dev(div3, "class", "border--l border--black width-1of3 padding-xl margin-l bg--eb");
    			add_location(div3, file$c, 14, 4, 531);
    			attr_dev(div4, "class", "border--r border--black width-1of3 padding-xl margin-l bg--eb");
    			add_location(div4, file$c, 15, 4, 626);
    			attr_dev(div5, "class", "flex flex-justify--between flex-wrap--wrap");
    			attr_dev(div5, "slot", "content");
    			add_location(div5, file$c, 10, 2, 176);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div5, anchor);
    			append_dev(div5, div0);
    			append_dev(div5, t1);
    			append_dev(div5, div1);
    			append_dev(div5, t3);
    			append_dev(div5, div2);
    			append_dev(div5, t5);
    			append_dev(div5, div3);
    			append_dev(div5, t7);
    			append_dev(div5, div4);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div5);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_content_slot_2.name,
    		type: "slot",
    		source: "(11:2) ",
    		ctx
    	});

    	return block;
    }

    // (20:0) <Prism language="html">
    function create_default_slot_2$8(ctx) {
    	let t_value = `<div class="border"></div>
<div class="border--t"></div>
<div class="border--b"></div>
<div class="border--l"></div>
<div class="border--r"></div>` + "";

    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_2$8.name,
    		type: "slot",
    		source: "(20:0) <Prism language=\\\"html\\\">",
    		ctx
    	});

    	return block;
    }

    // (31:2) 
    function create_content_slot_1$1(ctx) {
    	let div6;
    	let div0;
    	let t1;
    	let div1;
    	let t3;
    	let div2;
    	let t5;
    	let div3;
    	let t7;
    	let div4;
    	let t9;
    	let div5;

    	const block = {
    		c: function create() {
    			div6 = element("div");
    			div0 = element("div");
    			div0.textContent = "border-radius";
    			t1 = space();
    			div1 = element("div");
    			div1.textContent = "border-radius-s";
    			t3 = space();
    			div2 = element("div");
    			div2.textContent = "border-radius--t";
    			t5 = space();
    			div3 = element("div");
    			div3.textContent = "border-radius-s--t";
    			t7 = space();
    			div4 = element("div");
    			div4.textContent = "border-radius--b";
    			t9 = space();
    			div5 = element("div");
    			div5.textContent = "border-radius-s--b";
    			attr_dev(div0, "class", "border-radius padding-xl width-1of3 margin-l bg--eb");
    			add_location(div0, file$c, 31, 4, 1053);
    			attr_dev(div1, "class", "border-radius-s padding-xl width-1of3 margin-l bg--eb");
    			add_location(div1, file$c, 32, 4, 1142);
    			attr_dev(div2, "class", "border-radius--t padding-xl width-1of3 margin-l bg--eb");
    			add_location(div2, file$c, 33, 4, 1235);
    			attr_dev(div3, "class", "border-radius-s--t padding-xl width-1of3 margin-l bg--eb");
    			add_location(div3, file$c, 34, 4, 1330);
    			attr_dev(div4, "class", "border-radius--b padding-xl width-1of3 margin-l bg--eb");
    			add_location(div4, file$c, 35, 4, 1429);
    			attr_dev(div5, "class", "border-radius-s--b padding-xl width-1of3 margin-l bg--eb");
    			add_location(div5, file$c, 36, 4, 1524);
    			attr_dev(div6, "class", "flex flex-justify--between flex-wrap--wrap");
    			attr_dev(div6, "slot", "content");
    			add_location(div6, file$c, 30, 2, 977);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div6, anchor);
    			append_dev(div6, div0);
    			append_dev(div6, t1);
    			append_dev(div6, div1);
    			append_dev(div6, t3);
    			append_dev(div6, div2);
    			append_dev(div6, t5);
    			append_dev(div6, div3);
    			append_dev(div6, t7);
    			append_dev(div6, div4);
    			append_dev(div6, t9);
    			append_dev(div6, div5);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div6);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_content_slot_1$1.name,
    		type: "slot",
    		source: "(31:2) ",
    		ctx
    	});

    	return block;
    }

    // (41:0) <Prism language="html">
    function create_default_slot_1$9(ctx) {
    	let t_value = `<div class="border-radius"></div>
<div class="border-radius-s"></div>
<div class="border-radius--t"></div>
<div class="border-radius-s--t"></div>
<div class="border-radius--b"></div>
<div class="border-radius-s--b"></div>` + "";

    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_1$9.name,
    		type: "slot",
    		source: "(41:0) <Prism language=\\\"html\\\">",
    		ctx
    	});

    	return block;
    }

    // (54:2) 
    function create_content_slot$3(ctx) {
    	let div9;
    	let div0;
    	let t1;
    	let div1;
    	let t3;
    	let div2;
    	let t5;
    	let div3;
    	let t7;
    	let div4;
    	let t9;
    	let div5;
    	let t11;
    	let div6;
    	let t13;
    	let div7;
    	let t15;
    	let div8;

    	const block = {
    		c: function create() {
    			div9 = element("div");
    			div0 = element("div");
    			div0.textContent = "border--black";
    			t1 = space();
    			div1 = element("div");
    			div1.textContent = "border--graa1";
    			t3 = space();
    			div2 = element("div");
    			div2.textContent = "border--graa2";
    			t5 = space();
    			div3 = element("div");
    			div3.textContent = "border--graa3";
    			t7 = space();
    			div4 = element("div");
    			div4.textContent = "border--graa4";
    			t9 = space();
    			div5 = element("div");
    			div5.textContent = "border--graa5";
    			t11 = space();
    			div6 = element("div");
    			div6.textContent = "border--graa6";
    			t13 = space();
    			div7 = element("div");
    			div7.textContent = "border--graa7";
    			t15 = space();
    			div8 = element("div");
    			div8.textContent = "border--white";
    			attr_dev(div0, "class", "flex flex-align--center border border--black padding-xl width-1of3 margin-l");
    			add_location(div0, file$c, 54, 4, 2043);
    			attr_dev(div1, "class", "flex flex-align--center border border--graa1 padding-xl width-1of3 margin-l");
    			add_location(div1, file$c, 55, 4, 2156);
    			attr_dev(div2, "class", "flex flex-align--center border border--graa2 padding-xl width-1of3 margin-l");
    			add_location(div2, file$c, 56, 4, 2269);
    			attr_dev(div3, "class", "flex flex-align--center border border--graa3 padding-xl width-1of3 margin-l");
    			add_location(div3, file$c, 57, 4, 2382);
    			attr_dev(div4, "class", "flex flex-align--center border border--graa4 padding-xl width-1of3 margin-l");
    			add_location(div4, file$c, 58, 4, 2495);
    			attr_dev(div5, "class", "flex flex-align--center border border--graa5 padding-xl width-1of3 margin-l");
    			add_location(div5, file$c, 59, 4, 2608);
    			attr_dev(div6, "class", "flex flex-align--center border border--graa6 padding-xl width-1of3 margin-l");
    			add_location(div6, file$c, 60, 4, 2721);
    			attr_dev(div7, "class", "flex flex-align--center border border--graa7 padding-xl width-1of3 margin-l");
    			add_location(div7, file$c, 61, 4, 2834);
    			attr_dev(div8, "class", "flex flex-align--center border border--white padding-xl width-1of3 margin-l");
    			add_location(div8, file$c, 62, 4, 2947);
    			attr_dev(div9, "class", "flex flex-justify--between flex-wrap--wrap");
    			attr_dev(div9, "slot", "content");
    			add_location(div9, file$c, 53, 2, 1967);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div9, anchor);
    			append_dev(div9, div0);
    			append_dev(div9, t1);
    			append_dev(div9, div1);
    			append_dev(div9, t3);
    			append_dev(div9, div2);
    			append_dev(div9, t5);
    			append_dev(div9, div3);
    			append_dev(div9, t7);
    			append_dev(div9, div4);
    			append_dev(div9, t9);
    			append_dev(div9, div5);
    			append_dev(div9, t11);
    			append_dev(div9, div6);
    			append_dev(div9, t13);
    			append_dev(div9, div7);
    			append_dev(div9, t15);
    			append_dev(div9, div8);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div9);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_content_slot$3.name,
    		type: "slot",
    		source: "(54:2) ",
    		ctx
    	});

    	return block;
    }

    // (67:0) <Prism language="html">
    function create_default_slot$a(ctx) {
    	let t_value = `<div class="border border--black"></div>
<div class="border border--graa1"></div>
<div class="border border--graa2"></div>
<div class="border border--graa3"></div>
<div class="border border--graa4"></div>
<div class="border border--graa5"></div>
<div class="border border--graa6"></div>
<div class="border border--graa7"></div>
<div class="border border--white"></div>` + "";

    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$a.name,
    		type: "slot",
    		source: "(67:0) <Prism language=\\\"html\\\">",
    		ctx
    	});

    	return block;
    }

    function create_fragment$c(ctx) {
    	let h1;
    	let t1;
    	let h30;
    	let t3;
    	let card0;
    	let t4;
    	let prism0;
    	let t5;
    	let h31;
    	let t7;
    	let card1;
    	let t8;
    	let prism1;
    	let t9;
    	let h32;
    	let t11;
    	let p;
    	let t13;
    	let card2;
    	let t14;
    	let prism2;
    	let current;

    	card0 = new dist$1.Card({
    			props: {
    				className: "bg--graa7",
    				$$slots: { content: [create_content_slot_2] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	prism0 = new Prism$1({
    			props: {
    				language: "html",
    				$$slots: { default: [create_default_slot_2$8] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	card1 = new dist$1.Card({
    			props: {
    				className: "bg--graa7",
    				$$slots: { content: [create_content_slot_1$1] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	prism1 = new Prism$1({
    			props: {
    				language: "html",
    				$$slots: { default: [create_default_slot_1$9] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	card2 = new dist$1.Card({
    			props: {
    				$$slots: { content: [create_content_slot$3] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	prism2 = new Prism$1({
    			props: {
    				language: "html",
    				$$slots: { default: [create_default_slot$a] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			h1 = element("h1");
    			h1.textContent = "Border";
    			t1 = space();
    			h30 = element("h3");
    			h30.textContent = "Border";
    			t3 = space();
    			create_component(card0.$$.fragment);
    			t4 = space();
    			create_component(prism0.$$.fragment);
    			t5 = space();
    			h31 = element("h3");
    			h31.textContent = "Border-radius";
    			t7 = space();
    			create_component(card1.$$.fragment);
    			t8 = space();
    			create_component(prism1.$$.fragment);
    			t9 = space();
    			h32 = element("h3");
    			h32.textContent = "Border colors";
    			t11 = space();
    			p = element("p");
    			p.textContent = "All border colors available";
    			t13 = space();
    			create_component(card2.$$.fragment);
    			t14 = space();
    			create_component(prism2.$$.fragment);
    			attr_dev(h1, "class", "color--eb");
    			add_location(h1, file$c, 5, 0, 93);
    			add_location(h30, file$c, 7, 0, 128);
    			add_location(h31, file$c, 27, 0, 922);
    			add_location(h32, file$c, 49, 0, 1899);
    			add_location(p, file$c, 50, 0, 1922);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, h1, anchor);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, h30, anchor);
    			insert_dev(target, t3, anchor);
    			mount_component(card0, target, anchor);
    			insert_dev(target, t4, anchor);
    			mount_component(prism0, target, anchor);
    			insert_dev(target, t5, anchor);
    			insert_dev(target, h31, anchor);
    			insert_dev(target, t7, anchor);
    			mount_component(card1, target, anchor);
    			insert_dev(target, t8, anchor);
    			mount_component(prism1, target, anchor);
    			insert_dev(target, t9, anchor);
    			insert_dev(target, h32, anchor);
    			insert_dev(target, t11, anchor);
    			insert_dev(target, p, anchor);
    			insert_dev(target, t13, anchor);
    			mount_component(card2, target, anchor);
    			insert_dev(target, t14, anchor);
    			mount_component(prism2, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const card0_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				card0_changes.$$scope = { dirty, ctx };
    			}

    			card0.$set(card0_changes);
    			const prism0_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				prism0_changes.$$scope = { dirty, ctx };
    			}

    			prism0.$set(prism0_changes);
    			const card1_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				card1_changes.$$scope = { dirty, ctx };
    			}

    			card1.$set(card1_changes);
    			const prism1_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				prism1_changes.$$scope = { dirty, ctx };
    			}

    			prism1.$set(prism1_changes);
    			const card2_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				card2_changes.$$scope = { dirty, ctx };
    			}

    			card2.$set(card2_changes);
    			const prism2_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				prism2_changes.$$scope = { dirty, ctx };
    			}

    			prism2.$set(prism2_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(card0.$$.fragment, local);
    			transition_in(prism0.$$.fragment, local);
    			transition_in(card1.$$.fragment, local);
    			transition_in(prism1.$$.fragment, local);
    			transition_in(card2.$$.fragment, local);
    			transition_in(prism2.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(card0.$$.fragment, local);
    			transition_out(prism0.$$.fragment, local);
    			transition_out(card1.$$.fragment, local);
    			transition_out(prism1.$$.fragment, local);
    			transition_out(card2.$$.fragment, local);
    			transition_out(prism2.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(h1);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(h30);
    			if (detaching) detach_dev(t3);
    			destroy_component(card0, detaching);
    			if (detaching) detach_dev(t4);
    			destroy_component(prism0, detaching);
    			if (detaching) detach_dev(t5);
    			if (detaching) detach_dev(h31);
    			if (detaching) detach_dev(t7);
    			destroy_component(card1, detaching);
    			if (detaching) detach_dev(t8);
    			destroy_component(prism1, detaching);
    			if (detaching) detach_dev(t9);
    			if (detaching) detach_dev(h32);
    			if (detaching) detach_dev(t11);
    			if (detaching) detach_dev(p);
    			if (detaching) detach_dev(t13);
    			destroy_component(card2, detaching);
    			if (detaching) detach_dev(t14);
    			destroy_component(prism2, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$c.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$c($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Border', slots, []);
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Border> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({ Prism: Prism$1, Card: dist$1.Card });
    	return [];
    }

    class Border extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$c, create_fragment$c, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Border",
    			options,
    			id: create_fragment$c.name
    		});
    	}
    }

    /* docs_src/utilities/Color.svelte generated by Svelte v3.42.1 */
    const file$b = "docs_src/utilities/Color.svelte";

    // (16:2) 
    function create_content_slot_1(ctx) {
    	let div7;
    	let div0;
    	let t1;
    	let div1;
    	let t3;
    	let div2;
    	let t5;
    	let div3;
    	let t7;
    	let div4;
    	let t9;
    	let div5;
    	let t11;
    	let div6;
    	let t12;
    	let em;

    	const block = {
    		c: function create() {
    			div7 = element("div");
    			div0 = element("div");
    			div0.textContent = "color--black";
    			t1 = space();
    			div1 = element("div");
    			div1.textContent = "color--white";
    			t3 = space();
    			div2 = element("div");
    			div2.textContent = "color--sport";
    			t5 = space();
    			div3 = element("div");
    			div3.textContent = "color--eb";
    			t7 = space();
    			div4 = element("div");
    			div4.textContent = "color--orangedark";
    			t9 = space();
    			div5 = element("div");
    			div5.textContent = "color--nyheder";
    			t11 = space();
    			div6 = element("div");
    			t12 = text("color--section\n      ");
    			em = element("em");
    			em.textContent = "(inherit the color of the section i.e sport)";
    			attr_dev(div0, "class", "flex flex--column padding-xl width-1of3 margin-l bg--white color--black");
    			add_location(div0, file$b, 16, 4, 463);
    			attr_dev(div1, "class", "flex flex--column padding-xl width-1of3 margin-l bg--black color--white");
    			add_location(div1, file$b, 17, 4, 571);
    			attr_dev(div2, "class", "flex flex--column padding-xl width-1of3 margin-l bg--white color--sport");
    			add_location(div2, file$b, 18, 4, 679);
    			attr_dev(div3, "class", "flex flex--column padding-xl width-1of3 margin-l bg--white color--eb");
    			add_location(div3, file$b, 19, 4, 787);
    			attr_dev(div4, "class", "flex flex--column padding-xl width-1of3 margin-l bg--white color--orangedark");
    			add_location(div4, file$b, 20, 4, 889);
    			attr_dev(div5, "class", "flex flex--column padding-xl width-1of3 margin-l bg--white color--nyheder");
    			add_location(div5, file$b, 21, 4, 1007);
    			add_location(em, file$b, 24, 6, 1234);
    			attr_dev(div6, "class", "flex flex--column padding-xl width-1of3 margin-l bg--white color--section");
    			add_location(div6, file$b, 22, 4, 1119);
    			attr_dev(div7, "class", "flex flex-justify--between flex-wrap--wrap");
    			attr_dev(div7, "slot", "content");
    			add_location(div7, file$b, 15, 2, 387);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div7, anchor);
    			append_dev(div7, div0);
    			append_dev(div7, t1);
    			append_dev(div7, div1);
    			append_dev(div7, t3);
    			append_dev(div7, div2);
    			append_dev(div7, t5);
    			append_dev(div7, div3);
    			append_dev(div7, t7);
    			append_dev(div7, div4);
    			append_dev(div7, t9);
    			append_dev(div7, div5);
    			append_dev(div7, t11);
    			append_dev(div7, div6);
    			append_dev(div6, t12);
    			append_dev(div6, em);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div7);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_content_slot_1.name,
    		type: "slot",
    		source: "(16:2) ",
    		ctx
    	});

    	return block;
    }

    // (30:0) <Prism language="html">
    function create_default_slot_1$8(ctx) {
    	let t_value = `<div class="color--black"></div>
<div class="color--white"></div>
<div class="color--blue"></div>
<div class="color--sport"></div>
<div class="color--orangedark"></div>
<div class="color--nyheder"></div>
<div class="color--section"></div>` + "";

    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_1$8.name,
    		type: "slot",
    		source: "(30:0) <Prism language=\\\"html\\\">",
    		ctx
    	});

    	return block;
    }

    // (44:2) 
    function create_content_slot$2(ctx) {
    	let div7;
    	let div0;
    	let t1;
    	let div1;
    	let t3;
    	let div2;
    	let t5;
    	let div3;
    	let t7;
    	let div4;
    	let t9;
    	let div5;
    	let t11;
    	let div6;
    	let t12;
    	let em;

    	const block = {
    		c: function create() {
    			div7 = element("div");
    			div0 = element("div");
    			div0.textContent = "bg--black";
    			t1 = space();
    			div1 = element("div");
    			div1.textContent = "bg--white";
    			t3 = space();
    			div2 = element("div");
    			div2.textContent = "bg--underholdning";
    			t5 = space();
    			div3 = element("div");
    			div3.textContent = "bg--eb";
    			t7 = space();
    			div4 = element("div");
    			div4.textContent = "bg--orangedark";
    			t9 = space();
    			div5 = element("div");
    			div5.textContent = "bg--nyheder";
    			t11 = space();
    			div6 = element("div");
    			t12 = text("bg--section\n      ");
    			em = element("em");
    			em.textContent = "(inherit the color of the section i.e sport)";
    			attr_dev(div0, "class", "flex flex--column padding-xl width-1of3 margin-l bg--black");
    			add_location(div0, file$b, 44, 4, 1834);
    			attr_dev(div1, "class", "flex flex--column padding-xl width-1of3 margin-l bg--white color--black");
    			add_location(div1, file$b, 45, 4, 1926);
    			attr_dev(div2, "class", "flex flex--column padding-xl width-1of3 margin-l bg--underholdning");
    			add_location(div2, file$b, 46, 4, 2031);
    			attr_dev(div3, "class", "flex flex--column padding-xl width-1of3 margin-l bg--eb");
    			add_location(div3, file$b, 47, 4, 2139);
    			attr_dev(div4, "class", "flex flex--column padding-xl width-1of3 margin-l bg--orangedark");
    			add_location(div4, file$b, 48, 4, 2225);
    			attr_dev(div5, "class", "flex flex--column padding-xl width-1of3 margin-l bg--nyheder");
    			add_location(div5, file$b, 49, 4, 2327);
    			add_location(em, file$b, 52, 6, 2535);
    			attr_dev(div6, "class", "flex flex--column padding-xl width-1of3 margin-l bg--white color--section");
    			add_location(div6, file$b, 50, 4, 2423);
    			attr_dev(div7, "class", "flex flex-justify--between flex-wrap--wrap");
    			attr_dev(div7, "slot", "content");
    			add_location(div7, file$b, 43, 2, 1758);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div7, anchor);
    			append_dev(div7, div0);
    			append_dev(div7, t1);
    			append_dev(div7, div1);
    			append_dev(div7, t3);
    			append_dev(div7, div2);
    			append_dev(div7, t5);
    			append_dev(div7, div3);
    			append_dev(div7, t7);
    			append_dev(div7, div4);
    			append_dev(div7, t9);
    			append_dev(div7, div5);
    			append_dev(div7, t11);
    			append_dev(div7, div6);
    			append_dev(div6, t12);
    			append_dev(div6, em);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div7);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_content_slot$2.name,
    		type: "slot",
    		source: "(44:2) ",
    		ctx
    	});

    	return block;
    }

    // (58:0) <Prism language="html">
    function create_default_slot$9(ctx) {
    	let t_value = `<div class="bg--black"></div>
<div class="bg--white"></div>
<div class="bg--underholdning"></div>
<div class="bg--eb"></div>
<div class="bg--orangedark"></div>
<div class="bg--nyheder"></div>
<div class="bg--section"></div>` + "";

    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$9.name,
    		type: "slot",
    		source: "(58:0) <Prism language=\\\"html\\\">",
    		ctx
    	});

    	return block;
    }

    function create_fragment$b(ctx) {
    	let h1;
    	let t1;
    	let h30;
    	let t3;
    	let p0;
    	let t5;
    	let card0;
    	let t6;
    	let prism0;
    	let t7;
    	let h31;
    	let t9;
    	let p1;
    	let t11;
    	let card1;
    	let t12;
    	let prism1;
    	let t13;
    	let h32;
    	let t15;
    	let object;
    	let t16;
    	let a;
    	let current;
    	let mounted;
    	let dispose;

    	card0 = new dist$1.Card({
    			props: {
    				className: "bg--graa7",
    				$$slots: { content: [create_content_slot_1] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	prism0 = new Prism$1({
    			props: {
    				language: "html",
    				$$slots: { default: [create_default_slot_1$8] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	card1 = new dist$1.Card({
    			props: {
    				className: "bg--graa7",
    				$$slots: { content: [create_content_slot$2] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	prism1 = new Prism$1({
    			props: {
    				language: "html",
    				$$slots: { default: [create_default_slot$9] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			h1 = element("h1");
    			h1.textContent = "Color";
    			t1 = space();
    			h30 = element("h3");
    			h30.textContent = "Text color";
    			t3 = space();
    			p0 = element("p");
    			p0.textContent = "View all colors available";
    			t5 = space();
    			create_component(card0.$$.fragment);
    			t6 = space();
    			create_component(prism0.$$.fragment);
    			t7 = space();
    			h31 = element("h3");
    			h31.textContent = "Background color";
    			t9 = space();
    			p1 = element("p");
    			p1.textContent = "View all colors available";
    			t11 = space();
    			create_component(card1.$$.fragment);
    			t12 = space();
    			create_component(prism1.$$.fragment);
    			t13 = space();
    			h32 = element("h3");
    			h32.textContent = "All colors available on ekstrabladet";
    			t15 = space();
    			object = element("object");
    			t16 = text("Error: Embedded data could not be displayed. Visit this link instead: ");
    			a = element("a");
    			a.textContent = "eb-colors";
    			attr_dev(h1, "class", "color--eb");
    			add_location(h1, file$b, 9, 0, 197);
    			add_location(h30, file$b, 11, 0, 231);
    			attr_dev(p0, "class", "color--red");
    			set_style(p0, "cursor", "pointer");
    			add_location(p0, file$b, 12, 0, 251);
    			add_location(h31, file$b, 39, 0, 1596);
    			attr_dev(p1, "class", "color--red");
    			set_style(p1, "cursor", "pointer");
    			add_location(p1, file$b, 40, 0, 1622);
    			attr_dev(h32, "id", "all-colors-section");
    			add_location(h32, file$b, 67, 0, 2882);
    			attr_dev(a, "href", "https://ekstrabladetudvikling.github.io/eb-colors/");
    			add_location(a, file$b, 70, 72, 3136);
    			attr_dev(object, "data", "https://ekstrabladetudvikling.github.io/eb-colors/");
    			attr_dev(object, "width", "100%");
    			attr_dev(object, "height", "500");
    			attr_dev(object, "title", "eb-colors");
    			add_location(object, file$b, 69, 0, 2953);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, h1, anchor);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, h30, anchor);
    			insert_dev(target, t3, anchor);
    			insert_dev(target, p0, anchor);
    			insert_dev(target, t5, anchor);
    			mount_component(card0, target, anchor);
    			insert_dev(target, t6, anchor);
    			mount_component(prism0, target, anchor);
    			insert_dev(target, t7, anchor);
    			insert_dev(target, h31, anchor);
    			insert_dev(target, t9, anchor);
    			insert_dev(target, p1, anchor);
    			insert_dev(target, t11, anchor);
    			mount_component(card1, target, anchor);
    			insert_dev(target, t12, anchor);
    			mount_component(prism1, target, anchor);
    			insert_dev(target, t13, anchor);
    			insert_dev(target, h32, anchor);
    			insert_dev(target, t15, anchor);
    			insert_dev(target, object, anchor);
    			append_dev(object, t16);
    			append_dev(object, a);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(p0, "click", moveToAllColors, false, false, false),
    					listen_dev(p1, "click", moveToAllColors, false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			const card0_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				card0_changes.$$scope = { dirty, ctx };
    			}

    			card0.$set(card0_changes);
    			const prism0_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				prism0_changes.$$scope = { dirty, ctx };
    			}

    			prism0.$set(prism0_changes);
    			const card1_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				card1_changes.$$scope = { dirty, ctx };
    			}

    			card1.$set(card1_changes);
    			const prism1_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				prism1_changes.$$scope = { dirty, ctx };
    			}

    			prism1.$set(prism1_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(card0.$$.fragment, local);
    			transition_in(prism0.$$.fragment, local);
    			transition_in(card1.$$.fragment, local);
    			transition_in(prism1.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(card0.$$.fragment, local);
    			transition_out(prism0.$$.fragment, local);
    			transition_out(card1.$$.fragment, local);
    			transition_out(prism1.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(h1);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(h30);
    			if (detaching) detach_dev(t3);
    			if (detaching) detach_dev(p0);
    			if (detaching) detach_dev(t5);
    			destroy_component(card0, detaching);
    			if (detaching) detach_dev(t6);
    			destroy_component(prism0, detaching);
    			if (detaching) detach_dev(t7);
    			if (detaching) detach_dev(h31);
    			if (detaching) detach_dev(t9);
    			if (detaching) detach_dev(p1);
    			if (detaching) detach_dev(t11);
    			destroy_component(card1, detaching);
    			if (detaching) detach_dev(t12);
    			destroy_component(prism1, detaching);
    			if (detaching) detach_dev(t13);
    			if (detaching) detach_dev(h32);
    			if (detaching) detach_dev(t15);
    			if (detaching) detach_dev(object);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$b.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function moveToAllColors() {
    	document.getElementById('all-colors-section').scrollIntoView();
    }

    function instance$b($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Color', slots, []);
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Color> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({ Prism: Prism$1, Card: dist$1.Card, moveToAllColors });
    	return [];
    }

    class Color extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$b, create_fragment$b, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Color",
    			options,
    			id: create_fragment$b.name
    		});
    	}
    }

    /* docs_src/utilities/DataTheme.svelte generated by Svelte v3.42.1 */
    const file$a = "docs_src/utilities/DataTheme.svelte";

    // (33:8) <Tab>
    function create_default_slot_5$3(ctx) {
    	let i;

    	const block = {
    		c: function create() {
    			i = element("i");
    			attr_dev(i, "class", "fas fa-cubes");
    			add_location(i, file$a, 32, 13, 1160);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, i, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(i);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_5$3.name,
    		type: "slot",
    		source: "(33:8) <Tab>",
    		ctx
    	});

    	return block;
    }

    // (34:8) <Tab>
    function create_default_slot_4$4(ctx) {
    	let i;

    	const block = {
    		c: function create() {
    			i = element("i");
    			attr_dev(i, "class", "fas fa-code");
    			add_location(i, file$a, 33, 13, 1206);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, i, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(i);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_4$4.name,
    		type: "slot",
    		source: "(34:8) <Tab>",
    		ctx
    	});

    	return block;
    }

    // (32:6) <TabList>
    function create_default_slot_3$5(ctx) {
    	let tab0;
    	let t;
    	let tab1;
    	let current;

    	tab0 = new dist$1.Tab({
    			props: {
    				$$slots: { default: [create_default_slot_5$3] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	tab1 = new dist$1.Tab({
    			props: {
    				$$slots: { default: [create_default_slot_4$4] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(tab0.$$.fragment);
    			t = space();
    			create_component(tab1.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(tab0, target, anchor);
    			insert_dev(target, t, anchor);
    			mount_component(tab1, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const tab0_changes = {};

    			if (dirty & /*$$scope*/ 2) {
    				tab0_changes.$$scope = { dirty, ctx };
    			}

    			tab0.$set(tab0_changes);
    			const tab1_changes = {};

    			if (dirty & /*$$scope*/ 2) {
    				tab1_changes.$$scope = { dirty, ctx };
    			}

    			tab1.$set(tab1_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(tab0.$$.fragment, local);
    			transition_in(tab1.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(tab0.$$.fragment, local);
    			transition_out(tab1.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(tab0, detaching);
    			if (detaching) detach_dev(t);
    			destroy_component(tab1, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_3$5.name,
    		type: "slot",
    		source: "(32:6) <TabList>",
    		ctx
    	});

    	return block;
    }

    // (37:4) <TabContent>
    function create_default_slot_2$7(ctx) {
    	let accordion0;
    	let t0;
    	let accordion1;
    	let t1;
    	let div0;
    	let p0;
    	let t3;
    	let div1;
    	let p1;
    	let current;

    	accordion0 = new dist$1.Accordion({
    			props: {
    				dataTheme: "lightmode",
    				tabs: /*tabs*/ ctx[0]
    			},
    			$$inline: true
    		});

    	accordion1 = new dist$1.Accordion({
    			props: {
    				dataTheme: "darkmode",
    				tabs: /*tabs*/ ctx[0]
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(accordion0.$$.fragment);
    			t0 = space();
    			create_component(accordion1.$$.fragment);
    			t1 = space();
    			div0 = element("div");
    			p0 = element("p");
    			p0.textContent = "I'm now in lightmode";
    			t3 = space();
    			div1 = element("div");
    			p1 = element("p");
    			p1.textContent = "I'm now in darkmode";
    			add_location(p0, file$a, 40, 8, 1423);
    			attr_dev(div0, "data-theme", "lightmode");
    			add_location(div0, file$a, 39, 6, 1386);
    			add_location(p1, file$a, 43, 8, 1506);
    			attr_dev(div1, "data-theme", "darkmode");
    			add_location(div1, file$a, 42, 6, 1470);
    		},
    		m: function mount(target, anchor) {
    			mount_component(accordion0, target, anchor);
    			insert_dev(target, t0, anchor);
    			mount_component(accordion1, target, anchor);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, div0, anchor);
    			append_dev(div0, p0);
    			insert_dev(target, t3, anchor);
    			insert_dev(target, div1, anchor);
    			append_dev(div1, p1);
    			current = true;
    		},
    		p: noop,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(accordion0.$$.fragment, local);
    			transition_in(accordion1.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(accordion0.$$.fragment, local);
    			transition_out(accordion1.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(accordion0, detaching);
    			if (detaching) detach_dev(t0);
    			destroy_component(accordion1, detaching);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t3);
    			if (detaching) detach_dev(div1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_2$7.name,
    		type: "slot",
    		source: "(37:4) <TabContent>",
    		ctx
    	});

    	return block;
    }

    // (47:4) <TabContent>
    function create_default_slot_1$7(ctx) {
    	let prism0;
    	let t0;
    	let prism1;
    	let t1;
    	let prism2;
    	let t2;
    	let prism3;
    	let current;

    	prism0 = new Prism$1({
    			props: {
    				language: "html",
    				source: `<Accordion dataTheme="lightmode" {tabs} />`
    			},
    			$$inline: true
    		});

    	prism1 = new Prism$1({
    			props: {
    				language: "html",
    				source: `<Accordion dataTheme="darkmode" {tabs} />`
    			},
    			$$inline: true
    		});

    	prism2 = new Prism$1({
    			props: {
    				language: "html",
    				source: `<div data-theme="lightmode"><p>I'm now in lightmode</p></div>`
    			},
    			$$inline: true
    		});

    	prism3 = new Prism$1({
    			props: {
    				language: "html",
    				source: `<div data-theme="darkmode"><p>I'm now in darkmode</p></div>`
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(prism0.$$.fragment);
    			t0 = space();
    			create_component(prism1.$$.fragment);
    			t1 = space();
    			create_component(prism2.$$.fragment);
    			t2 = space();
    			create_component(prism3.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(prism0, target, anchor);
    			insert_dev(target, t0, anchor);
    			mount_component(prism1, target, anchor);
    			insert_dev(target, t1, anchor);
    			mount_component(prism2, target, anchor);
    			insert_dev(target, t2, anchor);
    			mount_component(prism3, target, anchor);
    			current = true;
    		},
    		p: noop,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(prism0.$$.fragment, local);
    			transition_in(prism1.$$.fragment, local);
    			transition_in(prism2.$$.fragment, local);
    			transition_in(prism3.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(prism0.$$.fragment, local);
    			transition_out(prism1.$$.fragment, local);
    			transition_out(prism2.$$.fragment, local);
    			transition_out(prism3.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(prism0, detaching);
    			if (detaching) detach_dev(t0);
    			destroy_component(prism1, detaching);
    			if (detaching) detach_dev(t1);
    			destroy_component(prism2, detaching);
    			if (detaching) detach_dev(t2);
    			destroy_component(prism3, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_1$7.name,
    		type: "slot",
    		source: "(47:4) <TabContent>",
    		ctx
    	});

    	return block;
    }

    // (30:2) <Tabs>
    function create_default_slot$8(ctx) {
    	let div;
    	let tablist;
    	let t0;
    	let tabcontent0;
    	let t1;
    	let tabcontent1;
    	let current;

    	tablist = new dist$1.TabList({
    			props: {
    				$$slots: { default: [create_default_slot_3$5] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	tabcontent0 = new dist$1.TabContent({
    			props: {
    				$$slots: { default: [create_default_slot_2$7] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	tabcontent1 = new dist$1.TabContent({
    			props: {
    				$$slots: { default: [create_default_slot_1$7] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			div = element("div");
    			create_component(tablist.$$.fragment);
    			t0 = space();
    			create_component(tabcontent0.$$.fragment);
    			t1 = space();
    			create_component(tabcontent1.$$.fragment);
    			attr_dev(div, "class", "flex flex-justify--end width-1of1 margin-m--b");
    			add_location(div, file$a, 30, 4, 1071);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			mount_component(tablist, div, null);
    			insert_dev(target, t0, anchor);
    			mount_component(tabcontent0, target, anchor);
    			insert_dev(target, t1, anchor);
    			mount_component(tabcontent1, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const tablist_changes = {};

    			if (dirty & /*$$scope*/ 2) {
    				tablist_changes.$$scope = { dirty, ctx };
    			}

    			tablist.$set(tablist_changes);
    			const tabcontent0_changes = {};

    			if (dirty & /*$$scope*/ 2) {
    				tabcontent0_changes.$$scope = { dirty, ctx };
    			}

    			tabcontent0.$set(tabcontent0_changes);
    			const tabcontent1_changes = {};

    			if (dirty & /*$$scope*/ 2) {
    				tabcontent1_changes.$$scope = { dirty, ctx };
    			}

    			tabcontent1.$set(tabcontent1_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(tablist.$$.fragment, local);
    			transition_in(tabcontent0.$$.fragment, local);
    			transition_in(tabcontent1.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(tablist.$$.fragment, local);
    			transition_out(tabcontent0.$$.fragment, local);
    			transition_out(tabcontent1.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_component(tablist);
    			if (detaching) detach_dev(t0);
    			destroy_component(tabcontent0, detaching);
    			if (detaching) detach_dev(t1);
    			destroy_component(tabcontent1, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$8.name,
    		type: "slot",
    		source: "(30:2) <Tabs>",
    		ctx
    	});

    	return block;
    }

    function create_fragment$a(ctx) {
    	let div13;
    	let h1;
    	let t1;
    	let h30;
    	let t3;
    	let p0;
    	let t4;
    	let code0;
    	let t6;
    	let p1;
    	let code1;
    	let t8;
    	let b0;
    	let t10;
    	let p2;
    	let b1;
    	let t12;
    	let code2;
    	let t14;
    	let h31;
    	let t16;
    	let tabs_1;
    	let t17;
    	let h32;
    	let t19;
    	let div12;
    	let div3;
    	let div0;
    	let t21;
    	let div1;
    	let t23;
    	let div2;
    	let t25;
    	let div7;
    	let div4;
    	let t27;
    	let div5;
    	let a0;
    	let t29;
    	let div6;
    	let p3;
    	let i0;
    	let t30;
    	let t31;
    	let p4;
    	let i1;
    	let t32;
    	let t33;
    	let div11;
    	let div8;
    	let t35;
    	let div9;
    	let a1;
    	let t37;
    	let div10;
    	let p5;
    	let i2;
    	let t38;
    	let t39;
    	let p6;
    	let i3;
    	let t40;
    	let current;

    	tabs_1 = new dist$1.Tabs({
    			props: {
    				$$slots: { default: [create_default_slot$8] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			div13 = element("div");
    			h1 = element("h1");
    			h1.textContent = "Data Theme";
    			t1 = space();
    			h30 = element("h3");
    			h30.textContent = "Anvendelse af data theme";
    			t3 = space();
    			p0 = element("p");
    			t4 = text("Farve tema anvendes ved tilføjelse af data-attribute ved navn dataTheme: ");
    			code0 = element("code");
    			code0.textContent = "dataTheme=\"lightmode | darkmode\"";
    			t6 = space();
    			p1 = element("p");
    			code1 = element("code");
    			code1.textContent = "dataTheme";
    			t8 = text(" kan anvendes på udvalgte komponenter, som kan ses nederst under ");
    			b0 = element("b");
    			b0.textContent = "overblik";
    			t10 = space();
    			p2 = element("p");
    			b1 = element("b");
    			b1.textContent = "OBS:";
    			t12 = text(" anvendes dataTheme direkte på et html-element skal det anvendes på følgende måde:\n    ");
    			code2 = element("code");
    			code2.textContent = "data-theme=\"lightmode\"";
    			t14 = space();
    			h31 = element("h3");
    			h31.textContent = "Eksempler på data theme";
    			t16 = space();
    			create_component(tabs_1.$$.fragment);
    			t17 = space();
    			h32 = element("h3");
    			h32.textContent = "Overblik over komponenter der kan anvende data theme";
    			t19 = space();
    			div12 = element("div");
    			div3 = element("div");
    			div0 = element("div");
    			div0.textContent = "Component";
    			t21 = space();
    			div1 = element("div");
    			div1.textContent = "Dokumentation";
    			t23 = space();
    			div2 = element("div");
    			div2.textContent = "dataTheme";
    			t25 = space();
    			div7 = element("div");
    			div4 = element("div");
    			div4.textContent = "Accordion";
    			t27 = space();
    			div5 = element("div");
    			a0 = element("a");
    			a0.textContent = "Accordion";
    			t29 = space();
    			div6 = element("div");
    			p3 = element("p");
    			i0 = element("i");
    			t30 = text(" lightmode");
    			t31 = space();
    			p4 = element("p");
    			i1 = element("i");
    			t32 = text(" darkmode");
    			t33 = space();
    			div11 = element("div");
    			div8 = element("div");
    			div8.textContent = "Card (Card-mode)";
    			t35 = space();
    			div9 = element("div");
    			a1 = element("a");
    			a1.textContent = "Card";
    			t37 = space();
    			div10 = element("div");
    			p5 = element("p");
    			i2 = element("i");
    			t38 = text(" lightmode");
    			t39 = space();
    			p6 = element("p");
    			i3 = element("i");
    			t40 = text(" darkmode");
    			attr_dev(h1, "class", "color--eb");
    			add_location(h1, file$a, 15, 2, 537);
    			add_location(h30, file$a, 16, 2, 577);
    			add_location(code0, file$a, 18, 77, 694);
    			add_location(p0, file$a, 17, 2, 613);
    			add_location(code1, file$a, 22, 5, 764);
    			add_location(b0, file$a, 22, 92, 851);
    			add_location(p1, file$a, 22, 2, 761);
    			add_location(b1, file$a, 24, 4, 881);
    			add_location(code2, file$a, 25, 4, 979);
    			add_location(p2, file$a, 23, 2, 873);
    			add_location(h31, file$a, 28, 2, 1025);
    			add_location(h32, file$a, 54, 2, 1991);
    			attr_dev(div0, "class", "width-1of3 padding-m fontweight-bold");
    			add_location(div0, file$a, 57, 6, 2178);
    			attr_dev(div1, "class", "width-1of3 padding-m fontweight-bold");
    			add_location(div1, file$a, 58, 6, 2250);
    			attr_dev(div2, "class", "width-1of3 padding-m fontweight-bold");
    			add_location(div2, file$a, 59, 6, 2326);
    			attr_dev(div3, "class", "flex bg--graa7");
    			set_style(div3, "border-bottom", "1px solid rgba(0, 0, 0, .1)");
    			add_location(div3, file$a, 56, 4, 2091);
    			attr_dev(div4, "class", "width-1of3 padding-m");
    			add_location(div4, file$a, 62, 6, 2494);
    			attr_dev(a0, "href", "#/components/accordion");
    			add_location(a0, file$a, 64, 8, 2593);
    			attr_dev(div5, "class", "width-1of3 padding-m");
    			add_location(div5, file$a, 63, 6, 2550);
    			attr_dev(i0, "class", "fas fa-circle color--white");
    			add_location(i0, file$a, 67, 31, 2725);
    			attr_dev(p3, "class", "margin-none");
    			add_location(p3, file$a, 67, 8, 2702);
    			attr_dev(i1, "class", "fas fa-circle color--black");
    			add_location(i1, file$a, 68, 31, 2811);
    			attr_dev(p4, "class", "margin-none");
    			add_location(p4, file$a, 68, 8, 2788);
    			attr_dev(div6, "class", "width-1of3 padding-m");
    			add_location(div6, file$a, 66, 6, 2659);
    			attr_dev(div7, "class", "flex bg--graa7");
    			set_style(div7, "border-bottom", "1px solid rgba(0, 0, 0, .1)");
    			add_location(div7, file$a, 61, 4, 2407);
    			attr_dev(div8, "class", "width-1of3 padding-m");
    			add_location(div8, file$a, 72, 6, 2980);
    			attr_dev(a1, "href", "#/components/card");
    			add_location(a1, file$a, 74, 8, 3086);
    			attr_dev(div9, "class", "width-1of3 padding-m");
    			add_location(div9, file$a, 73, 6, 3043);
    			attr_dev(i2, "class", "fas fa-circle color--white");
    			add_location(i2, file$a, 77, 31, 3208);
    			attr_dev(p5, "class", "margin-none");
    			add_location(p5, file$a, 77, 8, 3185);
    			attr_dev(i3, "class", "fas fa-circle color--black");
    			add_location(i3, file$a, 78, 31, 3294);
    			attr_dev(p6, "class", "margin-none");
    			add_location(p6, file$a, 78, 8, 3271);
    			attr_dev(div10, "class", "width-1of3 padding-m");
    			add_location(div10, file$a, 76, 6, 3142);
    			attr_dev(div11, "class", "flex bg--graa7");
    			set_style(div11, "border-bottom", "1px solid rgba(0, 0, 0, .1)");
    			add_location(div11, file$a, 71, 4, 2893);
    			attr_dev(div12, "class", "grid-width--large");
    			add_location(div12, file$a, 55, 2, 2055);
    			attr_dev(div13, "class", "grid-width--large");
    			add_location(div13, file$a, 14, 0, 503);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div13, anchor);
    			append_dev(div13, h1);
    			append_dev(div13, t1);
    			append_dev(div13, h30);
    			append_dev(div13, t3);
    			append_dev(div13, p0);
    			append_dev(p0, t4);
    			append_dev(p0, code0);
    			append_dev(div13, t6);
    			append_dev(div13, p1);
    			append_dev(p1, code1);
    			append_dev(p1, t8);
    			append_dev(p1, b0);
    			append_dev(div13, t10);
    			append_dev(div13, p2);
    			append_dev(p2, b1);
    			append_dev(p2, t12);
    			append_dev(p2, code2);
    			append_dev(div13, t14);
    			append_dev(div13, h31);
    			append_dev(div13, t16);
    			mount_component(tabs_1, div13, null);
    			append_dev(div13, t17);
    			append_dev(div13, h32);
    			append_dev(div13, t19);
    			append_dev(div13, div12);
    			append_dev(div12, div3);
    			append_dev(div3, div0);
    			append_dev(div3, t21);
    			append_dev(div3, div1);
    			append_dev(div3, t23);
    			append_dev(div3, div2);
    			append_dev(div12, t25);
    			append_dev(div12, div7);
    			append_dev(div7, div4);
    			append_dev(div7, t27);
    			append_dev(div7, div5);
    			append_dev(div5, a0);
    			append_dev(div7, t29);
    			append_dev(div7, div6);
    			append_dev(div6, p3);
    			append_dev(p3, i0);
    			append_dev(p3, t30);
    			append_dev(div6, t31);
    			append_dev(div6, p4);
    			append_dev(p4, i1);
    			append_dev(p4, t32);
    			append_dev(div12, t33);
    			append_dev(div12, div11);
    			append_dev(div11, div8);
    			append_dev(div11, t35);
    			append_dev(div11, div9);
    			append_dev(div9, a1);
    			append_dev(div11, t37);
    			append_dev(div11, div10);
    			append_dev(div10, p5);
    			append_dev(p5, i2);
    			append_dev(p5, t38);
    			append_dev(div10, t39);
    			append_dev(div10, p6);
    			append_dev(p6, i3);
    			append_dev(p6, t40);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const tabs_1_changes = {};

    			if (dirty & /*$$scope*/ 2) {
    				tabs_1_changes.$$scope = { dirty, ctx };
    			}

    			tabs_1.$set(tabs_1_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(tabs_1.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(tabs_1.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div13);
    			destroy_component(tabs_1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$a.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$a($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('DataTheme', slots, []);

    	let tabs = [
    		{
    			title: 'Tab 1',
    			content: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis lobortis porttitor augue sed commodo. Etiam ornare arcu quis turpis pulvinar, ullamcorper ullamcorper nunc ullamcorper. Maecenas porttitor, erat in feugiat faucibus, velit sem luctus leo, nec congue tellus erat sit amet purus.'
    		}
    	];

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<DataTheme> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({
    		Prism: Prism$1,
    		Accordion: dist$1.Accordion,
    		Tabs: dist$1.Tabs,
    		Tab: dist$1.Tab,
    		TabContent: dist$1.TabContent,
    		TabList: dist$1.TabList,
    		tabs
    	});

    	$$self.$inject_state = $$props => {
    		if ('tabs' in $$props) $$invalidate(0, tabs = $$props.tabs);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [tabs];
    }

    class DataTheme extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$a, create_fragment$a, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "DataTheme",
    			options,
    			id: create_fragment$a.name
    		});
    	}
    }

    /* docs_src/utilities/Flex.svelte generated by Svelte v3.42.1 */
    const file$9 = "docs_src/utilities/Flex.svelte";

    // (10:0) <Prism language="html">
    function create_default_slot_14(ctx) {
    	let t_value = `<div class="flex"></div>` + "";
    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_14.name,
    		type: "slot",
    		source: "(10:0) <Prism language=\\\"html\\\">",
    		ctx
    	});

    	return block;
    }

    // (17:0) <Card className="bg--graa7">
    function create_default_slot_13(ctx) {
    	let strong0;
    	let t1;
    	let div3;
    	let div0;
    	let t3;
    	let div1;
    	let t5;
    	let div2;
    	let t7;
    	let strong1;
    	let t9;
    	let div7;
    	let div4;
    	let t11;
    	let div5;
    	let t13;
    	let div6;
    	let t15;
    	let strong2;
    	let t17;
    	let div11;
    	let div8;
    	let t19;
    	let div9;
    	let t21;
    	let div10;
    	let t23;
    	let strong3;
    	let t25;
    	let div15;
    	let div12;
    	let t27;
    	let div13;
    	let t29;
    	let div14;
    	let t31;
    	let strong4;
    	let t33;
    	let div19;
    	let div16;
    	let t35;
    	let div17;
    	let t37;
    	let div18;

    	const block = {
    		c: function create() {
    			strong0 = element("strong");
    			strong0.textContent = "flex flex-justify--start";
    			t1 = space();
    			div3 = element("div");
    			div0 = element("div");
    			div0.textContent = "Flex item 1";
    			t3 = space();
    			div1 = element("div");
    			div1.textContent = "Flex item 2";
    			t5 = space();
    			div2 = element("div");
    			div2.textContent = "Flex item 3";
    			t7 = space();
    			strong1 = element("strong");
    			strong1.textContent = "flex flex-justify--end";
    			t9 = space();
    			div7 = element("div");
    			div4 = element("div");
    			div4.textContent = "Flex item 1";
    			t11 = space();
    			div5 = element("div");
    			div5.textContent = "Flex item 2";
    			t13 = space();
    			div6 = element("div");
    			div6.textContent = "Flex item 3";
    			t15 = space();
    			strong2 = element("strong");
    			strong2.textContent = "flex flex-justify--center";
    			t17 = space();
    			div11 = element("div");
    			div8 = element("div");
    			div8.textContent = "Flex item 1";
    			t19 = space();
    			div9 = element("div");
    			div9.textContent = "Flex item 2";
    			t21 = space();
    			div10 = element("div");
    			div10.textContent = "Flex item 3";
    			t23 = space();
    			strong3 = element("strong");
    			strong3.textContent = "flex flex-justify--around";
    			t25 = space();
    			div15 = element("div");
    			div12 = element("div");
    			div12.textContent = "Flex item 1";
    			t27 = space();
    			div13 = element("div");
    			div13.textContent = "Flex item 2";
    			t29 = space();
    			div14 = element("div");
    			div14.textContent = "Flex item 3";
    			t31 = space();
    			strong4 = element("strong");
    			strong4.textContent = "flex flex-justify--between";
    			t33 = space();
    			div19 = element("div");
    			div16 = element("div");
    			div16.textContent = "Flex item 1";
    			t35 = space();
    			div17 = element("div");
    			div17.textContent = "Flex item 2";
    			t37 = space();
    			div18 = element("div");
    			div18.textContent = "Flex item 3";
    			attr_dev(strong0, "class", "margin-m");
    			add_location(strong0, file$9, 17, 2, 357);
    			attr_dev(div0, "class", "bg--graa4 padding-l");
    			add_location(div0, file$9, 19, 4, 468);
    			attr_dev(div1, "class", "bg--graa3 padding-l");
    			add_location(div1, file$9, 20, 4, 523);
    			attr_dev(div2, "class", "bg--graa2 padding-l");
    			add_location(div2, file$9, 21, 4, 578);
    			attr_dev(div3, "class", "flex flex-justify--start bg--eb");
    			add_location(div3, file$9, 18, 2, 418);
    			attr_dev(strong1, "class", "margin-m margin-l--t");
    			add_location(strong1, file$9, 23, 2, 640);
    			attr_dev(div4, "class", "bg--graa4 padding-l");
    			add_location(div4, file$9, 25, 4, 759);
    			attr_dev(div5, "class", "bg--graa3 padding-l");
    			add_location(div5, file$9, 26, 4, 814);
    			attr_dev(div6, "class", "bg--graa2 padding-l");
    			add_location(div6, file$9, 27, 4, 869);
    			attr_dev(div7, "class", "flex flex-justify--end bg--eb");
    			add_location(div7, file$9, 24, 2, 711);
    			attr_dev(strong2, "class", "margin-m margin-l--t");
    			add_location(strong2, file$9, 29, 2, 931);
    			attr_dev(div8, "class", "bg--graa4 padding-l");
    			add_location(div8, file$9, 31, 4, 1056);
    			attr_dev(div9, "class", "bg--graa3 padding-l");
    			add_location(div9, file$9, 32, 4, 1111);
    			attr_dev(div10, "class", "bg--graa2 padding-l");
    			add_location(div10, file$9, 33, 4, 1166);
    			attr_dev(div11, "class", "flex flex-justify--center bg--eb");
    			add_location(div11, file$9, 30, 2, 1005);
    			attr_dev(strong3, "class", "margin-m margin-l--t");
    			add_location(strong3, file$9, 35, 2, 1228);
    			attr_dev(div12, "class", "bg--graa4 padding-l");
    			add_location(div12, file$9, 37, 4, 1353);
    			attr_dev(div13, "class", "bg--graa3 padding-l");
    			add_location(div13, file$9, 38, 4, 1408);
    			attr_dev(div14, "class", "bg--graa2 padding-l");
    			add_location(div14, file$9, 39, 4, 1463);
    			attr_dev(div15, "class", "flex flex-justify--around bg--eb");
    			add_location(div15, file$9, 36, 2, 1302);
    			attr_dev(strong4, "class", "margin-m margin-l--t");
    			add_location(strong4, file$9, 41, 2, 1525);
    			attr_dev(div16, "class", "bg--graa4 padding-l");
    			add_location(div16, file$9, 43, 4, 1652);
    			attr_dev(div17, "class", "bg--graa3 padding-l");
    			add_location(div17, file$9, 44, 4, 1707);
    			attr_dev(div18, "class", "bg--graa2 padding-l");
    			add_location(div18, file$9, 45, 4, 1762);
    			attr_dev(div19, "class", "flex flex-justify--between bg--eb");
    			add_location(div19, file$9, 42, 2, 1600);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, strong0, anchor);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, div3, anchor);
    			append_dev(div3, div0);
    			append_dev(div3, t3);
    			append_dev(div3, div1);
    			append_dev(div3, t5);
    			append_dev(div3, div2);
    			insert_dev(target, t7, anchor);
    			insert_dev(target, strong1, anchor);
    			insert_dev(target, t9, anchor);
    			insert_dev(target, div7, anchor);
    			append_dev(div7, div4);
    			append_dev(div7, t11);
    			append_dev(div7, div5);
    			append_dev(div7, t13);
    			append_dev(div7, div6);
    			insert_dev(target, t15, anchor);
    			insert_dev(target, strong2, anchor);
    			insert_dev(target, t17, anchor);
    			insert_dev(target, div11, anchor);
    			append_dev(div11, div8);
    			append_dev(div11, t19);
    			append_dev(div11, div9);
    			append_dev(div11, t21);
    			append_dev(div11, div10);
    			insert_dev(target, t23, anchor);
    			insert_dev(target, strong3, anchor);
    			insert_dev(target, t25, anchor);
    			insert_dev(target, div15, anchor);
    			append_dev(div15, div12);
    			append_dev(div15, t27);
    			append_dev(div15, div13);
    			append_dev(div15, t29);
    			append_dev(div15, div14);
    			insert_dev(target, t31, anchor);
    			insert_dev(target, strong4, anchor);
    			insert_dev(target, t33, anchor);
    			insert_dev(target, div19, anchor);
    			append_dev(div19, div16);
    			append_dev(div19, t35);
    			append_dev(div19, div17);
    			append_dev(div19, t37);
    			append_dev(div19, div18);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(strong0);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(div3);
    			if (detaching) detach_dev(t7);
    			if (detaching) detach_dev(strong1);
    			if (detaching) detach_dev(t9);
    			if (detaching) detach_dev(div7);
    			if (detaching) detach_dev(t15);
    			if (detaching) detach_dev(strong2);
    			if (detaching) detach_dev(t17);
    			if (detaching) detach_dev(div11);
    			if (detaching) detach_dev(t23);
    			if (detaching) detach_dev(strong3);
    			if (detaching) detach_dev(t25);
    			if (detaching) detach_dev(div15);
    			if (detaching) detach_dev(t31);
    			if (detaching) detach_dev(strong4);
    			if (detaching) detach_dev(t33);
    			if (detaching) detach_dev(div19);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_13.name,
    		type: "slot",
    		source: "(17:0) <Card className=\\\"bg--graa7\\\">",
    		ctx
    	});

    	return block;
    }

    // (50:0) <Prism language="html">
    function create_default_slot_12(ctx) {
    	let t_value = `<div class="flex flex-justify--start"></div>
<div class="flex flex-justify--end"></div>
<div class="flex flex-justify--center"></div>
<div class="flex flex-justify--around"></div>
<div class="flex flex-justify--between"></div>` + "";

    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_12.name,
    		type: "slot",
    		source: "(50:0) <Prism language=\\\"html\\\">",
    		ctx
    	});

    	return block;
    }

    // (61:0) <Card className="bg--graa7">
    function create_default_slot_11(ctx) {
    	let strong0;
    	let t1;
    	let div3;
    	let div0;
    	let t3;
    	let div1;
    	let t5;
    	let div2;
    	let t7;
    	let strong1;
    	let t9;
    	let div7;
    	let div4;
    	let t11;
    	let div5;
    	let t13;
    	let div6;
    	let t15;
    	let strong2;
    	let t17;
    	let div11;
    	let div8;
    	let t19;
    	let div9;
    	let t21;
    	let div10;
    	let t23;
    	let strong3;
    	let t25;
    	let div15;
    	let div12;
    	let t27;
    	let div13;
    	let t29;
    	let div14;

    	const block = {
    		c: function create() {
    			strong0 = element("strong");
    			strong0.textContent = "flex flex-align--start";
    			t1 = space();
    			div3 = element("div");
    			div0 = element("div");
    			div0.textContent = "Flex item 1";
    			t3 = space();
    			div1 = element("div");
    			div1.textContent = "Flex item 2";
    			t5 = space();
    			div2 = element("div");
    			div2.textContent = "Flex item 3";
    			t7 = space();
    			strong1 = element("strong");
    			strong1.textContent = "flex flex-align--end";
    			t9 = space();
    			div7 = element("div");
    			div4 = element("div");
    			div4.textContent = "Flex item 1";
    			t11 = space();
    			div5 = element("div");
    			div5.textContent = "Flex item 2";
    			t13 = space();
    			div6 = element("div");
    			div6.textContent = "Flex item 3";
    			t15 = space();
    			strong2 = element("strong");
    			strong2.textContent = "flex flex-align--center";
    			t17 = space();
    			div11 = element("div");
    			div8 = element("div");
    			div8.textContent = "Flex item 1";
    			t19 = space();
    			div9 = element("div");
    			div9.textContent = "Flex item 2";
    			t21 = space();
    			div10 = element("div");
    			div10.textContent = "Flex item 3";
    			t23 = space();
    			strong3 = element("strong");
    			strong3.textContent = "flex flex-align--stretch";
    			t25 = space();
    			div15 = element("div");
    			div12 = element("div");
    			div12.textContent = "Flex item 1";
    			t27 = space();
    			div13 = element("div");
    			div13.textContent = "Flex item 2";
    			t29 = space();
    			div14 = element("div");
    			div14.textContent = "Flex item 3";
    			attr_dev(strong0, "class", "margin-m");
    			add_location(strong0, file$9, 61, 2, 2229);
    			attr_dev(div0, "class", "bg--graa4 padding-l");
    			add_location(div0, file$9, 63, 4, 2358);
    			attr_dev(div1, "class", "bg--graa3 padding-l");
    			add_location(div1, file$9, 64, 4, 2413);
    			attr_dev(div2, "class", "bg--graa2 padding-l");
    			add_location(div2, file$9, 65, 4, 2468);
    			attr_dev(div3, "class", "flex flex-align--start bg--eb");
    			set_style(div3, "height", "100px");
    			add_location(div3, file$9, 62, 2, 2288);
    			attr_dev(strong1, "class", "margin-m margin-l--t");
    			add_location(strong1, file$9, 67, 2, 2530);
    			attr_dev(div4, "class", "bg--graa4 padding-l");
    			add_location(div4, file$9, 69, 4, 2667);
    			attr_dev(div5, "class", "bg--graa3 padding-l");
    			add_location(div5, file$9, 70, 4, 2722);
    			attr_dev(div6, "class", "bg--graa2 padding-l");
    			add_location(div6, file$9, 71, 4, 2777);
    			attr_dev(div7, "class", "flex flex-align--end bg--eb");
    			set_style(div7, "height", "100px");
    			add_location(div7, file$9, 68, 2, 2599);
    			attr_dev(strong2, "class", "margin-m margin-l--t");
    			add_location(strong2, file$9, 73, 2, 2839);
    			attr_dev(div8, "class", "bg--graa4 padding-l");
    			add_location(div8, file$9, 75, 4, 2982);
    			attr_dev(div9, "class", "bg--graa3 padding-l");
    			add_location(div9, file$9, 76, 4, 3037);
    			attr_dev(div10, "class", "bg--graa2 padding-l");
    			add_location(div10, file$9, 77, 4, 3092);
    			attr_dev(div11, "class", "flex flex-align--center bg--eb");
    			set_style(div11, "height", "100px");
    			add_location(div11, file$9, 74, 2, 2911);
    			attr_dev(strong3, "class", "margin-m margin-l--t");
    			add_location(strong3, file$9, 79, 2, 3154);
    			attr_dev(div12, "class", "bg--graa4 padding-l");
    			add_location(div12, file$9, 81, 4, 3299);
    			attr_dev(div13, "class", "bg--graa3 padding-l");
    			add_location(div13, file$9, 82, 4, 3354);
    			attr_dev(div14, "class", "bg--graa2 padding-l");
    			add_location(div14, file$9, 83, 4, 3409);
    			attr_dev(div15, "class", "flex flex-align--stretch bg--eb");
    			set_style(div15, "height", "100px");
    			add_location(div15, file$9, 80, 2, 3227);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, strong0, anchor);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, div3, anchor);
    			append_dev(div3, div0);
    			append_dev(div3, t3);
    			append_dev(div3, div1);
    			append_dev(div3, t5);
    			append_dev(div3, div2);
    			insert_dev(target, t7, anchor);
    			insert_dev(target, strong1, anchor);
    			insert_dev(target, t9, anchor);
    			insert_dev(target, div7, anchor);
    			append_dev(div7, div4);
    			append_dev(div7, t11);
    			append_dev(div7, div5);
    			append_dev(div7, t13);
    			append_dev(div7, div6);
    			insert_dev(target, t15, anchor);
    			insert_dev(target, strong2, anchor);
    			insert_dev(target, t17, anchor);
    			insert_dev(target, div11, anchor);
    			append_dev(div11, div8);
    			append_dev(div11, t19);
    			append_dev(div11, div9);
    			append_dev(div11, t21);
    			append_dev(div11, div10);
    			insert_dev(target, t23, anchor);
    			insert_dev(target, strong3, anchor);
    			insert_dev(target, t25, anchor);
    			insert_dev(target, div15, anchor);
    			append_dev(div15, div12);
    			append_dev(div15, t27);
    			append_dev(div15, div13);
    			append_dev(div15, t29);
    			append_dev(div15, div14);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(strong0);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(div3);
    			if (detaching) detach_dev(t7);
    			if (detaching) detach_dev(strong1);
    			if (detaching) detach_dev(t9);
    			if (detaching) detach_dev(div7);
    			if (detaching) detach_dev(t15);
    			if (detaching) detach_dev(strong2);
    			if (detaching) detach_dev(t17);
    			if (detaching) detach_dev(div11);
    			if (detaching) detach_dev(t23);
    			if (detaching) detach_dev(strong3);
    			if (detaching) detach_dev(t25);
    			if (detaching) detach_dev(div15);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_11.name,
    		type: "slot",
    		source: "(61:0) <Card className=\\\"bg--graa7\\\">",
    		ctx
    	});

    	return block;
    }

    // (88:0) <Prism language="html">
    function create_default_slot_10$1(ctx) {
    	let t_value = `<div class="flex flex-align--start"></div>
<div class="flex flex-align--end"></div>
<div class="flex flex-align--center"></div>
<div class="flex flex-align--stretch"></div>` + "";

    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_10$1.name,
    		type: "slot",
    		source: "(88:0) <Prism language=\\\"html\\\">",
    		ctx
    	});

    	return block;
    }

    // (98:0) <Card className="bg--graa7">
    function create_default_slot_9$1(ctx) {
    	let div3;
    	let div0;
    	let t1;
    	let div1;
    	let t3;
    	let div2;

    	const block = {
    		c: function create() {
    			div3 = element("div");
    			div0 = element("div");
    			div0.textContent = "Flex item 1";
    			t1 = space();
    			div1 = element("div");
    			div1.textContent = "Flex item 2";
    			t3 = space();
    			div2 = element("div");
    			div2.textContent = "Flex item 3";
    			attr_dev(div0, "class", "bg--graa4 padding-l");
    			add_location(div0, file$9, 99, 4, 3902);
    			attr_dev(div1, "class", "bg--graa3 padding-l");
    			add_location(div1, file$9, 100, 4, 3957);
    			attr_dev(div2, "class", "bg--graa2 padding-l");
    			add_location(div2, file$9, 101, 4, 4012);
    			attr_dev(div3, "class", "flex flex--center bg--eb");
    			set_style(div3, "height", "100px");
    			add_location(div3, file$9, 98, 2, 3837);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div3, anchor);
    			append_dev(div3, div0);
    			append_dev(div3, t1);
    			append_dev(div3, div1);
    			append_dev(div3, t3);
    			append_dev(div3, div2);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div3);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_9$1.name,
    		type: "slot",
    		source: "(98:0) <Card className=\\\"bg--graa7\\\">",
    		ctx
    	});

    	return block;
    }

    // (106:0) <Prism language="html">
    function create_default_slot_8$1(ctx) {
    	let t_value = `<div class="flex flex--center"></div>` + "";
    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_8$1.name,
    		type: "slot",
    		source: "(106:0) <Prism language=\\\"html\\\">",
    		ctx
    	});

    	return block;
    }

    // (113:0) <Card className="bg--graa7">
    function create_default_slot_7$1(ctx) {
    	let strong0;
    	let t1;
    	let div3;
    	let div0;
    	let t3;
    	let div1;
    	let t5;
    	let div2;
    	let t7;
    	let strong1;
    	let t9;
    	let div7;
    	let div4;
    	let t11;
    	let div5;
    	let t13;
    	let div6;
    	let t15;
    	let strong2;
    	let t17;
    	let div11;
    	let div8;
    	let t19;
    	let div9;
    	let t21;
    	let div10;
    	let t23;
    	let strong3;
    	let t25;
    	let div15;
    	let div12;
    	let t27;
    	let div13;
    	let t29;
    	let div14;

    	const block = {
    		c: function create() {
    			strong0 = element("strong");
    			strong0.textContent = "flex flex--column";
    			t1 = space();
    			div3 = element("div");
    			div0 = element("div");
    			div0.textContent = "Flex item 1";
    			t3 = space();
    			div1 = element("div");
    			div1.textContent = "Flex item 2";
    			t5 = space();
    			div2 = element("div");
    			div2.textContent = "Flex item 3";
    			t7 = space();
    			strong1 = element("strong");
    			strong1.textContent = "flex flex--column-reverse";
    			t9 = space();
    			div7 = element("div");
    			div4 = element("div");
    			div4.textContent = "Flex item 1";
    			t11 = space();
    			div5 = element("div");
    			div5.textContent = "Flex item 2";
    			t13 = space();
    			div6 = element("div");
    			div6.textContent = "Flex item 3";
    			t15 = space();
    			strong2 = element("strong");
    			strong2.textContent = "flex";
    			t17 = space();
    			div11 = element("div");
    			div8 = element("div");
    			div8.textContent = "Flex item 1";
    			t19 = space();
    			div9 = element("div");
    			div9.textContent = "Flex item 2";
    			t21 = space();
    			div10 = element("div");
    			div10.textContent = "Flex item 3";
    			t23 = space();
    			strong3 = element("strong");
    			strong3.textContent = "flex flex-row--reverse";
    			t25 = space();
    			div15 = element("div");
    			div12 = element("div");
    			div12.textContent = "Flex item 1";
    			t27 = space();
    			div13 = element("div");
    			div13.textContent = "Flex item 2";
    			t29 = space();
    			div14 = element("div");
    			div14.textContent = "Flex item 3";
    			attr_dev(strong0, "class", "margin-m");
    			add_location(strong0, file$9, 113, 2, 4283);
    			attr_dev(div0, "class", "bg--graa4 padding-l");
    			add_location(div0, file$9, 115, 4, 4373);
    			attr_dev(div1, "class", "bg--graa3 padding-l");
    			add_location(div1, file$9, 116, 4, 4428);
    			attr_dev(div2, "class", "bg--graa2 padding-l");
    			add_location(div2, file$9, 117, 4, 4483);
    			attr_dev(div3, "class", "flex flex--column");
    			add_location(div3, file$9, 114, 2, 4337);
    			attr_dev(strong1, "class", "margin-m margin-l--t");
    			add_location(strong1, file$9, 119, 2, 4545);
    			attr_dev(div4, "class", "bg--graa4 padding-l");
    			add_location(div4, file$9, 121, 4, 4663);
    			attr_dev(div5, "class", "bg--graa3 padding-l");
    			add_location(div5, file$9, 122, 4, 4718);
    			attr_dev(div6, "class", "bg--graa2 padding-l");
    			add_location(div6, file$9, 123, 4, 4773);
    			attr_dev(div7, "class", "flex flex--column-reverse");
    			add_location(div7, file$9, 120, 2, 4619);
    			attr_dev(strong2, "class", "margin-m margin-l--t");
    			add_location(strong2, file$9, 125, 2, 4835);
    			attr_dev(div8, "class", "bg--graa4 padding-l");
    			add_location(div8, file$9, 127, 4, 4918);
    			attr_dev(div9, "class", "bg--graa3 padding-l");
    			add_location(div9, file$9, 128, 4, 4973);
    			attr_dev(div10, "class", "bg--graa2 padding-l");
    			add_location(div10, file$9, 129, 4, 5028);
    			attr_dev(div11, "class", "flex bg--eb");
    			add_location(div11, file$9, 126, 2, 4888);
    			attr_dev(strong3, "class", "margin-m margin-l--t");
    			add_location(strong3, file$9, 131, 2, 5090);
    			attr_dev(div12, "class", "bg--graa4 padding-l");
    			add_location(div12, file$9, 133, 4, 5209);
    			attr_dev(div13, "class", "bg--graa3 padding-l");
    			add_location(div13, file$9, 134, 4, 5264);
    			attr_dev(div14, "class", "bg--graa2 padding-l");
    			add_location(div14, file$9, 135, 4, 5319);
    			attr_dev(div15, "class", "flex flex-row--reverse bg--eb");
    			add_location(div15, file$9, 132, 2, 5161);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, strong0, anchor);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, div3, anchor);
    			append_dev(div3, div0);
    			append_dev(div3, t3);
    			append_dev(div3, div1);
    			append_dev(div3, t5);
    			append_dev(div3, div2);
    			insert_dev(target, t7, anchor);
    			insert_dev(target, strong1, anchor);
    			insert_dev(target, t9, anchor);
    			insert_dev(target, div7, anchor);
    			append_dev(div7, div4);
    			append_dev(div7, t11);
    			append_dev(div7, div5);
    			append_dev(div7, t13);
    			append_dev(div7, div6);
    			insert_dev(target, t15, anchor);
    			insert_dev(target, strong2, anchor);
    			insert_dev(target, t17, anchor);
    			insert_dev(target, div11, anchor);
    			append_dev(div11, div8);
    			append_dev(div11, t19);
    			append_dev(div11, div9);
    			append_dev(div11, t21);
    			append_dev(div11, div10);
    			insert_dev(target, t23, anchor);
    			insert_dev(target, strong3, anchor);
    			insert_dev(target, t25, anchor);
    			insert_dev(target, div15, anchor);
    			append_dev(div15, div12);
    			append_dev(div15, t27);
    			append_dev(div15, div13);
    			append_dev(div15, t29);
    			append_dev(div15, div14);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(strong0);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(div3);
    			if (detaching) detach_dev(t7);
    			if (detaching) detach_dev(strong1);
    			if (detaching) detach_dev(t9);
    			if (detaching) detach_dev(div7);
    			if (detaching) detach_dev(t15);
    			if (detaching) detach_dev(strong2);
    			if (detaching) detach_dev(t17);
    			if (detaching) detach_dev(div11);
    			if (detaching) detach_dev(t23);
    			if (detaching) detach_dev(strong3);
    			if (detaching) detach_dev(t25);
    			if (detaching) detach_dev(div15);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_7$1.name,
    		type: "slot",
    		source: "(113:0) <Card className=\\\"bg--graa7\\\">",
    		ctx
    	});

    	return block;
    }

    // (140:0) <Prism language="html">
    function create_default_slot_6$2(ctx) {
    	let t_value = `<div class="flex flex--column"></div>
<div class="flex flex--column--reverse"></div>
<div class="flex"></div>
<div class="flex flex-row--reverse"></div>` + "";

    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_6$2.name,
    		type: "slot",
    		source: "(140:0) <Prism language=\\\"html\\\">",
    		ctx
    	});

    	return block;
    }

    // (153:0) <Card className="bg--graa7">
    function create_default_slot_5$2(ctx) {
    	let strong0;
    	let t1;
    	let div4;
    	let div0;
    	let t3;
    	let div1;
    	let t5;
    	let div2;
    	let t7;
    	let div3;
    	let t9;
    	let strong1;
    	let t11;
    	let div9;
    	let div5;
    	let t13;
    	let div6;
    	let t15;
    	let div7;
    	let t17;
    	let div8;

    	const block = {
    		c: function create() {
    			strong0 = element("strong");
    			strong0.textContent = "flex";
    			t1 = space();
    			div4 = element("div");
    			div0 = element("div");
    			div0.textContent = "Flex item 1";
    			t3 = space();
    			div1 = element("div");
    			div1.textContent = "Flex item 2";
    			t5 = space();
    			div2 = element("div");
    			div2.textContent = "Flex item 3";
    			t7 = space();
    			div3 = element("div");
    			div3.textContent = "Flex item 4";
    			t9 = space();
    			strong1 = element("strong");
    			strong1.textContent = "flex flex-wrap--wrap";
    			t11 = space();
    			div9 = element("div");
    			div5 = element("div");
    			div5.textContent = "Flex item 1";
    			t13 = space();
    			div6 = element("div");
    			div6.textContent = "Flex item 2";
    			t15 = space();
    			div7 = element("div");
    			div7.textContent = "Flex item 3";
    			t17 = space();
    			div8 = element("div");
    			div8.textContent = "Flex item 4";
    			attr_dev(strong0, "class", "margin-m");
    			add_location(strong0, file$9, 153, 2, 5781);
    			attr_dev(div0, "class", "bg--graa4 width-1of3 padding-l");
    			add_location(div0, file$9, 155, 4, 5845);
    			attr_dev(div1, "class", "bg--graa3 width-1of3 padding-l");
    			add_location(div1, file$9, 156, 4, 5911);
    			attr_dev(div2, "class", "bg--graa2 width-1of3 padding-l");
    			add_location(div2, file$9, 157, 4, 5977);
    			attr_dev(div3, "class", "bg--graa1 width-1of3 padding-l");
    			add_location(div3, file$9, 158, 4, 6043);
    			attr_dev(div4, "class", "flex");
    			add_location(div4, file$9, 154, 2, 5822);
    			attr_dev(strong1, "class", "margin-m margin-l--t");
    			add_location(strong1, file$9, 160, 2, 6116);
    			attr_dev(div5, "class", "bg--graa4 width-1of3 padding-l");
    			add_location(div5, file$9, 162, 4, 6231);
    			attr_dev(div6, "class", "bg--graa3 width-1of3 padding-l");
    			add_location(div6, file$9, 163, 4, 6297);
    			attr_dev(div7, "class", "bg--graa2 width-1of3 padding-l");
    			add_location(div7, file$9, 164, 4, 6363);
    			attr_dev(div8, "class", "bg--graa1 width-1of3 padding-l");
    			add_location(div8, file$9, 165, 4, 6429);
    			attr_dev(div9, "class", "flex flex-wrap--wrap bg--eb");
    			add_location(div9, file$9, 161, 2, 6185);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, strong0, anchor);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, div4, anchor);
    			append_dev(div4, div0);
    			append_dev(div4, t3);
    			append_dev(div4, div1);
    			append_dev(div4, t5);
    			append_dev(div4, div2);
    			append_dev(div4, t7);
    			append_dev(div4, div3);
    			insert_dev(target, t9, anchor);
    			insert_dev(target, strong1, anchor);
    			insert_dev(target, t11, anchor);
    			insert_dev(target, div9, anchor);
    			append_dev(div9, div5);
    			append_dev(div9, t13);
    			append_dev(div9, div6);
    			append_dev(div9, t15);
    			append_dev(div9, div7);
    			append_dev(div9, t17);
    			append_dev(div9, div8);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(strong0);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(div4);
    			if (detaching) detach_dev(t9);
    			if (detaching) detach_dev(strong1);
    			if (detaching) detach_dev(t11);
    			if (detaching) detach_dev(div9);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_5$2.name,
    		type: "slot",
    		source: "(153:0) <Card className=\\\"bg--graa7\\\">",
    		ctx
    	});

    	return block;
    }

    // (170:0) <Prism language="html">
    function create_default_slot_4$3(ctx) {
    	let t_value = `<div class="flex"></div>
<div class="flex flex-wrap--wrap"></div>` + "";

    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_4$3.name,
    		type: "slot",
    		source: "(170:0) <Prism language=\\\"html\\\">",
    		ctx
    	});

    	return block;
    }

    // (179:0) <Card className="bg--graa7">
    function create_default_slot_3$4(ctx) {
    	let div4;
    	let div0;
    	let t1;
    	let div1;
    	let t3;
    	let div2;
    	let t5;
    	let div3;

    	const block = {
    		c: function create() {
    			div4 = element("div");
    			div0 = element("div");
    			div0.textContent = "flex-item--start";
    			t1 = space();
    			div1 = element("div");
    			div1.textContent = "flex-item--end";
    			t3 = space();
    			div2 = element("div");
    			div2.textContent = "flex-item--center";
    			t5 = space();
    			div3 = element("div");
    			div3.textContent = "flex-item--stretch";
    			attr_dev(div0, "class", "flex-item--start bg--graa4 width-1of3 padding-l");
    			add_location(div0, file$9, 180, 4, 6740);
    			attr_dev(div1, "class", "flex-item--end bg--graa2 width-1of3 padding-l");
    			add_location(div1, file$9, 181, 4, 6828);
    			attr_dev(div2, "class", "flex-item--center bg--graa3 width-1of3 padding-l");
    			add_location(div2, file$9, 182, 4, 6912);
    			attr_dev(div3, "class", "flex-item--stretch bg--graa1 width-1of3 padding-l");
    			add_location(div3, file$9, 183, 4, 7002);
    			attr_dev(div4, "class", "flex bg--eb");
    			set_style(div4, "height", "100px");
    			add_location(div4, file$9, 179, 2, 6688);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div4, anchor);
    			append_dev(div4, div0);
    			append_dev(div4, t1);
    			append_dev(div4, div1);
    			append_dev(div4, t3);
    			append_dev(div4, div2);
    			append_dev(div4, t5);
    			append_dev(div4, div3);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div4);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_3$4.name,
    		type: "slot",
    		source: "(179:0) <Card className=\\\"bg--graa7\\\">",
    		ctx
    	});

    	return block;
    }

    // (188:0) <Prism language="html">
    function create_default_slot_2$6(ctx) {
    	let t_value = `<div class="flex">
  <div class="flex-item--start"></div>
  <div class="flex-item--end"></div>
  <div class="flex-item--center"></div>
  <div class="flex-item--stretch"></div>
</div>` + "";

    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_2$6.name,
    		type: "slot",
    		source: "(188:0) <Prism language=\\\"html\\\">",
    		ctx
    	});

    	return block;
    }

    // (203:0) <Card className="bg--graa7">
    function create_default_slot_1$6(ctx) {
    	let strong0;
    	let t1;
    	let div3;
    	let div0;
    	let t3;
    	let div1;
    	let t5;
    	let div2;
    	let t7;
    	let strong1;
    	let t9;
    	let div7;
    	let div4;
    	let t11;
    	let div5;
    	let t13;
    	let div6;

    	const block = {
    		c: function create() {
    			strong0 = element("strong");
    			strong0.textContent = "Grow";
    			t1 = space();
    			div3 = element("div");
    			div0 = element("div");
    			div0.textContent = "flex-item--grow";
    			t3 = space();
    			div1 = element("div");
    			div1.textContent = "Flex item 2";
    			t5 = space();
    			div2 = element("div");
    			div2.textContent = "Flex item 3";
    			t7 = space();
    			strong1 = element("strong");
    			strong1.textContent = "No shrink";
    			t9 = space();
    			div7 = element("div");
    			div4 = element("div");
    			div4.textContent = "flex-item--noshrink width-2of3";
    			t11 = space();
    			div5 = element("div");
    			div5.textContent = "width-1of3";
    			t13 = space();
    			div6 = element("div");
    			div6.textContent = "width-1of3";
    			attr_dev(strong0, "class", "margin-m margin-l--t");
    			add_location(strong0, file$9, 203, 2, 7634);
    			attr_dev(div0, "class", "flex-item--grow bg--graa4 padding-l");
    			add_location(div0, file$9, 205, 4, 7717);
    			attr_dev(div1, "class", "bg--graa3 padding-l");
    			add_location(div1, file$9, 206, 4, 7792);
    			attr_dev(div2, "class", "bg--graa2 padding-l");
    			add_location(div2, file$9, 207, 4, 7847);
    			attr_dev(div3, "class", "flex bg--eb");
    			add_location(div3, file$9, 204, 2, 7687);
    			attr_dev(strong1, "class", "margin-m margin-l--t");
    			add_location(strong1, file$9, 209, 2, 7909);
    			attr_dev(div4, "class", "flex-item--noshrink width-2of3 bg--graa4 padding-l");
    			add_location(div4, file$9, 211, 4, 7997);
    			attr_dev(div5, "class", "bg--graa3 width-1of3 padding-l");
    			add_location(div5, file$9, 212, 4, 8102);
    			attr_dev(div6, "class", "bg--graa2 width-1of3 padding-l");
    			add_location(div6, file$9, 213, 4, 8167);
    			attr_dev(div7, "class", "flex bg--eb");
    			add_location(div7, file$9, 210, 2, 7967);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, strong0, anchor);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, div3, anchor);
    			append_dev(div3, div0);
    			append_dev(div3, t3);
    			append_dev(div3, div1);
    			append_dev(div3, t5);
    			append_dev(div3, div2);
    			insert_dev(target, t7, anchor);
    			insert_dev(target, strong1, anchor);
    			insert_dev(target, t9, anchor);
    			insert_dev(target, div7, anchor);
    			append_dev(div7, div4);
    			append_dev(div7, t11);
    			append_dev(div7, div5);
    			append_dev(div7, t13);
    			append_dev(div7, div6);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(strong0);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(div3);
    			if (detaching) detach_dev(t7);
    			if (detaching) detach_dev(strong1);
    			if (detaching) detach_dev(t9);
    			if (detaching) detach_dev(div7);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_1$6.name,
    		type: "slot",
    		source: "(203:0) <Card className=\\\"bg--graa7\\\">",
    		ctx
    	});

    	return block;
    }

    // (218:0) <Prism language="html">
    function create_default_slot$7(ctx) {
    	let t_value = `<div class="flex">
  <div class="flex-item--grow"></div>
  <div class="flex-item--noshrink"></div>
</div>` + "";

    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$7.name,
    		type: "slot",
    		source: "(218:0) <Prism language=\\\"html\\\">",
    		ctx
    	});

    	return block;
    }

    function create_fragment$9(ctx) {
    	let h1;
    	let t1;
    	let h30;
    	let t3;
    	let prism0;
    	let t4;
    	let h31;
    	let t6;
    	let p0;
    	let t7;
    	let i0;
    	let t9;
    	let t10;
    	let card0;
    	let t11;
    	let prism1;
    	let t12;
    	let h32;
    	let t14;
    	let p1;
    	let t15;
    	let i1;
    	let t17;
    	let t18;
    	let card1;
    	let t19;
    	let prism2;
    	let t20;
    	let h33;
    	let t22;
    	let p2;
    	let t23;
    	let i2;
    	let t25;
    	let i3;
    	let t27;
    	let t28;
    	let card2;
    	let t29;
    	let prism3;
    	let t30;
    	let h34;
    	let t32;
    	let p3;
    	let t34;
    	let card3;
    	let t35;
    	let prism4;
    	let t36;
    	let h35;
    	let t38;
    	let p4;
    	let t40;
    	let card4;
    	let t41;
    	let prism5;
    	let t42;
    	let h2;
    	let t44;
    	let h36;
    	let t46;
    	let card5;
    	let t47;
    	let prism6;
    	let t48;
    	let h37;
    	let t50;
    	let p5;
    	let code0;
    	let t52;
    	let t53;
    	let p6;
    	let code1;
    	let t55;
    	let t56;
    	let card6;
    	let t57;
    	let prism7;
    	let current;

    	prism0 = new Prism$1({
    			props: {
    				language: "html",
    				$$slots: { default: [create_default_slot_14] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	card0 = new dist$1.Card({
    			props: {
    				className: "bg--graa7",
    				$$slots: { default: [create_default_slot_13] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	prism1 = new Prism$1({
    			props: {
    				language: "html",
    				$$slots: { default: [create_default_slot_12] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	card1 = new dist$1.Card({
    			props: {
    				className: "bg--graa7",
    				$$slots: { default: [create_default_slot_11] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	prism2 = new Prism$1({
    			props: {
    				language: "html",
    				$$slots: { default: [create_default_slot_10$1] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	card2 = new dist$1.Card({
    			props: {
    				className: "bg--graa7",
    				$$slots: { default: [create_default_slot_9$1] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	prism3 = new Prism$1({
    			props: {
    				language: "html",
    				$$slots: { default: [create_default_slot_8$1] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	card3 = new dist$1.Card({
    			props: {
    				className: "bg--graa7",
    				$$slots: { default: [create_default_slot_7$1] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	prism4 = new Prism$1({
    			props: {
    				language: "html",
    				$$slots: { default: [create_default_slot_6$2] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	card4 = new dist$1.Card({
    			props: {
    				className: "bg--graa7",
    				$$slots: { default: [create_default_slot_5$2] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	prism5 = new Prism$1({
    			props: {
    				language: "html",
    				$$slots: { default: [create_default_slot_4$3] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	card5 = new dist$1.Card({
    			props: {
    				className: "bg--graa7",
    				$$slots: { default: [create_default_slot_3$4] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	prism6 = new Prism$1({
    			props: {
    				language: "html",
    				$$slots: { default: [create_default_slot_2$6] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	card6 = new dist$1.Card({
    			props: {
    				className: "bg--graa7",
    				$$slots: { default: [create_default_slot_1$6] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	prism7 = new Prism$1({
    			props: {
    				language: "html",
    				$$slots: { default: [create_default_slot$7] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			h1 = element("h1");
    			h1.textContent = "Flex";
    			t1 = space();
    			h30 = element("h3");
    			h30.textContent = "Flex container";
    			t3 = space();
    			create_component(prism0.$$.fragment);
    			t4 = space();
    			h31 = element("h3");
    			h31.textContent = "Justify content";
    			t6 = space();
    			p0 = element("p");
    			t7 = text("Justify content anvendes til ");
    			i0 = element("i");
    			i0.textContent = "horizontal";
    			t9 = text(" placering af child elementer.");
    			t10 = space();
    			create_component(card0.$$.fragment);
    			t11 = space();
    			create_component(prism1.$$.fragment);
    			t12 = space();
    			h32 = element("h3");
    			h32.textContent = "Align items";
    			t14 = space();
    			p1 = element("p");
    			t15 = text("Align items anvendes til ");
    			i1 = element("i");
    			i1.textContent = "veritcal";
    			t17 = text(" placering af child elementer.");
    			t18 = space();
    			create_component(card1.$$.fragment);
    			t19 = space();
    			create_component(prism2.$$.fragment);
    			t20 = space();
    			h33 = element("h3");
    			h33.textContent = "Flex center";
    			t22 = space();
    			p2 = element("p");
    			t23 = text("Flex center centrere alle child elementer både ");
    			i2 = element("i");
    			i2.textContent = "horizontalt";
    			t25 = text(" og ");
    			i3 = element("i");
    			i3.textContent = "vertical";
    			t27 = text(".");
    			t28 = space();
    			create_component(card2.$$.fragment);
    			t29 = space();
    			create_component(prism3.$$.fragment);
    			t30 = space();
    			h34 = element("h3");
    			h34.textContent = "Directions";
    			t32 = space();
    			p3 = element("p");
    			p3.textContent = "Directions bestemmer rækkefølgen for visning af child elementer.";
    			t34 = space();
    			create_component(card3.$$.fragment);
    			t35 = space();
    			create_component(prism4.$$.fragment);
    			t36 = space();
    			h35 = element("h3");
    			h35.textContent = "Wrap";
    			t38 = space();
    			p4 = element("p");
    			p4.textContent = "Flex wrap sørger for at alle child elementer beholder deres størrelse og istedet wrapper elementerne på multiple lines\n  istedet for one-line.";
    			t40 = space();
    			create_component(card4.$$.fragment);
    			t41 = space();
    			create_component(prism5.$$.fragment);
    			t42 = space();
    			h2 = element("h2");
    			h2.textContent = "Flex items";
    			t44 = space();
    			h36 = element("h3");
    			h36.textContent = "Align self";
    			t46 = space();
    			create_component(card5.$$.fragment);
    			t47 = space();
    			create_component(prism6.$$.fragment);
    			t48 = space();
    			h37 = element("h3");
    			h37.textContent = "Grow and shrik";
    			t50 = space();
    			p5 = element("p");
    			code0 = element("code");
    			code0.textContent = "flex-item--grow";
    			t52 = text(" sørger for at child element udfylder den tilbageværende plads i flex containeren.");
    			t53 = space();
    			p6 = element("p");
    			code1 = element("code");
    			code1.textContent = "flex-item--noshrink";
    			t55 = text(" sørger for at et child element altid vil have den samme størrelse også på scalering.");
    			t56 = space();
    			create_component(card6.$$.fragment);
    			t57 = space();
    			create_component(prism7.$$.fragment);
    			attr_dev(h1, "class", "color--eb");
    			add_location(h1, file$9, 5, 0, 93);
    			add_location(h30, file$9, 7, 0, 126);
    			add_location(h31, file$9, 13, 0, 216);
    			add_location(i0, file$9, 14, 32, 273);
    			add_location(p0, file$9, 14, 0, 241);
    			add_location(h32, file$9, 57, 0, 2098);
    			add_location(i1, file$9, 58, 28, 2147);
    			add_location(p1, file$9, 58, 0, 2119);
    			add_location(h33, file$9, 94, 0, 3691);
    			add_location(i2, file$9, 95, 50, 3762);
    			add_location(i3, file$9, 95, 72, 3784);
    			add_location(p2, file$9, 95, 0, 3712);
    			add_location(h34, file$9, 109, 0, 4159);
    			add_location(p3, file$9, 110, 0, 4179);
    			add_location(h35, file$9, 146, 0, 5581);
    			add_location(p4, file$9, 147, 0, 5595);
    			add_location(h2, file$9, 174, 0, 6615);
    			add_location(h36, file$9, 176, 0, 6636);
    			add_location(h37, file$9, 196, 0, 7331);
    			add_location(code0, file$9, 197, 3, 7358);
    			add_location(p5, file$9, 197, 0, 7355);
    			add_location(code1, file$9, 199, 2, 7479);
    			add_location(p6, file$9, 198, 0, 7473);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, h1, anchor);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, h30, anchor);
    			insert_dev(target, t3, anchor);
    			mount_component(prism0, target, anchor);
    			insert_dev(target, t4, anchor);
    			insert_dev(target, h31, anchor);
    			insert_dev(target, t6, anchor);
    			insert_dev(target, p0, anchor);
    			append_dev(p0, t7);
    			append_dev(p0, i0);
    			append_dev(p0, t9);
    			insert_dev(target, t10, anchor);
    			mount_component(card0, target, anchor);
    			insert_dev(target, t11, anchor);
    			mount_component(prism1, target, anchor);
    			insert_dev(target, t12, anchor);
    			insert_dev(target, h32, anchor);
    			insert_dev(target, t14, anchor);
    			insert_dev(target, p1, anchor);
    			append_dev(p1, t15);
    			append_dev(p1, i1);
    			append_dev(p1, t17);
    			insert_dev(target, t18, anchor);
    			mount_component(card1, target, anchor);
    			insert_dev(target, t19, anchor);
    			mount_component(prism2, target, anchor);
    			insert_dev(target, t20, anchor);
    			insert_dev(target, h33, anchor);
    			insert_dev(target, t22, anchor);
    			insert_dev(target, p2, anchor);
    			append_dev(p2, t23);
    			append_dev(p2, i2);
    			append_dev(p2, t25);
    			append_dev(p2, i3);
    			append_dev(p2, t27);
    			insert_dev(target, t28, anchor);
    			mount_component(card2, target, anchor);
    			insert_dev(target, t29, anchor);
    			mount_component(prism3, target, anchor);
    			insert_dev(target, t30, anchor);
    			insert_dev(target, h34, anchor);
    			insert_dev(target, t32, anchor);
    			insert_dev(target, p3, anchor);
    			insert_dev(target, t34, anchor);
    			mount_component(card3, target, anchor);
    			insert_dev(target, t35, anchor);
    			mount_component(prism4, target, anchor);
    			insert_dev(target, t36, anchor);
    			insert_dev(target, h35, anchor);
    			insert_dev(target, t38, anchor);
    			insert_dev(target, p4, anchor);
    			insert_dev(target, t40, anchor);
    			mount_component(card4, target, anchor);
    			insert_dev(target, t41, anchor);
    			mount_component(prism5, target, anchor);
    			insert_dev(target, t42, anchor);
    			insert_dev(target, h2, anchor);
    			insert_dev(target, t44, anchor);
    			insert_dev(target, h36, anchor);
    			insert_dev(target, t46, anchor);
    			mount_component(card5, target, anchor);
    			insert_dev(target, t47, anchor);
    			mount_component(prism6, target, anchor);
    			insert_dev(target, t48, anchor);
    			insert_dev(target, h37, anchor);
    			insert_dev(target, t50, anchor);
    			insert_dev(target, p5, anchor);
    			append_dev(p5, code0);
    			append_dev(p5, t52);
    			insert_dev(target, t53, anchor);
    			insert_dev(target, p6, anchor);
    			append_dev(p6, code1);
    			append_dev(p6, t55);
    			insert_dev(target, t56, anchor);
    			mount_component(card6, target, anchor);
    			insert_dev(target, t57, anchor);
    			mount_component(prism7, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const prism0_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				prism0_changes.$$scope = { dirty, ctx };
    			}

    			prism0.$set(prism0_changes);
    			const card0_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				card0_changes.$$scope = { dirty, ctx };
    			}

    			card0.$set(card0_changes);
    			const prism1_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				prism1_changes.$$scope = { dirty, ctx };
    			}

    			prism1.$set(prism1_changes);
    			const card1_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				card1_changes.$$scope = { dirty, ctx };
    			}

    			card1.$set(card1_changes);
    			const prism2_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				prism2_changes.$$scope = { dirty, ctx };
    			}

    			prism2.$set(prism2_changes);
    			const card2_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				card2_changes.$$scope = { dirty, ctx };
    			}

    			card2.$set(card2_changes);
    			const prism3_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				prism3_changes.$$scope = { dirty, ctx };
    			}

    			prism3.$set(prism3_changes);
    			const card3_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				card3_changes.$$scope = { dirty, ctx };
    			}

    			card3.$set(card3_changes);
    			const prism4_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				prism4_changes.$$scope = { dirty, ctx };
    			}

    			prism4.$set(prism4_changes);
    			const card4_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				card4_changes.$$scope = { dirty, ctx };
    			}

    			card4.$set(card4_changes);
    			const prism5_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				prism5_changes.$$scope = { dirty, ctx };
    			}

    			prism5.$set(prism5_changes);
    			const card5_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				card5_changes.$$scope = { dirty, ctx };
    			}

    			card5.$set(card5_changes);
    			const prism6_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				prism6_changes.$$scope = { dirty, ctx };
    			}

    			prism6.$set(prism6_changes);
    			const card6_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				card6_changes.$$scope = { dirty, ctx };
    			}

    			card6.$set(card6_changes);
    			const prism7_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				prism7_changes.$$scope = { dirty, ctx };
    			}

    			prism7.$set(prism7_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(prism0.$$.fragment, local);
    			transition_in(card0.$$.fragment, local);
    			transition_in(prism1.$$.fragment, local);
    			transition_in(card1.$$.fragment, local);
    			transition_in(prism2.$$.fragment, local);
    			transition_in(card2.$$.fragment, local);
    			transition_in(prism3.$$.fragment, local);
    			transition_in(card3.$$.fragment, local);
    			transition_in(prism4.$$.fragment, local);
    			transition_in(card4.$$.fragment, local);
    			transition_in(prism5.$$.fragment, local);
    			transition_in(card5.$$.fragment, local);
    			transition_in(prism6.$$.fragment, local);
    			transition_in(card6.$$.fragment, local);
    			transition_in(prism7.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(prism0.$$.fragment, local);
    			transition_out(card0.$$.fragment, local);
    			transition_out(prism1.$$.fragment, local);
    			transition_out(card1.$$.fragment, local);
    			transition_out(prism2.$$.fragment, local);
    			transition_out(card2.$$.fragment, local);
    			transition_out(prism3.$$.fragment, local);
    			transition_out(card3.$$.fragment, local);
    			transition_out(prism4.$$.fragment, local);
    			transition_out(card4.$$.fragment, local);
    			transition_out(prism5.$$.fragment, local);
    			transition_out(card5.$$.fragment, local);
    			transition_out(prism6.$$.fragment, local);
    			transition_out(card6.$$.fragment, local);
    			transition_out(prism7.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(h1);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(h30);
    			if (detaching) detach_dev(t3);
    			destroy_component(prism0, detaching);
    			if (detaching) detach_dev(t4);
    			if (detaching) detach_dev(h31);
    			if (detaching) detach_dev(t6);
    			if (detaching) detach_dev(p0);
    			if (detaching) detach_dev(t10);
    			destroy_component(card0, detaching);
    			if (detaching) detach_dev(t11);
    			destroy_component(prism1, detaching);
    			if (detaching) detach_dev(t12);
    			if (detaching) detach_dev(h32);
    			if (detaching) detach_dev(t14);
    			if (detaching) detach_dev(p1);
    			if (detaching) detach_dev(t18);
    			destroy_component(card1, detaching);
    			if (detaching) detach_dev(t19);
    			destroy_component(prism2, detaching);
    			if (detaching) detach_dev(t20);
    			if (detaching) detach_dev(h33);
    			if (detaching) detach_dev(t22);
    			if (detaching) detach_dev(p2);
    			if (detaching) detach_dev(t28);
    			destroy_component(card2, detaching);
    			if (detaching) detach_dev(t29);
    			destroy_component(prism3, detaching);
    			if (detaching) detach_dev(t30);
    			if (detaching) detach_dev(h34);
    			if (detaching) detach_dev(t32);
    			if (detaching) detach_dev(p3);
    			if (detaching) detach_dev(t34);
    			destroy_component(card3, detaching);
    			if (detaching) detach_dev(t35);
    			destroy_component(prism4, detaching);
    			if (detaching) detach_dev(t36);
    			if (detaching) detach_dev(h35);
    			if (detaching) detach_dev(t38);
    			if (detaching) detach_dev(p4);
    			if (detaching) detach_dev(t40);
    			destroy_component(card4, detaching);
    			if (detaching) detach_dev(t41);
    			destroy_component(prism5, detaching);
    			if (detaching) detach_dev(t42);
    			if (detaching) detach_dev(h2);
    			if (detaching) detach_dev(t44);
    			if (detaching) detach_dev(h36);
    			if (detaching) detach_dev(t46);
    			destroy_component(card5, detaching);
    			if (detaching) detach_dev(t47);
    			destroy_component(prism6, detaching);
    			if (detaching) detach_dev(t48);
    			if (detaching) detach_dev(h37);
    			if (detaching) detach_dev(t50);
    			if (detaching) detach_dev(p5);
    			if (detaching) detach_dev(t53);
    			if (detaching) detach_dev(p6);
    			if (detaching) detach_dev(t56);
    			destroy_component(card6, detaching);
    			if (detaching) detach_dev(t57);
    			destroy_component(prism7, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$9.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$9($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Flex', slots, []);
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Flex> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({ Prism: Prism$1, Card: dist$1.Card });
    	return [];
    }

    class Flex extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$9, create_fragment$9, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Flex",
    			options,
    			id: create_fragment$9.name
    		});
    	}
    }

    /* docs_src/utilities/Fonts.svelte generated by Svelte v3.42.1 */
    const file$8 = "docs_src/utilities/Fonts.svelte";

    // (10:0) <Card className="bg--graa7 padding-l--rl">
    function create_default_slot_6$1(ctx) {
    	let div0;
    	let strong0;
    	let t1;
    	let p0;
    	let t3;
    	let div1;
    	let strong1;
    	let t5;
    	let p1;

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			strong0 = element("strong");
    			strong0.textContent = ".ff-primary:";
    			t1 = space();
    			p0 = element("p");
    			p0.textContent = "Aa Bb Cc Dd Ee Ff Gg Hh Ii Jj Kk Ll Mm Nn Oo Pp Qq Rr Ss Tt Uu Vv Ww Xx Yy Zz Ææ Øø Åå 1234567890";
    			t3 = space();
    			div1 = element("div");
    			strong1 = element("strong");
    			strong1.textContent = ".ff-secondary:";
    			t5 = space();
    			p1 = element("p");
    			p1.textContent = "Aa Bb Cc Dd Ee Ff Gg Hh Ii Jj Kk Ll Mm Nn Oo Pp Qq Rr Ss Tt Uu Vv Ww Xx Yy Zz Ææ Øø Åå 1234567890";
    			add_location(strong0, file$8, 11, 4, 236);
    			add_location(p0, file$8, 12, 4, 270);
    			attr_dev(div0, "class", "ff-primary margin-l--tb");
    			add_location(div0, file$8, 10, 2, 194);
    			add_location(strong1, file$8, 15, 4, 417);
    			add_location(p1, file$8, 16, 4, 453);
    			attr_dev(div1, "class", "ff-secondary");
    			add_location(div1, file$8, 14, 2, 386);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			append_dev(div0, strong0);
    			append_dev(div0, t1);
    			append_dev(div0, p0);
    			insert_dev(target, t3, anchor);
    			insert_dev(target, div1, anchor);
    			append_dev(div1, strong1);
    			append_dev(div1, t5);
    			append_dev(div1, p1);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t3);
    			if (detaching) detach_dev(div1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_6$1.name,
    		type: "slot",
    		source: "(10:0) <Card className=\\\"bg--graa7 padding-l--rl\\\">",
    		ctx
    	});

    	return block;
    }

    // (21:0) <Prism language="html">
    function create_default_slot_5$1(ctx) {
    	let t_value = `<div class="ff-primary"></div>
<div class="ff-secondary"></div>` + "";

    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_5$1.name,
    		type: "slot",
    		source: "(21:0) <Prism language=\\\"html\\\">",
    		ctx
    	});

    	return block;
    }

    // (28:0) <Card className="bg--graa7 padding-l--rl">
    function create_default_slot_4$2(ctx) {
    	let p0;
    	let t1;
    	let p1;
    	let t3;
    	let p2;

    	const block = {
    		c: function create() {
    			p0 = element("p");
    			p0.textContent = "fontweight-normal";
    			t1 = space();
    			p1 = element("p");
    			p1.textContent = "fontweight-bold";
    			t3 = space();
    			p2 = element("p");
    			p2.textContent = "fontweight-bolder";
    			attr_dev(p0, "class", "fontweight-normal");
    			add_location(p0, file$8, 28, 2, 747);
    			attr_dev(p1, "class", "fontweight-bold");
    			add_location(p1, file$8, 29, 2, 800);
    			attr_dev(p2, "class", "fontweight-bolder");
    			add_location(p2, file$8, 30, 2, 849);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, p0, anchor);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, p1, anchor);
    			insert_dev(target, t3, anchor);
    			insert_dev(target, p2, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(p0);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(p1);
    			if (detaching) detach_dev(t3);
    			if (detaching) detach_dev(p2);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_4$2.name,
    		type: "slot",
    		source: "(28:0) <Card className=\\\"bg--graa7 padding-l--rl\\\">",
    		ctx
    	});

    	return block;
    }

    // (34:0) <Prism language="html">
    function create_default_slot_3$3(ctx) {
    	let t_value = `<p class="fontweight-normal"></p>
<p class="fontweight-bold"></p>
<p class="fontweight-bolder"></p>` + "";

    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_3$3.name,
    		type: "slot",
    		source: "(34:0) <Prism language=\\\"html\\\">",
    		ctx
    	});

    	return block;
    }

    // (46:0) <Card className="bg--graa7 padding-l">
    function create_default_slot_2$5(ctx) {
    	let div2;
    	let t0;
    	let div0;
    	let t2;
    	let div1;
    	let t4;
    	let div5;
    	let t5;
    	let div3;
    	let t7;
    	let div4;
    	let t9;
    	let div8;
    	let t10;
    	let div6;
    	let t12;
    	let div7;
    	let t14;
    	let div11;
    	let t15;
    	let div9;
    	let t17;
    	let div10;
    	let t19;
    	let div14;
    	let t20;
    	let div12;
    	let t22;
    	let div13;
    	let t24;
    	let div17;
    	let t25;
    	let div15;
    	let t27;
    	let div16;
    	let t29;
    	let div20;
    	let t30;
    	let div18;
    	let t32;
    	let div19;
    	let t34;
    	let div23;
    	let t35;
    	let div21;
    	let t37;
    	let div22;
    	let t39;
    	let div26;
    	let t40;
    	let div24;
    	let t42;
    	let div25;

    	const block = {
    		c: function create() {
    			div2 = element("div");
    			t0 = text("fontsize-xxsmall = .625rem ~ 10px;\n    ");
    			div0 = element("div");
    			div0.textContent = "fontsize-smaller";
    			t2 = space();
    			div1 = element("div");
    			div1.textContent = "fontsize-larger";
    			t4 = space();
    			div5 = element("div");
    			t5 = text("fontsize-xsmall = .75rem ~ 12px;\n    ");
    			div3 = element("div");
    			div3.textContent = "fontsize-smaller";
    			t7 = space();
    			div4 = element("div");
    			div4.textContent = "fontsize-larger";
    			t9 = space();
    			div8 = element("div");
    			t10 = text("fontsize-small = .875rem ~ 14px;\n    ");
    			div6 = element("div");
    			div6.textContent = "fontsize-smaller";
    			t12 = space();
    			div7 = element("div");
    			div7.textContent = "fontsize-larger";
    			t14 = space();
    			div11 = element("div");
    			t15 = text("fontsize-medium = 1rem ~ 16px;\n    ");
    			div9 = element("div");
    			div9.textContent = "fontsize-smaller";
    			t17 = space();
    			div10 = element("div");
    			div10.textContent = "fontsize-larger";
    			t19 = space();
    			div14 = element("div");
    			t20 = text("fontsize-large = 1.125rem ~ 18px;\n    ");
    			div12 = element("div");
    			div12.textContent = "fontsize-smaller";
    			t22 = space();
    			div13 = element("div");
    			div13.textContent = "fontsize-larger";
    			t24 = space();
    			div17 = element("div");
    			t25 = text("fontsize-xlarge = 1.25rem ~ 20px;\n    ");
    			div15 = element("div");
    			div15.textContent = "fontsize-smaller";
    			t27 = space();
    			div16 = element("div");
    			div16.textContent = "fontsize-larger";
    			t29 = space();
    			div20 = element("div");
    			t30 = text("fontsize-xxlarge = 1.875rem ~ 30px;\n    ");
    			div18 = element("div");
    			div18.textContent = "fontsize-smaller";
    			t32 = space();
    			div19 = element("div");
    			div19.textContent = "fontsize-larger";
    			t34 = space();
    			div23 = element("div");
    			t35 = text("fontsize-xxxlarge = 2.25rem ~ 36px;\n    ");
    			div21 = element("div");
    			div21.textContent = "fontsize-smaller";
    			t37 = space();
    			div22 = element("div");
    			div22.textContent = "fontsize-larger";
    			t39 = space();
    			div26 = element("div");
    			t40 = text("fontsize-xxxxlarge = 3.125rem ~ 50px;\n    ");
    			div24 = element("div");
    			div24.textContent = "fontsize-smaller";
    			t42 = space();
    			div25 = element("div");
    			div25.textContent = "fontsize-larger";
    			attr_dev(div0, "class", "fontsize-smaller");
    			add_location(div0, file$8, 48, 4, 1497);
    			attr_dev(div1, "class", "fontsize-larger");
    			add_location(div1, file$8, 49, 4, 1554);
    			attr_dev(div2, "class", "fontsize-xxsmall padding-m--b");
    			add_location(div2, file$8, 46, 2, 1410);
    			attr_dev(div3, "class", "fontsize-smaller");
    			add_location(div3, file$8, 53, 4, 1701);
    			attr_dev(div4, "class", "fontsize-larger");
    			add_location(div4, file$8, 54, 4, 1758);
    			attr_dev(div5, "class", "fontsize-xsmall padding-m--tb");
    			add_location(div5, file$8, 51, 2, 1616);
    			attr_dev(div6, "class", "fontsize-smaller");
    			add_location(div6, file$8, 58, 4, 1904);
    			attr_dev(div7, "class", "fontsize-larger");
    			add_location(div7, file$8, 59, 4, 1961);
    			attr_dev(div8, "class", "fontsize-small padding-m--tb");
    			add_location(div8, file$8, 56, 2, 1820);
    			attr_dev(div9, "class", "fontsize-smaller");
    			add_location(div9, file$8, 63, 4, 2106);
    			attr_dev(div10, "class", "fontsize-larger");
    			add_location(div10, file$8, 64, 4, 2163);
    			attr_dev(div11, "class", "fontsize-medium padding-m--tb");
    			add_location(div11, file$8, 61, 2, 2023);
    			attr_dev(div12, "class", "fontsize-smaller");
    			add_location(div12, file$8, 68, 4, 2310);
    			attr_dev(div13, "class", "fontsize-larger");
    			add_location(div13, file$8, 69, 4, 2367);
    			attr_dev(div14, "class", "fontsize-large padding-m--tb");
    			add_location(div14, file$8, 66, 2, 2225);
    			attr_dev(div15, "class", "fontsize-smaller");
    			add_location(div15, file$8, 73, 4, 2515);
    			attr_dev(div16, "class", "fontsize-larger");
    			add_location(div16, file$8, 74, 4, 2572);
    			attr_dev(div17, "class", "fontsize-xlarge padding-m--tb");
    			add_location(div17, file$8, 71, 2, 2429);
    			attr_dev(div18, "class", "fontsize-smaller");
    			add_location(div18, file$8, 78, 4, 2723);
    			attr_dev(div19, "class", "fontsize-larger");
    			add_location(div19, file$8, 79, 4, 2780);
    			attr_dev(div20, "class", "fontsize-xxlarge padding-m--tb");
    			add_location(div20, file$8, 76, 2, 2634);
    			attr_dev(div21, "class", "fontsize-smaller");
    			add_location(div21, file$8, 83, 4, 2932);
    			attr_dev(div22, "class", "fontsize-larger");
    			add_location(div22, file$8, 84, 4, 2989);
    			attr_dev(div23, "class", "fontsize-xxxlarge padding-m--tb");
    			add_location(div23, file$8, 81, 2, 2842);
    			attr_dev(div24, "class", "fontsize-smaller");
    			add_location(div24, file$8, 88, 4, 3143);
    			attr_dev(div25, "class", "fontsize-larger");
    			add_location(div25, file$8, 89, 4, 3200);
    			attr_dev(div26, "class", "fontsize-xxxxlarge padding-m--t");
    			add_location(div26, file$8, 86, 2, 3051);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div2, anchor);
    			append_dev(div2, t0);
    			append_dev(div2, div0);
    			append_dev(div2, t2);
    			append_dev(div2, div1);
    			insert_dev(target, t4, anchor);
    			insert_dev(target, div5, anchor);
    			append_dev(div5, t5);
    			append_dev(div5, div3);
    			append_dev(div5, t7);
    			append_dev(div5, div4);
    			insert_dev(target, t9, anchor);
    			insert_dev(target, div8, anchor);
    			append_dev(div8, t10);
    			append_dev(div8, div6);
    			append_dev(div8, t12);
    			append_dev(div8, div7);
    			insert_dev(target, t14, anchor);
    			insert_dev(target, div11, anchor);
    			append_dev(div11, t15);
    			append_dev(div11, div9);
    			append_dev(div11, t17);
    			append_dev(div11, div10);
    			insert_dev(target, t19, anchor);
    			insert_dev(target, div14, anchor);
    			append_dev(div14, t20);
    			append_dev(div14, div12);
    			append_dev(div14, t22);
    			append_dev(div14, div13);
    			insert_dev(target, t24, anchor);
    			insert_dev(target, div17, anchor);
    			append_dev(div17, t25);
    			append_dev(div17, div15);
    			append_dev(div17, t27);
    			append_dev(div17, div16);
    			insert_dev(target, t29, anchor);
    			insert_dev(target, div20, anchor);
    			append_dev(div20, t30);
    			append_dev(div20, div18);
    			append_dev(div20, t32);
    			append_dev(div20, div19);
    			insert_dev(target, t34, anchor);
    			insert_dev(target, div23, anchor);
    			append_dev(div23, t35);
    			append_dev(div23, div21);
    			append_dev(div23, t37);
    			append_dev(div23, div22);
    			insert_dev(target, t39, anchor);
    			insert_dev(target, div26, anchor);
    			append_dev(div26, t40);
    			append_dev(div26, div24);
    			append_dev(div26, t42);
    			append_dev(div26, div25);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div2);
    			if (detaching) detach_dev(t4);
    			if (detaching) detach_dev(div5);
    			if (detaching) detach_dev(t9);
    			if (detaching) detach_dev(div8);
    			if (detaching) detach_dev(t14);
    			if (detaching) detach_dev(div11);
    			if (detaching) detach_dev(t19);
    			if (detaching) detach_dev(div14);
    			if (detaching) detach_dev(t24);
    			if (detaching) detach_dev(div17);
    			if (detaching) detach_dev(t29);
    			if (detaching) detach_dev(div20);
    			if (detaching) detach_dev(t34);
    			if (detaching) detach_dev(div23);
    			if (detaching) detach_dev(t39);
    			if (detaching) detach_dev(div26);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_2$5.name,
    		type: "slot",
    		source: "(46:0) <Card className=\\\"bg--graa7 padding-l\\\">",
    		ctx
    	});

    	return block;
    }

    // (94:0) <Prism language="html">
    function create_default_slot_1$5(ctx) {
    	let t_value = `<div class="fontsize-xxsmall"></div>
<div class="fontsize-xsmall"></div>
<div class="fontsize-small"></div>
<div class="fontsize-medium"></div>
<div class="fontsize-large"></div>
<div class="fontsize-xlarge"></div>
<div class="fontsize-xxlarge"></div>
<div class="fontsize-xxxlarge"></div>
<div class="fontsize-xxxxlarge"></div>

<div class="fontsize-smaller"></div>
<div class="fontsize-larger"></div>` + "";

    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_1$5.name,
    		type: "slot",
    		source: "(94:0) <Prism language=\\\"html\\\">",
    		ctx
    	});

    	return block;
    }

    // (111:0) <Card className="bg--graa7 padding-l--rl padding-l--t">
    function create_default_slot$6(ctx) {
    	let h1;
    	let t1;
    	let h2;
    	let t3;
    	let h3;
    	let t5;
    	let h4;
    	let t7;
    	let h5;
    	let t9;
    	let h6;
    	let t11;
    	let p0;
    	let t13;
    	let p1;
    	let t15;
    	let p2;
    	let t17;
    	let p3;
    	let t19;
    	let p4;
    	let t21;
    	let p5;
    	let t23;
    	let p6;
    	let t25;
    	let p7;

    	const block = {
    		c: function create() {
    			h1 = element("h1");
    			h1.textContent = "h1";
    			t1 = space();
    			h2 = element("h2");
    			h2.textContent = "h2";
    			t3 = space();
    			h3 = element("h3");
    			h3.textContent = "h3";
    			t5 = space();
    			h4 = element("h4");
    			h4.textContent = "h4";
    			t7 = space();
    			h5 = element("h5");
    			h5.textContent = "h5";
    			t9 = space();
    			h6 = element("h6");
    			h6.textContent = "h6";
    			t11 = space();
    			p0 = element("p");
    			p0.textContent = "fs-ads";
    			t13 = space();
    			p1 = element("p");
    			p1.textContent = "fs-bodytext";
    			t15 = space();
    			p2 = element("p");
    			p2.textContent = "fs-caption";
    			t17 = space();
    			p3 = element("p");
    			p3.textContent = "fs-quote";
    			t19 = space();
    			p4 = element("p");
    			p4.textContent = "fs-showmore";
    			t21 = space();
    			p5 = element("p");
    			p5.textContent = "fs-subtitle";
    			t23 = space();
    			p6 = element("p");
    			p6.textContent = "fs-timestamp";
    			t25 = space();
    			p7 = element("p");
    			p7.textContent = "fs-title";
    			add_location(h1, file$8, 111, 2, 3805);
    			add_location(h2, file$8, 112, 2, 3819);
    			add_location(h3, file$8, 113, 2, 3833);
    			add_location(h4, file$8, 114, 2, 3847);
    			add_location(h5, file$8, 115, 2, 3861);
    			add_location(h6, file$8, 116, 2, 3875);
    			attr_dev(p0, "class", "fs-ads");
    			add_location(p0, file$8, 118, 2, 3890);
    			attr_dev(p1, "class", "fs-bodytext");
    			add_location(p1, file$8, 119, 2, 3921);
    			attr_dev(p2, "class", "fs-caption");
    			add_location(p2, file$8, 120, 2, 3962);
    			attr_dev(p3, "class", "fs-quote");
    			add_location(p3, file$8, 121, 2, 4001);
    			attr_dev(p4, "class", "fs-showmore");
    			add_location(p4, file$8, 122, 2, 4036);
    			attr_dev(p5, "class", "fs-subtitle");
    			add_location(p5, file$8, 123, 2, 4077);
    			attr_dev(p6, "class", "fs-timestamp");
    			add_location(p6, file$8, 124, 2, 4118);
    			attr_dev(p7, "class", "fs-title");
    			add_location(p7, file$8, 125, 2, 4161);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, h1, anchor);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, h2, anchor);
    			insert_dev(target, t3, anchor);
    			insert_dev(target, h3, anchor);
    			insert_dev(target, t5, anchor);
    			insert_dev(target, h4, anchor);
    			insert_dev(target, t7, anchor);
    			insert_dev(target, h5, anchor);
    			insert_dev(target, t9, anchor);
    			insert_dev(target, h6, anchor);
    			insert_dev(target, t11, anchor);
    			insert_dev(target, p0, anchor);
    			insert_dev(target, t13, anchor);
    			insert_dev(target, p1, anchor);
    			insert_dev(target, t15, anchor);
    			insert_dev(target, p2, anchor);
    			insert_dev(target, t17, anchor);
    			insert_dev(target, p3, anchor);
    			insert_dev(target, t19, anchor);
    			insert_dev(target, p4, anchor);
    			insert_dev(target, t21, anchor);
    			insert_dev(target, p5, anchor);
    			insert_dev(target, t23, anchor);
    			insert_dev(target, p6, anchor);
    			insert_dev(target, t25, anchor);
    			insert_dev(target, p7, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(h1);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(h2);
    			if (detaching) detach_dev(t3);
    			if (detaching) detach_dev(h3);
    			if (detaching) detach_dev(t5);
    			if (detaching) detach_dev(h4);
    			if (detaching) detach_dev(t7);
    			if (detaching) detach_dev(h5);
    			if (detaching) detach_dev(t9);
    			if (detaching) detach_dev(h6);
    			if (detaching) detach_dev(t11);
    			if (detaching) detach_dev(p0);
    			if (detaching) detach_dev(t13);
    			if (detaching) detach_dev(p1);
    			if (detaching) detach_dev(t15);
    			if (detaching) detach_dev(p2);
    			if (detaching) detach_dev(t17);
    			if (detaching) detach_dev(p3);
    			if (detaching) detach_dev(t19);
    			if (detaching) detach_dev(p4);
    			if (detaching) detach_dev(t21);
    			if (detaching) detach_dev(p5);
    			if (detaching) detach_dev(t23);
    			if (detaching) detach_dev(p6);
    			if (detaching) detach_dev(t25);
    			if (detaching) detach_dev(p7);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$6.name,
    		type: "slot",
    		source: "(111:0) <Card className=\\\"bg--graa7 padding-l--rl padding-l--t\\\">",
    		ctx
    	});

    	return block;
    }

    function create_fragment$8(ctx) {
    	let h1;
    	let t1;
    	let h30;
    	let t3;
    	let card0;
    	let t4;
    	let prism0;
    	let t5;
    	let h31;
    	let t7;
    	let card1;
    	let t8;
    	let prism1;
    	let t9;
    	let h32;
    	let t11;
    	let p0;
    	let t13;
    	let p1;
    	let t15;
    	let p2;
    	let t16;
    	let u0;
    	let t18;
    	let u1;
    	let t20;
    	let t21;
    	let card2;
    	let t22;
    	let prism2;
    	let t23;
    	let h33;
    	let t25;
    	let card3;
    	let current;

    	card0 = new dist$1.Card({
    			props: {
    				className: "bg--graa7 padding-l--rl",
    				$$slots: { default: [create_default_slot_6$1] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	prism0 = new Prism$1({
    			props: {
    				language: "html",
    				$$slots: { default: [create_default_slot_5$1] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	card1 = new dist$1.Card({
    			props: {
    				className: "bg--graa7 padding-l--rl",
    				$$slots: { default: [create_default_slot_4$2] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	prism1 = new Prism$1({
    			props: {
    				language: "html",
    				$$slots: { default: [create_default_slot_3$3] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	card2 = new dist$1.Card({
    			props: {
    				className: "bg--graa7 padding-l",
    				$$slots: { default: [create_default_slot_2$5] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	prism2 = new Prism$1({
    			props: {
    				language: "html",
    				$$slots: { default: [create_default_slot_1$5] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	card3 = new dist$1.Card({
    			props: {
    				className: "bg--graa7 padding-l--rl padding-l--t",
    				$$slots: { default: [create_default_slot$6] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			h1 = element("h1");
    			h1.textContent = "Fonts";
    			t1 = space();
    			h30 = element("h3");
    			h30.textContent = "Font family";
    			t3 = space();
    			create_component(card0.$$.fragment);
    			t4 = space();
    			create_component(prism0.$$.fragment);
    			t5 = space();
    			h31 = element("h3");
    			h31.textContent = "Font-weight";
    			t7 = space();
    			create_component(card1.$$.fragment);
    			t8 = space();
    			create_component(prism1.$$.fragment);
    			t9 = space();
    			h32 = element("h3");
    			h32.textContent = "Font-size";
    			t11 = space();
    			p0 = element("p");
    			p0.textContent = "Font-size er sat i rem for at understøtte brugerens font-size valg i browseren.";
    			t13 = space();
    			p1 = element("p");
    			p1.textContent = "Rem værdien er udregnet i forhold til en basis font-size på 16px, hvilket er browser-standarden";
    			t15 = space();
    			p2 = element("p");
    			t16 = text("Der er både en ");
    			u0 = element("u");
    			u0.textContent = "larger";
    			t18 = text(" og en ");
    			u1 = element("u");
    			u1.textContent = "smaller";
    			t20 = text(" mulighed, der begge er relative til parent fontsize");
    			t21 = space();
    			create_component(card2.$$.fragment);
    			t22 = space();
    			create_component(prism2.$$.fragment);
    			t23 = space();
    			h33 = element("h3");
    			h33.textContent = "Headers and font aliases";
    			t25 = space();
    			create_component(card3.$$.fragment);
    			attr_dev(h1, "class", "color--eb");
    			add_location(h1, file$8, 5, 0, 93);
    			add_location(h30, file$8, 7, 0, 127);
    			add_location(h31, file$8, 25, 0, 680);
    			add_location(h32, file$8, 39, 0, 1049);
    			add_location(p0, file$8, 41, 0, 1069);
    			add_location(p1, file$8, 42, 0, 1156);
    			add_location(u0, file$8, 43, 18, 1277);
    			add_location(u1, file$8, 43, 38, 1297);
    			add_location(p2, file$8, 43, 0, 1259);
    			add_location(h33, file$8, 108, 0, 3712);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, h1, anchor);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, h30, anchor);
    			insert_dev(target, t3, anchor);
    			mount_component(card0, target, anchor);
    			insert_dev(target, t4, anchor);
    			mount_component(prism0, target, anchor);
    			insert_dev(target, t5, anchor);
    			insert_dev(target, h31, anchor);
    			insert_dev(target, t7, anchor);
    			mount_component(card1, target, anchor);
    			insert_dev(target, t8, anchor);
    			mount_component(prism1, target, anchor);
    			insert_dev(target, t9, anchor);
    			insert_dev(target, h32, anchor);
    			insert_dev(target, t11, anchor);
    			insert_dev(target, p0, anchor);
    			insert_dev(target, t13, anchor);
    			insert_dev(target, p1, anchor);
    			insert_dev(target, t15, anchor);
    			insert_dev(target, p2, anchor);
    			append_dev(p2, t16);
    			append_dev(p2, u0);
    			append_dev(p2, t18);
    			append_dev(p2, u1);
    			append_dev(p2, t20);
    			insert_dev(target, t21, anchor);
    			mount_component(card2, target, anchor);
    			insert_dev(target, t22, anchor);
    			mount_component(prism2, target, anchor);
    			insert_dev(target, t23, anchor);
    			insert_dev(target, h33, anchor);
    			insert_dev(target, t25, anchor);
    			mount_component(card3, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const card0_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				card0_changes.$$scope = { dirty, ctx };
    			}

    			card0.$set(card0_changes);
    			const prism0_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				prism0_changes.$$scope = { dirty, ctx };
    			}

    			prism0.$set(prism0_changes);
    			const card1_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				card1_changes.$$scope = { dirty, ctx };
    			}

    			card1.$set(card1_changes);
    			const prism1_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				prism1_changes.$$scope = { dirty, ctx };
    			}

    			prism1.$set(prism1_changes);
    			const card2_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				card2_changes.$$scope = { dirty, ctx };
    			}

    			card2.$set(card2_changes);
    			const prism2_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				prism2_changes.$$scope = { dirty, ctx };
    			}

    			prism2.$set(prism2_changes);
    			const card3_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				card3_changes.$$scope = { dirty, ctx };
    			}

    			card3.$set(card3_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(card0.$$.fragment, local);
    			transition_in(prism0.$$.fragment, local);
    			transition_in(card1.$$.fragment, local);
    			transition_in(prism1.$$.fragment, local);
    			transition_in(card2.$$.fragment, local);
    			transition_in(prism2.$$.fragment, local);
    			transition_in(card3.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(card0.$$.fragment, local);
    			transition_out(prism0.$$.fragment, local);
    			transition_out(card1.$$.fragment, local);
    			transition_out(prism1.$$.fragment, local);
    			transition_out(card2.$$.fragment, local);
    			transition_out(prism2.$$.fragment, local);
    			transition_out(card3.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(h1);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(h30);
    			if (detaching) detach_dev(t3);
    			destroy_component(card0, detaching);
    			if (detaching) detach_dev(t4);
    			destroy_component(prism0, detaching);
    			if (detaching) detach_dev(t5);
    			if (detaching) detach_dev(h31);
    			if (detaching) detach_dev(t7);
    			destroy_component(card1, detaching);
    			if (detaching) detach_dev(t8);
    			destroy_component(prism1, detaching);
    			if (detaching) detach_dev(t9);
    			if (detaching) detach_dev(h32);
    			if (detaching) detach_dev(t11);
    			if (detaching) detach_dev(p0);
    			if (detaching) detach_dev(t13);
    			if (detaching) detach_dev(p1);
    			if (detaching) detach_dev(t15);
    			if (detaching) detach_dev(p2);
    			if (detaching) detach_dev(t21);
    			destroy_component(card2, detaching);
    			if (detaching) detach_dev(t22);
    			destroy_component(prism2, detaching);
    			if (detaching) detach_dev(t23);
    			if (detaching) detach_dev(h33);
    			if (detaching) detach_dev(t25);
    			destroy_component(card3, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$8.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$8($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Fonts', slots, []);
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Fonts> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({ Prism: Prism$1, Card: dist$1.Card });
    	return [];
    }

    class Fonts extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$8, create_fragment$8, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Fonts",
    			options,
    			id: create_fragment$8.name
    		});
    	}
    }

    /* docs_src/utilities/Grid.svelte generated by Svelte v3.42.1 */
    const file$7 = "docs_src/utilities/Grid.svelte";

    // (8:0) <Card className="bg--graa7 text-align--center">
    function create_default_slot_2$4(ctx) {
    	let div3;
    	let p0;
    	let t1;
    	let p1;
    	let t3;
    	let div2;
    	let p2;
    	let t5;
    	let p3;
    	let t7;
    	let div1;
    	let p4;
    	let t9;
    	let p5;
    	let t11;
    	let div0;
    	let p6;
    	let t13;
    	let p7;

    	const block = {
    		c: function create() {
    			div3 = element("div");
    			p0 = element("p");
    			p0.textContent = "grid-width--xlarge: 930px";
    			t1 = space();
    			p1 = element("p");
    			p1.textContent = "Page content width - frontpage";
    			t3 = space();
    			div2 = element("div");
    			p2 = element("p");
    			p2.textContent = "grid-width--large: 910px";
    			t5 = space();
    			p3 = element("p");
    			p3.textContent = "Page content width";
    			t7 = space();
    			div1 = element("div");
    			p4 = element("p");
    			p4.textContent = "grid-width--medium: 730px";
    			t9 = space();
    			p5 = element("p");
    			p5.textContent = "Bodytext container width";
    			t11 = space();
    			div0 = element("div");
    			p6 = element("p");
    			p6.textContent = "grid-width--small: 610px";
    			t13 = space();
    			p7 = element("p");
    			p7.textContent = "Widget width";
    			add_location(p0, file$7, 9, 4, 273);
    			add_location(p1, file$7, 10, 4, 310);
    			add_location(p2, file$7, 12, 6, 439);
    			add_location(p3, file$7, 13, 6, 477);
    			add_location(p4, file$7, 15, 8, 598);
    			add_location(p5, file$7, 16, 8, 639);
    			add_location(p6, file$7, 18, 10, 770);
    			add_location(p7, file$7, 19, 10, 812);
    			attr_dev(div0, "class", "grid-width--small vertical-center bg--eb2");
    			set_style(div0, "overflow", "hidden");
    			add_location(div0, file$7, 17, 8, 679);
    			attr_dev(div1, "class", "grid-width--medium vertical-center bg--eb");
    			set_style(div1, "overflow", "hidden");
    			add_location(div1, file$7, 14, 6, 509);
    			attr_dev(div2, "class", "grid-width--large vertical-center bg--eb2");
    			set_style(div2, "overflow", "hidden");
    			add_location(div2, file$7, 11, 4, 352);
    			attr_dev(div3, "class", "grid-width--xlarge vertical-center bg--eb");
    			set_style(div3, "overflow", "hidden");
    			add_location(div3, file$7, 8, 2, 188);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div3, anchor);
    			append_dev(div3, p0);
    			append_dev(div3, t1);
    			append_dev(div3, p1);
    			append_dev(div3, t3);
    			append_dev(div3, div2);
    			append_dev(div2, p2);
    			append_dev(div2, t5);
    			append_dev(div2, p3);
    			append_dev(div2, t7);
    			append_dev(div2, div1);
    			append_dev(div1, p4);
    			append_dev(div1, t9);
    			append_dev(div1, p5);
    			append_dev(div1, t11);
    			append_dev(div1, div0);
    			append_dev(div0, p6);
    			append_dev(div0, t13);
    			append_dev(div0, p7);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div3);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_2$4.name,
    		type: "slot",
    		source: "(8:0) <Card className=\\\"bg--graa7 text-align--center\\\">",
    		ctx
    	});

    	return block;
    }

    // (29:0) <Prism language="html">
    function create_default_slot_1$4(ctx) {
    	let t_value = `<div class="grid-width--xlarge"></div>
<div class="grid-width--large"></div>
<div class="grid-width--medium"></div>
<div class="grid-width--small"></div>` + "";

    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_1$4.name,
    		type: "slot",
    		source: "(29:0) <Prism language=\\\"html\\\">",
    		ctx
    	});

    	return block;
    }

    // (38:0) <Prism language="css">
    function create_default_slot$5(ctx) {
    	let t_value = `--grid-small: 610px;
--grid-medium: 730px;
--grid-large: 910px;
--grid-xlarge: 930px;` + "";

    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$5.name,
    		type: "slot",
    		source: "(38:0) <Prism language=\\\"css\\\">",
    		ctx
    	});

    	return block;
    }

    function create_fragment$7(ctx) {
    	let h1;
    	let t1;
    	let card;
    	let t2;
    	let h30;
    	let t4;
    	let prism0;
    	let t5;
    	let h31;
    	let t7;
    	let prism1;
    	let current;

    	card = new dist$1.Card({
    			props: {
    				className: "bg--graa7 text-align--center",
    				$$slots: { default: [create_default_slot_2$4] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	prism0 = new Prism$1({
    			props: {
    				language: "html",
    				$$slots: { default: [create_default_slot_1$4] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	prism1 = new Prism$1({
    			props: {
    				language: "css",
    				$$slots: { default: [create_default_slot$5] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			h1 = element("h1");
    			h1.textContent = "Grid";
    			t1 = space();
    			create_component(card.$$.fragment);
    			t2 = space();
    			h30 = element("h3");
    			h30.textContent = "HTML class names";
    			t4 = space();
    			create_component(prism0.$$.fragment);
    			t5 = space();
    			h31 = element("h3");
    			h31.textContent = "CSS variable names";
    			t7 = space();
    			create_component(prism1.$$.fragment);
    			attr_dev(h1, "class", "color--eb margin-l--b");
    			add_location(h1, file$7, 5, 0, 93);
    			add_location(h30, file$7, 26, 0, 889);
    			add_location(h31, file$7, 35, 0, 1110);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, h1, anchor);
    			insert_dev(target, t1, anchor);
    			mount_component(card, target, anchor);
    			insert_dev(target, t2, anchor);
    			insert_dev(target, h30, anchor);
    			insert_dev(target, t4, anchor);
    			mount_component(prism0, target, anchor);
    			insert_dev(target, t5, anchor);
    			insert_dev(target, h31, anchor);
    			insert_dev(target, t7, anchor);
    			mount_component(prism1, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const card_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				card_changes.$$scope = { dirty, ctx };
    			}

    			card.$set(card_changes);
    			const prism0_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				prism0_changes.$$scope = { dirty, ctx };
    			}

    			prism0.$set(prism0_changes);
    			const prism1_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				prism1_changes.$$scope = { dirty, ctx };
    			}

    			prism1.$set(prism1_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(card.$$.fragment, local);
    			transition_in(prism0.$$.fragment, local);
    			transition_in(prism1.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(card.$$.fragment, local);
    			transition_out(prism0.$$.fragment, local);
    			transition_out(prism1.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(h1);
    			if (detaching) detach_dev(t1);
    			destroy_component(card, detaching);
    			if (detaching) detach_dev(t2);
    			if (detaching) detach_dev(h30);
    			if (detaching) detach_dev(t4);
    			destroy_component(prism0, detaching);
    			if (detaching) detach_dev(t5);
    			if (detaching) detach_dev(h31);
    			if (detaching) detach_dev(t7);
    			destroy_component(prism1, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$7.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$7($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Grid', slots, []);
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Grid> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({ Prism: Prism$1, Card: dist$1.Card });
    	return [];
    }

    class Grid extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$7, create_fragment$7, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Grid",
    			options,
    			id: create_fragment$7.name
    		});
    	}
    }

    /* docs_src/utilities/Helpers.svelte generated by Svelte v3.42.1 */
    const file$6 = "docs_src/utilities/Helpers.svelte";

    // (10:0) <Prism language="html">
    function create_default_slot_10(ctx) {
    	let t_value = `<div class="hidden"></div>` + "";
    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_10.name,
    		type: "slot",
    		source: "(10:0) <Prism language=\\\"html\\\">",
    		ctx
    	});

    	return block;
    }

    // (16:0) <Prism language="html">
    function create_default_slot_9(ctx) {
    	let t_value = `<div class="position-absolute"></div>
<div class="position-fixed"></div>
<div class="position-relative"></div>` + "";

    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_9.name,
    		type: "slot",
    		source: "(16:0) <Prism language=\\\"html\\\">",
    		ctx
    	});

    	return block;
    }

    // (24:0) <Card className="bg--graa7">
    function create_default_slot_8(ctx) {
    	let div2;
    	let div0;
    	let t1;
    	let div1;

    	const block = {
    		c: function create() {
    			div2 = element("div");
    			div0 = element("div");
    			div0.textContent = "float-left";
    			t1 = space();
    			div1 = element("div");
    			div1.textContent = "float-right";
    			attr_dev(div0, "class", "bg--eb padding-m float-left");
    			add_location(div0, file$6, 25, 4, 449);
    			attr_dev(div1, "class", "bg--eb padding-m float-right");
    			add_location(div1, file$6, 26, 4, 511);
    			add_location(div2, file$6, 24, 2, 439);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div2, anchor);
    			append_dev(div2, div0);
    			append_dev(div2, t1);
    			append_dev(div2, div1);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div2);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_8.name,
    		type: "slot",
    		source: "(24:0) <Card className=\\\"bg--graa7\\\">",
    		ctx
    	});

    	return block;
    }

    // (31:0) <Prism language="html">
    function create_default_slot_7(ctx) {
    	let t_value = `<div class="float-left"></div>
<div class="float-right"></div>` + "";

    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_7.name,
    		type: "slot",
    		source: "(31:0) <Prism language=\\\"html\\\">",
    		ctx
    	});

    	return block;
    }

    // (38:0) <Prism language="html">
    function create_default_slot_6(ctx) {
    	let t_value = `<div class="clear"></div>` + "";
    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_6.name,
    		type: "slot",
    		source: "(38:0) <Prism language=\\\"html\\\">",
    		ctx
    	});

    	return block;
    }

    // (45:0) <Card className="bg--graa7">
    function create_default_slot_5(ctx) {
    	let div;

    	const block = {
    		c: function create() {
    			div = element("div");
    			div.textContent = "vertical-center";
    			attr_dev(div, "class", "vertical-center width-1of3 padding-l bg--eb");
    			add_location(div, file$6, 45, 2, 876);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_5.name,
    		type: "slot",
    		source: "(45:0) <Card className=\\\"bg--graa7\\\">",
    		ctx
    	});

    	return block;
    }

    // (49:0) <Prism language="html">
    function create_default_slot_4$1(ctx) {
    	let t_value = `<div class="vertical-center"></div>
<div class="vertical-auto"></div>` + "";

    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_4$1.name,
    		type: "slot",
    		source: "(49:0) <Prism language=\\\"html\\\">",
    		ctx
    	});

    	return block;
    }

    // (62:0) <Prism language="html">
    function create_default_slot_3$2(ctx) {
    	let t_value = `<div class="margin-none padding-none"></div>
<div class="margin-s padding-s"></div>
<div class="margin-m padding-m"></div>
<div class="margin-l padding-l"></div>
<div class="margin-xl padding-xl"></div>
<div class="margin-xxl padding-xxl"></div>` + "";

    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_3$2.name,
    		type: "slot",
    		source: "(62:0) <Prism language=\\\"html\\\">",
    		ctx
    	});

    	return block;
    }

    // (76:0) <Prism language="html">
    function create_default_slot_2$3(ctx) {
    	let t_value = `<div class="margin-l--t padding-l--t"></div>
<div class="margin-l--r padding-l--r"></div>
<div class="margin-l--b padding-l--b"></div>
<div class="margin-l--l padding-l--l"></div>` + "";

    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_2$3.name,
    		type: "slot",
    		source: "(76:0) <Prism language=\\\"html\\\">",
    		ctx
    	});

    	return block;
    }

    // (85:0) <Prism language="html">
    function create_default_slot_1$3(ctx) {
    	let t_value = `<div class="margin-l--tb padding-l--tb"></div>
<div class="margin-l--rl padding-l--rl"></div>` + "";

    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_1$3.name,
    		type: "slot",
    		source: "(85:0) <Prism language=\\\"html\\\">",
    		ctx
    	});

    	return block;
    }

    // (93:2) 
    function create_content_slot$1(ctx) {
    	let div3;
    	let div0;
    	let t1;
    	let div1;
    	let t3;
    	let div2;

    	const block = {
    		c: function create() {
    			div3 = element("div");
    			div0 = element("div");
    			div0.textContent = "box-shadow--small";
    			t1 = space();
    			div1 = element("div");
    			div1.textContent = "box-shadow";
    			t3 = space();
    			div2 = element("div");
    			div2.textContent = "box-shadow--large";
    			attr_dev(div0, "class", "border-radius box-shadow--small padding-xl margin-l bg--eb");
    			add_location(div0, file$6, 93, 4, 2238);
    			attr_dev(div1, "class", "border-radius box-shadow padding-xl margin-l bg--eb");
    			add_location(div1, file$6, 94, 4, 2338);
    			attr_dev(div2, "class", "border-radius box-shadow--large padding-xl margin-l bg--eb");
    			add_location(div2, file$6, 95, 4, 2424);
    			attr_dev(div3, "slot", "content");
    			add_location(div3, file$6, 92, 2, 2213);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div3, anchor);
    			append_dev(div3, div0);
    			append_dev(div3, t1);
    			append_dev(div3, div1);
    			append_dev(div3, t3);
    			append_dev(div3, div2);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div3);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_content_slot$1.name,
    		type: "slot",
    		source: "(93:2) ",
    		ctx
    	});

    	return block;
    }

    // (100:0) <Prism language="html">
    function create_default_slot$4(ctx) {
    	let t_value = `<div class="box-shadow--small"></div>
<div class="box-shadow"></div>
<div class="box-shadow--large"></div>` + "";

    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$4.name,
    		type: "slot",
    		source: "(100:0) <Prism language=\\\"html\\\">",
    		ctx
    	});

    	return block;
    }

    function create_fragment$6(ctx) {
    	let h1;
    	let t1;
    	let h30;
    	let t3;
    	let prism0;
    	let t4;
    	let h31;
    	let t6;
    	let prism1;
    	let t7;
    	let h32;
    	let t9;
    	let card0;
    	let t10;
    	let prism2;
    	let t11;
    	let h33;
    	let t13;
    	let prism3;
    	let t14;
    	let h34;
    	let t16;
    	let p0;
    	let t18;
    	let card1;
    	let t19;
    	let prism4;
    	let t20;
    	let h35;
    	let t22;
    	let p1;
    	let t23;
    	let strong0;
    	let t25;
    	let strong1;
    	let t27;
    	let em0;
    	let t29;
    	let em1;
    	let t31;
    	let t32;
    	let prism5;
    	let t33;
    	let p2;
    	let t34;
    	let strong2;
    	let t36;
    	let strong3;
    	let t38;
    	let t39;
    	let prism6;
    	let t40;
    	let p3;
    	let t41;
    	let em2;
    	let t43;
    	let em3;
    	let t45;
    	let t46;
    	let prism7;
    	let t47;
    	let h36;
    	let t49;
    	let card2;
    	let t50;
    	let prism8;
    	let current;

    	prism0 = new Prism$1({
    			props: {
    				language: "html",
    				$$slots: { default: [create_default_slot_10] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	prism1 = new Prism$1({
    			props: {
    				language: "html",
    				$$slots: { default: [create_default_slot_9] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	card0 = new dist$1.Card({
    			props: {
    				className: "bg--graa7",
    				$$slots: { default: [create_default_slot_8] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	prism2 = new Prism$1({
    			props: {
    				language: "html",
    				$$slots: { default: [create_default_slot_7] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	prism3 = new Prism$1({
    			props: {
    				language: "html",
    				$$slots: { default: [create_default_slot_6] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	card1 = new dist$1.Card({
    			props: {
    				className: "bg--graa7",
    				$$slots: { default: [create_default_slot_5] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	prism4 = new Prism$1({
    			props: {
    				language: "html",
    				$$slots: { default: [create_default_slot_4$1] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	prism5 = new Prism$1({
    			props: {
    				language: "html",
    				$$slots: { default: [create_default_slot_3$2] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	prism6 = new Prism$1({
    			props: {
    				language: "html",
    				$$slots: { default: [create_default_slot_2$3] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	prism7 = new Prism$1({
    			props: {
    				language: "html",
    				$$slots: { default: [create_default_slot_1$3] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	card2 = new dist$1.Card({
    			props: {
    				className: "bg--graa7",
    				$$slots: { content: [create_content_slot$1] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	prism8 = new Prism$1({
    			props: {
    				language: "html",
    				$$slots: { default: [create_default_slot$4] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			h1 = element("h1");
    			h1.textContent = "Helpers";
    			t1 = space();
    			h30 = element("h3");
    			h30.textContent = "Skjult element";
    			t3 = space();
    			create_component(prism0.$$.fragment);
    			t4 = space();
    			h31 = element("h3");
    			h31.textContent = "Position";
    			t6 = space();
    			create_component(prism1.$$.fragment);
    			t7 = space();
    			h32 = element("h3");
    			h32.textContent = "Floats";
    			t9 = space();
    			create_component(card0.$$.fragment);
    			t10 = space();
    			create_component(prism2.$$.fragment);
    			t11 = space();
    			h33 = element("h3");
    			h33.textContent = "Clear";
    			t13 = space();
    			create_component(prism3.$$.fragment);
    			t14 = space();
    			h34 = element("h3");
    			h34.textContent = "Centrér vertikalt";
    			t16 = space();
    			p0 = element("p");
    			p0.textContent = "Kræver en fast bredde på elementet.";
    			t18 = space();
    			create_component(card1.$$.fragment);
    			t19 = space();
    			create_component(prism4.$$.fragment);
    			t20 = space();
    			h35 = element("h3");
    			h35.textContent = "Margin & padding";
    			t22 = space();
    			p1 = element("p");
    			t23 = text("For både ");
    			strong0 = element("strong");
    			strong0.textContent = "margin";
    			t25 = text(" og ");
    			strong1 = element("strong");
    			strong1.textContent = "padding";
    			t27 = text(" klassen har vi fem størrelser\n  ");
    			em0 = element("em");
    			em0.textContent = "(s, m, l, xl og xxl)";
    			t29 = text("\n  og så\n  ");
    			em1 = element("em");
    			em1.textContent = "none";
    			t31 = text(" som sættes på med bindesteg.");
    			t32 = space();
    			create_component(prism5.$$.fragment);
    			t33 = space();
    			p2 = element("p");
    			t34 = text("Ønskes der derimod kun at have ");
    			strong2 = element("strong");
    			strong2.textContent = "margin";
    			t36 = text(" og ");
    			strong3 = element("strong");
    			strong3.textContent = "padding";
    			t38 = text(" i en retning tilføjes dette med double\n  bindestreg.");
    			t39 = space();
    			create_component(prism6.$$.fragment);
    			t40 = space();
    			p3 = element("p");
    			t41 = text("Vi har også to samle klasser for ");
    			em2 = element("em");
    			em2.textContent = "top-bottom";
    			t43 = text(" og ");
    			em3 = element("em");
    			em3.textContent = "right-left";
    			t45 = text(".");
    			t46 = space();
    			create_component(prism7.$$.fragment);
    			t47 = space();
    			h36 = element("h3");
    			h36.textContent = "Box-shadow";
    			t49 = space();
    			create_component(card2.$$.fragment);
    			t50 = space();
    			create_component(prism8.$$.fragment);
    			attr_dev(h1, "class", "color--eb");
    			add_location(h1, file$6, 5, 0, 93);
    			add_location(h30, file$6, 7, 0, 129);
    			add_location(h31, file$6, 13, 0, 221);
    			add_location(h32, file$6, 21, 0, 391);
    			add_location(h33, file$6, 35, 0, 692);
    			add_location(h34, file$6, 41, 0, 774);
    			add_location(p0, file$6, 42, 0, 801);
    			add_location(h35, file$6, 53, 0, 1074);
    			add_location(strong0, file$6, 55, 11, 1115);
    			add_location(strong1, file$6, 55, 38, 1142);
    			add_location(em0, file$6, 56, 2, 1199);
    			add_location(em1, file$6, 58, 2, 1239);
    			add_location(p1, file$6, 54, 0, 1100);
    			add_location(strong2, file$6, 71, 33, 1611);
    			add_location(strong3, file$6, 71, 60, 1638);
    			add_location(p2, file$6, 70, 0, 1574);
    			add_location(em2, file$6, 82, 36, 1978);
    			add_location(em3, file$6, 82, 59, 2001);
    			add_location(p3, file$6, 82, 0, 1942);
    			add_location(h36, file$6, 89, 0, 2161);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, h1, anchor);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, h30, anchor);
    			insert_dev(target, t3, anchor);
    			mount_component(prism0, target, anchor);
    			insert_dev(target, t4, anchor);
    			insert_dev(target, h31, anchor);
    			insert_dev(target, t6, anchor);
    			mount_component(prism1, target, anchor);
    			insert_dev(target, t7, anchor);
    			insert_dev(target, h32, anchor);
    			insert_dev(target, t9, anchor);
    			mount_component(card0, target, anchor);
    			insert_dev(target, t10, anchor);
    			mount_component(prism2, target, anchor);
    			insert_dev(target, t11, anchor);
    			insert_dev(target, h33, anchor);
    			insert_dev(target, t13, anchor);
    			mount_component(prism3, target, anchor);
    			insert_dev(target, t14, anchor);
    			insert_dev(target, h34, anchor);
    			insert_dev(target, t16, anchor);
    			insert_dev(target, p0, anchor);
    			insert_dev(target, t18, anchor);
    			mount_component(card1, target, anchor);
    			insert_dev(target, t19, anchor);
    			mount_component(prism4, target, anchor);
    			insert_dev(target, t20, anchor);
    			insert_dev(target, h35, anchor);
    			insert_dev(target, t22, anchor);
    			insert_dev(target, p1, anchor);
    			append_dev(p1, t23);
    			append_dev(p1, strong0);
    			append_dev(p1, t25);
    			append_dev(p1, strong1);
    			append_dev(p1, t27);
    			append_dev(p1, em0);
    			append_dev(p1, t29);
    			append_dev(p1, em1);
    			append_dev(p1, t31);
    			insert_dev(target, t32, anchor);
    			mount_component(prism5, target, anchor);
    			insert_dev(target, t33, anchor);
    			insert_dev(target, p2, anchor);
    			append_dev(p2, t34);
    			append_dev(p2, strong2);
    			append_dev(p2, t36);
    			append_dev(p2, strong3);
    			append_dev(p2, t38);
    			insert_dev(target, t39, anchor);
    			mount_component(prism6, target, anchor);
    			insert_dev(target, t40, anchor);
    			insert_dev(target, p3, anchor);
    			append_dev(p3, t41);
    			append_dev(p3, em2);
    			append_dev(p3, t43);
    			append_dev(p3, em3);
    			append_dev(p3, t45);
    			insert_dev(target, t46, anchor);
    			mount_component(prism7, target, anchor);
    			insert_dev(target, t47, anchor);
    			insert_dev(target, h36, anchor);
    			insert_dev(target, t49, anchor);
    			mount_component(card2, target, anchor);
    			insert_dev(target, t50, anchor);
    			mount_component(prism8, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const prism0_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				prism0_changes.$$scope = { dirty, ctx };
    			}

    			prism0.$set(prism0_changes);
    			const prism1_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				prism1_changes.$$scope = { dirty, ctx };
    			}

    			prism1.$set(prism1_changes);
    			const card0_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				card0_changes.$$scope = { dirty, ctx };
    			}

    			card0.$set(card0_changes);
    			const prism2_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				prism2_changes.$$scope = { dirty, ctx };
    			}

    			prism2.$set(prism2_changes);
    			const prism3_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				prism3_changes.$$scope = { dirty, ctx };
    			}

    			prism3.$set(prism3_changes);
    			const card1_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				card1_changes.$$scope = { dirty, ctx };
    			}

    			card1.$set(card1_changes);
    			const prism4_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				prism4_changes.$$scope = { dirty, ctx };
    			}

    			prism4.$set(prism4_changes);
    			const prism5_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				prism5_changes.$$scope = { dirty, ctx };
    			}

    			prism5.$set(prism5_changes);
    			const prism6_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				prism6_changes.$$scope = { dirty, ctx };
    			}

    			prism6.$set(prism6_changes);
    			const prism7_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				prism7_changes.$$scope = { dirty, ctx };
    			}

    			prism7.$set(prism7_changes);
    			const card2_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				card2_changes.$$scope = { dirty, ctx };
    			}

    			card2.$set(card2_changes);
    			const prism8_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				prism8_changes.$$scope = { dirty, ctx };
    			}

    			prism8.$set(prism8_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(prism0.$$.fragment, local);
    			transition_in(prism1.$$.fragment, local);
    			transition_in(card0.$$.fragment, local);
    			transition_in(prism2.$$.fragment, local);
    			transition_in(prism3.$$.fragment, local);
    			transition_in(card1.$$.fragment, local);
    			transition_in(prism4.$$.fragment, local);
    			transition_in(prism5.$$.fragment, local);
    			transition_in(prism6.$$.fragment, local);
    			transition_in(prism7.$$.fragment, local);
    			transition_in(card2.$$.fragment, local);
    			transition_in(prism8.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(prism0.$$.fragment, local);
    			transition_out(prism1.$$.fragment, local);
    			transition_out(card0.$$.fragment, local);
    			transition_out(prism2.$$.fragment, local);
    			transition_out(prism3.$$.fragment, local);
    			transition_out(card1.$$.fragment, local);
    			transition_out(prism4.$$.fragment, local);
    			transition_out(prism5.$$.fragment, local);
    			transition_out(prism6.$$.fragment, local);
    			transition_out(prism7.$$.fragment, local);
    			transition_out(card2.$$.fragment, local);
    			transition_out(prism8.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(h1);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(h30);
    			if (detaching) detach_dev(t3);
    			destroy_component(prism0, detaching);
    			if (detaching) detach_dev(t4);
    			if (detaching) detach_dev(h31);
    			if (detaching) detach_dev(t6);
    			destroy_component(prism1, detaching);
    			if (detaching) detach_dev(t7);
    			if (detaching) detach_dev(h32);
    			if (detaching) detach_dev(t9);
    			destroy_component(card0, detaching);
    			if (detaching) detach_dev(t10);
    			destroy_component(prism2, detaching);
    			if (detaching) detach_dev(t11);
    			if (detaching) detach_dev(h33);
    			if (detaching) detach_dev(t13);
    			destroy_component(prism3, detaching);
    			if (detaching) detach_dev(t14);
    			if (detaching) detach_dev(h34);
    			if (detaching) detach_dev(t16);
    			if (detaching) detach_dev(p0);
    			if (detaching) detach_dev(t18);
    			destroy_component(card1, detaching);
    			if (detaching) detach_dev(t19);
    			destroy_component(prism4, detaching);
    			if (detaching) detach_dev(t20);
    			if (detaching) detach_dev(h35);
    			if (detaching) detach_dev(t22);
    			if (detaching) detach_dev(p1);
    			if (detaching) detach_dev(t32);
    			destroy_component(prism5, detaching);
    			if (detaching) detach_dev(t33);
    			if (detaching) detach_dev(p2);
    			if (detaching) detach_dev(t39);
    			destroy_component(prism6, detaching);
    			if (detaching) detach_dev(t40);
    			if (detaching) detach_dev(p3);
    			if (detaching) detach_dev(t46);
    			destroy_component(prism7, detaching);
    			if (detaching) detach_dev(t47);
    			if (detaching) detach_dev(h36);
    			if (detaching) detach_dev(t49);
    			destroy_component(card2, detaching);
    			if (detaching) detach_dev(t50);
    			destroy_component(prism8, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$6.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$6($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Helpers', slots, []);
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Helpers> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({ Prism: Prism$1, Card: dist$1.Card });
    	return [];
    }

    class Helpers extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$6, create_fragment$6, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Helpers",
    			options,
    			id: create_fragment$6.name
    		});
    	}
    }

    /* docs_src/utilities/Sizing.svelte generated by Svelte v3.42.1 */
    const file$5 = "docs_src/utilities/Sizing.svelte";

    // (10:0) <Card className="bg--graa7">
    function create_default_slot_3$1(ctx) {
    	let div0;
    	let t1;
    	let div1;
    	let t3;
    	let div2;
    	let t5;
    	let div3;
    	let t7;
    	let div4;
    	let t9;
    	let div5;
    	let t11;
    	let div6;
    	let t13;
    	let div7;
    	let t15;
    	let div8;
    	let t17;
    	let div9;
    	let t19;
    	let div10;

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			div0.textContent = "width-100vw";
    			t1 = space();
    			div1 = element("div");
    			div1.textContent = "width-auto";
    			t3 = space();
    			div2 = element("div");
    			div2.textContent = "width-1of1";
    			t5 = space();
    			div3 = element("div");
    			div3.textContent = "width-5of6";
    			t7 = space();
    			div4 = element("div");
    			div4.textContent = "width-3of4";
    			t9 = space();
    			div5 = element("div");
    			div5.textContent = "width-2of3";
    			t11 = space();
    			div6 = element("div");
    			div6.textContent = "width-1of2";
    			t13 = space();
    			div7 = element("div");
    			div7.textContent = "width-1of3";
    			t15 = space();
    			div8 = element("div");
    			div8.textContent = "width-1of4";
    			t17 = space();
    			div9 = element("div");
    			div9.textContent = "width-1of5";
    			t19 = space();
    			div10 = element("div");
    			div10.textContent = "width-1of6";
    			attr_dev(div0, "class", "bg--eb padding-m width-100vw");
    			add_location(div0, file$5, 10, 2, 177);
    			attr_dev(div1, "class", "bg--eb padding-m width-auto");
    			add_location(div1, file$5, 11, 2, 239);
    			attr_dev(div2, "class", "bg--eb padding-m width-1of1");
    			add_location(div2, file$5, 12, 2, 299);
    			attr_dev(div3, "class", "bg--eb padding-m width-5of6");
    			add_location(div3, file$5, 13, 2, 359);
    			attr_dev(div4, "class", "bg--eb padding-m width-3of4");
    			add_location(div4, file$5, 14, 2, 419);
    			attr_dev(div5, "class", "bg--eb padding-m width-2of3");
    			add_location(div5, file$5, 15, 2, 479);
    			attr_dev(div6, "class", "bg--eb padding-m width-1of2");
    			add_location(div6, file$5, 16, 2, 539);
    			attr_dev(div7, "class", "bg--eb padding-m width-1of3");
    			add_location(div7, file$5, 17, 2, 599);
    			attr_dev(div8, "class", "bg--eb padding-m width-1of4");
    			add_location(div8, file$5, 18, 2, 659);
    			attr_dev(div9, "class", "bg--eb padding-m width-1of5");
    			add_location(div9, file$5, 19, 2, 719);
    			attr_dev(div10, "class", "bg--eb padding-m width-1of6");
    			add_location(div10, file$5, 20, 2, 779);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, div1, anchor);
    			insert_dev(target, t3, anchor);
    			insert_dev(target, div2, anchor);
    			insert_dev(target, t5, anchor);
    			insert_dev(target, div3, anchor);
    			insert_dev(target, t7, anchor);
    			insert_dev(target, div4, anchor);
    			insert_dev(target, t9, anchor);
    			insert_dev(target, div5, anchor);
    			insert_dev(target, t11, anchor);
    			insert_dev(target, div6, anchor);
    			insert_dev(target, t13, anchor);
    			insert_dev(target, div7, anchor);
    			insert_dev(target, t15, anchor);
    			insert_dev(target, div8, anchor);
    			insert_dev(target, t17, anchor);
    			insert_dev(target, div9, anchor);
    			insert_dev(target, t19, anchor);
    			insert_dev(target, div10, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(div1);
    			if (detaching) detach_dev(t3);
    			if (detaching) detach_dev(div2);
    			if (detaching) detach_dev(t5);
    			if (detaching) detach_dev(div3);
    			if (detaching) detach_dev(t7);
    			if (detaching) detach_dev(div4);
    			if (detaching) detach_dev(t9);
    			if (detaching) detach_dev(div5);
    			if (detaching) detach_dev(t11);
    			if (detaching) detach_dev(div6);
    			if (detaching) detach_dev(t13);
    			if (detaching) detach_dev(div7);
    			if (detaching) detach_dev(t15);
    			if (detaching) detach_dev(div8);
    			if (detaching) detach_dev(t17);
    			if (detaching) detach_dev(div9);
    			if (detaching) detach_dev(t19);
    			if (detaching) detach_dev(div10);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_3$1.name,
    		type: "slot",
    		source: "(10:0) <Card className=\\\"bg--graa7\\\">",
    		ctx
    	});

    	return block;
    }

    // (24:0) <Prism language="html">
    function create_default_slot_2$2(ctx) {
    	let t_value = `<div class="width-100vw"></div>
<div class="width-auto"></div>
<div class="width-1of1"></div>
<div class="width-5of6"></div>
<div class="width-3of4"></div>
<div class="width-2of3"></div>
<div class="width-1of2"></div>
<div class="width-1of3"></div>
<div class="width-1of4"></div>
<div class="width-1of5"></div>
<div class="width-1of6"></div>` + "";

    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_2$2.name,
    		type: "slot",
    		source: "(24:0) <Prism language=\\\"html\\\">",
    		ctx
    	});

    	return block;
    }

    // (40:0) <Card>
    function create_default_slot_1$2(ctx) {
    	let div3;
    	let div0;
    	let t1;
    	let div1;
    	let t3;
    	let div2;

    	const block = {
    		c: function create() {
    			div3 = element("div");
    			div0 = element("div");
    			div0.textContent = "height-100vh*";
    			t1 = space();
    			div1 = element("div");
    			div1.textContent = "height-auto";
    			t3 = space();
    			div2 = element("div");
    			div2.textContent = "height-1of1";
    			attr_dev(div0, "class", "bg--eb padding-m width-1of4 height-100vh");
    			set_style(div0, "display", "inline-block");
    			add_location(div0, file$5, 41, 4, 1341);
    			attr_dev(div1, "class", "bg--eb padding-m width-1of4 height-auto");
    			set_style(div1, "display", "inline-block");
    			add_location(div1, file$5, 42, 4, 1449);
    			attr_dev(div2, "class", "bg--eb padding-m width-1of4 height-1of1");
    			set_style(div2, "display", "inline-block");
    			add_location(div2, file$5, 43, 4, 1554);
    			attr_dev(div3, "class", "text-align--center bg--graa7");
    			set_style(div3, "height", "200px");
    			set_style(div3, "overflow", "hidden");
    			add_location(div3, file$5, 40, 2, 1254);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div3, anchor);
    			append_dev(div3, div0);
    			append_dev(div3, t1);
    			append_dev(div3, div1);
    			append_dev(div3, t3);
    			append_dev(div3, div2);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div3);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_1$2.name,
    		type: "slot",
    		source: "(40:0) <Card>",
    		ctx
    	});

    	return block;
    }

    // (46:2) 
    function create_footer_slot(ctx) {
    	let div;
    	let p;

    	const block = {
    		c: function create() {
    			div = element("div");
    			p = element("p");
    			p.textContent = "* Viewport height - Vær opmærksom på at disse opfører sig meget forskelligt på forskellige devices html";
    			attr_dev(p, "class", "fontsize-small");
    			add_location(p, file$5, 46, 4, 1690);
    			attr_dev(div, "slot", "footer");
    			add_location(div, file$5, 45, 2, 1666);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, p);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_footer_slot.name,
    		type: "slot",
    		source: "(46:2) ",
    		ctx
    	});

    	return block;
    }

    // (53:0) <Prism language="html">
    function create_default_slot$3(ctx) {
    	let t_value = `<div class="height-100vh"></div>
<div class="height-auto"></div>
<div class="height-1of1"></div>` + "";

    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$3.name,
    		type: "slot",
    		source: "(53:0) <Prism language=\\\"html\\\">",
    		ctx
    	});

    	return block;
    }

    function create_fragment$5(ctx) {
    	let h1;
    	let t1;
    	let h30;
    	let t3;
    	let card0;
    	let t4;
    	let prism0;
    	let t5;
    	let h31;
    	let t7;
    	let card1;
    	let t8;
    	let prism1;
    	let current;

    	card0 = new dist$1.Card({
    			props: {
    				className: "bg--graa7",
    				$$slots: { default: [create_default_slot_3$1] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	prism0 = new Prism$1({
    			props: {
    				language: "html",
    				$$slots: { default: [create_default_slot_2$2] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	card1 = new dist$1.Card({
    			props: {
    				$$slots: {
    					footer: [create_footer_slot],
    					default: [create_default_slot_1$2]
    				},
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	prism1 = new Prism$1({
    			props: {
    				language: "html",
    				$$slots: { default: [create_default_slot$3] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			h1 = element("h1");
    			h1.textContent = "Sizing";
    			t1 = space();
    			h30 = element("h3");
    			h30.textContent = "Bredder";
    			t3 = space();
    			create_component(card0.$$.fragment);
    			t4 = space();
    			create_component(prism0.$$.fragment);
    			t5 = space();
    			h31 = element("h3");
    			h31.textContent = "Højder";
    			t7 = space();
    			create_component(card1.$$.fragment);
    			t8 = space();
    			create_component(prism1.$$.fragment);
    			attr_dev(h1, "class", "color--eb");
    			add_location(h1, file$5, 5, 0, 93);
    			add_location(h30, file$5, 7, 0, 128);
    			add_location(h31, file$5, 37, 0, 1228);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, h1, anchor);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, h30, anchor);
    			insert_dev(target, t3, anchor);
    			mount_component(card0, target, anchor);
    			insert_dev(target, t4, anchor);
    			mount_component(prism0, target, anchor);
    			insert_dev(target, t5, anchor);
    			insert_dev(target, h31, anchor);
    			insert_dev(target, t7, anchor);
    			mount_component(card1, target, anchor);
    			insert_dev(target, t8, anchor);
    			mount_component(prism1, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const card0_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				card0_changes.$$scope = { dirty, ctx };
    			}

    			card0.$set(card0_changes);
    			const prism0_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				prism0_changes.$$scope = { dirty, ctx };
    			}

    			prism0.$set(prism0_changes);
    			const card1_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				card1_changes.$$scope = { dirty, ctx };
    			}

    			card1.$set(card1_changes);
    			const prism1_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				prism1_changes.$$scope = { dirty, ctx };
    			}

    			prism1.$set(prism1_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(card0.$$.fragment, local);
    			transition_in(prism0.$$.fragment, local);
    			transition_in(card1.$$.fragment, local);
    			transition_in(prism1.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(card0.$$.fragment, local);
    			transition_out(prism0.$$.fragment, local);
    			transition_out(card1.$$.fragment, local);
    			transition_out(prism1.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(h1);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(h30);
    			if (detaching) detach_dev(t3);
    			destroy_component(card0, detaching);
    			if (detaching) detach_dev(t4);
    			destroy_component(prism0, detaching);
    			if (detaching) detach_dev(t5);
    			if (detaching) detach_dev(h31);
    			if (detaching) detach_dev(t7);
    			destroy_component(card1, detaching);
    			if (detaching) detach_dev(t8);
    			destroy_component(prism1, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$5.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$5($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Sizing', slots, []);
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Sizing> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({ Prism: Prism$1, Card: dist$1.Card });
    	return [];
    }

    class Sizing extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$5, create_fragment$5, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Sizing",
    			options,
    			id: create_fragment$5.name
    		});
    	}
    }

    /* docs_src/utilities/Text.svelte generated by Svelte v3.42.1 */
    const file$4 = "docs_src/utilities/Text.svelte";

    // (10:0) <Card className="bg--graa7 padding-m">
    function create_default_slot_4(ctx) {
    	let p0;
    	let t1;
    	let p1;
    	let t3;
    	let p2;

    	const block = {
    		c: function create() {
    			p0 = element("p");
    			p0.textContent = "Centreret tekst";
    			t1 = space();
    			p1 = element("p");
    			p1.textContent = "Venstrestillet tekst";
    			t3 = space();
    			p2 = element("p");
    			p2.textContent = "Højrestillet tekst";
    			attr_dev(p0, "class", "text-align--center");
    			add_location(p0, file$4, 10, 2, 192);
    			attr_dev(p1, "class", "text-align--left");
    			add_location(p1, file$4, 11, 2, 244);
    			attr_dev(p2, "class", "text-align--right");
    			add_location(p2, file$4, 12, 2, 299);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, p0, anchor);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, p1, anchor);
    			insert_dev(target, t3, anchor);
    			insert_dev(target, p2, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(p0);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(p1);
    			if (detaching) detach_dev(t3);
    			if (detaching) detach_dev(p2);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_4.name,
    		type: "slot",
    		source: "(10:0) <Card className=\\\"bg--graa7 padding-m\\\">",
    		ctx
    	});

    	return block;
    }

    // (16:0) <Prism language="html">
    function create_default_slot_3(ctx) {
    	let t_value = `<p class="text-align--center"></p>
<p class="text-align--left"></p>
<p class="text-align--right"></p>` + "";

    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_3.name,
    		type: "slot",
    		source: "(16:0) <Prism language=\\\"html\\\">",
    		ctx
    	});

    	return block;
    }

    // (24:0) <Card className="bg--graa7 padding-m">
    function create_default_slot_2$1(ctx) {
    	let p0;
    	let t1;
    	let p1;

    	const block = {
    		c: function create() {
    			p0 = element("p");
    			p0.textContent = "SMÅ BOGSTAVER";
    			t1 = space();
    			p1 = element("p");
    			p1.textContent = "store bogstaver";
    			attr_dev(p0, "class", "text-transform--lowercase");
    			add_location(p0, file$4, 24, 2, 568);
    			attr_dev(p1, "class", "text-transform--uppercase");
    			add_location(p1, file$4, 25, 2, 625);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, p0, anchor);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, p1, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(p0);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(p1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_2$1.name,
    		type: "slot",
    		source: "(24:0) <Card className=\\\"bg--graa7 padding-m\\\">",
    		ctx
    	});

    	return block;
    }

    // (29:0) <Prism language="html">
    function create_default_slot_1$1(ctx) {
    	let t_value = `<p class="text-transform--lowercase"></p>
<p class="text-transform--uppercase"></p>` + "";

    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_1$1.name,
    		type: "slot",
    		source: "(29:0) <Prism language=\\\"html\\\">",
    		ctx
    	});

    	return block;
    }

    // (37:2) 
    function create_content_slot(ctx) {
    	let div2;
    	let div0;
    	let p0;
    	let t1;
    	let p1;
    	let t3;
    	let p2;
    	let t5;
    	let div1;
    	let p3;
    	let t7;
    	let p4;
    	let t9;
    	let p5;

    	const block = {
    		c: function create() {
    			div2 = element("div");
    			div0 = element("div");
    			p0 = element("p");
    			p0.textContent = "normal line-height";
    			t1 = space();
    			p1 = element("p");
    			p1.textContent = "normal line-height";
    			t3 = space();
    			p2 = element("p");
    			p2.textContent = "normal line-height";
    			t5 = space();
    			div1 = element("div");
    			p3 = element("p");
    			p3.textContent = "lineheight-m";
    			t7 = space();
    			p4 = element("p");
    			p4.textContent = "lineheight-m";
    			t9 = space();
    			p5 = element("p");
    			p5.textContent = "lineheight-m";
    			add_location(p0, file$4, 38, 6, 1042);
    			add_location(p1, file$4, 39, 6, 1074);
    			add_location(p2, file$4, 40, 6, 1106);
    			attr_dev(div0, "class", "width-1of3 margin-m");
    			add_location(div0, file$4, 37, 4, 1002);
    			add_location(p3, file$4, 43, 6, 1200);
    			add_location(p4, file$4, 44, 6, 1226);
    			add_location(p5, file$4, 45, 6, 1252);
    			attr_dev(div1, "class", "width-1of3 margin-m lineheight-m");
    			add_location(div1, file$4, 42, 4, 1147);
    			attr_dev(div2, "class", "flex flex-justify--between");
    			attr_dev(div2, "slot", "content");
    			add_location(div2, file$4, 36, 2, 942);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div2, anchor);
    			append_dev(div2, div0);
    			append_dev(div0, p0);
    			append_dev(div0, t1);
    			append_dev(div0, p1);
    			append_dev(div0, t3);
    			append_dev(div0, p2);
    			append_dev(div2, t5);
    			append_dev(div2, div1);
    			append_dev(div1, p3);
    			append_dev(div1, t7);
    			append_dev(div1, p4);
    			append_dev(div1, t9);
    			append_dev(div1, p5);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div2);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_content_slot.name,
    		type: "slot",
    		source: "(37:2) ",
    		ctx
    	});

    	return block;
    }

    // (51:0) <Prism language="html">
    function create_default_slot$2(ctx) {
    	let t_value = `<div class="lineheight-m">
  <p>line-height: 1.5em</p>
</div>` + "";

    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$2.name,
    		type: "slot",
    		source: "(51:0) <Prism language=\\\"html\\\">",
    		ctx
    	});

    	return block;
    }

    function create_fragment$4(ctx) {
    	let h1;
    	let t1;
    	let h30;
    	let t3;
    	let card0;
    	let t4;
    	let prism0;
    	let t5;
    	let h31;
    	let t7;
    	let card1;
    	let t8;
    	let prism1;
    	let t9;
    	let h32;
    	let t11;
    	let p;
    	let t13;
    	let card2;
    	let t14;
    	let prism2;
    	let current;

    	card0 = new dist$1.Card({
    			props: {
    				className: "bg--graa7 padding-m",
    				$$slots: { default: [create_default_slot_4] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	prism0 = new Prism$1({
    			props: {
    				language: "html",
    				$$slots: { default: [create_default_slot_3] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	card1 = new dist$1.Card({
    			props: {
    				className: "bg--graa7 padding-m",
    				$$slots: { default: [create_default_slot_2$1] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	prism1 = new Prism$1({
    			props: {
    				language: "html",
    				$$slots: { default: [create_default_slot_1$1] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	card2 = new dist$1.Card({
    			props: {
    				className: "bg--graa7",
    				$$slots: { content: [create_content_slot] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	prism2 = new Prism$1({
    			props: {
    				language: "html",
    				$$slots: { default: [create_default_slot$2] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			h1 = element("h1");
    			h1.textContent = "Text";
    			t1 = space();
    			h30 = element("h3");
    			h30.textContent = "Text alignment";
    			t3 = space();
    			create_component(card0.$$.fragment);
    			t4 = space();
    			create_component(prism0.$$.fragment);
    			t5 = space();
    			h31 = element("h3");
    			h31.textContent = "Text transform";
    			t7 = space();
    			create_component(card1.$$.fragment);
    			t8 = space();
    			create_component(prism1.$$.fragment);
    			t9 = space();
    			h32 = element("h3");
    			h32.textContent = "Line height";
    			t11 = space();
    			p = element("p");
    			p.textContent = "Default line-height will be based on the browser usually around 1.2";
    			t13 = space();
    			create_component(card2.$$.fragment);
    			t14 = space();
    			create_component(prism2.$$.fragment);
    			attr_dev(h1, "class", "color--eb");
    			add_location(h1, file$4, 5, 0, 93);
    			add_location(h30, file$4, 7, 0, 126);
    			add_location(h31, file$4, 21, 0, 502);
    			add_location(h32, file$4, 33, 0, 815);
    			add_location(p, file$4, 34, 0, 836);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, h1, anchor);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, h30, anchor);
    			insert_dev(target, t3, anchor);
    			mount_component(card0, target, anchor);
    			insert_dev(target, t4, anchor);
    			mount_component(prism0, target, anchor);
    			insert_dev(target, t5, anchor);
    			insert_dev(target, h31, anchor);
    			insert_dev(target, t7, anchor);
    			mount_component(card1, target, anchor);
    			insert_dev(target, t8, anchor);
    			mount_component(prism1, target, anchor);
    			insert_dev(target, t9, anchor);
    			insert_dev(target, h32, anchor);
    			insert_dev(target, t11, anchor);
    			insert_dev(target, p, anchor);
    			insert_dev(target, t13, anchor);
    			mount_component(card2, target, anchor);
    			insert_dev(target, t14, anchor);
    			mount_component(prism2, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const card0_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				card0_changes.$$scope = { dirty, ctx };
    			}

    			card0.$set(card0_changes);
    			const prism0_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				prism0_changes.$$scope = { dirty, ctx };
    			}

    			prism0.$set(prism0_changes);
    			const card1_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				card1_changes.$$scope = { dirty, ctx };
    			}

    			card1.$set(card1_changes);
    			const prism1_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				prism1_changes.$$scope = { dirty, ctx };
    			}

    			prism1.$set(prism1_changes);
    			const card2_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				card2_changes.$$scope = { dirty, ctx };
    			}

    			card2.$set(card2_changes);
    			const prism2_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				prism2_changes.$$scope = { dirty, ctx };
    			}

    			prism2.$set(prism2_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(card0.$$.fragment, local);
    			transition_in(prism0.$$.fragment, local);
    			transition_in(card1.$$.fragment, local);
    			transition_in(prism1.$$.fragment, local);
    			transition_in(card2.$$.fragment, local);
    			transition_in(prism2.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(card0.$$.fragment, local);
    			transition_out(prism0.$$.fragment, local);
    			transition_out(card1.$$.fragment, local);
    			transition_out(prism1.$$.fragment, local);
    			transition_out(card2.$$.fragment, local);
    			transition_out(prism2.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(h1);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(h30);
    			if (detaching) detach_dev(t3);
    			destroy_component(card0, detaching);
    			if (detaching) detach_dev(t4);
    			destroy_component(prism0, detaching);
    			if (detaching) detach_dev(t5);
    			if (detaching) detach_dev(h31);
    			if (detaching) detach_dev(t7);
    			destroy_component(card1, detaching);
    			if (detaching) detach_dev(t8);
    			destroy_component(prism1, detaching);
    			if (detaching) detach_dev(t9);
    			if (detaching) detach_dev(h32);
    			if (detaching) detach_dev(t11);
    			if (detaching) detach_dev(p);
    			if (detaching) detach_dev(t13);
    			destroy_component(card2, detaching);
    			if (detaching) detach_dev(t14);
    			destroy_component(prism2, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$4.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$4($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Text', slots, []);
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Text> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({ Prism: Prism$1, Card: dist$1.Card });
    	return [];
    }

    class Text extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$4, create_fragment$4, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Text",
    			options,
    			id: create_fragment$4.name
    		});
    	}
    }

    /* docs_src/guidelines/Svelte.svelte generated by Svelte v3.42.1 */
    const file$3 = "docs_src/guidelines/Svelte.svelte";

    // (28:0) <Prism language="js">
    function create_default_slot$1(ctx) {
    	let t_value = `npx degit EkstraBladetUdvikling/sveltetemplate my-svelte-project` + "";
    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$1.name,
    		type: "slot",
    		source: "(28:0) <Prism language=\\\"js\\\">",
    		ctx
    	});

    	return block;
    }

    function create_fragment$3(ctx) {
    	let h1;
    	let t1;
    	let h30;
    	let t3;
    	let ol;
    	let li0;
    	let t5;
    	let li1;
    	let t7;
    	let li2;
    	let t9;
    	let li3;
    	let t11;
    	let li4;
    	let t13;
    	let li5;
    	let t15;
    	let li6;
    	let t17;
    	let li7;
    	let t19;
    	let li8;
    	let t21;
    	let h31;
    	let t23;
    	let p;
    	let t25;
    	let prism;
    	let current;

    	prism = new Prism$1({
    			props: {
    				language: "js",
    				$$slots: { default: [create_default_slot$1] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			h1 = element("h1");
    			h1.textContent = "Svelte";
    			t1 = space();
    			h30 = element("h3");
    			h30.textContent = "Rules";
    			t3 = space();
    			ol = element("ol");
    			li0 = element("li");
    			li0.textContent = "There must be a rigorous division of logic (script-part) and views (template, class selection, etc.)";
    			t5 = space();
    			li1 = element("li");
    			li1.textContent = "Component-specific styling should preferably be solved using the designsystem instead of styling within the\n    Svelte-files.";
    			t7 = space();
    			li2 = element("li");
    			li2.textContent = "Svelte functions should (if possible) be used instead of native functions (eg createEventListener).";
    			t9 = space();
    			li3 = element("li");
    			li3.textContent = "Script tag content must be kept to an absolute minimum.";
    			t11 = space();
    			li4 = element("li");
    			li4.textContent = "As a rule, the state must provide all data in the format required by the components. Ie. Filtering takes place in\n    state management and not in the respective components.";
    			t13 = space();
    			li5 = element("li");
    			li5.textContent = "Design system: on:click should exist on all elements of the design system";
    			t15 = space();
    			li6 = element("li");
    			li6.textContent = "The use of Svelte is agreed in the front-end group, so that it is only used where it makes sense.";
    			t17 = space();
    			li7 = element("li");
    			li7.textContent = "Svelte-store is used and each part of the state is divided into several readable / writeable, instead of one object.";
    			t19 = space();
    			li8 = element("li");
    			li8.textContent = "Writables may only be updated using actions (functions) and may not be exported directly.";
    			t21 = space();
    			h31 = element("h3");
    			h31.textContent = "Create Svelte App";
    			t23 = space();
    			p = element("p");
    			p.textContent = "The recommended way to start new apps with Svelte is by using our Svelte Template:";
    			t25 = space();
    			create_component(prism.$$.fragment);
    			attr_dev(h1, "class", "color--eb");
    			add_location(h1, file$3, 3, 0, 63);
    			add_location(h30, file$3, 4, 0, 97);
    			attr_dev(li0, "class", "svelte-9h10az");
    			add_location(li0, file$3, 6, 2, 119);
    			attr_dev(li1, "class", "svelte-9h10az");
    			add_location(li1, file$3, 7, 2, 231);
    			attr_dev(li2, "class", "svelte-9h10az");
    			add_location(li2, file$3, 11, 2, 376);
    			attr_dev(li3, "class", "svelte-9h10az");
    			add_location(li3, file$3, 12, 2, 487);
    			attr_dev(li4, "class", "svelte-9h10az");
    			add_location(li4, file$3, 13, 2, 554);
    			attr_dev(li5, "class", "svelte-9h10az");
    			add_location(li5, file$3, 17, 2, 746);
    			attr_dev(li6, "class", "svelte-9h10az");
    			add_location(li6, file$3, 18, 2, 831);
    			attr_dev(li7, "class", "svelte-9h10az");
    			add_location(li7, file$3, 19, 2, 940);
    			attr_dev(li8, "class", "svelte-9h10az");
    			add_location(li8, file$3, 22, 2, 1076);
    			add_location(ol, file$3, 5, 0, 112);
    			add_location(h31, file$3, 25, 0, 1182);
    			add_location(p, file$3, 26, 0, 1209);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, h1, anchor);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, h30, anchor);
    			insert_dev(target, t3, anchor);
    			insert_dev(target, ol, anchor);
    			append_dev(ol, li0);
    			append_dev(ol, t5);
    			append_dev(ol, li1);
    			append_dev(ol, t7);
    			append_dev(ol, li2);
    			append_dev(ol, t9);
    			append_dev(ol, li3);
    			append_dev(ol, t11);
    			append_dev(ol, li4);
    			append_dev(ol, t13);
    			append_dev(ol, li5);
    			append_dev(ol, t15);
    			append_dev(ol, li6);
    			append_dev(ol, t17);
    			append_dev(ol, li7);
    			append_dev(ol, t19);
    			append_dev(ol, li8);
    			insert_dev(target, t21, anchor);
    			insert_dev(target, h31, anchor);
    			insert_dev(target, t23, anchor);
    			insert_dev(target, p, anchor);
    			insert_dev(target, t25, anchor);
    			mount_component(prism, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const prism_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				prism_changes.$$scope = { dirty, ctx };
    			}

    			prism.$set(prism_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(prism.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(prism.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(h1);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(h30);
    			if (detaching) detach_dev(t3);
    			if (detaching) detach_dev(ol);
    			if (detaching) detach_dev(t21);
    			if (detaching) detach_dev(h31);
    			if (detaching) detach_dev(t23);
    			if (detaching) detach_dev(p);
    			if (detaching) detach_dev(t25);
    			destroy_component(prism, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$3.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$3($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Svelte', slots, []);
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Svelte> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({ Prism: Prism$1 });
    	return [];
    }

    class Svelte extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$3, create_fragment$3, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Svelte",
    			options,
    			id: create_fragment$3.name
    		});
    	}
    }

    const routes = [
        { link: '/', title: 'Overblik', component: Home },
        { link: '/components/accordion', title: 'Accordion', group: 'components', component: Accordion_1 },
        { link: '/components/articlecard', title: 'Article card', group: 'components', component: ArticleCard_1 },
        { link: '/components/badge', title: 'Badge', group: 'components', component: Badge_1 },
        { link: '/components/button', title: 'Button', group: 'components', component: Button_1 },
        { link: '/components/buttongroup', title: 'Button group', group: 'components', component: ButtonGroup_1 },
        { link: '/components/card', title: 'Card', group: 'components', component: Card_1 },
        { link: '/components/form-elements', title: 'Form elements', group: 'components', component: FormElement_1 },
        { link: '/components/icon', title: 'Icon', group: 'components', component: Icon_1 },
        { link: '/components/horizontalscroll', title: 'Horizontal scroll', group: 'components', component: HorizontalScroll_1 },
        { link: '/components/tabs', title: 'Tabs', group: 'components', component: Tabs_1 },
        { link: '/components/spinner', title: 'Spinner', group: 'components', component: Spinner_1 },
        { link: '/components/toggler', title: 'Toggler', group: 'components', component: Toggler_1 },
        { link: '/components/tooltip', title: 'Tooltip', group: 'components', component: Tooltip_1 },
        { link: '/utilities/animation', title: 'Animation', group: 'utilities', component: Animation },
        { link: '/utilities/border', title: 'Border', group: 'utilities', component: Border },
        { link: '/utilities/color', title: 'Color', group: 'utilities', component: Color },
        { link: '/utilities/datatheme', title: 'Data theme', group: 'utilities', component: DataTheme },
        { link: '/utilities/flex', title: 'Flex', group: 'utilities', component: Flex },
        { link: '/utilities/fonts', title: 'Fonts', group: 'utilities', component: Fonts },
        { link: '/utilities/grid', title: 'Grid', group: 'utilities', component: Grid },
        { link: '/utilities/helpers', title: 'Helpers', group: 'utilities', component: Helpers },
        { link: '/utilities/sizing', title: 'Sizing', group: 'utilities', component: Sizing },
        { link: '/utilities/text', title: 'Text', group: 'utilities', component: Text },
        { link: '/guidelines/svelte', title: 'Svelte', group: 'guidelines', component: Svelte },
    ];

    /* docs_src/routes/Sidebar.svelte generated by Svelte v3.42.1 */

    const { Object: Object_1 } = globals;
    const file$2 = "docs_src/routes/Sidebar.svelte";

    function get_each_context(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[4] = list[i];
    	return child_ctx;
    }

    function get_each_context_1(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[7] = list[i];
    	return child_ctx;
    }

    // (39:6) {#if group.length && group[0].group}
    function create_if_block(ctx) {
    	let div;
    	let t_value = titleCase(/*group*/ ctx[4][0].group) + "";
    	let t;

    	const block = {
    		c: function create() {
    			div = element("div");
    			t = text(t_value);
    			attr_dev(div, "class", "sidebar-submenu-title fontsize-small svelte-av0po4");
    			add_location(div, file$2, 39, 8, 1484);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, t);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block.name,
    		type: "if",
    		source: "(39:6) {#if group.length && group[0].group}",
    		ctx
    	});

    	return block;
    }

    // (43:8) {#each group as menuItem}
    function create_each_block_1(ctx) {
    	let a;
    	let t0_value = /*menuItem*/ ctx[7].title + "";
    	let t0;
    	let t1;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			a = element("a");
    			t0 = text(t0_value);
    			t1 = space();
    			attr_dev(a, "class", "sidebar-item width-1of1 padding-m--t padding-m--rl svelte-av0po4");
    			attr_dev(a, "href", /*menuItem*/ ctx[7].link);
    			toggle_class(a, "active-item", /*menuItem*/ ctx[7].link === /*url*/ ctx[0]);
    			add_location(a, file$2, 43, 10, 1666);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, a, anchor);
    			append_dev(a, t0);
    			append_dev(a, t1);

    			if (!mounted) {
    				dispose = action_destroyer(link.call(null, a));
    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*groupedMenuItems, url*/ 3) {
    				toggle_class(a, "active-item", /*menuItem*/ ctx[7].link === /*url*/ ctx[0]);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(a);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_1.name,
    		type: "each",
    		source: "(43:8) {#each group as menuItem}",
    		ctx
    	});

    	return block;
    }

    // (37:2) {#each groupedMenuItems as group}
    function create_each_block(ctx) {
    	let div1;
    	let t0;
    	let div0;
    	let t1;
    	let if_block = /*group*/ ctx[4].length && /*group*/ ctx[4][0].group && create_if_block(ctx);
    	let each_value_1 = /*group*/ ctx[4];
    	validate_each_argument(each_value_1);
    	let each_blocks = [];

    	for (let i = 0; i < each_value_1.length; i += 1) {
    		each_blocks[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
    	}

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			if (if_block) if_block.c();
    			t0 = space();
    			div0 = element("div");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			t1 = space();
    			attr_dev(div0, "class", "sidebar-submenu-items");
    			add_location(div0, file$2, 41, 6, 1586);
    			attr_dev(div1, "class", "sidebar-menuitem-container padding-l svelte-av0po4");
    			add_location(div1, file$2, 37, 4, 1382);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			if (if_block) if_block.m(div1, null);
    			append_dev(div1, t0);
    			append_dev(div1, div0);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div0, null);
    			}

    			append_dev(div1, t1);
    		},
    		p: function update(ctx, dirty) {
    			if (/*group*/ ctx[4].length && /*group*/ ctx[4][0].group) if_block.p(ctx, dirty);

    			if (dirty & /*groupedMenuItems, url*/ 3) {
    				each_value_1 = /*group*/ ctx[4];
    				validate_each_argument(each_value_1);
    				let i;

    				for (i = 0; i < each_value_1.length; i += 1) {
    					const child_ctx = get_each_context_1(ctx, each_value_1, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block_1(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(div0, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value_1.length;
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    			if (if_block) if_block.d();
    			destroy_each(each_blocks, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block.name,
    		type: "each",
    		source: "(37:2) {#each groupedMenuItems as group}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$2(ctx) {
    	let div3;
    	let div2;
    	let div0;
    	let a;
    	let img;
    	let img_src_value;
    	let t0;
    	let div1;
    	let p;
    	let t2;
    	let each_value = /*groupedMenuItems*/ ctx[1];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
    	}

    	const block = {
    		c: function create() {
    			div3 = element("div");
    			div2 = element("div");
    			div0 = element("div");
    			a = element("a");
    			img = element("img");
    			t0 = space();
    			div1 = element("div");
    			p = element("p");
    			p.textContent = "Design system";
    			t2 = space();

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			attr_dev(img, "alt", "");
    			if (!src_url_equal(img.src, img_src_value = "ekstrabladet.svg")) attr_dev(img, "src", img_src_value);
    			set_style(img, "height", "70px");
    			add_location(img, file$2, 29, 8, 1109);
    			attr_dev(a, "href", "#/");
    			attr_dev(a, "class", "svelte-av0po4");
    			add_location(a, file$2, 28, 6, 1087);
    			add_location(div0, file$2, 27, 4, 1075);
    			attr_dev(p, "class", "flex--grow width-1of1 color--graa1 fontweight-bold");
    			add_location(p, file$2, 33, 6, 1242);
    			attr_dev(div1, "class", "flex-item flex-item--center");
    			add_location(div1, file$2, 32, 4, 1194);
    			attr_dev(div2, "class", "flex flex-justify--around sidebar-logo-container padding-m--rl svelte-av0po4");
    			add_location(div2, file$2, 26, 2, 994);
    			attr_dev(div3, "id", "sidebar-menu");
    			attr_dev(div3, "class", "sidebar-container height-100vh bg--white margin-l--r svelte-av0po4");
    			add_location(div3, file$2, 25, 0, 907);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div3, anchor);
    			append_dev(div3, div2);
    			append_dev(div2, div0);
    			append_dev(div0, a);
    			append_dev(a, img);
    			append_dev(div2, t0);
    			append_dev(div2, div1);
    			append_dev(div1, p);
    			append_dev(div3, t2);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div3, null);
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*groupedMenuItems, url, titleCase*/ 3) {
    				each_value = /*groupedMenuItems*/ ctx[1];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(div3, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div3);
    			destroy_each(each_blocks, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$2.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function titleCase(input) {
    	return input[0].toUpperCase() + input.substr(1).toLowerCase();
    }

    function instance$2($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Sidebar', slots, []);
    	let { menuItemList = [] } = $$props;
    	let url = window.location.hash.substr(1);
    	const tempObject = {};
    	menuItemList.forEach(v => (tempObject[v.group || 0] || (tempObject[v.group || 0] = [])).push(v));
    	const groupedMenuItems = Object.keys(tempObject).map(v => tempObject[v]);

    	// Chance URL on menu-click
    	onMount(() => {
    		const m = document.querySelectorAll('#sidebar-menu .sidebar-item');

    		m.forEach(item => {
    			item.addEventListener('click', () => {
    				$$invalidate(0, url = window.location.hash.substr(1));
    			});
    		});
    	});

    	// Listener to check whenever the hash URL changes make sure to match the menu
    	window.addEventListener('hashchange', () => {
    		$$invalidate(0, url = window.location.hash.substr(1));
    	});

    	const writable_props = ['menuItemList'];

    	Object_1.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Sidebar> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('menuItemList' in $$props) $$invalidate(2, menuItemList = $$props.menuItemList);
    	};

    	$$self.$capture_state = () => ({
    		link,
    		onMount,
    		menuItemList,
    		url,
    		tempObject,
    		groupedMenuItems,
    		titleCase
    	});

    	$$self.$inject_state = $$props => {
    		if ('menuItemList' in $$props) $$invalidate(2, menuItemList = $$props.menuItemList);
    		if ('url' in $$props) $$invalidate(0, url = $$props.url);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [url, groupedMenuItems, menuItemList];
    }

    class Sidebar extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$2, create_fragment$2, safe_not_equal, { menuItemList: 2 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Sidebar",
    			options,
    			id: create_fragment$2.name
    		});
    	}

    	get menuItemList() {
    		throw new Error("<Sidebar>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set menuItemList(value) {
    		throw new Error("<Sidebar>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* docs_src/routes/Navbar.svelte generated by Svelte v3.42.1 */
    const file$1 = "docs_src/routes/Navbar.svelte";

    // (14:6) <Button size="small" initial={$sourceType === 'svelte'} on:click={() => changeSourceType('svelte')}>
    function create_default_slot_2(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Svelte");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_2.name,
    		type: "slot",
    		source: "(14:6) <Button size=\\\"small\\\" initial={$sourceType === 'svelte'} on:click={() => changeSourceType('svelte')}>",
    		ctx
    	});

    	return block;
    }

    // (16:6) <Button size="small" initial={$sourceType === 'html'} on:click={() => changeSourceType('html')}>
    function create_default_slot_1(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("HTML");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_1.name,
    		type: "slot",
    		source: "(16:6) <Button size=\\\"small\\\" initial={$sourceType === 'html'} on:click={() => changeSourceType('html')}>",
    		ctx
    	});

    	return block;
    }

    // (13:4) <ButtonGroup type="secondary">
    function create_default_slot(ctx) {
    	let button0;
    	let t;
    	let button1;
    	let current;

    	button0 = new dist$1.Button({
    			props: {
    				size: "small",
    				initial: /*$sourceType*/ ctx[0] === 'svelte',
    				$$slots: { default: [create_default_slot_2] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	button0.$on("click", /*click_handler*/ ctx[2]);

    	button1 = new dist$1.Button({
    			props: {
    				size: "small",
    				initial: /*$sourceType*/ ctx[0] === 'html',
    				$$slots: { default: [create_default_slot_1] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	button1.$on("click", /*click_handler_1*/ ctx[3]);

    	const block = {
    		c: function create() {
    			create_component(button0.$$.fragment);
    			t = space();
    			create_component(button1.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(button0, target, anchor);
    			insert_dev(target, t, anchor);
    			mount_component(button1, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const button0_changes = {};
    			if (dirty & /*$sourceType*/ 1) button0_changes.initial = /*$sourceType*/ ctx[0] === 'svelte';

    			if (dirty & /*$$scope*/ 16) {
    				button0_changes.$$scope = { dirty, ctx };
    			}

    			button0.$set(button0_changes);
    			const button1_changes = {};
    			if (dirty & /*$sourceType*/ 1) button1_changes.initial = /*$sourceType*/ ctx[0] === 'html';

    			if (dirty & /*$$scope*/ 16) {
    				button1_changes.$$scope = { dirty, ctx };
    			}

    			button1.$set(button1_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(button0.$$.fragment, local);
    			transition_in(button1.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(button0.$$.fragment, local);
    			transition_out(button1.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(button0, detaching);
    			if (detaching) detach_dev(t);
    			destroy_component(button1, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot.name,
    		type: "slot",
    		source: "(13:4) <ButtonGroup type=\\\"secondary\\\">",
    		ctx
    	});

    	return block;
    }

    function create_fragment$1(ctx) {
    	let div;
    	let nav;
    	let a;
    	let i;
    	let t0;
    	let t1;
    	let buttongroup;
    	let current;

    	buttongroup = new dist$1.ButtonGroup({
    			props: {
    				type: "secondary",
    				$$slots: { default: [create_default_slot] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			div = element("div");
    			nav = element("nav");
    			a = element("a");
    			i = element("i");
    			t0 = text("Github");
    			t1 = space();
    			create_component(buttongroup.$$.fragment);
    			attr_dev(i, "class", "fab fa-github margin-s--r");
    			add_location(i, file$1, 10, 7, 444);
    			attr_dev(a, "href", "https://github.com/EkstraBladetUdvikling/eb-designsystem");
    			attr_dev(a, "target", "_blank");
    			attr_dev(a, "class", "flex svelte-1offyji");
    			add_location(a, file$1, 9, 4, 341);
    			attr_dev(nav, "class", "navmenu flex flex-justify--between flex-align--center padding-xl--rl svelte-1offyji");
    			add_location(nav, file$1, 8, 2, 254);
    			attr_dev(div, "class", "navmenu-container position-fixed margin-xl--b bg-red svelte-1offyji");
    			add_location(div, file$1, 7, 0, 185);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, nav);
    			append_dev(nav, a);
    			append_dev(a, i);
    			append_dev(a, t0);
    			append_dev(nav, t1);
    			mount_component(buttongroup, nav, null);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const buttongroup_changes = {};

    			if (dirty & /*$$scope, $sourceType*/ 17) {
    				buttongroup_changes.$$scope = { dirty, ctx };
    			}

    			buttongroup.$set(buttongroup_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(buttongroup.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(buttongroup.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_component(buttongroup);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$1.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$1($$self, $$props, $$invalidate) {
    	let $sourceType;
    	validate_store(sourceType, 'sourceType');
    	component_subscribe($$self, sourceType, $$value => $$invalidate(0, $sourceType = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Navbar', slots, []);

    	function changeSourceType(source) {
    		sourceType.set(source);
    	}

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Navbar> was created with unknown prop '${key}'`);
    	});

    	const click_handler = () => changeSourceType('svelte');
    	const click_handler_1 = () => changeSourceType('html');

    	$$self.$capture_state = () => ({
    		Button: dist$1.Button,
    		ButtonGroup: dist$1.ButtonGroup,
    		sourceType,
    		changeSourceType,
    		$sourceType
    	});

    	return [$sourceType, changeSourceType, click_handler, click_handler_1];
    }

    class Navbar extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$1, create_fragment$1, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Navbar",
    			options,
    			id: create_fragment$1.name
    		});
    	}
    }

    /* docs_src/App.svelte generated by Svelte v3.42.1 */
    const file = "docs_src/App.svelte";

    function create_fragment(ctx) {
    	let navbar;
    	let t0;
    	let sidebar;
    	let t1;
    	let div;
    	let router;
    	let current;
    	navbar = new Navbar({ $$inline: true });

    	sidebar = new Sidebar({
    			props: { menuItemList: /*menuItemList*/ ctx[1] },
    			$$inline: true
    		});

    	router = new Router({
    			props: { routes: /*routes*/ ctx[0] },
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(navbar.$$.fragment);
    			t0 = space();
    			create_component(sidebar.$$.fragment);
    			t1 = space();
    			div = element("div");
    			create_component(router.$$.fragment);
    			attr_dev(div, "class", "content-container padding-xl svelte-ftylog");
    			add_location(div, file, 17, 0, 490);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			mount_component(navbar, target, anchor);
    			insert_dev(target, t0, anchor);
    			mount_component(sidebar, target, anchor);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, div, anchor);
    			mount_component(router, div, null);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const router_changes = {};
    			if (dirty & /*routes*/ 1) router_changes.routes = /*routes*/ ctx[0];
    			router.$set(router_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(navbar.$$.fragment, local);
    			transition_in(sidebar.$$.fragment, local);
    			transition_in(router.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(navbar.$$.fragment, local);
    			transition_out(sidebar.$$.fragment, local);
    			transition_out(router.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(navbar, detaching);
    			if (detaching) detach_dev(t0);
    			destroy_component(sidebar, detaching);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(div);
    			destroy_component(router);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('App', slots, []);
    	const routeList = routes;

    	// Fills the object to create a SPA routing
    	let routes$1 = {};

    	let menuItemList = [];

    	routeList.forEach(route => {
    		$$invalidate(0, routes$1[route.link] = route.component, routes$1);
    		menuItemList.push(route);
    	});

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<App> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({
    		Router,
    		Routes: routes,
    		Sidebar,
    		Navbar,
    		routeList,
    		routes: routes$1,
    		menuItemList
    	});

    	$$self.$inject_state = $$props => {
    		if ('routes' in $$props) $$invalidate(0, routes$1 = $$props.routes);
    		if ('menuItemList' in $$props) $$invalidate(1, menuItemList = $$props.menuItemList);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [routes$1, menuItemList];
    }

    class App extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance, create_fragment, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "App",
    			options,
    			id: create_fragment.name
    		});
    	}
    }

    const app = new App({
        target: document.body,
        props: {
            name: 'world',
        },
    });

    return app;

}());
